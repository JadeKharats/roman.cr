var data = {lines:[
{"lineNum":"    1","line":"require \"c/pthread\""},
{"lineNum":"    2","line":"require \"./thread/*\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"# :nodoc:"},
{"lineNum":"    5","line":"class Thread"},
{"lineNum":"    6","line":"  # Don\'t use this class, it is used internally by the event scheduler."},
{"lineNum":"    7","line":"  # Use spawn and channels instead."},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"  @th : LibC::PthreadT?"},
{"lineNum":"   10","line":"  @exception : Exception?"},
{"lineNum":"   11","line":"  @detached = false"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"  property current_fiber","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"  def initialize(&@func : ->)"},
{"lineNum":"   16","line":"    @current_fiber = uninitialized Fiber"},
{"lineNum":"   17","line":"    @@threads << self"},
{"lineNum":"   18","line":"    @th = th = uninitialized LibC::PthreadT"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    ret = GC.pthread_create(pointerof(th), Pointer(LibC::PthreadAttrT).null, ->(data : Void*) {"},
{"lineNum":"   21","line":"      (data.as(Thread)).start"},
{"lineNum":"   22","line":"      Pointer(Void).null"},
{"lineNum":"   23","line":"    }, self.as(Void*))"},
{"lineNum":"   24","line":"    @th = th"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"    if ret != 0"},
{"lineNum":"   27","line":"      raise Errno.new(\"pthread_create\")"},
{"lineNum":"   28","line":"    end"},
{"lineNum":"   29","line":"  end"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"  def initialize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"    @current_fiber = uninitialized Fiber"},
{"lineNum":"   33","line":"    @func = ->{}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"    @@threads << self"},
{"lineNum":"   35","line":"    @th = LibC.pthread_self","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":"  end"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"  def finalize"},
{"lineNum":"   39","line":"    GC.pthread_detach(@th.not_nil!) unless @detached","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   40","line":"  end"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"  def join"},
{"lineNum":"   43","line":"    GC.pthread_join(@th.not_nil!)"},
{"lineNum":"   44","line":"    @detached = true"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    if exception = @exception"},
{"lineNum":"   47","line":"      raise exception"},
{"lineNum":"   48","line":"    end"},
{"lineNum":"   49","line":"  end"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"  # All threads, so the GC can see them (GC doesn\'t scan thread locals)"},
{"lineNum":"   52","line":"  # and we can find the current thread on platforms that don\'t support"},
{"lineNum":"   53","line":"  # thread local storage (eg: OpenBSD)"},
{"lineNum":"   54","line":"  @@threads = Set(Thread).new"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"  {% if flag?(:openbsd) %}","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"   57","line":"    @@main = new"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    def self.current : Thread"},
{"lineNum":"   60","line":"      if LibC.pthread_main_np == 1"},
{"lineNum":"   61","line":"        return @@main"},
{"lineNum":"   62","line":"      end"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"      current_thread_id = LibC.pthread_self"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"      current_thread = @@threads.find do |thread|"},
{"lineNum":"   67","line":"        LibC.pthread_equal(thread.id, current_thread_id) != 0"},
{"lineNum":"   68","line":"      end"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"      raise \"Error: failed to find current thread\" unless current_thread"},
{"lineNum":"   71","line":"      current_thread"},
{"lineNum":"   72","line":"    end"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    protected def id"},
{"lineNum":"   75","line":"      @th.not_nil!"},
{"lineNum":"   76","line":"    end"},
{"lineNum":"   77","line":"  {% else %}"},
{"lineNum":"   78","line":"    @[ThreadLocal]"},
{"lineNum":"   79","line":"    @@current = new"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    def self.current"},
{"lineNum":"   82","line":"      @@current"},
{"lineNum":"   83","line":"    end"},
{"lineNum":"   84","line":"  {% end %}"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"  protected def start"},
{"lineNum":"   87","line":"    {% unless flag?(:openbsd) %}"},
{"lineNum":"   88","line":"    @@current = self"},
{"lineNum":"   89","line":"    {% end %}"},
{"lineNum":"   90","line":"    begin"},
{"lineNum":"   91","line":"      @func.call"},
{"lineNum":"   92","line":"    rescue ex"},
{"lineNum":"   93","line":"      @exception = ex"},
{"lineNum":"   94","line":"    ensure"},
{"lineNum":"   95","line":"      @@threads.delete(self)"},
{"lineNum":"   96","line":"    end"},
{"lineNum":"   97","line":"  end"},
{"lineNum":"   98","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
