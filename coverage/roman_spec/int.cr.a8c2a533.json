var data = {lines:[
{"lineNum":"    1","line":"# Int is the base type of all integer types."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# There are four signed integer types: `Int8`, `Int16`, `Int32` and `Int64`,"},
{"lineNum":"    4","line":"# being able to represent numbers of 8, 16, 32 and 64 bits respectively."},
{"lineNum":"    5","line":"# There are four unsigned integer types: `UInt8`, `UInt16`, `UInt32` and `UInt64`."},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# An integer literal is an optional `+` or `-` sign, followed by"},
{"lineNum":"    8","line":"# a sequence of digits and underscores, optionally followed by a suffix."},
{"lineNum":"    9","line":"# If no suffix is present, the literal\'s type is the lowest between `Int32`, `Int64` and `UInt64`"},
{"lineNum":"   10","line":"# in which the number fits:"},
{"lineNum":"   11","line":"#"},
{"lineNum":"   12","line":"# ```"},
{"lineNum":"   13","line":"# 1 # Int32"},
{"lineNum":"   14","line":"#"},
{"lineNum":"   15","line":"# 1_i8  # Int8"},
{"lineNum":"   16","line":"# 1_i16 # Int16"},
{"lineNum":"   17","line":"# 1_i32 # Int32"},
{"lineNum":"   18","line":"# 1_i64 # Int64"},
{"lineNum":"   19","line":"#"},
{"lineNum":"   20","line":"# 1_u8  # UInt8"},
{"lineNum":"   21","line":"# 1_u16 # UInt16"},
{"lineNum":"   22","line":"# 1_u32 # UInt32"},
{"lineNum":"   23","line":"# 1_u64 # UInt64"},
{"lineNum":"   24","line":"#"},
{"lineNum":"   25","line":"# +10 # Int32"},
{"lineNum":"   26","line":"# -20 # Int32"},
{"lineNum":"   27","line":"#"},
{"lineNum":"   28","line":"# 2147483648          # Int64"},
{"lineNum":"   29","line":"# 9223372036854775808 # UInt64"},
{"lineNum":"   30","line":"# ```"},
{"lineNum":"   31","line":"#"},
{"lineNum":"   32","line":"# The underscore `_` before the suffix is optional."},
{"lineNum":"   33","line":"#"},
{"lineNum":"   34","line":"# Underscores can be used to make some numbers more readable:"},
{"lineNum":"   35","line":"#"},
{"lineNum":"   36","line":"# ```"},
{"lineNum":"   37","line":"# 1_000_000 # better than 1000000"},
{"lineNum":"   38","line":"# ```"},
{"lineNum":"   39","line":"#"},
{"lineNum":"   40","line":"# Binary numbers start with `0b`:"},
{"lineNum":"   41","line":"#"},
{"lineNum":"   42","line":"# ```"},
{"lineNum":"   43","line":"# 0b1101 # == 13"},
{"lineNum":"   44","line":"# ```"},
{"lineNum":"   45","line":"#"},
{"lineNum":"   46","line":"# Octal numbers start with `0o`:"},
{"lineNum":"   47","line":"#"},
{"lineNum":"   48","line":"# ```"},
{"lineNum":"   49","line":"# 0o123 # == 83"},
{"lineNum":"   50","line":"# ```"},
{"lineNum":"   51","line":"#"},
{"lineNum":"   52","line":"# Hexadecimal numbers start with `0x`:"},
{"lineNum":"   53","line":"#"},
{"lineNum":"   54","line":"# ```"},
{"lineNum":"   55","line":"# 0xFE012D # == 16646445"},
{"lineNum":"   56","line":"# 0xfe012d # == 16646445"},
{"lineNum":"   57","line":"# ```"},
{"lineNum":"   58","line":"struct Int"},
{"lineNum":"   59","line":"  alias Signed = Int8 | Int16 | Int32 | Int64 | Int128"},
{"lineNum":"   60","line":"  alias Unsigned = UInt8 | UInt16 | UInt32 | UInt64 | UInt128"},
{"lineNum":"   61","line":"  alias Primitive = Signed | Unsigned"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  # Returns a `Char` that has the unicode codepoint of `self`."},
{"lineNum":"   64","line":"  #"},
{"lineNum":"   65","line":"  # Raises `ArgumentError` if this integer\'s value doesn\'t fit a char\'s range (`0..0x10ffff`)."},
{"lineNum":"   66","line":"  #"},
{"lineNum":"   67","line":"  # ```"},
{"lineNum":"   68","line":"  # 97.chr # => \'a\'"},
{"lineNum":"   69","line":"  # ```"},
{"lineNum":"   70","line":"  def chr"},
{"lineNum":"   71","line":"    unless 0 <= self <= Char::MAX_CODEPOINT"},
{"lineNum":"   72","line":"      raise ArgumentError.new(\"#{self} out of char range\")"},
{"lineNum":"   73","line":"    end"},
{"lineNum":"   74","line":"    unsafe_chr"},
{"lineNum":"   75","line":"  end"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  def ~"},
{"lineNum":"   78","line":"    self ^ -1"},
{"lineNum":"   79","line":"  end"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"  # Divides `self` by *other* using floored division."},
{"lineNum":"   82","line":"  #"},
{"lineNum":"   83","line":"  # In floored division, given two integers x and y:"},
{"lineNum":"   84","line":"  # * q = x / y is rounded toward negative infinity"},
{"lineNum":"   85","line":"  # * r = x % y has the sign of the second argument"},
{"lineNum":"   86","line":"  # * x == q*y + r"},
{"lineNum":"   87","line":"  #"},
{"lineNum":"   88","line":"  # For example:"},
{"lineNum":"   89","line":"  #"},
{"lineNum":"   90","line":"  # ```text"},
{"lineNum":"   91","line":"  #  x     y     x / y     x % y"},
{"lineNum":"   92","line":"  #  5     3       1         2"},
{"lineNum":"   93","line":"  # -5     3      -2         1"},
{"lineNum":"   94","line":"  #  5    -3      -2        -1"},
{"lineNum":"   95","line":"  # -5    -3       1        -2"},
{"lineNum":"   96","line":"  # ```"},
{"lineNum":"   97","line":"  #"},
{"lineNum":"   98","line":"  # Raises if *other* is zero, or if *other* is -1 and"},
{"lineNum":"   99","line":"  # `self` is signed and is the minimum value for that"},
{"lineNum":"  100","line":"  # integer type."},
{"lineNum":"  101","line":"  def /(other : Int)"},
{"lineNum":"  102","line":"    check_div_argument other","class":"lineNoCov","hits":"0","possible_hits":"37",},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    div = unsafe_div other","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"  105","line":"    mod = unsafe_mod other"},
{"lineNum":"  106","line":"    div -= 1 if other > 0 ? mod < 0 : mod > 0","class":"lineNoCov","hits":"0","possible_hits":"42",},
{"lineNum":"  107","line":"    div"},
{"lineNum":"  108","line":"  end"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"  # Divides `self` by *other* using truncated division."},
{"lineNum":"  111","line":"  #"},
{"lineNum":"  112","line":"  # In truncated division, given two integers x and y:"},
{"lineNum":"  113","line":"  # * `q = x.tdiv(y)` is rounded toward zero"},
{"lineNum":"  114","line":"  # * `r = x.remainder(y)` has the sign of the first argument"},
{"lineNum":"  115","line":"  # * `x == q*y + r`"},
{"lineNum":"  116","line":"  #"},
{"lineNum":"  117","line":"  # For example:"},
{"lineNum":"  118","line":"  #"},
{"lineNum":"  119","line":"  # ```text"},
{"lineNum":"  120","line":"  #  x     y     x / y     x % y"},
{"lineNum":"  121","line":"  #  5     3       1         2"},
{"lineNum":"  122","line":"  # -5     3      -1        -2"},
{"lineNum":"  123","line":"  #  5    -3      -1         2"},
{"lineNum":"  124","line":"  # -5    -3       1        -2"},
{"lineNum":"  125","line":"  # ```"},
{"lineNum":"  126","line":"  #"},
{"lineNum":"  127","line":"  # Raises if *other* is `0`, or if *other* is `-1` and"},
{"lineNum":"  128","line":"  # `self` is signed and is the minimum value for that"},
{"lineNum":"  129","line":"  # integer type."},
{"lineNum":"  130","line":"  def tdiv(other : Int)"},
{"lineNum":"  131","line":"    check_div_argument other","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    unsafe_div other"},
{"lineNum":"  134","line":"  end"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"  private def check_div_argument(other)"},
{"lineNum":"  137","line":"    if other == 0","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  138","line":"      raise DivisionByZero.new","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  139","line":"    end"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    {% begin %}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  142","line":"      if self < 0 && self == {{@type}}::MIN && other == -1"},
{"lineNum":"  143","line":"        raise ArgumentError.new \"Overflow: {{@type}}::MIN / -1\""},
{"lineNum":"  144","line":"      end"},
{"lineNum":"  145","line":"    {% end %}"},
{"lineNum":"  146","line":"  end"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"  def fdiv(other)"},
{"lineNum":"  149","line":"    to_f / other"},
{"lineNum":"  150","line":"  end"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"  # Returns `self` modulo *other*."},
{"lineNum":"  153","line":"  #"},
{"lineNum":"  154","line":"  # This uses floored division."},
{"lineNum":"  155","line":"  #"},
{"lineNum":"  156","line":"  # See `Int#/` for more details."},
{"lineNum":"  157","line":"  def %(other : Int)"},
{"lineNum":"  158","line":"    if other == 0"},
{"lineNum":"  159","line":"      raise DivisionByZero.new"},
{"lineNum":"  160","line":"    elsif (self ^ other) >= 0"},
{"lineNum":"  161","line":"      self.unsafe_mod(other)"},
{"lineNum":"  162","line":"    else"},
{"lineNum":"  163","line":"      me = self.unsafe_mod(other)"},
{"lineNum":"  164","line":"      me == 0 ? me : me + other","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  165","line":"    end"},
{"lineNum":"  166","line":"  end"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"  # Returns `self` remainder *other*."},
{"lineNum":"  169","line":"  #"},
{"lineNum":"  170","line":"  # This uses truncated division."},
{"lineNum":"  171","line":"  #"},
{"lineNum":"  172","line":"  # See `Int#div` for more details."},
{"lineNum":"  173","line":"  def remainder(other : Int)"},
{"lineNum":"  174","line":"    if other == 0","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  175","line":"      raise DivisionByZero.new","class":"lineNoCov","hits":"0","possible_hits":"89",},
{"lineNum":"  176","line":"    else"},
{"lineNum":"  177","line":"      unsafe_mod other"},
{"lineNum":"  178","line":"    end"},
{"lineNum":"  179","line":"  end"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"  # Returns the result of shifting this number\'s bits *count* positions to the right."},
{"lineNum":"  182","line":"  # Also known as arithmetic right shift."},
{"lineNum":"  183","line":"  #"},
{"lineNum":"  184","line":"  # * If *count* is greater than the number of bits of this integer, returns 0"},
{"lineNum":"  185","line":"  # * If *count* is negative, a left shift is performed"},
{"lineNum":"  186","line":"  #"},
{"lineNum":"  187","line":"  # ```"},
{"lineNum":"  188","line":"  # 8000 >> 1  # => 4000"},
{"lineNum":"  189","line":"  # 8000 >> 2  # => 2000"},
{"lineNum":"  190","line":"  # 8000 >> 32 # => 0"},
{"lineNum":"  191","line":"  # 8000 >> -1 # => 16000"},
{"lineNum":"  192","line":"  #"},
{"lineNum":"  193","line":"  # -8000 >> 1 # => -4000"},
{"lineNum":"  194","line":"  # ```"},
{"lineNum":"  195","line":"  def >>(count : Int)"},
{"lineNum":"  196","line":"    if count < 0","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  197","line":"      self << count.abs"},
{"lineNum":"  198","line":"    elsif count < sizeof(self) * 8"},
{"lineNum":"  199","line":"      self.unsafe_shr(count)"},
{"lineNum":"  200","line":"    else"},
{"lineNum":"  201","line":"      self.class.zero"},
{"lineNum":"  202","line":"    end"},
{"lineNum":"  203","line":"  end"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"  # Returns the result of shifting this number\'s bits *count* positions to the left."},
{"lineNum":"  206","line":"  #"},
{"lineNum":"  207","line":"  # * If *count* is greater than the number of bits of this integer, returns 0"},
{"lineNum":"  208","line":"  # * If *count* is negative, a right shift is performed"},
{"lineNum":"  209","line":"  #"},
{"lineNum":"  210","line":"  # ```"},
{"lineNum":"  211","line":"  # 8000 << 1  # => 16000"},
{"lineNum":"  212","line":"  # 8000 << 2  # => 32000"},
{"lineNum":"  213","line":"  # 8000 << 32 # => 0"},
{"lineNum":"  214","line":"  # 8000 << -1 # => 4000"},
{"lineNum":"  215","line":"  # ```"},
{"lineNum":"  216","line":"  def <<(count : Int)"},
{"lineNum":"  217","line":"    if count < 0","class":"lineNoCov","hits":"0","possible_hits":"40",},
{"lineNum":"  218","line":"      self >> count.abs"},
{"lineNum":"  219","line":"    elsif count < sizeof(self) * 8"},
{"lineNum":"  220","line":"      self.unsafe_shl(count)"},
{"lineNum":"  221","line":"    else"},
{"lineNum":"  222","line":"      self.class.zero"},
{"lineNum":"  223","line":"    end"},
{"lineNum":"  224","line":"  end"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"  def abs"},
{"lineNum":"  227","line":"    self >= 0 ? self : -self"},
{"lineNum":"  228","line":"  end"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"  def ceil"},
{"lineNum":"  231","line":"    self"},
{"lineNum":"  232","line":"  end"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"  def floor"},
{"lineNum":"  235","line":"    self"},
{"lineNum":"  236","line":"  end"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"  def round"},
{"lineNum":"  239","line":"    self"},
{"lineNum":"  240","line":"  end"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"  def trunc"},
{"lineNum":"  243","line":"    self"},
{"lineNum":"  244","line":"  end"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"  # Returns the value of raising `self` to the power of *exponent*."},
{"lineNum":"  247","line":"  #"},
{"lineNum":"  248","line":"  # Raises `ArgumentError` if *exponent* is negative: if this is needed,"},
{"lineNum":"  249","line":"  # either use a float base or a float exponent."},
{"lineNum":"  250","line":"  #"},
{"lineNum":"  251","line":"  # ```"},
{"lineNum":"  252","line":"  # 2 ** 3  # => 8"},
{"lineNum":"  253","line":"  # 2 ** 0  # => 1"},
{"lineNum":"  254","line":"  # 2 ** -1 # ArgumentError"},
{"lineNum":"  255","line":"  # ```"},
{"lineNum":"  256","line":"  def **(exponent : Int) : self"},
{"lineNum":"  257","line":"    if exponent < 0"},
{"lineNum":"  258","line":"      raise ArgumentError.new \"Cannot raise an integer to a negative integer power, use floats for that\""},
{"lineNum":"  259","line":"    end"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    result = self.class.new(1)"},
{"lineNum":"  262","line":"    k = self"},
{"lineNum":"  263","line":"    while exponent > 0"},
{"lineNum":"  264","line":"      result *= k if exponent & 0b1 != 0"},
{"lineNum":"  265","line":"      k *= k"},
{"lineNum":"  266","line":"      exponent = exponent.unsafe_shr(1)"},
{"lineNum":"  267","line":"    end"},
{"lineNum":"  268","line":"    result"},
{"lineNum":"  269","line":"  end"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"  # Returns the value of raising `self` to the power of *exponent*."},
{"lineNum":"  272","line":"  #"},
{"lineNum":"  273","line":"  # ```"},
{"lineNum":"  274","line":"  # 2 ** 3.0  # => 8.0"},
{"lineNum":"  275","line":"  # 2 ** 0.0  # => 1.0"},
{"lineNum":"  276","line":"  # 2 ** -1.0 # => 0.5"},
{"lineNum":"  277","line":"  # ```"},
{"lineNum":"  278","line":"  def **(exponent : Float) : Float64"},
{"lineNum":"  279","line":"    to_f ** exponent"},
{"lineNum":"  280","line":"  end"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"  def ===(char : Char)"},
{"lineNum":"  283","line":"    self === char.ord"},
{"lineNum":"  284","line":"  end"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"  # Returns this number\'s *bit*th bit, starting with the least-significant."},
{"lineNum":"  287","line":"  #"},
{"lineNum":"  288","line":"  # ```"},
{"lineNum":"  289","line":"  # 11.bit(0) # => 1"},
{"lineNum":"  290","line":"  # 11.bit(1) # => 1"},
{"lineNum":"  291","line":"  # 11.bit(2) # => 0"},
{"lineNum":"  292","line":"  # 11.bit(3) # => 1"},
{"lineNum":"  293","line":"  # 11.bit(4) # => 0"},
{"lineNum":"  294","line":"  # ```"},
{"lineNum":"  295","line":"  def bit(bit)"},
{"lineNum":"  296","line":"    self >> bit & 1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  297","line":"  end"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"  def gcd(other : Int)"},
{"lineNum":"  300","line":"    self == 0 ? other.abs : (other % self).gcd(self)"},
{"lineNum":"  301","line":"  end"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"  def lcm(other : Int)"},
{"lineNum":"  304","line":"    (self * other).abs / gcd(other)"},
{"lineNum":"  305","line":"  end"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"  def divisible_by?(num)"},
{"lineNum":"  308","line":"    self % num == 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":"  end"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"  def even?"},
{"lineNum":"  312","line":"    divisible_by? 2"},
{"lineNum":"  313","line":"  end"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"  def odd?"},
{"lineNum":"  316","line":"    !even?"},
{"lineNum":"  317","line":"  end"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"  # See `Object#hash(hasher)`"},
{"lineNum":"  320","line":"  def hash(hasher)"},
{"lineNum":"  321","line":"    hasher.int(self)"},
{"lineNum":"  322","line":"  end"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"  def succ","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  325","line":"    self + 1"},
{"lineNum":"  326","line":"  end"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"  def pred"},
{"lineNum":"  329","line":"    self - 1"},
{"lineNum":"  330","line":"  end"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"  def times(&block : self ->) : Nil"},
{"lineNum":"  333","line":"    i = self ^ self"},
{"lineNum":"  334","line":"    while i < self"},
{"lineNum":"  335","line":"      yield i"},
{"lineNum":"  336","line":"      i += 1"},
{"lineNum":"  337","line":"    end"},
{"lineNum":"  338","line":"  end"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"  def times"},
{"lineNum":"  341","line":"    TimesIterator(typeof(self)).new(self)"},
{"lineNum":"  342","line":"  end"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"  def upto(to, &block : self ->) : Nil"},
{"lineNum":"  345","line":"    x = self"},
{"lineNum":"  346","line":"    while x <= to"},
{"lineNum":"  347","line":"      yield x"},
{"lineNum":"  348","line":"      x += 1"},
{"lineNum":"  349","line":"    end"},
{"lineNum":"  350","line":"  end"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"  def upto(to)"},
{"lineNum":"  353","line":"    UptoIterator(typeof(self), typeof(to)).new(self, to)"},
{"lineNum":"  354","line":"  end"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"  def downto(to, &block : self ->) : Nil"},
{"lineNum":"  357","line":"    x = self"},
{"lineNum":"  358","line":"    while x >= to"},
{"lineNum":"  359","line":"      yield x"},
{"lineNum":"  360","line":"      x -= 1"},
{"lineNum":"  361","line":"    end"},
{"lineNum":"  362","line":"  end"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"  def downto(to)"},
{"lineNum":"  365","line":"    DowntoIterator(typeof(self), typeof(to)).new(self, to)"},
{"lineNum":"  366","line":"  end"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"  def to(to, &block : self ->) : Nil"},
{"lineNum":"  369","line":"    if self < to"},
{"lineNum":"  370","line":"      upto(to) { |i| yield i }"},
{"lineNum":"  371","line":"    elsif self > to"},
{"lineNum":"  372","line":"      downto(to) { |i| yield i }"},
{"lineNum":"  373","line":"    else"},
{"lineNum":"  374","line":"      yield self"},
{"lineNum":"  375","line":"    end"},
{"lineNum":"  376","line":"  end"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"  def to(to)"},
{"lineNum":"  379","line":"    self <= to ? upto(to) : downto(to)"},
{"lineNum":"  380","line":"  end"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"  def modulo(other)"},
{"lineNum":"  383","line":"    self % other"},
{"lineNum":"  384","line":"  end"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"  private DIGITS_DOWNCASE = \"0123456789abcdefghijklmnopqrstuvwxyz\""},
{"lineNum":"  387","line":"  private DIGITS_UPCASE   = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\""},
{"lineNum":"  388","line":"  private DIGITS_BASE62   = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\""},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"  def to_s"},
{"lineNum":"  391","line":"    to_s(10)"},
{"lineNum":"  392","line":"  end"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"  def to_s(io : IO)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  395","line":"    to_s(10, io)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  396","line":"  end"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"  def to_s(base : Int, upcase : Bool = false)"},
{"lineNum":"  399","line":"    raise ArgumentError.new(\"Invalid base #{base}\") unless 2 <= base <= 36 || base == 62"},
{"lineNum":"  400","line":"    raise ArgumentError.new(\"upcase must be false for base 62\") if upcase && base == 62"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"    case self"},
{"lineNum":"  403","line":"    when 0","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  404","line":"      return \"0\""},
{"lineNum":"  405","line":"    when 1"},
{"lineNum":"  406","line":"      return \"1\""},
{"lineNum":"  407","line":"    end"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"    internal_to_s(base, upcase) do |ptr, count|"},
{"lineNum":"  410","line":"      String.new(ptr, count, count)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":"    end"},
{"lineNum":"  412","line":"  end"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"  def to_s(base : Int, io : IO, upcase : Bool = false)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  415","line":"    raise ArgumentError.new(\"Invalid base #{base}\") unless 2 <= base <= 36 || base == 62","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  416","line":"    raise ArgumentError.new(\"upcase must be false for base 62\") if upcase && base == 62"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    case self"},
{"lineNum":"  419","line":"    when 0","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  420","line":"      io << \'0\'"},
{"lineNum":"  421","line":"      return"},
{"lineNum":"  422","line":"    when 1"},
{"lineNum":"  423","line":"      io << \'1\'"},
{"lineNum":"  424","line":"      return"},
{"lineNum":"  425","line":"    end"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"    internal_to_s(base, upcase) do |ptr, count|"},
{"lineNum":"  428","line":"      io.write_utf8 Slice.new(ptr, count)","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  429","line":"    end"},
{"lineNum":"  430","line":"  end"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"  private def internal_to_s(base, upcase = false)"},
{"lineNum":"  433","line":"    # Given sizeof(self) <= 128 bits, we need at most 128 bytes for a base 2"},
{"lineNum":"  434","line":"    # representation, plus one byte for the trailing 0."},
{"lineNum":"  435","line":"    chars = uninitialized UInt8[129]"},
{"lineNum":"  436","line":"    ptr_end = chars.to_unsafe + 128"},
{"lineNum":"  437","line":"    ptr = ptr_end"},
{"lineNum":"  438","line":"    num = self"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"    neg = num < 0"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"    digits = (base == 62 ? DIGITS_BASE62 : (upcase ? DIGITS_UPCASE : DIGITS_DOWNCASE)).to_unsafe","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"    while num != 0","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":"  445","line":"      ptr -= 1"},
{"lineNum":"  446","line":"      ptr.value = digits[num.remainder(base).abs]","class":"lineNoCov","hits":"0","possible_hits":"29",},
{"lineNum":"  447","line":"      num = num.tdiv(base)"},
{"lineNum":"  448","line":"    end"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"    if neg","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"  451","line":"      ptr -= 1","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":"  452","line":"      ptr.value = \'-\'.ord.to_u8"},
{"lineNum":"  453","line":"    end"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    count = (ptr_end - ptr).to_i32"},
{"lineNum":"  456","line":"    yield ptr, count"},
{"lineNum":"  457","line":"  end"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"  def inspect(io)"},
{"lineNum":"  460","line":"    type = case self"},
{"lineNum":"  461","line":"           when Int8    then \"_i8\""},
{"lineNum":"  462","line":"           when Int16   then \"_i16\""},
{"lineNum":"  463","line":"           when Int32   then \"\""},
{"lineNum":"  464","line":"           when Int64   then \"_i64\""},
{"lineNum":"  465","line":"           when Int128  then \"_i128\""},
{"lineNum":"  466","line":"           when UInt8   then \"_u8\""},
{"lineNum":"  467","line":"           when UInt16  then \"_u16\""},
{"lineNum":"  468","line":"           when UInt32  then \"_u32\""},
{"lineNum":"  469","line":"           when UInt64  then \"_u64\""},
{"lineNum":"  470","line":"           when UInt128 then \"_u128\""},
{"lineNum":"  471","line":"           else              raise \"BUG: impossible\""},
{"lineNum":"  472","line":"           end"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"    to_s(io)"},
{"lineNum":"  475","line":"    io << type"},
{"lineNum":"  476","line":"  end"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"  # Writes this integer to the given *io* in the given *format*."},
{"lineNum":"  479","line":"  #"},
{"lineNum":"  480","line":"  # See also: `IO#write_bytes`."},
{"lineNum":"  481","line":"  def to_io(io : IO, format : IO::ByteFormat)"},
{"lineNum":"  482","line":"    format.encode(self, io)"},
{"lineNum":"  483","line":"  end"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"  # Reads an integer from the given *io* in the given *format*."},
{"lineNum":"  486","line":"  #"},
{"lineNum":"  487","line":"  # See also: `IO#read_bytes`."},
{"lineNum":"  488","line":"  def self.from_io(io : IO, format : IO::ByteFormat) : self","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  489","line":"    format.decode(self, io)"},
{"lineNum":"  490","line":"  end"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"  # Counts `1`-bits in the binary representation of this integer."},
{"lineNum":"  493","line":"  #"},
{"lineNum":"  494","line":"  # ```"},
{"lineNum":"  495","line":"  # 5.popcount   # => 2"},
{"lineNum":"  496","line":"  # -15.popcount # => 29"},
{"lineNum":"  497","line":"  # ```"},
{"lineNum":"  498","line":"  abstract def popcount"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"  private class TimesIterator(T)"},
{"lineNum":"  501","line":"    include Iterator(T)"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"    @n : T"},
{"lineNum":"  504","line":"    @index : T"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"    def initialize(@n : T, @index = T.zero)"},
{"lineNum":"  507","line":"    end"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    def next"},
{"lineNum":"  510","line":"      if @index < @n"},
{"lineNum":"  511","line":"        value = @index"},
{"lineNum":"  512","line":"        @index += 1"},
{"lineNum":"  513","line":"        value"},
{"lineNum":"  514","line":"      else"},
{"lineNum":"  515","line":"        stop"},
{"lineNum":"  516","line":"      end"},
{"lineNum":"  517","line":"    end"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"    def rewind"},
{"lineNum":"  520","line":"      @index = T.zero"},
{"lineNum":"  521","line":"      self"},
{"lineNum":"  522","line":"    end"},
{"lineNum":"  523","line":"  end"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"  private class UptoIterator(T, N)"},
{"lineNum":"  526","line":"    include Iterator(T)"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"    @from : T"},
{"lineNum":"  529","line":"    @to : N"},
{"lineNum":"  530","line":"    @current : T"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"    def initialize(@from : T, @to : N)"},
{"lineNum":"  533","line":"      @current = @from"},
{"lineNum":"  534","line":"    end"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"    def next"},
{"lineNum":"  537","line":"      if @current > @to"},
{"lineNum":"  538","line":"        stop"},
{"lineNum":"  539","line":"      else"},
{"lineNum":"  540","line":"        value = @current"},
{"lineNum":"  541","line":"        @current += 1"},
{"lineNum":"  542","line":"        value"},
{"lineNum":"  543","line":"      end"},
{"lineNum":"  544","line":"    end"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"    def rewind"},
{"lineNum":"  547","line":"      @current = @from"},
{"lineNum":"  548","line":"      self"},
{"lineNum":"  549","line":"    end"},
{"lineNum":"  550","line":"  end"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"  private class DowntoIterator(T, N)"},
{"lineNum":"  553","line":"    include Iterator(T)"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"    @from : T"},
{"lineNum":"  556","line":"    @to : N"},
{"lineNum":"  557","line":"    @current : T"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"    def initialize(@from : T, @to : N)"},
{"lineNum":"  560","line":"      @current = @from"},
{"lineNum":"  561","line":"    end"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"    def next"},
{"lineNum":"  564","line":"      if @current < @to"},
{"lineNum":"  565","line":"        stop"},
{"lineNum":"  566","line":"      else"},
{"lineNum":"  567","line":"        value = @current"},
{"lineNum":"  568","line":"        @current -= 1"},
{"lineNum":"  569","line":"        value"},
{"lineNum":"  570","line":"      end"},
{"lineNum":"  571","line":"    end"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"    def rewind"},
{"lineNum":"  574","line":"      @current = @from"},
{"lineNum":"  575","line":"      self"},
{"lineNum":"  576","line":"    end"},
{"lineNum":"  577","line":"  end"},
{"lineNum":"  578","line":"end"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"struct Int8"},
{"lineNum":"  581","line":"  MIN = -128_i8"},
{"lineNum":"  582","line":"  MAX =  127_i8"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"  # Returns an `Int8` by invoking `to_i8` on *value*."},
{"lineNum":"  585","line":"  def self.new(value)"},
{"lineNum":"  586","line":"    value.to_i8"},
{"lineNum":"  587","line":"  end"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"  def -"},
{"lineNum":"  590","line":"    0_i8 - self"},
{"lineNum":"  591","line":"  end"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"  def popcount"},
{"lineNum":"  594","line":"    Intrinsics.popcount8(self)"},
{"lineNum":"  595","line":"  end"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"  def clone"},
{"lineNum":"  598","line":"    self"},
{"lineNum":"  599","line":"  end"},
{"lineNum":"  600","line":"end"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"struct Int16"},
{"lineNum":"  603","line":"  MIN = -32768_i16"},
{"lineNum":"  604","line":"  MAX =  32767_i16"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"  # Returns an `Int16` by invoking `to_i16` on *value*."},
{"lineNum":"  607","line":"  def self.new(value)"},
{"lineNum":"  608","line":"    value.to_i16"},
{"lineNum":"  609","line":"  end"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"  def -"},
{"lineNum":"  612","line":"    0_i16 - self"},
{"lineNum":"  613","line":"  end"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"  def popcount"},
{"lineNum":"  616","line":"    Intrinsics.popcount16(self)"},
{"lineNum":"  617","line":"  end"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"  def clone"},
{"lineNum":"  620","line":"    self"},
{"lineNum":"  621","line":"  end"},
{"lineNum":"  622","line":"end"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"struct Int32"},
{"lineNum":"  625","line":"  MIN = -2147483648_i32"},
{"lineNum":"  626","line":"  MAX =  2147483647_i32"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"  # Returns an `Int32` by invoking `to_i32` on *value*."},
{"lineNum":"  629","line":"  def self.new(value)"},
{"lineNum":"  630","line":"    value.to_i32"},
{"lineNum":"  631","line":"  end"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"  def -","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  634","line":"    0 - self"},
{"lineNum":"  635","line":"  end"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"  def popcount"},
{"lineNum":"  638","line":"    Intrinsics.popcount32(self)"},
{"lineNum":"  639","line":"  end"},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"  def clone"},
{"lineNum":"  642","line":"    self"},
{"lineNum":"  643","line":"  end"},
{"lineNum":"  644","line":"end"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"struct Int64"},
{"lineNum":"  647","line":"  MIN = -9223372036854775808_i64"},
{"lineNum":"  648","line":"  MAX =  9223372036854775807_i64"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"  # Returns an `Int64` by invoking `to_i64` on *value*."},
{"lineNum":"  651","line":"  def self.new(value)"},
{"lineNum":"  652","line":"    value.to_i64"},
{"lineNum":"  653","line":"  end"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"  def -"},
{"lineNum":"  656","line":"    0_i64 - self"},
{"lineNum":"  657","line":"  end"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"  def popcount"},
{"lineNum":"  660","line":"    Intrinsics.popcount64(self)"},
{"lineNum":"  661","line":"  end"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"  def clone"},
{"lineNum":"  664","line":"    self"},
{"lineNum":"  665","line":"  end"},
{"lineNum":"  666","line":"end"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"struct Int128"},
{"lineNum":"  669","line":"  # TODO: eventually update to literals once UInt128 bit support is finished"},
{"lineNum":"  670","line":"  MIN = new(1) << 127"},
{"lineNum":"  671","line":"  MAX = ~MIN"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"  # Returns an `Int128` by invoking `to_i128` on *value*."},
{"lineNum":"  674","line":"  def self.new(value)"},
{"lineNum":"  675","line":"    value.to_i128"},
{"lineNum":"  676","line":"  end"},
{"lineNum":"  677","line":""},
{"lineNum":"  678","line":"  def -"},
{"lineNum":"  679","line":"    # TODO: use 0_i128 - self"},
{"lineNum":"  680","line":"    Int128.new(0) - self"},
{"lineNum":"  681","line":"  end"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"  def popcount"},
{"lineNum":"  684","line":"    # TODO: use after Crystal 0.23.1"},
{"lineNum":"  685","line":"    # Intrinsics.popcount128(self)"},
{"lineNum":"  686","line":"    v1, v2 = self.unsafe_as({Int64, Int64})"},
{"lineNum":"  687","line":"    Int128.new(v1.popcount + v2.popcount)"},
{"lineNum":"  688","line":"  end"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"  def clone"},
{"lineNum":"  691","line":"    self"},
{"lineNum":"  692","line":"  end"},
{"lineNum":"  693","line":"end"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"struct UInt8"},
{"lineNum":"  696","line":"  MIN =   0_u8"},
{"lineNum":"  697","line":"  MAX = 255_u8"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"  # Returns an `UInt8` by invoking `to_u8` on *value*."},
{"lineNum":"  700","line":"  def self.new(value)"},
{"lineNum":"  701","line":"    value.to_u8"},
{"lineNum":"  702","line":"  end"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"  def abs"},
{"lineNum":"  705","line":"    self"},
{"lineNum":"  706","line":"  end"},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"  def popcount"},
{"lineNum":"  709","line":"    Intrinsics.popcount8(self)"},
{"lineNum":"  710","line":"  end"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"  def clone"},
{"lineNum":"  713","line":"    self"},
{"lineNum":"  714","line":"  end"},
{"lineNum":"  715","line":"end"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"struct UInt16"},
{"lineNum":"  718","line":"  MIN =     0_u16"},
{"lineNum":"  719","line":"  MAX = 65535_u16"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"  # Returns an `UInt16` by invoking `to_u16` on *value*."},
{"lineNum":"  722","line":"  def self.new(value)"},
{"lineNum":"  723","line":"    value.to_u16"},
{"lineNum":"  724","line":"  end"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"  def abs"},
{"lineNum":"  727","line":"    self"},
{"lineNum":"  728","line":"  end"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"  def popcount"},
{"lineNum":"  731","line":"    Intrinsics.popcount16(self)"},
{"lineNum":"  732","line":"  end"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"  def clone"},
{"lineNum":"  735","line":"    self"},
{"lineNum":"  736","line":"  end"},
{"lineNum":"  737","line":"end"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"struct UInt32"},
{"lineNum":"  740","line":"  MIN =          0_u32"},
{"lineNum":"  741","line":"  MAX = 4294967295_u32"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"  # Returns an `UInt32` by invoking `to_u32` on *value*."},
{"lineNum":"  744","line":"  def self.new(value)"},
{"lineNum":"  745","line":"    value.to_u32"},
{"lineNum":"  746","line":"  end"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"  def abs"},
{"lineNum":"  749","line":"    self"},
{"lineNum":"  750","line":"  end"},
{"lineNum":"  751","line":""},
{"lineNum":"  752","line":"  def popcount"},
{"lineNum":"  753","line":"    Intrinsics.popcount32(self)"},
{"lineNum":"  754","line":"  end"},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"  def clone"},
{"lineNum":"  757","line":"    self"},
{"lineNum":"  758","line":"  end"},
{"lineNum":"  759","line":"end"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"struct UInt64"},
{"lineNum":"  762","line":"  MIN =                    0_u64"},
{"lineNum":"  763","line":"  MAX = 18446744073709551615_u64"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"  # Returns an `UInt64` by invoking `to_u64` on *value*."},
{"lineNum":"  766","line":"  def self.new(value)","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  767","line":"    value.to_u64"},
{"lineNum":"  768","line":"  end"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"  def abs"},
{"lineNum":"  771","line":"    self"},
{"lineNum":"  772","line":"  end"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"  def popcount"},
{"lineNum":"  775","line":"    Intrinsics.popcount64(self)"},
{"lineNum":"  776","line":"  end"},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":"  def clone"},
{"lineNum":"  779","line":"    self"},
{"lineNum":"  780","line":"  end"},
{"lineNum":"  781","line":"end"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"struct UInt128"},
{"lineNum":"  784","line":"  # TODO: eventually update to literals once UInt128 bit support is finished"},
{"lineNum":"  785","line":"  MIN = new 0"},
{"lineNum":"  786","line":"  MAX = ~MIN"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"  # Returns an `UInt128` by invoking `to_u128` on *value*."},
{"lineNum":"  789","line":"  def self.new(value)"},
{"lineNum":"  790","line":"    value.to_u128"},
{"lineNum":"  791","line":"  end"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"  def abs"},
{"lineNum":"  794","line":"    self"},
{"lineNum":"  795","line":"  end"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"  def popcount"},
{"lineNum":"  798","line":"    # TODO: use after Crystal 0.23.1"},
{"lineNum":"  799","line":"    # Intrinsics.popcount128(self)"},
{"lineNum":"  800","line":"    v1, v2 = self.unsafe_as({UInt64, UInt64})"},
{"lineNum":"  801","line":"    UInt128.new(v1.popcount + v2.popcount)"},
{"lineNum":"  802","line":"  end"},
{"lineNum":"  803","line":""},
{"lineNum":"  804","line":"  def clone"},
{"lineNum":"  805","line":"    self"},
{"lineNum":"  806","line":"  end"},
{"lineNum":"  807","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 31, "covered" : 0,};
var merged_data = [];
