var data = {lines:[
{"lineNum":"    1","line":"require \"io\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# Similar to `IO::Memory`, but optimized for building a single string."},
{"lineNum":"    4","line":"#"},
{"lineNum":"    5","line":"# You should never have to deal with this class. Instead, use `String.build`."},
{"lineNum":"    6","line":"class String::Builder < IO"},
{"lineNum":"    7","line":"  getter bytesize : Int32"},
{"lineNum":"    8","line":"  getter capacity : Int32"},
{"lineNum":"    9","line":"  getter buffer : Pointer(UInt8)"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  def initialize(capacity : Int = 64)","class":"lineNoCov","hits":"0","possible_hits":"31",},
{"lineNum":"   12","line":"    String.check_capacity_in_bounds(capacity)"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    # Make sure to also be able to hold"},
{"lineNum":"   15","line":"    # the header size plus the trailing zero byte"},
{"lineNum":"   16","line":"    capacity += String::HEADER_SIZE + 1"},
{"lineNum":"   17","line":"    String.check_capacity_in_bounds(capacity)"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    @buffer = GC.malloc_atomic(capacity.to_u32).as(UInt8*)","class":"lineNoCov","hits":"0","possible_hits":"89",},
{"lineNum":"   20","line":"    @bytesize = 0","class":"lineNoCov","hits":"0","possible_hits":"89",},
{"lineNum":"   21","line":"    @capacity = capacity.to_i","class":"lineNoCov","hits":"0","possible_hits":"89",},
{"lineNum":"   22","line":"    @finished = false","class":"lineNoCov","hits":"0","possible_hits":"89",},
{"lineNum":"   23","line":"  end"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"  def self.build(capacity : Int = 64) : String"},
{"lineNum":"   26","line":"    builder = new(capacity)"},
{"lineNum":"   27","line":"    yield builder"},
{"lineNum":"   28","line":"    builder.to_s"},
{"lineNum":"   29","line":"  end"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"  def self.new(string : String)"},
{"lineNum":"   32","line":"    io = new(string.bytesize)"},
{"lineNum":"   33","line":"    io << string"},
{"lineNum":"   34","line":"    io"},
{"lineNum":"   35","line":"  end"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"  def read(slice : Bytes)"},
{"lineNum":"   38","line":"    raise \"Not implemented\""},
{"lineNum":"   39","line":"  end"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"  def write(slice : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":"    count = slice.size"},
{"lineNum":"   43","line":"    new_bytesize = real_bytesize + count","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"    if new_bytesize > @capacity","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"      resize_to_capacity(Math.pw2ceil(new_bytesize))"},
{"lineNum":"   46","line":"    end"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    slice.copy_to(@buffer + real_bytesize, count)"},
{"lineNum":"   49","line":"    @bytesize += count","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    nil"},
{"lineNum":"   52","line":"  end"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"  def write_byte(byte : UInt8)"},
{"lineNum":"   55","line":"    new_bytesize = real_bytesize + 1","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   56","line":"    if new_bytesize > @capacity","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   57","line":"      resize_to_capacity(Math.pw2ceil(new_bytesize))"},
{"lineNum":"   58","line":"    end"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    @buffer[real_bytesize] = byte","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    @bytesize += 1","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    nil"},
{"lineNum":"   65","line":"  end"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"  def buffer"},
{"lineNum":"   68","line":"    @buffer + String::HEADER_SIZE"},
{"lineNum":"   69","line":"  end"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"  def empty?"},
{"lineNum":"   72","line":"    @bytesize == 0"},
{"lineNum":"   73","line":"  end"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"  # Chomps the last byte from the string buffer."},
{"lineNum":"   76","line":"  # If the byte is `\'\\n\'` and there\'s a `\'\\r\'` before it, it is also removed."},
{"lineNum":"   77","line":"  def chomp!(byte : UInt8)"},
{"lineNum":"   78","line":"    if bytesize > 0 && buffer[bytesize - 1] == byte","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   79","line":"      back(1)"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"      if byte === \'\\n\' && bytesize > 0 && buffer[bytesize - 1] === \'\\r\'","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":"        back(1)"},
{"lineNum":"   83","line":"      end"},
{"lineNum":"   84","line":"    end"},
{"lineNum":"   85","line":"  end"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"  # Moves the write pointer, and the resulting string bytesize,"},
{"lineNum":"   88","line":"  # by the given *amount*."},
{"lineNum":"   89","line":"  def back(amount : Int)"},
{"lineNum":"   90","line":"    unless 0 <= amount <= @bytesize"},
{"lineNum":"   91","line":"      raise ArgumentError.new \"Invalid back amount\""},
{"lineNum":"   92","line":"    end"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    @bytesize -= amount","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   95","line":"  end"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"  def to_s","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"    raise \"Can only invoke \'to_s\' once on String::Builder\" if @finished","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   99","line":"    @finished = true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    write_byte 0_u8"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    # Try to reclaim some memory if capacity is bigger than what we need"},
{"lineNum":"  104","line":"    real_bytesize = real_bytesize()"},
{"lineNum":"  105","line":"    if @capacity > real_bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"      resize_to_capacity(real_bytesize)"},
{"lineNum":"  107","line":"    end"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    header = @buffer.as({Int32, Int32, Int32}*)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"    header.value = {String::TYPE_ID, @bytesize - 1, 0}"},
{"lineNum":"  111","line":"    @buffer.as(String)"},
{"lineNum":"  112","line":"  end"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"  private def real_bytesize","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  115","line":"    @bytesize + String::HEADER_SIZE"},
{"lineNum":"  116","line":"  end"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"  private def check_needs_resize"},
{"lineNum":"  119","line":"    resize_to_capacity(@capacity * 2) if real_bytesize == @capacity"},
{"lineNum":"  120","line":"  end"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  private def resize_to_capacity(capacity)"},
{"lineNum":"  123","line":"    @capacity = capacity","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  124","line":"    @buffer = @buffer.realloc(@capacity)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  125","line":"  end"},
{"lineNum":"  126","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 24, "covered" : 0,};
var merged_data = [];
