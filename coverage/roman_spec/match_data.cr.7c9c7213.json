var data = {lines:[
{"lineNum":"    1","line":"class Regex"},
{"lineNum":"    2","line":"  # `Regex::MatchData` is the type of the special variable `$~`, and is the type"},
{"lineNum":"    3","line":"  # returned by `Regex#match` and `String#match`. It encapsulates all the"},
{"lineNum":"    4","line":"  # results of a regular expression match."},
{"lineNum":"    5","line":"  #"},
{"lineNum":"    6","line":"  # ```"},
{"lineNum":"    7","line":"  # if md = \"Crystal\".match(/[p-s]/)"},
{"lineNum":"    8","line":"  #   md.string # => \"Crystal\""},
{"lineNum":"    9","line":"  #   md[0]     # => \"r\""},
{"lineNum":"   10","line":"  #   md[1]?    # => nil"},
{"lineNum":"   11","line":"  # end"},
{"lineNum":"   12","line":"  # ```"},
{"lineNum":"   13","line":"  #"},
{"lineNum":"   14","line":"  # Many `Regex::MatchData` methods deal with capture groups, and accept an integer"},
{"lineNum":"   15","line":"  # argument to select the desired capture group. Capture groups are numbered"},
{"lineNum":"   16","line":"  # starting from `1`, so that `0` can be used to refer to the entire regular"},
{"lineNum":"   17","line":"  # expression without needing to capture it explicitly."},
{"lineNum":"   18","line":"  struct MatchData"},
{"lineNum":"   19","line":"    # Returns the original regular expression."},
{"lineNum":"   20","line":"    #"},
{"lineNum":"   21","line":"    # ```"},
{"lineNum":"   22","line":"    # \"Crystal\".match(/[p-s]/).not_nil!.regex # => /[p-s]/"},
{"lineNum":"   23","line":"    # ```"},
{"lineNum":"   24","line":"    getter regex : Regex"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"    # Returns the number of capture groups, including named capture groups."},
{"lineNum":"   27","line":"    #"},
{"lineNum":"   28","line":"    # ```"},
{"lineNum":"   29","line":"    # \"Crystal\".match(/[p-s]/).not_nil!.group_size          # => 0"},
{"lineNum":"   30","line":"    # \"Crystal\".match(/r(ys)/).not_nil!.group_size          # => 1"},
{"lineNum":"   31","line":"    # \"Crystal\".match(/r(ys)(?<ok>ta)/).not_nil!.group_size # => 2"},
{"lineNum":"   32","line":"    # ```"},
{"lineNum":"   33","line":"    getter group_size : Int32"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    # Returns the original string."},
{"lineNum":"   36","line":"    #"},
{"lineNum":"   37","line":"    # ```"},
{"lineNum":"   38","line":"    # \"Crystal\".match(/[p-s]/).not_nil!.string # => \"Crystal\""},
{"lineNum":"   39","line":"    # ```"},
{"lineNum":"   40","line":"    getter string : String"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    # :nodoc:"},
{"lineNum":"   43","line":"    def initialize(@regex : Regex, @code : LibPCRE::Pcre, @string : String, @pos : Int32, @ovector : Int32*, @group_size : Int32)"},
{"lineNum":"   44","line":"    end"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    # Returns the number of elements in this match object."},
{"lineNum":"   47","line":"    #"},
{"lineNum":"   48","line":"    # ```"},
{"lineNum":"   49","line":"    # \"Crystal\".match(/[p-s]/).not_nil!.size          # => 1"},
{"lineNum":"   50","line":"    # \"Crystal\".match(/r(ys)/).not_nil!.size          # => 2"},
{"lineNum":"   51","line":"    # \"Crystal\".match(/r(ys)(?<ok>ta)/).not_nil!.size # => 3"},
{"lineNum":"   52","line":"    # ```"},
{"lineNum":"   53","line":"    def size","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   54","line":"      group_size + 1"},
{"lineNum":"   55","line":"    end"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    # Return the position of the first character of the *n*th match."},
{"lineNum":"   58","line":"    #"},
{"lineNum":"   59","line":"    # When *n* is `0` or not given, uses the match of the entire `Regex`."},
{"lineNum":"   60","line":"    # Otherwise, uses the match of the *n*th capture group."},
{"lineNum":"   61","line":"    #"},
{"lineNum":"   62","line":"    # ```"},
{"lineNum":"   63","line":"    # \"Crystal\".match(/r/).not_nil!.begin(0)     # => 1"},
{"lineNum":"   64","line":"    # \"Crystal\".match(/r(ys)/).not_nil!.begin(1) # => 2"},
{"lineNum":"   65","line":"    # \"クリスタル\".match(/リ(ス)/).not_nil!.begin(0)    # => 1"},
{"lineNum":"   66","line":"    # ```"},
{"lineNum":"   67","line":"    def begin(n = 0)"},
{"lineNum":"   68","line":"      @string.byte_index_to_char_index byte_begin(n)"},
{"lineNum":"   69","line":"    end"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    # Return the position of the next character after the match."},
{"lineNum":"   72","line":"    #"},
{"lineNum":"   73","line":"    # When *n* is `0` or not given, uses the match of the entire `Regex`."},
{"lineNum":"   74","line":"    # Otherwise, uses the match of the *n*th capture group."},
{"lineNum":"   75","line":"    #"},
{"lineNum":"   76","line":"    # ```"},
{"lineNum":"   77","line":"    # \"Crystal\".match(/r/).not_nil!.end(0)     # => 2"},
{"lineNum":"   78","line":"    # \"Crystal\".match(/r(ys)/).not_nil!.end(1) # => 4"},
{"lineNum":"   79","line":"    # \"クリスタル\".match(/リ(ス)/).not_nil!.end(0)    # => 3"},
{"lineNum":"   80","line":"    # ```"},
{"lineNum":"   81","line":"    def end(n = 0)"},
{"lineNum":"   82","line":"      @string.byte_index_to_char_index byte_end(n)"},
{"lineNum":"   83","line":"    end"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    # Return the position of the first byte of the *n*th match."},
{"lineNum":"   86","line":"    #"},
{"lineNum":"   87","line":"    # When *n* is `0` or not given, uses the match of the entire `Regex`."},
{"lineNum":"   88","line":"    # Otherwise, uses the match of the *n*th capture group."},
{"lineNum":"   89","line":"    #"},
{"lineNum":"   90","line":"    # ```"},
{"lineNum":"   91","line":"    # \"Crystal\".match(/r/).not_nil!.byte_begin(0)     # => 1"},
{"lineNum":"   92","line":"    # \"Crystal\".match(/r(ys)/).not_nil!.byte_begin(1) # => 2"},
{"lineNum":"   93","line":"    # \"クリスタル\".match(/リ(ス)/).not_nil!.byte_begin(0)    # => 3"},
{"lineNum":"   94","line":"    # ```"},
{"lineNum":"   95","line":"    def byte_begin(n = 0)"},
{"lineNum":"   96","line":"      check_index_out_of_bounds n"},
{"lineNum":"   97","line":"      n += size if n < 0"},
{"lineNum":"   98","line":"      @ovector[n * 2]"},
{"lineNum":"   99","line":"    end"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    # Return the position of the next byte after the match."},
{"lineNum":"  102","line":"    #"},
{"lineNum":"  103","line":"    # When *n* is `0` or not given, uses the match of the entire `Regex`."},
{"lineNum":"  104","line":"    # Otherwise, uses the match of the *n*th capture group."},
{"lineNum":"  105","line":"    #"},
{"lineNum":"  106","line":"    # ```"},
{"lineNum":"  107","line":"    # \"Crystal\".match(/r/).not_nil!.byte_end(0)     # => 2"},
{"lineNum":"  108","line":"    # \"Crystal\".match(/r(ys)/).not_nil!.byte_end(1) # => 4"},
{"lineNum":"  109","line":"    # \"クリスタル\".match(/リ(ス)/).not_nil!.byte_end(0)    # => 9"},
{"lineNum":"  110","line":"    # ```"},
{"lineNum":"  111","line":"    def byte_end(n = 0)"},
{"lineNum":"  112","line":"      check_index_out_of_bounds n"},
{"lineNum":"  113","line":"      n += size if n < 0"},
{"lineNum":"  114","line":"      @ovector[n * 2 + 1]"},
{"lineNum":"  115","line":"    end"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    # Returns the match of the *n*th capture group, or `nil` if there isn\'t"},
{"lineNum":"  118","line":"    # an *n*th capture group."},
{"lineNum":"  119","line":"    #"},
{"lineNum":"  120","line":"    # When *n* is `0`, returns the match for the entire `Regex`."},
{"lineNum":"  121","line":"    #"},
{"lineNum":"  122","line":"    # ```"},
{"lineNum":"  123","line":"    # \"Crystal\".match(/r(ys)/).not_nil![0]? # => \"rys\""},
{"lineNum":"  124","line":"    # \"Crystal\".match(/r(ys)/).not_nil![1]? # => \"ys\""},
{"lineNum":"  125","line":"    # \"Crystal\".match(/r(ys)/).not_nil![2]? # => nil"},
{"lineNum":"  126","line":"    # ```"},
{"lineNum":"  127","line":"    def []?(n)"},
{"lineNum":"  128","line":"      return unless valid_group?(n)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"      n += size if n < 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"      start = @ovector[n * 2]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"      finish = @ovector[n * 2 + 1]"},
{"lineNum":"  133","line":"      return if start < 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  134","line":"      @string.byte_slice(start, finish - start)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"    end"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    # Returns the match of the *n*th capture group, or raises an `IndexError`"},
{"lineNum":"  138","line":"    # if there is no *n*th capture group."},
{"lineNum":"  139","line":"    #"},
{"lineNum":"  140","line":"    # ```"},
{"lineNum":"  141","line":"    # \"Crystal\".match(/r(ys)/).not_nil![1] # => \"ys\""},
{"lineNum":"  142","line":"    # \"Crystal\".match(/r(ys)/).not_nil![2] # raises IndexError"},
{"lineNum":"  143","line":"    # ```"},
{"lineNum":"  144","line":"    def [](n)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"      check_index_out_of_bounds n"},
{"lineNum":"  146","line":"      n += size if n < 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"      value = self[n]?"},
{"lineNum":"  149","line":"      raise_capture_group_was_not_matched n if value.nil?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"      value"},
{"lineNum":"  151","line":"    end"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    # Returns the match of the capture group named by *group_name*, or"},
{"lineNum":"  154","line":"    # `nil` if there is no such named capture group."},
{"lineNum":"  155","line":"    #"},
{"lineNum":"  156","line":"    # ```"},
{"lineNum":"  157","line":"    # \"Crystal\".match(/r(?<ok>ys)/).not_nil![\"ok\"]? # => \"ys\""},
{"lineNum":"  158","line":"    # \"Crystal\".match(/r(?<ok>ys)/).not_nil![\"ng\"]? # => nil"},
{"lineNum":"  159","line":"    # ```"},
{"lineNum":"  160","line":"    #"},
{"lineNum":"  161","line":"    # When there are capture groups having same name, it returns the last"},
{"lineNum":"  162","line":"    # matched capture group."},
{"lineNum":"  163","line":"    #"},
{"lineNum":"  164","line":"    # ```"},
{"lineNum":"  165","line":"    # \"Crystal\".match(/(?<ok>Cr)|(?<ok>al)/).not_nil![\"ok\"]? # => \"al\""},
{"lineNum":"  166","line":"    # ```"},
{"lineNum":"  167","line":"    def []?(group_name : String)"},
{"lineNum":"  168","line":"      max_start = -1"},
{"lineNum":"  169","line":"      match = nil"},
{"lineNum":"  170","line":"      named_capture_number(group_name) do |n|"},
{"lineNum":"  171","line":"        start = @ovector[n * 2]"},
{"lineNum":"  172","line":"        if start > max_start"},
{"lineNum":"  173","line":"          max_start = start"},
{"lineNum":"  174","line":"          match = self[n]?"},
{"lineNum":"  175","line":"        end"},
{"lineNum":"  176","line":"      end"},
{"lineNum":"  177","line":"      match"},
{"lineNum":"  178","line":"    end"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    # Returns the match of the capture group named by *group_name*, or"},
{"lineNum":"  181","line":"    # raises an `KeyError` if there is no such named capture group."},
{"lineNum":"  182","line":"    #"},
{"lineNum":"  183","line":"    # ```"},
{"lineNum":"  184","line":"    # \"Crystal\".match(/r(?<ok>ys)/).not_nil![\"ok\"] # => \"ys\""},
{"lineNum":"  185","line":"    # \"Crystal\".match(/r(?<ok>ys)/).not_nil![\"ng\"] # raises KeyError"},
{"lineNum":"  186","line":"    # ```"},
{"lineNum":"  187","line":"    #"},
{"lineNum":"  188","line":"    # When there are capture groups having same name, it returns the last"},
{"lineNum":"  189","line":"    # matched capture group."},
{"lineNum":"  190","line":"    #"},
{"lineNum":"  191","line":"    # ```"},
{"lineNum":"  192","line":"    # \"Crystal\".match(/(?<ok>Cr)|(?<ok>al)/).not_nil![\"ok\"] # => \"al\""},
{"lineNum":"  193","line":"    # ```"},
{"lineNum":"  194","line":"    def [](group_name : String)"},
{"lineNum":"  195","line":"      match = self[group_name]?"},
{"lineNum":"  196","line":"      unless match"},
{"lineNum":"  197","line":"        named_capture_number(group_name) do"},
{"lineNum":"  198","line":"          raise KeyError.new(\"Capture group \'#{group_name}\' was not matched\")"},
{"lineNum":"  199","line":"        end"},
{"lineNum":"  200","line":"        raise KeyError.new(\"Capture group \'#{group_name}\' does not exist\")"},
{"lineNum":"  201","line":"      end"},
{"lineNum":"  202","line":"      match"},
{"lineNum":"  203","line":"    end"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    private def named_capture_number(group_name)"},
{"lineNum":"  206","line":"      name_entry_size = LibPCRE.get_stringtable_entries(@code, group_name, out first, out last)"},
{"lineNum":"  207","line":"      return if name_entry_size < 0"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"      while first <= last"},
{"lineNum":"  210","line":"        capture_number = (first[0].to_u16 << 8) | first[1].to_u16"},
{"lineNum":"  211","line":"        yield capture_number"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"        first += name_entry_size"},
{"lineNum":"  214","line":"      end"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"      nil"},
{"lineNum":"  217","line":"    end"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    # Returns the part of the original string before the match. If the match"},
{"lineNum":"  220","line":"    # starts at the start of the string, returns the empty string."},
{"lineNum":"  221","line":"    #"},
{"lineNum":"  222","line":"    # ```"},
{"lineNum":"  223","line":"    # \"Crystal\".match(/yst/).not_nil!.pre_match # => \"Cr\""},
{"lineNum":"  224","line":"    # ```"},
{"lineNum":"  225","line":"    def pre_match"},
{"lineNum":"  226","line":"      @string.byte_slice(0, byte_begin(0))"},
{"lineNum":"  227","line":"    end"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    # Returns the part of the original string after the match. If the match ends"},
{"lineNum":"  230","line":"    # at the end of the string, returns the empty string."},
{"lineNum":"  231","line":"    #"},
{"lineNum":"  232","line":"    # ```"},
{"lineNum":"  233","line":"    # \"Crystal\".match(/yst/).not_nil!.post_match # => \"al\""},
{"lineNum":"  234","line":"    # ```"},
{"lineNum":"  235","line":"    def post_match"},
{"lineNum":"  236","line":"      @string.byte_slice(byte_end(0))"},
{"lineNum":"  237","line":"    end"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    # Returns an array of unnamed capture groups."},
{"lineNum":"  240","line":"    #"},
{"lineNum":"  241","line":"    # It is a difference from `to_a` that the result array does not contain the match for the entire `Regex` (`self[0]`)."},
{"lineNum":"  242","line":"    #"},
{"lineNum":"  243","line":"    # ```"},
{"lineNum":"  244","line":"    # match = \"Crystal\".match(/(Cr)(?<name1>y)(st)(?<name2>al)/).not_nil!"},
{"lineNum":"  245","line":"    # match.captures # => [\"Cr\", \"st\"]"},
{"lineNum":"  246","line":"    #"},
{"lineNum":"  247","line":"    # # When this regex has an optional group, result array may contain"},
{"lineNum":"  248","line":"    # # a `nil` if this group is not matched."},
{"lineNum":"  249","line":"    # match = \"Crystal\".match(/(Cr)(stal)?/).not_nil!"},
{"lineNum":"  250","line":"    # match.captures # => [\"Cr\", nil]"},
{"lineNum":"  251","line":"    # ```"},
{"lineNum":"  252","line":"    def captures"},
{"lineNum":"  253","line":"      name_table = @regex.name_table"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"      caps = [] of String?"},
{"lineNum":"  256","line":"      (1...size).each do |i|"},
{"lineNum":"  257","line":"        caps << self[i]? unless name_table.has_key? i"},
{"lineNum":"  258","line":"      end"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"      caps"},
{"lineNum":"  261","line":"    end"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"    # Returns a hash of named capture groups."},
{"lineNum":"  264","line":"    #"},
{"lineNum":"  265","line":"    # ```"},
{"lineNum":"  266","line":"    # match = \"Crystal\".match(/(Cr)(?<name1>y)(st)(?<name2>al)/).not_nil!"},
{"lineNum":"  267","line":"    # match.named_captures # => {\"name1\" => \"y\", \"name2\" => \"al\"}"},
{"lineNum":"  268","line":"    #"},
{"lineNum":"  269","line":"    # # When this regex has an optional group, result hash may contain"},
{"lineNum":"  270","line":"    # # a `nil` if this group is not matched."},
{"lineNum":"  271","line":"    # match = \"Crystal\".match(/(?<name1>Cr)(?<name2>stal)?/).not_nil!"},
{"lineNum":"  272","line":"    # match.named_captures # => {\"name1\" => \"Cr\", \"name2\" => nil}"},
{"lineNum":"  273","line":"    # ```"},
{"lineNum":"  274","line":"    def named_captures"},
{"lineNum":"  275","line":"      name_table = @regex.name_table"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"      caps = {} of String => String?"},
{"lineNum":"  278","line":"      (1...size).each do |i|"},
{"lineNum":"  279","line":"        if (name = name_table[i]?) && !caps.has_key?(name)"},
{"lineNum":"  280","line":"          caps[name] = self[name]?"},
{"lineNum":"  281","line":"        end"},
{"lineNum":"  282","line":"      end"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"      caps"},
{"lineNum":"  285","line":"    end"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"    # Convert this match data into an array."},
{"lineNum":"  288","line":"    #"},
{"lineNum":"  289","line":"    # ```"},
{"lineNum":"  290","line":"    # match = \"Crystal\".match(/(Cr)(?<name1>y)(st)(?<name2>al)/).not_nil!"},
{"lineNum":"  291","line":"    # match.to_a # => [\"Crystal\", \"Cr\", \"y\", \"st\", \"al\"]"},
{"lineNum":"  292","line":"    #"},
{"lineNum":"  293","line":"    # # When this regex has an optional group, result array may contain"},
{"lineNum":"  294","line":"    # # a `nil` if this group is not matched."},
{"lineNum":"  295","line":"    # match = \"Crystal\".match(/(Cr)(?<name1>stal)?/).not_nil!"},
{"lineNum":"  296","line":"    # match.to_a # => [\"Cr\", \"Cr\", nil]"},
{"lineNum":"  297","line":"    # ```"},
{"lineNum":"  298","line":"    def to_a"},
{"lineNum":"  299","line":"      (0...size).map { |i| self[i]? }"},
{"lineNum":"  300","line":"    end"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"    # Convert this match data into a hash."},
{"lineNum":"  303","line":"    #"},
{"lineNum":"  304","line":"    # ```"},
{"lineNum":"  305","line":"    # match = \"Crystal\".match(/(Cr)(?<name1>y)(st)(?<name2>al)/).not_nil!"},
{"lineNum":"  306","line":"    # match.to_h # => {0 => \"Crystal\", 1 => \"Cr\", \"name1\" => \"y\", 3 => \"st\", \"name2\" => \"al\"}"},
{"lineNum":"  307","line":"    #"},
{"lineNum":"  308","line":"    # # When this regex has an optional group, result array may contain"},
{"lineNum":"  309","line":"    # # a `nil` if this group is not matched."},
{"lineNum":"  310","line":"    # match = \"Crystal\".match(/(Cr)(?<name1>stal)?/).not_nil!"},
{"lineNum":"  311","line":"    # match.to_h # => {0 => \"Cr\", 1 => \"Cr\", \"name1\" => nil}"},
{"lineNum":"  312","line":"    # ```"},
{"lineNum":"  313","line":"    def to_h"},
{"lineNum":"  314","line":"      name_table = @regex.name_table"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"      hash = {} of (String | Int32) => String?"},
{"lineNum":"  317","line":"      (0...size).each do |i|"},
{"lineNum":"  318","line":"        if name = name_table[i]?"},
{"lineNum":"  319","line":"          hash[name] = self[name]? unless hash.has_key?(name)"},
{"lineNum":"  320","line":"        else"},
{"lineNum":"  321","line":"          hash[i] = self[i]?"},
{"lineNum":"  322","line":"        end"},
{"lineNum":"  323","line":"      end"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"      hash"},
{"lineNum":"  326","line":"    end"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"    def inspect(io : IO)"},
{"lineNum":"  329","line":"      to_s(io)"},
{"lineNum":"  330","line":"    end"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"    def to_s(io : IO)"},
{"lineNum":"  333","line":"      name_table = @regex.name_table"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"      io << \"#<Regex::MatchData\""},
{"lineNum":"  336","line":"      size.times do |i|"},
{"lineNum":"  337","line":"        io << \" \""},
{"lineNum":"  338","line":"        io << name_table.fetch(i, i) << \":\" if i > 0"},
{"lineNum":"  339","line":"        self[i]?.inspect(io)"},
{"lineNum":"  340","line":"      end"},
{"lineNum":"  341","line":"      io << \">\""},
{"lineNum":"  342","line":"    end"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    def pretty_print(pp) : Nil"},
{"lineNum":"  345","line":"      name_table = @regex.name_table"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"      pp.surround(\"#<Regex::MatchData\", \">\", left_break: nil, right_break: nil) do"},
{"lineNum":"  348","line":"        size.times do |i|"},
{"lineNum":"  349","line":"          pp.breakable"},
{"lineNum":"  350","line":"          pp.group do"},
{"lineNum":"  351","line":"            if i == 0"},
{"lineNum":"  352","line":"              self[i].pretty_print pp"},
{"lineNum":"  353","line":"            else"},
{"lineNum":"  354","line":"              pp.text \"#{name_table.fetch(i, i)}:\""},
{"lineNum":"  355","line":"              pp.nest do"},
{"lineNum":"  356","line":"                pp.breakable \"\""},
{"lineNum":"  357","line":"                self[i]?.pretty_print pp"},
{"lineNum":"  358","line":"              end"},
{"lineNum":"  359","line":"            end"},
{"lineNum":"  360","line":"          end"},
{"lineNum":"  361","line":"        end"},
{"lineNum":"  362","line":"      end"},
{"lineNum":"  363","line":"    end"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"    def dup"},
{"lineNum":"  366","line":"      self"},
{"lineNum":"  367","line":"    end"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    def clone"},
{"lineNum":"  370","line":"      self"},
{"lineNum":"  371","line":"    end"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    def ==(other : Regex::MatchData)"},
{"lineNum":"  374","line":"      return false unless size == other.size"},
{"lineNum":"  375","line":"      return false unless regex == other.regex"},
{"lineNum":"  376","line":"      return false unless string == other.string"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"      return @ovector.memcmp(other.@ovector, size * 2) == 0"},
{"lineNum":"  379","line":"    end"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"    private def check_index_out_of_bounds(index)"},
{"lineNum":"  382","line":"      raise_invalid_group_index(index) unless valid_group?(index)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  383","line":"    end"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"    private def valid_group?(index)"},
{"lineNum":"  386","line":"      -size <= index < size"},
{"lineNum":"  387","line":"    end"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"    private def raise_invalid_group_index(index)"},
{"lineNum":"  390","line":"      raise IndexError.new(\"Invalid capture group index: #{index}\")","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  391","line":"    end"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"    private def raise_capture_group_was_not_matched(index)"},
{"lineNum":"  394","line":"      raise IndexError.new(\"Capture group #{index} was not matched\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  395","line":"    end"},
{"lineNum":"  396","line":"  end"},
{"lineNum":"  397","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 12, "covered" : 0,};
var merged_data = [];
