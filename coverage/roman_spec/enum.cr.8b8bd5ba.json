var data = {lines:[
{"lineNum":"    1","line":"# Enum is the base type of all enums."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# An enum is a set of integer values, where each value has an associated name. For example:"},
{"lineNum":"    4","line":"#"},
{"lineNum":"    5","line":"# ```"},
{"lineNum":"    6","line":"# enum Color"},
{"lineNum":"    7","line":"#   Red   # 0"},
{"lineNum":"    8","line":"#   Green # 1"},
{"lineNum":"    9","line":"#   Blue  # 2"},
{"lineNum":"   10","line":"# end"},
{"lineNum":"   11","line":"# ```"},
{"lineNum":"   12","line":"#"},
{"lineNum":"   13","line":"# Values start with the value `0` and are incremented by one, but can be overwritten."},
{"lineNum":"   14","line":"#"},
{"lineNum":"   15","line":"# To get the underlying value you invoke value on it:"},
{"lineNum":"   16","line":"#"},
{"lineNum":"   17","line":"# ```"},
{"lineNum":"   18","line":"# Color::Green.value # => 1"},
{"lineNum":"   19","line":"# ```"},
{"lineNum":"   20","line":"#"},
{"lineNum":"   21","line":"# Each constant (member) in the enum has the type of the enum:"},
{"lineNum":"   22","line":"#"},
{"lineNum":"   23","line":"# ```"},
{"lineNum":"   24","line":"# typeof(Color::Red) # => Color"},
{"lineNum":"   25","line":"# ```"},
{"lineNum":"   26","line":"#"},
{"lineNum":"   27","line":"# ### Flags enum"},
{"lineNum":"   28","line":"#"},
{"lineNum":"   29","line":"# An enum can be marked with the `@[Flags]` attribute. This changes the default values:"},
{"lineNum":"   30","line":"#"},
{"lineNum":"   31","line":"# ```"},
{"lineNum":"   32","line":"# @[Flags]"},
{"lineNum":"   33","line":"# enum IOMode"},
{"lineNum":"   34","line":"#   Read  # 1"},
{"lineNum":"   35","line":"#   Write # 2"},
{"lineNum":"   36","line":"#   Async # 4"},
{"lineNum":"   37","line":"# end"},
{"lineNum":"   38","line":"# ```"},
{"lineNum":"   39","line":"#"},
{"lineNum":"   40","line":"# Additionally, some methods change their behaviour."},
{"lineNum":"   41","line":"#"},
{"lineNum":"   42","line":"# ### Enums from integers"},
{"lineNum":"   43","line":"#"},
{"lineNum":"   44","line":"# An enum can be created from an integer:"},
{"lineNum":"   45","line":"#"},
{"lineNum":"   46","line":"# ```"},
{"lineNum":"   47","line":"# Color.new(1).to_s # => \"Green\""},
{"lineNum":"   48","line":"# ```"},
{"lineNum":"   49","line":"#"},
{"lineNum":"   50","line":"# Values that don\'t correspond to an enum\'s constants are allowed: the value"},
{"lineNum":"   51","line":"# will still be of type Color, but when printed you will get the underlying value:"},
{"lineNum":"   52","line":"#"},
{"lineNum":"   53","line":"# ```"},
{"lineNum":"   54","line":"# Color.new(10).to_s # => \"10\""},
{"lineNum":"   55","line":"# ```"},
{"lineNum":"   56","line":"#"},
{"lineNum":"   57","line":"# This method is mainly intended to convert integers from C to enums in Crystal."},
{"lineNum":"   58","line":"#"},
{"lineNum":"   59","line":"# ### Question methods"},
{"lineNum":"   60","line":"#"},
{"lineNum":"   61","line":"# An enum automatically defines question methods for each member, using"},
{"lineNum":"   62","line":"# `String#underscore` for the method name."},
{"lineNum":"   63","line":"# * In the case of regular enums, this compares by equality (`==`)."},
{"lineNum":"   64","line":"# * In the case of flags enums, this invokes `includes?`."},
{"lineNum":"   65","line":"#"},
{"lineNum":"   66","line":"# For example:"},
{"lineNum":"   67","line":"#"},
{"lineNum":"   68","line":"# ```"},
{"lineNum":"   69","line":"# color = Color::Blue"},
{"lineNum":"   70","line":"# color.red?  # => false"},
{"lineNum":"   71","line":"# color.blue? # => true"},
{"lineNum":"   72","line":"#"},
{"lineNum":"   73","line":"# mode = IOMode::Read | IOMode::Async"},
{"lineNum":"   74","line":"# mode.read?  # => true"},
{"lineNum":"   75","line":"# mode.write? # => false"},
{"lineNum":"   76","line":"# mode.async? # => true"},
{"lineNum":"   77","line":"# ```"},
{"lineNum":"   78","line":"#"},
{"lineNum":"   79","line":"# This is very convenient in `case` expressions:"},
{"lineNum":"   80","line":"#"},
{"lineNum":"   81","line":"# ```"},
{"lineNum":"   82","line":"# case color"},
{"lineNum":"   83","line":"# when .red?"},
{"lineNum":"   84","line":"#   puts \"Got red\""},
{"lineNum":"   85","line":"# when .blue?"},
{"lineNum":"   86","line":"#   puts \"Got blue\""},
{"lineNum":"   87","line":"# end"},
{"lineNum":"   88","line":"# ```"},
{"lineNum":"   89","line":"struct Enum"},
{"lineNum":"   90","line":"  include Comparable(self)"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  # Appends a `String` representation of this enum member to the given *io*."},
{"lineNum":"   93","line":"  #"},
{"lineNum":"   94","line":"  # See also: `to_s`."},
{"lineNum":"   95","line":"  def to_s(io : IO) : Nil"},
{"lineNum":"   96","line":"    {% if @type.has_attribute?(\"Flags\") %}"},
{"lineNum":"   97","line":"      if value == 0"},
{"lineNum":"   98","line":"        io << \"None\""},
{"lineNum":"   99","line":"      else"},
{"lineNum":"  100","line":"        found = false"},
{"lineNum":"  101","line":"        {% for member in @type.constants %}"},
{"lineNum":"  102","line":"          {% if member.stringify != \"All\" %}"},
{"lineNum":"  103","line":"            if {{@type}}::{{member}}.value != 0 && (value & {{@type}}::{{member}}.value) == {{@type}}::{{member}}.value"},
{"lineNum":"  104","line":"              io << \" | \" if found"},
{"lineNum":"  105","line":"              io << {{member.stringify}}"},
{"lineNum":"  106","line":"              found = true"},
{"lineNum":"  107","line":"            end"},
{"lineNum":"  108","line":"          {% end %}"},
{"lineNum":"  109","line":"        {% end %}"},
{"lineNum":"  110","line":"        io << value unless found"},
{"lineNum":"  111","line":"      end"},
{"lineNum":"  112","line":"    {% else %}"},
{"lineNum":"  113","line":"      io << to_s"},
{"lineNum":"  114","line":"    {% end %}"},
{"lineNum":"  115","line":"    nil"},
{"lineNum":"  116","line":"  end"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"  # Returns a `String` representation of this enum member."},
{"lineNum":"  119","line":"  # In the case of regular enums, this is just the name of the member."},
{"lineNum":"  120","line":"  # In the case of flag enums, it\'s the names joined by commas, or \"None\","},
{"lineNum":"  121","line":"  # if the value is zero."},
{"lineNum":"  122","line":"  #"},
{"lineNum":"  123","line":"  # If an enum\'s value doesn\'t match a member\'s value, the raw value"},
{"lineNum":"  124","line":"  # is returned as a string."},
{"lineNum":"  125","line":"  #"},
{"lineNum":"  126","line":"  # ```"},
{"lineNum":"  127","line":"  # Color::Red.to_s                     # => \"Red\""},
{"lineNum":"  128","line":"  # IOMode::None.to_s                   # => \"None\""},
{"lineNum":"  129","line":"  # (IOMode::Read | IOMode::Write).to_s # => \"Read | Write\""},
{"lineNum":"  130","line":"  #"},
{"lineNum":"  131","line":"  # Color.new(10).to_s # => \"10\""},
{"lineNum":"  132","line":"  # ```"},
{"lineNum":"  133","line":"  def to_s : String"},
{"lineNum":"  134","line":"    {% if @type.has_attribute?(\"Flags\") %}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  135","line":"      String.build { |io| to_s(io) }"},
{"lineNum":"  136","line":"    {% else %}"},
{"lineNum":"  137","line":"      case value"},
{"lineNum":"  138","line":"      {% for member in @type.constants %}"},
{"lineNum":"  139","line":"      when {{@type}}::{{member}}.value"},
{"lineNum":"  140","line":"        {{member.stringify}}"},
{"lineNum":"  141","line":"      {% end %}"},
{"lineNum":"  142","line":"      else"},
{"lineNum":"  143","line":"        value.to_s"},
{"lineNum":"  144","line":"      end"},
{"lineNum":"  145","line":"    {% end %}"},
{"lineNum":"  146","line":"  end"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"  # Returns the value of this enum member as an `Int32`."},
{"lineNum":"  149","line":"  #"},
{"lineNum":"  150","line":"  # ```"},
{"lineNum":"  151","line":"  # Color::Blue.to_i                    # => 2"},
{"lineNum":"  152","line":"  # (IOMode::Read | IOMode::Write).to_i # => 3"},
{"lineNum":"  153","line":"  #"},
{"lineNum":"  154","line":"  # Color.new(10).to_i # => 10"},
{"lineNum":"  155","line":"  # ```"},
{"lineNum":"  156","line":"  def to_i : Int32"},
{"lineNum":"  157","line":"    value.to_i32"},
{"lineNum":"  158","line":"  end"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  {% for name in %w(i8 i16 i32 i64 u8 u16 u32 u64 f32 f64) %}"},
{"lineNum":"  161","line":"    {% prefix = name.starts_with?(\'i\') ? \"Int\".id : (name.starts_with?(\'u\') ? \"UInt\".id : \"Float\".id) %}"},
{"lineNum":"  162","line":"    {% type = \"#{prefix}#{name[1..-1].id}\".id %}"},
{"lineNum":"  163","line":"    # Returns the value of this enum member as a `{{type}}`"},
{"lineNum":"  164","line":"    def to_{{name.id}} : {{type}}"},
{"lineNum":"  165","line":"      value.to_{{name.id}}"},
{"lineNum":"  166","line":"    end"},
{"lineNum":"  167","line":"  {% end %}"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  # Returns the enum member that results from adding *other*"},
{"lineNum":"  170","line":"  # to this enum member\'s value."},
{"lineNum":"  171","line":"  #"},
{"lineNum":"  172","line":"  # ```"},
{"lineNum":"  173","line":"  # Color::Red + 1 # => Color::Green"},
{"lineNum":"  174","line":"  # Color::Red + 2 # => Color::Blue"},
{"lineNum":"  175","line":"  # Color::Red + 3 # => Color.new(3)"},
{"lineNum":"  176","line":"  # ```"},
{"lineNum":"  177","line":"  def +(other : Int)"},
{"lineNum":"  178","line":"    self.class.new(value + other)"},
{"lineNum":"  179","line":"  end"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"  # Returns the enum member that results from subtracting *other*"},
{"lineNum":"  182","line":"  # to this enum member\'s value."},
{"lineNum":"  183","line":"  #"},
{"lineNum":"  184","line":"  # ```"},
{"lineNum":"  185","line":"  # Color::Blue - 1 # => Color::Green"},
{"lineNum":"  186","line":"  # Color::Blue - 2 # => Color::Red"},
{"lineNum":"  187","line":"  # Color::Blue - 3 # => Color.new(-1)"},
{"lineNum":"  188","line":"  # ```"},
{"lineNum":"  189","line":"  def -(other : Int)"},
{"lineNum":"  190","line":"    self.class.new(value - other)"},
{"lineNum":"  191","line":"  end"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"  # Returns the enum member that results from applying a logical"},
{"lineNum":"  194","line":"  # \"or\" operation between this enum member\'s value and *other*."},
{"lineNum":"  195","line":"  # This is mostly useful with flag enums."},
{"lineNum":"  196","line":"  #"},
{"lineNum":"  197","line":"  # ```"},
{"lineNum":"  198","line":"  # (IOMode::Read | IOMode::Async) # => IOMode::Read | IOMode::Async"},
{"lineNum":"  199","line":"  # ```"},
{"lineNum":"  200","line":"  def |(other : self)"},
{"lineNum":"  201","line":"    self.class.new(value | other.value)"},
{"lineNum":"  202","line":"  end"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"  # Returns the enum member that results from applying a logical"},
{"lineNum":"  205","line":"  # \"and\" operation between this enum member\'s value and *other*."},
{"lineNum":"  206","line":"  # This is mostly useful with flag enums."},
{"lineNum":"  207","line":"  #"},
{"lineNum":"  208","line":"  # ```"},
{"lineNum":"  209","line":"  # (IOMode::Read | IOMode::Async) & IOMode::Read # => IOMode::Read"},
{"lineNum":"  210","line":"  # ```"},
{"lineNum":"  211","line":"  def &(other : self)"},
{"lineNum":"  212","line":"    self.class.new(value & other.value)"},
{"lineNum":"  213","line":"  end"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"  # Returns the enum member that results from applying a logical"},
{"lineNum":"  216","line":"  # \"xor\" operation between this enum member\'s value and *other*."},
{"lineNum":"  217","line":"  # This is mostly useful with flag enums."},
{"lineNum":"  218","line":"  def ^(other : self)"},
{"lineNum":"  219","line":"    self.class.new(value ^ other.value)"},
{"lineNum":"  220","line":"  end"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"  # Returns the enum member that results from applying a logical"},
{"lineNum":"  223","line":"  # \"not\" operation of this enum member\'s value."},
{"lineNum":"  224","line":"  def ~"},
{"lineNum":"  225","line":"    self.class.new(~value)"},
{"lineNum":"  226","line":"  end"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"  # Compares this enum member against another, according to their underlying"},
{"lineNum":"  229","line":"  # value."},
{"lineNum":"  230","line":"  #"},
{"lineNum":"  231","line":"  # ```"},
{"lineNum":"  232","line":"  # Color::Red <=> Color::Blue  # => -1"},
{"lineNum":"  233","line":"  # Color::Blue <=> Color::Red  # => 1"},
{"lineNum":"  234","line":"  # Color::Blue <=> Color::Blue # => 0"},
{"lineNum":"  235","line":"  # ```"},
{"lineNum":"  236","line":"  def <=>(other : self)"},
{"lineNum":"  237","line":"    value <=> other.value"},
{"lineNum":"  238","line":"  end"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"  # Returns `true` if this enum member\'s value includes *other*. This"},
{"lineNum":"  241","line":"  # performs a logical \"and\" between this enum member\'s value and *other*\'s,"},
{"lineNum":"  242","line":"  # so instead of writing:"},
{"lineNum":"  243","line":"  #"},
{"lineNum":"  244","line":"  # ```"},
{"lineNum":"  245","line":"  # (member & value) != 0"},
{"lineNum":"  246","line":"  # ```"},
{"lineNum":"  247","line":"  #"},
{"lineNum":"  248","line":"  # you can write:"},
{"lineNum":"  249","line":"  #"},
{"lineNum":"  250","line":"  # ```"},
{"lineNum":"  251","line":"  # member.includes?(value)"},
{"lineNum":"  252","line":"  # ```"},
{"lineNum":"  253","line":"  #"},
{"lineNum":"  254","line":"  # The above is mostly useful with flag enums."},
{"lineNum":"  255","line":"  #"},
{"lineNum":"  256","line":"  # For example:"},
{"lineNum":"  257","line":"  #"},
{"lineNum":"  258","line":"  # ```"},
{"lineNum":"  259","line":"  # mode = IOMode::Read | IOMode::Write"},
{"lineNum":"  260","line":"  # mode.includes?(IOMode::Read)  # => true"},
{"lineNum":"  261","line":"  # mode.includes?(IOMode::Async) # => false"},
{"lineNum":"  262","line":"  # ```"},
{"lineNum":"  263","line":"  def includes?(other : self)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  264","line":"    (value & other.value) != 0"},
{"lineNum":"  265","line":"  end"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"  # Returns `true` if this enum member and *other* have the same underlying value."},
{"lineNum":"  268","line":"  #"},
{"lineNum":"  269","line":"  # ```"},
{"lineNum":"  270","line":"  # Color::Red == Color::Red  # => true"},
{"lineNum":"  271","line":"  # Color::Red == Color::Blue # => false"},
{"lineNum":"  272","line":"  # ```"},
{"lineNum":"  273","line":"  def ==(other : self)","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  274","line":"    value == other.value"},
{"lineNum":"  275","line":"  end"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"  # See `Object#hash(hasher)`"},
{"lineNum":"  278","line":"  def hash(hasher)"},
{"lineNum":"  279","line":"    hasher.enum(self)"},
{"lineNum":"  280","line":"  end"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"  # Iterates each values in a Flags Enum."},
{"lineNum":"  283","line":"  #"},
{"lineNum":"  284","line":"  # ```"},
{"lineNum":"  285","line":"  # (IOMode::Read | IOMode::Async).each do |member, value|"},
{"lineNum":"  286","line":"  #   # yield IOMode::Read, 1"},
{"lineNum":"  287","line":"  #   # yield IOMode::Async, 3"},
{"lineNum":"  288","line":"  # end"},
{"lineNum":"  289","line":"  # ```"},
{"lineNum":"  290","line":"  def each"},
{"lineNum":"  291","line":"    {% if @type.has_attribute?(\"Flags\") %}"},
{"lineNum":"  292","line":"      return if value == 0"},
{"lineNum":"  293","line":"      {% for member in @type.constants %}"},
{"lineNum":"  294","line":"        {% if member.stringify != \"All\" %}"},
{"lineNum":"  295","line":"          if includes?({{@type}}::{{member}})"},
{"lineNum":"  296","line":"            yield {{@type}}::{{member}}, {{@type}}::{{member}}.value"},
{"lineNum":"  297","line":"          end"},
{"lineNum":"  298","line":"        {% end %}"},
{"lineNum":"  299","line":"      {% end %}"},
{"lineNum":"  300","line":"    {% else %}"},
{"lineNum":"  301","line":"      {% raise \"Can\'t iterate #{@type}: only Flags Enum can be iterated\" %}"},
{"lineNum":"  302","line":"    {% end %}"},
{"lineNum":"  303","line":"  end"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"  # Returns all enum members as an `Array(String)`."},
{"lineNum":"  306","line":"  #"},
{"lineNum":"  307","line":"  # ```"},
{"lineNum":"  308","line":"  # Color.names # => [\"Red\", \"Green\", \"Blue\"]"},
{"lineNum":"  309","line":"  # ```"},
{"lineNum":"  310","line":"  def self.names : Array(String)"},
{"lineNum":"  311","line":"    {% if @type.has_attribute?(\"Flags\") %}"},
{"lineNum":"  312","line":"      {{ @type.constants.select { |e| e.stringify != \"None\" && e.stringify != \"All\" }.map &.stringify }}"},
{"lineNum":"  313","line":"    {% else %}"},
{"lineNum":"  314","line":"      {{ @type.constants.map &.stringify }}"},
{"lineNum":"  315","line":"    {% end %}"},
{"lineNum":"  316","line":"  end"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"  # Returns all enum members as an `Array(self)`."},
{"lineNum":"  319","line":"  #"},
{"lineNum":"  320","line":"  # ```"},
{"lineNum":"  321","line":"  # Color.values # => [Color::Red, Color::Green, Color::Blue]"},
{"lineNum":"  322","line":"  # ```"},
{"lineNum":"  323","line":"  def self.values : Array(self)"},
{"lineNum":"  324","line":"    {% if @type.has_attribute?(\"Flags\") %}"},
{"lineNum":"  325","line":"      {{ @type.constants.select { |e| e.stringify != \"None\" && e.stringify != \"All\" }.map { |e| \"#{@type}::#{e.id}\".id } }}"},
{"lineNum":"  326","line":"    {% else %}"},
{"lineNum":"  327","line":"      {{ @type.constants.map { |e| \"#{@type}::#{e.id}\".id } }}"},
{"lineNum":"  328","line":"    {% end %}"},
{"lineNum":"  329","line":"  end"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"  # Returns the enum member that has the given value, or `nil` if"},
{"lineNum":"  332","line":"  # no such member exists."},
{"lineNum":"  333","line":"  #"},
{"lineNum":"  334","line":"  # ```"},
{"lineNum":"  335","line":"  # Color.from_value?(0) # => Color::Red"},
{"lineNum":"  336","line":"  # Color.from_value?(1) # => Color::Green"},
{"lineNum":"  337","line":"  # Color.from_value?(2) # => Color::Blue"},
{"lineNum":"  338","line":"  # Color.from_value?(3) # => nil"},
{"lineNum":"  339","line":"  # ```"},
{"lineNum":"  340","line":"  def self.from_value?(value) : self?"},
{"lineNum":"  341","line":"    {% if @type.has_attribute?(\"Flags\") %}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  342","line":"      mask = {% for member, i in @type.constants %}\\"},
{"lineNum":"  343","line":"        {% if i != 0 %} | {% end %}\\"},
{"lineNum":"  344","line":"        {{@type}}::{{member}}.value{% end %}"},
{"lineNum":"  345","line":"      return if (mask & value != value) || (value == 0 && values.none? { |val| val.to_i == 0 })"},
{"lineNum":"  346","line":"      return new(value)"},
{"lineNum":"  347","line":"    {% else %}"},
{"lineNum":"  348","line":"      {% for member in @type.constants %}"},
{"lineNum":"  349","line":"        return {{@type}}::{{member}} if {{@type}}::{{member}}.value == value"},
{"lineNum":"  350","line":"      {% end %}"},
{"lineNum":"  351","line":"    {% end %}"},
{"lineNum":"  352","line":"    nil"},
{"lineNum":"  353","line":"  end"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"  # Returns the enum member that has the given value, or raises"},
{"lineNum":"  356","line":"  # if no such member exists."},
{"lineNum":"  357","line":"  #"},
{"lineNum":"  358","line":"  # ```"},
{"lineNum":"  359","line":"  # Color.from_value(0) # => Color::Red"},
{"lineNum":"  360","line":"  # Color.from_value(1) # => Color::Green"},
{"lineNum":"  361","line":"  # Color.from_value(2) # => Color::Blue"},
{"lineNum":"  362","line":"  # Color.from_value(3) # raises Exception"},
{"lineNum":"  363","line":"  # ```"},
{"lineNum":"  364","line":"  def self.from_value(value) : self"},
{"lineNum":"  365","line":"    from_value?(value) || raise \"Unknown enum #{self} value: #{value}\"","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  366","line":"  end"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"  # def self.to_h : Hash(String, self)"},
{"lineNum":"  369","line":"  #   {"},
{"lineNum":"  370","line":"  #     {% for member in @type.constants %}"},
{"lineNum":"  371","line":"  #       {{member.stringify}} => {{member}},"},
{"lineNum":"  372","line":"  #     {% end %}"},
{"lineNum":"  373","line":"  #   }"},
{"lineNum":"  374","line":"  # end"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"  # Returns the enum member that has the given name, or"},
{"lineNum":"  377","line":"  # raises `ArgumentError` if no such member exists. The comparison is made by using"},
{"lineNum":"  378","line":"  # `String#camelcase` and `String#downcase` between *string* and"},
{"lineNum":"  379","line":"  # the enum members names, so a member named \"FourtyTwo\" or \"FOURTY_TWO\""},
{"lineNum":"  380","line":"  # is found with any of these strings: \"fourty_two\", \"FourtyTwo\", \"FOURTY_TWO\","},
{"lineNum":"  381","line":"  # \"FOURTYTWO\", \"fourtytwo\"."},
{"lineNum":"  382","line":"  #"},
{"lineNum":"  383","line":"  # ```"},
{"lineNum":"  384","line":"  # Color.parse(\"Red\")    # => Color::Red"},
{"lineNum":"  385","line":"  # Color.parse(\"BLUE\")   # => Color::Blue"},
{"lineNum":"  386","line":"  # Color.parse(\"Yellow\") # raises ArgumentError"},
{"lineNum":"  387","line":"  # ```"},
{"lineNum":"  388","line":"  def self.parse(string) : self"},
{"lineNum":"  389","line":"    parse?(string) || raise ArgumentError.new(\"Unknown enum #{self} value: #{string}\")"},
{"lineNum":"  390","line":"  end"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"  # Returns the enum member that has the given name, or"},
{"lineNum":"  393","line":"  # `nil` if no such member exists. The comparison is made by using"},
{"lineNum":"  394","line":"  # `String#camelcase` and `String#downcase` between *string* and"},
{"lineNum":"  395","line":"  # the enum members names, so a member named \"FourtyTwo\" or \"FOURTY_TWO\""},
{"lineNum":"  396","line":"  # is found with any of these strings: \"fourty_two\", \"FourtyTwo\", \"FOURTY_TWO\","},
{"lineNum":"  397","line":"  # \"FOURTYTWO\", \"fourtytwo\"."},
{"lineNum":"  398","line":"  #"},
{"lineNum":"  399","line":"  # ```"},
{"lineNum":"  400","line":"  # Color.parse?(\"Red\")    # => Color::Red"},
{"lineNum":"  401","line":"  # Color.parse?(\"BLUE\")   # => Color::Blue"},
{"lineNum":"  402","line":"  # Color.parse?(\"Yellow\") # => nil"},
{"lineNum":"  403","line":"  # ```"},
{"lineNum":"  404","line":"  def self.parse?(string) : self?"},
{"lineNum":"  405","line":"    {% begin %}"},
{"lineNum":"  406","line":"      case string.camelcase.downcase"},
{"lineNum":"  407","line":"      {% for member in @type.constants %}"},
{"lineNum":"  408","line":"        when {{member.stringify.camelcase.downcase}}"},
{"lineNum":"  409","line":"          {{@type}}::{{member}}"},
{"lineNum":"  410","line":"      {% end %}"},
{"lineNum":"  411","line":"      else"},
{"lineNum":"  412","line":"        nil"},
{"lineNum":"  413","line":"      end"},
{"lineNum":"  414","line":"    {% end %}"},
{"lineNum":"  415","line":"  end"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"  def clone"},
{"lineNum":"  418","line":"    self"},
{"lineNum":"  419","line":"  end"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"  # Convenience macro to create a combined enum (combines given members using `|` (or) logical operator)"},
{"lineNum":"  422","line":"  #"},
{"lineNum":"  423","line":"  # ```"},
{"lineNum":"  424","line":"  # IOMode.flags(Read, Write) # => IOMode::Read | IOMode::Write"},
{"lineNum":"  425","line":"  # ```"},
{"lineNum":"  426","line":"  macro flags(*values)"},
{"lineNum":"  427","line":"    {% for value, i in values %}\\"},
{"lineNum":"  428","line":"      {% if i != 0 %} | {% end %}\\"},
{"lineNum":"  429","line":"      {{ @type }}::{{ value }}{% end %}\\"},
{"lineNum":"  430","line":"  end"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"  # Iterates each member of the enum."},
{"lineNum":"  433","line":"  # It won\'t iterate the `None` and `All` members of flags enums."},
{"lineNum":"  434","line":"  #"},
{"lineNum":"  435","line":"  # ```"},
{"lineNum":"  436","line":"  # IOMode.each do |member, value|"},
{"lineNum":"  437","line":"  #   # yield IOMode::Read, 1"},
{"lineNum":"  438","line":"  #   # yield IOMode::Write, 2"},
{"lineNum":"  439","line":"  #   # yield IOMode::Async, 3"},
{"lineNum":"  440","line":"  # end"},
{"lineNum":"  441","line":"  # ```"},
{"lineNum":"  442","line":"  def self.each"},
{"lineNum":"  443","line":"    {% for member in @type.constants %}"},
{"lineNum":"  444","line":"      {% unless @type.has_attribute?(\"Flags\") && %w(none all).includes?(member.stringify.downcase) %}"},
{"lineNum":"  445","line":"        yield {{@type}}::{{member}}, {{@type}}::{{member}}.value"},
{"lineNum":"  446","line":"      {% end %}"},
{"lineNum":"  447","line":"    {% end %}"},
{"lineNum":"  448","line":"  end"},
{"lineNum":"  449","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 5, "covered" : 0,};
var merged_data = [];
