var data = {lines:[
{"lineNum":"    1","line":"# The `Enumerable` mixin provides collection classes with several traversal, searching,"},
{"lineNum":"    2","line":"# filtering and querying methods."},
{"lineNum":"    3","line":"#"},
{"lineNum":"    4","line":"# Including types must provide an `each` method, which yields successive members"},
{"lineNum":"    5","line":"# of the collection."},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# For example:"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# ```"},
{"lineNum":"   10","line":"# class Three"},
{"lineNum":"   11","line":"#   include Enumerable(Int32)"},
{"lineNum":"   12","line":"#"},
{"lineNum":"   13","line":"#   def each"},
{"lineNum":"   14","line":"#     yield 1"},
{"lineNum":"   15","line":"#     yield 2"},
{"lineNum":"   16","line":"#     yield 3"},
{"lineNum":"   17","line":"#   end"},
{"lineNum":"   18","line":"# end"},
{"lineNum":"   19","line":"#"},
{"lineNum":"   20","line":"# three = Three.new"},
{"lineNum":"   21","line":"# three.to_a                # => [1, 2, 3]"},
{"lineNum":"   22","line":"# three.select &.odd?       # => [1, 3]"},
{"lineNum":"   23","line":"# three.all? { |x| x < 10 } # => true"},
{"lineNum":"   24","line":"# ```"},
{"lineNum":"   25","line":"#"},
{"lineNum":"   26","line":"# Note that most search and filter methods traverse an Enumerable eagerly,"},
{"lineNum":"   27","line":"# producing an `Array` as the result. For a lazy alternative refer to"},
{"lineNum":"   28","line":"# the `Iterator` and `Iterable` modules.","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"module Enumerable(T)"},
{"lineNum":"   30","line":"  class EmptyError < Exception"},
{"lineNum":"   31","line":"    def initialize(message = \"Empty enumerable\")"},
{"lineNum":"   32","line":"      super(message)"},
{"lineNum":"   33","line":"    end"},
{"lineNum":"   34","line":"  end"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"  # Must yield this collection\'s elements to the block."},
{"lineNum":"   37","line":"  abstract def each(&block : T -> _)"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"  # Returns `true` if the passed block returns a value other than `false` or `nil`"},
{"lineNum":"   40","line":"  # for all elements of the collection."},
{"lineNum":"   41","line":"  #"},
{"lineNum":"   42","line":"  # ```"},
{"lineNum":"   43","line":"  # [\"ant\", \"bear\", \"cat\"].all? { |word| word.size >= 3 } # => true"},
{"lineNum":"   44","line":"  # [\"ant\", \"bear\", \"cat\"].all? { |word| word.size >= 4 } # => false"},
{"lineNum":"   45","line":"  # ```"},
{"lineNum":"   46","line":"  def all?"},
{"lineNum":"   47","line":"    each { |e| return false unless yield e }"},
{"lineNum":"   48","line":"    true"},
{"lineNum":"   49","line":"  end"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"  # Returns `true` if none of the elements of the collection is `false` or `nil`."},
{"lineNum":"   52","line":"  #"},
{"lineNum":"   53","line":"  # ```"},
{"lineNum":"   54","line":"  # [nil, true, 99].all? # => false"},
{"lineNum":"   55","line":"  # [15].all?            # => true"},
{"lineNum":"   56","line":"  # ```"},
{"lineNum":"   57","line":"  def all?"},
{"lineNum":"   58","line":"    all? &.itself"},
{"lineNum":"   59","line":"  end"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  # Returns `true` if the passed block returns a value other than `false` or `nil`"},
{"lineNum":"   62","line":"  # for at least one element of the collection."},
{"lineNum":"   63","line":"  #"},
{"lineNum":"   64","line":"  # ```"},
{"lineNum":"   65","line":"  # [\"ant\", \"bear\", \"cat\"].any? { |word| word.size >= 4 } # => true"},
{"lineNum":"   66","line":"  # [\"ant\", \"bear\", \"cat\"].any? { |word| word.size > 4 }  # => false"},
{"lineNum":"   67","line":"  # ```"},
{"lineNum":"   68","line":"  def any?"},
{"lineNum":"   69","line":"    each { |e| return true if yield e }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   70","line":"    false"},
{"lineNum":"   71","line":"  end"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  # Returns `true` if at least one of the collection members is not `false` or `nil`."},
{"lineNum":"   74","line":"  #"},
{"lineNum":"   75","line":"  # ```"},
{"lineNum":"   76","line":"  # [nil, true, 99].any? # => true"},
{"lineNum":"   77","line":"  # [nil, false].any?    # => false"},
{"lineNum":"   78","line":"  # ```"},
{"lineNum":"   79","line":"  def any?"},
{"lineNum":"   80","line":"    any? &.itself"},
{"lineNum":"   81","line":"  end"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"  # Enumerates over the items, chunking them together based on"},
{"lineNum":"   84","line":"  # the return value of the block."},
{"lineNum":"   85","line":"  #"},
{"lineNum":"   86","line":"  # Consecutive elements which return the same block value are chunked together."},
{"lineNum":"   87","line":"  #"},
{"lineNum":"   88","line":"  # For example, consecutive even numbers and odd numbers can be chunked as follows."},
{"lineNum":"   89","line":"  #"},
{"lineNum":"   90","line":"  # ```"},
{"lineNum":"   91","line":"  # ary = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5].chunks { |n| n.even? }"},
{"lineNum":"   92","line":"  # ary # => [{false, [3, 1]}, {true, [4]}, {false, [1, 5, 9]}, {true, [2, 6]}, {false, [5, 3, 5]}]"},
{"lineNum":"   93","line":"  # ```"},
{"lineNum":"   94","line":"  #"},
{"lineNum":"   95","line":"  # The following key values have special meaning:"},
{"lineNum":"   96","line":"  #"},
{"lineNum":"   97","line":"  # * `Enumerable::Chunk::Drop` specifies that the elements should be dropped"},
{"lineNum":"   98","line":"  # * `Enumerable::Chunk::Alone` specifies that the element should be chunked by itself"},
{"lineNum":"   99","line":"  #"},
{"lineNum":"  100","line":"  # See also: `Iterator#chunk`."},
{"lineNum":"  101","line":"  def chunks(&block : T -> U) forall U"},
{"lineNum":"  102","line":"    res = [] of Tuple(U, Array(T))"},
{"lineNum":"  103","line":"    chunks_internal(block) { |k, v| res << {k, v} }"},
{"lineNum":"  104","line":"    res"},
{"lineNum":"  105","line":"  end"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"  # :nodoc:"},
{"lineNum":"  108","line":"  module Chunk"},
{"lineNum":"  109","line":"    record Drop"},
{"lineNum":"  110","line":"    record Alone"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    # :nodoc:"},
{"lineNum":"  113","line":"    struct Accumulator(T, U)"},
{"lineNum":"  114","line":"      @data : Array(T)"},
{"lineNum":"  115","line":"      @reuse : Bool"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"      def initialize(reuse = false)"},
{"lineNum":"  118","line":"        @key = uninitialized U"},
{"lineNum":"  119","line":"        @initialized = false"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"        if reuse"},
{"lineNum":"  122","line":"          if reuse.is_a?(Array)"},
{"lineNum":"  123","line":"            @data = reuse"},
{"lineNum":"  124","line":"          else"},
{"lineNum":"  125","line":"            @data = [] of T"},
{"lineNum":"  126","line":"          end"},
{"lineNum":"  127","line":"          @reuse = true"},
{"lineNum":"  128","line":"        else"},
{"lineNum":"  129","line":"          @data = [] of T"},
{"lineNum":"  130","line":"          @reuse = false"},
{"lineNum":"  131","line":"        end"},
{"lineNum":"  132","line":"      end"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"      def init(key, val)"},
{"lineNum":"  135","line":"        return if key == Drop"},
{"lineNum":"  136","line":"        @key = key"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"        if @reuse"},
{"lineNum":"  139","line":"          @data.clear"},
{"lineNum":"  140","line":"          @data << val"},
{"lineNum":"  141","line":"        else"},
{"lineNum":"  142","line":"          @data = [val]"},
{"lineNum":"  143","line":"        end"},
{"lineNum":"  144","line":"        @initialized = true"},
{"lineNum":"  145","line":"      end"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"      def add(d)"},
{"lineNum":"  148","line":"        @data << d"},
{"lineNum":"  149","line":"      end"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"      def fetch"},
{"lineNum":"  152","line":"        if @initialized"},
{"lineNum":"  153","line":"          {@key, @data}.tap { @initialized = false }"},
{"lineNum":"  154","line":"        end"},
{"lineNum":"  155","line":"      end"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"      def same_as?(key)"},
{"lineNum":"  158","line":"        return false unless @initialized"},
{"lineNum":"  159","line":"        return false if key == Alone || key == Drop"},
{"lineNum":"  160","line":"        @key == key"},
{"lineNum":"  161","line":"      end"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"      def reset"},
{"lineNum":"  164","line":"        @initialized = false"},
{"lineNum":"  165","line":"        @data.clear"},
{"lineNum":"  166","line":"      end"},
{"lineNum":"  167","line":"    end"},
{"lineNum":"  168","line":"  end"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"  private def chunks_internal(original_block : T -> U) forall U"},
{"lineNum":"  171","line":"    acc = Chunk::Accumulator(T, U).new"},
{"lineNum":"  172","line":"    each do |val|"},
{"lineNum":"  173","line":"      key = original_block.call(val)"},
{"lineNum":"  174","line":"      if acc.same_as?(key)"},
{"lineNum":"  175","line":"        acc.add(val)"},
{"lineNum":"  176","line":"      else"},
{"lineNum":"  177","line":"        if tuple = acc.fetch"},
{"lineNum":"  178","line":"          yield(*tuple)"},
{"lineNum":"  179","line":"        end"},
{"lineNum":"  180","line":"        acc.init(key, val)"},
{"lineNum":"  181","line":"      end"},
{"lineNum":"  182","line":"    end"},
{"lineNum":"  183","line":"","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  184","line":"    if tuple = acc.fetch"},
{"lineNum":"  185","line":"      yield(*tuple)"},
{"lineNum":"  186","line":"    end"},
{"lineNum":"  187","line":"  end"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  # Returns an `Array` with the results of running the block against each element"},
{"lineNum":"  190","line":"  # of the collection, removing `nil` values."},
{"lineNum":"  191","line":"  #"},
{"lineNum":"  192","line":"  # ```"},
{"lineNum":"  193","line":"  # [\"Alice\", \"Bob\"].map { |name| name.match(/^A./) }         # => [#<Regex::MatchData \"Al\">, nil]"},
{"lineNum":"  194","line":"  # [\"Alice\", \"Bob\"].compact_map { |name| name.match(/^A./) } # => [#<Regex::MatchData \"Al\">]"},
{"lineNum":"  195","line":"  # ```"},
{"lineNum":"  196","line":"  def compact_map"},
{"lineNum":"  197","line":"    ary = [] of typeof((yield first).not_nil!)"},
{"lineNum":"  198","line":"    each do |e|"},
{"lineNum":"  199","line":"      v = yield e"},
{"lineNum":"  200","line":"      unless v.is_a?(Nil)"},
{"lineNum":"  201","line":"        ary << v"},
{"lineNum":"  202","line":"      end"},
{"lineNum":"  203","line":"    end"},
{"lineNum":"  204","line":"    ary"},
{"lineNum":"  205","line":"  end"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"  # Returns the number of elements in the collection for which"},
{"lineNum":"  208","line":"  # the passed block returns `true`."},
{"lineNum":"  209","line":"  #"},
{"lineNum":"  210","line":"  # ```"},
{"lineNum":"  211","line":"  # [1, 2, 3, 4].count { |i| i % 2 == 0 } # => 2"},
{"lineNum":"  212","line":"  # ```"},
{"lineNum":"  213","line":"  def count"},
{"lineNum":"  214","line":"    count = 0"},
{"lineNum":"  215","line":"    each { |e| count += 1 if yield e }"},
{"lineNum":"  216","line":"    count"},
{"lineNum":"  217","line":"  end"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"  # Returns the number of times that the passed item is present in the collection."},
{"lineNum":"  220","line":"  #"},
{"lineNum":"  221","line":"  # ```"},
{"lineNum":"  222","line":"  # [1, 2, 3, 4].count(3) # => 1"},
{"lineNum":"  223","line":"  # ```"},
{"lineNum":"  224","line":"  def count(item)"},
{"lineNum":"  225","line":"    count { |e| e == item }"},
{"lineNum":"  226","line":"  end"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"  # Calls the given block for each element in this enumerable forever."},
{"lineNum":"  229","line":"  def cycle"},
{"lineNum":"  230","line":"    loop { each { |x| yield x } }"},
{"lineNum":"  231","line":"  end"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"  # Calls the given block for each element in this enumerable *n* times."},
{"lineNum":"  234","line":"  def cycle(n)"},
{"lineNum":"  235","line":"    n.times { each { |x| yield x } }"},
{"lineNum":"  236","line":"  end"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"  # Iterates over the collection yielding chunks of size *count*,"},
{"lineNum":"  239","line":"  # but advancing one by one."},
{"lineNum":"  240","line":"  #"},
{"lineNum":"  241","line":"  # ```"},
{"lineNum":"  242","line":"  # [1, 2, 3, 4, 5].each_cons(2) do |cons|"},
{"lineNum":"  243","line":"  #   puts cons"},
{"lineNum":"  244","line":"  # end"},
{"lineNum":"  245","line":"  # ```"},
{"lineNum":"  246","line":"  #"},
{"lineNum":"  247","line":"  # Prints:"},
{"lineNum":"  248","line":"  #"},
{"lineNum":"  249","line":"  # ```text"},
{"lineNum":"  250","line":"  # [1, 2]"},
{"lineNum":"  251","line":"  # [2, 3]"},
{"lineNum":"  252","line":"  # [3, 4]"},
{"lineNum":"  253","line":"  # [4, 5]"},
{"lineNum":"  254","line":"  # ```"},
{"lineNum":"  255","line":"  #"},
{"lineNum":"  256","line":"  # By default, a new array is created and yielded for each consecutive slice of elements."},
{"lineNum":"  257","line":"  # * If *reuse* is given, the array can be reused"},
{"lineNum":"  258","line":"  # * If *reuse* is an `Array`, this array will be reused"},
{"lineNum":"  259","line":"  # * If *reuse* is truthy, the method will create a new array and reuse it."},
{"lineNum":"  260","line":"  #"},
{"lineNum":"  261","line":"  # This can be used to prevent many memory allocations when each slice of"},
{"lineNum":"  262","line":"  # interest is to be used in a read-only fashion."},
{"lineNum":"  263","line":"  def each_cons(count : Int, reuse = false)"},
{"lineNum":"  264","line":"    if reuse"},
{"lineNum":"  265","line":"      unless reuse.is_a?(Array)"},
{"lineNum":"  266","line":"        reuse = Array(T).new(count)"},
{"lineNum":"  267","line":"      end"},
{"lineNum":"  268","line":"      cons = reuse"},
{"lineNum":"  269","line":"    else"},
{"lineNum":"  270","line":"      cons = Array(T).new(count)"},
{"lineNum":"  271","line":"      reuse = nil"},
{"lineNum":"  272","line":"    end"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    each do |elem|"},
{"lineNum":"  275","line":"      cons << elem"},
{"lineNum":"  276","line":"      cons.shift if cons.size > count"},
{"lineNum":"  277","line":"      if cons.size == count"},
{"lineNum":"  278","line":"        if reuse"},
{"lineNum":"  279","line":"          yield cons"},
{"lineNum":"  280","line":"        else"},
{"lineNum":"  281","line":"          yield cons.dup"},
{"lineNum":"  282","line":"        end"},
{"lineNum":"  283","line":"      end"},
{"lineNum":"  284","line":"    end"},
{"lineNum":"  285","line":"    nil"},
{"lineNum":"  286","line":"  end"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"  # Iterates over the collection in slices of size *count*,"},
{"lineNum":"  289","line":"  # and runs the block for each of those."},
{"lineNum":"  290","line":"  #"},
{"lineNum":"  291","line":"  # ```"},
{"lineNum":"  292","line":"  # [1, 2, 3, 4, 5].each_slice(2) do |slice|"},
{"lineNum":"  293","line":"  #   puts slice"},
{"lineNum":"  294","line":"  # end"},
{"lineNum":"  295","line":"  # ```"},
{"lineNum":"  296","line":"  #"},
{"lineNum":"  297","line":"  # Prints:"},
{"lineNum":"  298","line":"  #"},
{"lineNum":"  299","line":"  # ```text"},
{"lineNum":"  300","line":"  # [1, 2]"},
{"lineNum":"  301","line":"  # [3, 4]"},
{"lineNum":"  302","line":"  # [5]"},
{"lineNum":"  303","line":"  # ```"},
{"lineNum":"  304","line":"  #"},
{"lineNum":"  305","line":"  # Note that the last one can be smaller."},
{"lineNum":"  306","line":"  #"},
{"lineNum":"  307","line":"  # By default, a new array is created and yielded for each slice."},
{"lineNum":"  308","line":"  # * If *reuse* is given, the array can be reused"},
{"lineNum":"  309","line":"  # * If *reuse* is an `Array`, this array will be reused"},
{"lineNum":"  310","line":"  # * If *reuse* is truthy, the method will create a new array and reuse it."},
{"lineNum":"  311","line":"  #"},
{"lineNum":"  312","line":"  # This can be used to prevent many memory allocations when each slice of"},
{"lineNum":"  313","line":"  # interest is to be used in a read-only fashion."},
{"lineNum":"  314","line":"  def each_slice(count : Int, reuse = false)"},
{"lineNum":"  315","line":"    each_slice_internal(count, Array(T), reuse) { |slice| yield slice }"},
{"lineNum":"  316","line":"  end"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"  private def each_slice_internal(count : Int, type, reuse)"},
{"lineNum":"  319","line":"    if reuse"},
{"lineNum":"  320","line":"      unless reuse.is_a?(Array)"},
{"lineNum":"  321","line":"        reuse = type.new(count)"},
{"lineNum":"  322","line":"      end"},
{"lineNum":"  323","line":"      reuse.clear"},
{"lineNum":"  324","line":"      slice = reuse"},
{"lineNum":"  325","line":"    else"},
{"lineNum":"  326","line":"      slice = type.new(count)"},
{"lineNum":"  327","line":"    end"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    each do |elem|"},
{"lineNum":"  330","line":"      slice << elem"},
{"lineNum":"  331","line":"      if slice.size == count"},
{"lineNum":"  332","line":"        yield slice"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"        if reuse"},
{"lineNum":"  335","line":"          slice.clear"},
{"lineNum":"  336","line":"        else"},
{"lineNum":"  337","line":"          slice = type.new(count)"},
{"lineNum":"  338","line":"        end"},
{"lineNum":"  339","line":"      end"},
{"lineNum":"  340","line":"    end"},
{"lineNum":"  341","line":"    yield slice unless slice.empty?"},
{"lineNum":"  342","line":"    nil"},
{"lineNum":"  343","line":"  end"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"  # Iterates over the collection, yielding both the elements and their index."},
{"lineNum":"  346","line":"  #"},
{"lineNum":"  347","line":"  # ```"},
{"lineNum":"  348","line":"  # [\"Alice\", \"Bob\"].each_with_index do |user, i|"},
{"lineNum":"  349","line":"  #   puts \"User ##{i}: #{user}\""},
{"lineNum":"  350","line":"  # end"},
{"lineNum":"  351","line":"  # ```"},
{"lineNum":"  352","line":"  #"},
{"lineNum":"  353","line":"  # Prints:"},
{"lineNum":"  354","line":"  #"},
{"lineNum":"  355","line":"  # ```text"},
{"lineNum":"  356","line":"  # User # 0: Alice"},
{"lineNum":"  357","line":"  # User # 1: Bob"},
{"lineNum":"  358","line":"  # ```"},
{"lineNum":"  359","line":"  #"},
{"lineNum":"  360","line":"  # Accepts an optional *offset* parameter, which tells it to start counting"},
{"lineNum":"  361","line":"  # from there. So, a more human friendly version of the previous snippet would be:"},
{"lineNum":"  362","line":"  #"},
{"lineNum":"  363","line":"  # ```"},
{"lineNum":"  364","line":"  # [\"Alice\", \"Bob\"].each_with_index(1) do |user, i|"},
{"lineNum":"  365","line":"  #   puts \"User ##{i}: #{user}\""},
{"lineNum":"  366","line":"  # end"},
{"lineNum":"  367","line":"  # ```"},
{"lineNum":"  368","line":"  #"},
{"lineNum":"  369","line":"  # Which would print:"},
{"lineNum":"  370","line":"  #"},
{"lineNum":"  371","line":"  # ```text"},
{"lineNum":"  372","line":"  # User # 1: Alice"},
{"lineNum":"  373","line":"  # User # 2: Bob"},
{"lineNum":"  374","line":"  # ```"},
{"lineNum":"  375","line":"  def each_with_index(offset = 0)"},
{"lineNum":"  376","line":"    i = offset"},
{"lineNum":"  377","line":"    each do |elem|"},
{"lineNum":"  378","line":"      yield elem, i"},
{"lineNum":"  379","line":"      i += 1","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  380","line":"    end"},
{"lineNum":"  381","line":"  end"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"  # Iterates over the collection, passing each element and the initial object *obj*."},
{"lineNum":"  384","line":"  # Returns that object."},
{"lineNum":"  385","line":"  #"},
{"lineNum":"  386","line":"  # ```"},
{"lineNum":"  387","line":"  # hash = [\"Alice\", \"Bob\"].each_with_object({} of String => Int32) do |user, sizes|"},
{"lineNum":"  388","line":"  #   sizes[user] = user.size"},
{"lineNum":"  389","line":"  # end"},
{"lineNum":"  390","line":"  # hash # => {\"Alice\" => 5, \"Bob\" => 3}"},
{"lineNum":"  391","line":"  # ```"},
{"lineNum":"  392","line":"  def each_with_object(obj)"},
{"lineNum":"  393","line":"    each do |elem|"},
{"lineNum":"  394","line":"      yield elem, obj"},
{"lineNum":"  395","line":"    end"},
{"lineNum":"  396","line":"    obj"},
{"lineNum":"  397","line":"  end"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"  # Returns the first element in the collection for which the passed block is `true`."},
{"lineNum":"  400","line":"  #"},
{"lineNum":"  401","line":"  # Accepts an optional parameter *if_none*, to set what gets returned if"},
{"lineNum":"  402","line":"  # no element is found (defaults to `nil`)."},
{"lineNum":"  403","line":"  #"},
{"lineNum":"  404","line":"  # ```"},
{"lineNum":"  405","line":"  # [1, 2, 3, 4].find { |i| i > 2 }     # => 3"},
{"lineNum":"  406","line":"  # [1, 2, 3, 4].find { |i| i > 8 }     # => nil"},
{"lineNum":"  407","line":"  # [1, 2, 3, 4].find(-1) { |i| i > 8 } # => -1"},
{"lineNum":"  408","line":"  # ```"},
{"lineNum":"  409","line":"  def find(if_none = nil)"},
{"lineNum":"  410","line":"    each do |elem|"},
{"lineNum":"  411","line":"      return elem if yield elem"},
{"lineNum":"  412","line":"    end"},
{"lineNum":"  413","line":"    if_none"},
{"lineNum":"  414","line":"  end"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"  # Returns the first element in the collection. Raises `Enumerable::EmptyError`"},
{"lineNum":"  417","line":"  # if the collection is empty."},
{"lineNum":"  418","line":"  def first"},
{"lineNum":"  419","line":"    each { |e| return e }"},
{"lineNum":"  420","line":"    raise Enumerable::EmptyError.new"},
{"lineNum":"  421","line":"  end"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"  # Returns the first element in the collection."},
{"lineNum":"  424","line":"  # When the collection is empty, returns `nil`."},
{"lineNum":"  425","line":"  def first?"},
{"lineNum":"  426","line":"    each { |e| return e }"},
{"lineNum":"  427","line":"    nil"},
{"lineNum":"  428","line":"  end"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"  # Returns a new array with the concatenated results of running the block"},
{"lineNum":"  431","line":"  # (which is expected to return arrays) once for every element in the collection."},
{"lineNum":"  432","line":"  #"},
{"lineNum":"  433","line":"  # ```"},
{"lineNum":"  434","line":"  # array = [\"Alice\", \"Bob\"].flat_map do |user|"},
{"lineNum":"  435","line":"  #   user.chars"},
{"lineNum":"  436","line":"  # end"},
{"lineNum":"  437","line":"  # array # => [\'A\', \'l\', \'i\', \'c\', \'e\', \'B\', \'o\', \'b\']"},
{"lineNum":"  438","line":"  # ```"},
{"lineNum":"  439","line":"  def flat_map(&block : T -> Array(U) | Iterator(U) | U) forall U"},
{"lineNum":"  440","line":"    ary = [] of U"},
{"lineNum":"  441","line":"    each do |e|"},
{"lineNum":"  442","line":"      case v = yield e"},
{"lineNum":"  443","line":"      when Array, Iterator"},
{"lineNum":"  444","line":"        ary.concat(v)"},
{"lineNum":"  445","line":"      else"},
{"lineNum":"  446","line":"        ary.push(v)"},
{"lineNum":"  447","line":"      end"},
{"lineNum":"  448","line":"    end"},
{"lineNum":"  449","line":"    ary"},
{"lineNum":"  450","line":"  end"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"  # Returns an `Array` with all the elements in the collection that"},
{"lineNum":"  453","line":"  # match the `RegExp` *pattern*."},
{"lineNum":"  454","line":"  #"},
{"lineNum":"  455","line":"  # ```"},
{"lineNum":"  456","line":"  # [\"Alice\", \"Bob\"].grep(/^A/) # => [\"Alice\"]"},
{"lineNum":"  457","line":"  # ```"},
{"lineNum":"  458","line":"  def grep(pattern)"},
{"lineNum":"  459","line":"    self.select { |elem| pattern === elem }"},
{"lineNum":"  460","line":"  end"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"  # Returns a `Hash` whose keys are each different value that the passed block"},
{"lineNum":"  463","line":"  # returned when run for each element in the collection, and which values are"},
{"lineNum":"  464","line":"  # an `Array` of the elements for which the block returned that value."},
{"lineNum":"  465","line":"  #"},
{"lineNum":"  466","line":"  # ```"},
{"lineNum":"  467","line":"  # [\"Alice\", \"Bob\", \"Ary\"].group_by { |name| name.size } # => {5 => [\"Alice\"], 3 => [\"Bob\", \"Ary\"]}"},
{"lineNum":"  468","line":"  # ```"},
{"lineNum":"  469","line":"  def group_by(&block : T -> U) forall U"},
{"lineNum":"  470","line":"    h = Hash(U, Array(T)).new"},
{"lineNum":"  471","line":"    each do |e|"},
{"lineNum":"  472","line":"      v = yield e"},
{"lineNum":"  473","line":"      if h.has_key?(v)"},
{"lineNum":"  474","line":"        h[v].push(e)"},
{"lineNum":"  475","line":"      else"},
{"lineNum":"  476","line":"        h[v] = [e]"},
{"lineNum":"  477","line":"      end"},
{"lineNum":"  478","line":"    end"},
{"lineNum":"  479","line":"    h"},
{"lineNum":"  480","line":"  end"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"  # Returns an `Array` with chunks in the given size, eventually filled up"},
{"lineNum":"  483","line":"  # with given value or `nil`."},
{"lineNum":"  484","line":"  #"},
{"lineNum":"  485","line":"  # ```"},
{"lineNum":"  486","line":"  # [1, 2, 3].in_groups_of(2, 0) # => [[1, 2], [3, 0]]"},
{"lineNum":"  487","line":"  # [1, 2, 3].in_groups_of(2)    # => [[1, 2], [3, nil]]"},
{"lineNum":"  488","line":"  # ```"},
{"lineNum":"  489","line":"  def in_groups_of(size : Int, filled_up_with : U = nil) forall U"},
{"lineNum":"  490","line":"    raise ArgumentError.new(\"Size must be positive\") if size <= 0"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    ary = Array(Array(T | U)).new"},
{"lineNum":"  493","line":"    in_groups_of(size, filled_up_with) do |group|"},
{"lineNum":"  494","line":"      ary << group"},
{"lineNum":"  495","line":"    end"},
{"lineNum":"  496","line":"    ary"},
{"lineNum":"  497","line":"  end"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"  # Yields a block with the chunks in the given size."},
{"lineNum":"  500","line":"  #"},
{"lineNum":"  501","line":"  # ```"},
{"lineNum":"  502","line":"  # [1, 2, 4].in_groups_of(2, 0) { |e| p e.sum }"},
{"lineNum":"  503","line":"  # # => 3"},
{"lineNum":"  504","line":"  # # => 4"},
{"lineNum":"  505","line":"  # ```"},
{"lineNum":"  506","line":"  #"},
{"lineNum":"  507","line":"  # By default, a new array is created and yielded for each group."},
{"lineNum":"  508","line":"  # * If *reuse* is given, the array can be reused"},
{"lineNum":"  509","line":"  # * If *reuse* is an `Array`, this array will be reused"},
{"lineNum":"  510","line":"  # * If *reuse* is truthy, the method will create a new array and reuse it."},
{"lineNum":"  511","line":"  #"},
{"lineNum":"  512","line":"  # This can be used to prevent many memory allocations when each slice of"},
{"lineNum":"  513","line":"  # interest is to be used in a read-only fashion."},
{"lineNum":"  514","line":"  def in_groups_of(size : Int, filled_up_with : U = nil, reuse = false, &block) forall U"},
{"lineNum":"  515","line":"    raise ArgumentError.new(\"Size must be positive\") if size <= 0"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"    each_slice_internal(size, Array(T | U), reuse) do |slice|"},
{"lineNum":"  518","line":"      (size - slice.size).times { slice << filled_up_with }"},
{"lineNum":"  519","line":"      yield slice"},
{"lineNum":"  520","line":"    end"},
{"lineNum":"  521","line":"  end"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"  # Returns `true` if the collection contains *obj*, `false` otherwise."},
{"lineNum":"  524","line":"  #"},
{"lineNum":"  525","line":"  # ```"},
{"lineNum":"  526","line":"  # [1, 2, 3].includes?(2) # => true"},
{"lineNum":"  527","line":"  # [1, 2, 3].includes?(5) # => false"},
{"lineNum":"  528","line":"  # ```"},
{"lineNum":"  529","line":"  def includes?(obj)"},
{"lineNum":"  530","line":"    any? { |e| e == obj }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  531","line":"  end"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"  # Returns the index of the first element for which the passed block returns `true`."},
{"lineNum":"  534","line":"  #"},
{"lineNum":"  535","line":"  # ```"},
{"lineNum":"  536","line":"  # [\"Alice\", \"Bob\"].index { |name| name.size < 4 } # => 1 (Bob\'s index)"},
{"lineNum":"  537","line":"  # ```"},
{"lineNum":"  538","line":"  #"},
{"lineNum":"  539","line":"  # Returns `nil` if the block didn\'t return `true` for any element."},
{"lineNum":"  540","line":"  def index"},
{"lineNum":"  541","line":"    each_with_index do |e, i|"},
{"lineNum":"  542","line":"      return i if yield e"},
{"lineNum":"  543","line":"    end"},
{"lineNum":"  544","line":"    nil"},
{"lineNum":"  545","line":"  end"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"  # Returns the index of the object *obj* in the collection."},
{"lineNum":"  548","line":"  #"},
{"lineNum":"  549","line":"  # ```"},
{"lineNum":"  550","line":"  # [\"Alice\", \"Bob\"].index(\"Alice\") # => 0"},
{"lineNum":"  551","line":"  # ```"},
{"lineNum":"  552","line":"  #"},
{"lineNum":"  553","line":"  # Returns `nil` if *obj* is not in the collection."},
{"lineNum":"  554","line":"  def index(obj)"},
{"lineNum":"  555","line":"    index { |e| e == obj }"},
{"lineNum":"  556","line":"  end"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"  # Converts an `Enumerable` to a `Hash` by using the value returned by the block"},
{"lineNum":"  559","line":"  # as the hash key."},
{"lineNum":"  560","line":"  # Be aware, if two elements return the same value as a key one will override"},
{"lineNum":"  561","line":"  # the other. If you want to keep all values, then you should probably use"},
{"lineNum":"  562","line":"  # `group_by` instead."},
{"lineNum":"  563","line":"  #"},
{"lineNum":"  564","line":"  # ```"},
{"lineNum":"  565","line":"  # [\"Anna\", \"Ary\", \"Alice\"].index_by { |e| e.size }"},
{"lineNum":"  566","line":"  # # => {4 => \"Anna\", 3 => \"Ary\", 5 => \"Alice\"}"},
{"lineNum":"  567","line":"  # [\"Anna\", \"Ary\", \"Alice\", \"Bob\"].index_by { |e| e.size }"},
{"lineNum":"  568","line":"  # # => {4 => \"Anna\", 3 => \"Bob\", 5 => \"Alice\"}"},
{"lineNum":"  569","line":"  # ```"},
{"lineNum":"  570","line":"  def index_by(&block : T -> U) forall U"},
{"lineNum":"  571","line":"    hash = {} of U => T"},
{"lineNum":"  572","line":"    each do |elem|"},
{"lineNum":"  573","line":"      hash[yield elem] = elem"},
{"lineNum":"  574","line":"    end"},
{"lineNum":"  575","line":"    hash"},
{"lineNum":"  576","line":"  end"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"  # Combines all elements in the collection by applying a binary operation, specified by a block, so as"},
{"lineNum":"  579","line":"  # to reduce them to a single value."},
{"lineNum":"  580","line":"  #"},
{"lineNum":"  581","line":"  # For each element in the collection the block is passed an accumulator value (*memo*) and the element. The"},
{"lineNum":"  582","line":"  # result becomes the new value for *memo*. At the end of the iteration, the final value of *memo* is"},
{"lineNum":"  583","line":"  # the return value for the method. The initial value for the accumulator is the first element in the collection."},
{"lineNum":"  584","line":"  #"},
{"lineNum":"  585","line":"  # ```"},
{"lineNum":"  586","line":"  # [1, 2, 3, 4, 5].reduce { |acc, i| acc + i } # => 15"},
{"lineNum":"  587","line":"  # ```"},
{"lineNum":"  588","line":"  def reduce"},
{"lineNum":"  589","line":"    memo = uninitialized T"},
{"lineNum":"  590","line":"    found = false"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    each do |elem|"},
{"lineNum":"  593","line":"      memo = found ? (yield memo, elem) : elem"},
{"lineNum":"  594","line":"      found = true"},
{"lineNum":"  595","line":"    end"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"    found ? memo : raise Enumerable::EmptyError.new"},
{"lineNum":"  598","line":"  end"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"  # Just like the other variant, but you can set the initial value of the accumulator."},
{"lineNum":"  601","line":"  #"},
{"lineNum":"  602","line":"  # ```"},
{"lineNum":"  603","line":"  # [1, 2, 3, 4, 5].reduce(10) { |acc, i| acc + i } # => 25"},
{"lineNum":"  604","line":"  # ```"},
{"lineNum":"  605","line":"  def reduce(memo)"},
{"lineNum":"  606","line":"    each do |elem|"},
{"lineNum":"  607","line":"      memo = yield memo, elem"},
{"lineNum":"  608","line":"    end"},
{"lineNum":"  609","line":"    memo"},
{"lineNum":"  610","line":"  end"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"  # Returns a `String` created by concatenating the elements in the collection,"},
{"lineNum":"  613","line":"  # separated by *separator* (defaults to none)."},
{"lineNum":"  614","line":"  #"},
{"lineNum":"  615","line":"  # ```"},
{"lineNum":"  616","line":"  # [1, 2, 3, 4, 5].join(\", \") # => \"1, 2, 3, 4, 5\""},
{"lineNum":"  617","line":"  # ```"},
{"lineNum":"  618","line":"  def join(separator = \"\")"},
{"lineNum":"  619","line":"    String.build do |io|"},
{"lineNum":"  620","line":"      join separator, io"},
{"lineNum":"  621","line":"    end"},
{"lineNum":"  622","line":"  end"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"  # Returns a `String` created by concatenating the results of passing the elements"},
{"lineNum":"  625","line":"  # in the collection to the passed block, separated by *separator* (defaults to none)."},
{"lineNum":"  626","line":"  #"},
{"lineNum":"  627","line":"  # ```"},
{"lineNum":"  628","line":"  # [1, 2, 3, 4, 5].join(\", \") { |i| -i } # => \"-1, -2, -3, -4, -5\""},
{"lineNum":"  629","line":"  # ```"},
{"lineNum":"  630","line":"  def join(separator = \"\")"},
{"lineNum":"  631","line":"    String.build do |io|"},
{"lineNum":"  632","line":"      join(separator, io) do |elem|"},
{"lineNum":"  633","line":"        io << yield elem"},
{"lineNum":"  634","line":"      end"},
{"lineNum":"  635","line":"    end"},
{"lineNum":"  636","line":"  end"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"  # Prints to *io* all the elements in the collection, separated by *separator*."},
{"lineNum":"  639","line":"  #"},
{"lineNum":"  640","line":"  # ```"},
{"lineNum":"  641","line":"  # [1, 2, 3, 4, 5].join(\", \", STDOUT)"},
{"lineNum":"  642","line":"  # ```"},
{"lineNum":"  643","line":"  #"},
{"lineNum":"  644","line":"  # Prints:"},
{"lineNum":"  645","line":"  #"},
{"lineNum":"  646","line":"  # ```text"},
{"lineNum":"  647","line":"  # 1, 2, 3, 4, 5"},
{"lineNum":"  648","line":"  # ```"},
{"lineNum":"  649","line":"  def join(separator, io)"},
{"lineNum":"  650","line":"    join(separator, io) do |elem|"},
{"lineNum":"  651","line":"      elem.to_s(io)"},
{"lineNum":"  652","line":"    end"},
{"lineNum":"  653","line":"  end"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"  # Prints to *io* the concatenation of the elements, with the possibility of"},
{"lineNum":"  656","line":"  # controlling how the printing is done via a block."},
{"lineNum":"  657","line":"  #"},
{"lineNum":"  658","line":"  # ```"},
{"lineNum":"  659","line":"  # [1, 2, 3, 4, 5].join(\", \", STDOUT) { |i, io| io << \"(#{i})\" }"},
{"lineNum":"  660","line":"  # ```"},
{"lineNum":"  661","line":"  #"},
{"lineNum":"  662","line":"  # Prints:"},
{"lineNum":"  663","line":"  #"},
{"lineNum":"  664","line":"  # ```text"},
{"lineNum":"  665","line":"  # (1), (2), (3), (4), (5)"},
{"lineNum":"  666","line":"  # ```"},
{"lineNum":"  667","line":"  def join(separator, io)"},
{"lineNum":"  668","line":"    each_with_index do |elem, i|"},
{"lineNum":"  669","line":"      io << separator if i > 0","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  670","line":"      yield elem, io"},
{"lineNum":"  671","line":"    end"},
{"lineNum":"  672","line":"  end"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"  # Returns an `Array` with the results of running the block against each element of the collection."},
{"lineNum":"  675","line":"  #"},
{"lineNum":"  676","line":"  # ```"},
{"lineNum":"  677","line":"  # [1, 2, 3].map { |i| i * 10 } # => [10, 20, 30]"},
{"lineNum":"  678","line":"  # ```"},
{"lineNum":"  679","line":"  def map(&block : T -> U) forall U"},
{"lineNum":"  680","line":"    ary = [] of U"},
{"lineNum":"  681","line":"    each { |e| ary << yield e }"},
{"lineNum":"  682","line":"    ary"},
{"lineNum":"  683","line":"  end"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"  # Like `map`, but the block gets passed both the element and its index."},
{"lineNum":"  686","line":"  #"},
{"lineNum":"  687","line":"  # ```"},
{"lineNum":"  688","line":"  # [\"Alice\", \"Bob\"].map_with_index { |name, i| \"User ##{i}: #{name}\" }"},
{"lineNum":"  689","line":"  # # => [\"User #0: Alice\", \"User #1: Bob\"]"},
{"lineNum":"  690","line":"  # ```"},
{"lineNum":"  691","line":"  def map_with_index(&block : T, Int32 -> U) forall U"},
{"lineNum":"  692","line":"    ary = [] of U"},
{"lineNum":"  693","line":"    each_with_index { |e, i| ary << yield e, i }"},
{"lineNum":"  694","line":"    ary"},
{"lineNum":"  695","line":"  end"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"  # Returns the element with the maximum value in the collection."},
{"lineNum":"  698","line":"  #"},
{"lineNum":"  699","line":"  # It compares using `>` so it will work for any type that supports that method."},
{"lineNum":"  700","line":"  #"},
{"lineNum":"  701","line":"  # ```"},
{"lineNum":"  702","line":"  # [1, 2, 3].max        # => 3"},
{"lineNum":"  703","line":"  # [\"Alice\", \"Bob\"].max # => \"Bob\""},
{"lineNum":"  704","line":"  # ```"},
{"lineNum":"  705","line":"  #"},
{"lineNum":"  706","line":"  # Raises `Enumerable::EmptyError` if the collection is empty."},
{"lineNum":"  707","line":"  def max"},
{"lineNum":"  708","line":"    max_by &.itself"},
{"lineNum":"  709","line":"  end"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"  # Like `max` but returns `nil` if the collection is empty."},
{"lineNum":"  712","line":"  def max?"},
{"lineNum":"  713","line":"    max_by? &.itself"},
{"lineNum":"  714","line":"  end"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"  # Returns the element for which the passed block returns with the maximum value."},
{"lineNum":"  717","line":"  #"},
{"lineNum":"  718","line":"  # It compares using `>` so the block must return a type that supports that method"},
{"lineNum":"  719","line":"  #"},
{"lineNum":"  720","line":"  # ```"},
{"lineNum":"  721","line":"  # [\"Alice\", \"Bob\"].max_by { |name| name.size } # => \"Alice\""},
{"lineNum":"  722","line":"  # ```"},
{"lineNum":"  723","line":"  #"},
{"lineNum":"  724","line":"  # Raises `Enumerable::EmptyError` if the collection is empty."},
{"lineNum":"  725","line":"  def max_by(&block : T -> U) forall U"},
{"lineNum":"  726","line":"    found, value = max_by_internal { |value| yield value }"},
{"lineNum":"  727","line":"    raise Enumerable::EmptyError.new unless found"},
{"lineNum":"  728","line":"    value"},
{"lineNum":"  729","line":"  end"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"  # Like `max_by` but returns `nil` if the collection is empty."},
{"lineNum":"  732","line":"  def max_by?(&block : T -> U) forall U"},
{"lineNum":"  733","line":"    found, value = max_by_internal { |value| yield value }"},
{"lineNum":"  734","line":"    found ? value : nil"},
{"lineNum":"  735","line":"  end"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"  private def max_by_internal(&block : T -> U) forall U"},
{"lineNum":"  738","line":"    max = uninitialized U"},
{"lineNum":"  739","line":"    obj = uninitialized T"},
{"lineNum":"  740","line":"    found = false"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"    each_with_index do |elem, i|"},
{"lineNum":"  743","line":"      value = yield elem"},
{"lineNum":"  744","line":"      if i == 0 || value > max"},
{"lineNum":"  745","line":"        max = value"},
{"lineNum":"  746","line":"        obj = elem"},
{"lineNum":"  747","line":"      end"},
{"lineNum":"  748","line":"      found = true"},
{"lineNum":"  749","line":"    end"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"    {found, obj}"},
{"lineNum":"  752","line":"  end"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"  # Like `max_by` but instead of the element, returns the value returned by the block."},
{"lineNum":"  755","line":"  #"},
{"lineNum":"  756","line":"  # ```"},
{"lineNum":"  757","line":"  # [\"Alice\", \"Bob\"].max_of { |name| name.size } # => 5 (Alice\'s size)"},
{"lineNum":"  758","line":"  # ```"},
{"lineNum":"  759","line":"  def max_of(&block : T -> U) forall U"},
{"lineNum":"  760","line":"    found, value = max_of_internal { |value| yield value }"},
{"lineNum":"  761","line":"    raise Enumerable::EmptyError.new unless found"},
{"lineNum":"  762","line":"    value"},
{"lineNum":"  763","line":"  end"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"  # Like `max_of` but returns `nil` if the collection is empty."},
{"lineNum":"  766","line":"  def max_of?(&block : T -> U) forall U"},
{"lineNum":"  767","line":"    found, value = max_of_internal { |value| yield value }"},
{"lineNum":"  768","line":"    found ? value : nil"},
{"lineNum":"  769","line":"  end"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"  private def max_of_internal(&block : T -> U) forall U"},
{"lineNum":"  772","line":"    max = uninitialized U"},
{"lineNum":"  773","line":"    found = false"},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"    each_with_index do |elem, i|"},
{"lineNum":"  776","line":"      value = yield elem"},
{"lineNum":"  777","line":"      if i == 0 || value > max"},
{"lineNum":"  778","line":"        max = value"},
{"lineNum":"  779","line":"      end"},
{"lineNum":"  780","line":"      found = true"},
{"lineNum":"  781","line":"    end"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"    {found, max}"},
{"lineNum":"  784","line":"  end"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"  # Returns the element with the minimum value in the collection."},
{"lineNum":"  787","line":"  #"},
{"lineNum":"  788","line":"  # It compares using `<` so it will work for any type that supports that method."},
{"lineNum":"  789","line":"  #"},
{"lineNum":"  790","line":"  # ```"},
{"lineNum":"  791","line":"  # [1, 2, 3].min        # => 1"},
{"lineNum":"  792","line":"  # [\"Alice\", \"Bob\"].min # => \"Alice\""},
{"lineNum":"  793","line":"  # ```"},
{"lineNum":"  794","line":"  #"},
{"lineNum":"  795","line":"  # Raises `Enumerable::EmptyError` if the collection is empty."},
{"lineNum":"  796","line":"  def min"},
{"lineNum":"  797","line":"    min_by &.itself"},
{"lineNum":"  798","line":"  end"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"  # Like `min` but returns `nil` if the collection is empty."},
{"lineNum":"  801","line":"  def min?"},
{"lineNum":"  802","line":"    min_by? &.itself"},
{"lineNum":"  803","line":"  end"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"  # Returns the element for which the passed block returns with the minimum value."},
{"lineNum":"  806","line":"  #"},
{"lineNum":"  807","line":"  # It compares using `<` so the block must return a type that supports that method"},
{"lineNum":"  808","line":"  #"},
{"lineNum":"  809","line":"  # ```"},
{"lineNum":"  810","line":"  # [\"Alice\", \"Bob\"].min_by { |name| name.size } # => \"Bob\""},
{"lineNum":"  811","line":"  # ```"},
{"lineNum":"  812","line":"  #"},
{"lineNum":"  813","line":"  # Raises `Enumerable::EmptyError` if the collection is empty."},
{"lineNum":"  814","line":"  def min_by(&block : T -> U) forall U"},
{"lineNum":"  815","line":"    found, value = min_by_internal { |value| yield value }"},
{"lineNum":"  816","line":"    raise Enumerable::EmptyError.new unless found"},
{"lineNum":"  817","line":"    value"},
{"lineNum":"  818","line":"  end"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"  # Like `min_by` but returns `nil` if the collection is empty."},
{"lineNum":"  821","line":"  def min_by?(&block : T -> U) forall U"},
{"lineNum":"  822","line":"    found, value = min_by_internal { |value| yield value }"},
{"lineNum":"  823","line":"    found ? value : nil"},
{"lineNum":"  824","line":"  end"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"  private def min_by_internal(&block : T -> U) forall U"},
{"lineNum":"  827","line":"    min = uninitialized U"},
{"lineNum":"  828","line":"    obj = uninitialized T"},
{"lineNum":"  829","line":"    found = false"},
{"lineNum":"  830","line":""},
{"lineNum":"  831","line":"    each_with_index do |elem, i|"},
{"lineNum":"  832","line":"      value = yield elem"},
{"lineNum":"  833","line":"      if i == 0 || value < min"},
{"lineNum":"  834","line":"        min = value"},
{"lineNum":"  835","line":"        obj = elem"},
{"lineNum":"  836","line":"      end"},
{"lineNum":"  837","line":"      found = true"},
{"lineNum":"  838","line":"    end"},
{"lineNum":"  839","line":""},
{"lineNum":"  840","line":"    {found, obj}"},
{"lineNum":"  841","line":"  end"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"  # Like `min_by` but instead of the element, returns the value returned by the block."},
{"lineNum":"  844","line":"  #"},
{"lineNum":"  845","line":"  # ```"},
{"lineNum":"  846","line":"  # [\"Alice\", \"Bob\"].min_of { |name| name.size } # => 3 (Bob\'s size)"},
{"lineNum":"  847","line":"  # ```"},
{"lineNum":"  848","line":"  def min_of(&block : T -> U) forall U"},
{"lineNum":"  849","line":"    found, value = min_of_internal { |value| yield value }"},
{"lineNum":"  850","line":"    raise Enumerable::EmptyError.new unless found"},
{"lineNum":"  851","line":"    value"},
{"lineNum":"  852","line":"  end"},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":"  # Like `min_of` but returns `nil` if the collection is empty."},
{"lineNum":"  855","line":"  def min_of?(&block : T -> U) forall U"},
{"lineNum":"  856","line":"    found, value = min_of_internal { |value| yield value }"},
{"lineNum":"  857","line":"    found ? value : nil"},
{"lineNum":"  858","line":"  end"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"  private def min_of_internal(&block : T -> U) forall U"},
{"lineNum":"  861","line":"    min = uninitialized U"},
{"lineNum":"  862","line":"    found = false"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"    each_with_index do |elem, i|"},
{"lineNum":"  865","line":"      value = yield elem"},
{"lineNum":"  866","line":"      if i == 0 || value < min"},
{"lineNum":"  867","line":"        min = value"},
{"lineNum":"  868","line":"      end"},
{"lineNum":"  869","line":"      found = true"},
{"lineNum":"  870","line":"    end"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"    {found, min}"},
{"lineNum":"  873","line":"  end"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"  # Returns a `Tuple` with both the minimum and maximum value."},
{"lineNum":"  876","line":"  #"},
{"lineNum":"  877","line":"  # ```"},
{"lineNum":"  878","line":"  # [1, 2, 3].minmax # => {1, 3}"},
{"lineNum":"  879","line":"  # ```"},
{"lineNum":"  880","line":"  #"},
{"lineNum":"  881","line":"  # Raises `Enumerable::EmptyError` if the collection is empty."},
{"lineNum":"  882","line":"  def minmax"},
{"lineNum":"  883","line":"    minmax_by &.itself"},
{"lineNum":"  884","line":"  end"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"  # Like `minmax` but returns `{nil, nil}` if the collection is empty."},
{"lineNum":"  887","line":"  def minmax?"},
{"lineNum":"  888","line":"    minmax_by? &.itself"},
{"lineNum":"  889","line":"  end"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"  # Returns a `Tuple` with both the minimum and maximum values according to the passed block."},
{"lineNum":"  892","line":"  #"},
{"lineNum":"  893","line":"  # ```"},
{"lineNum":"  894","line":"  # [\"Alice\", \"Bob\", \"Carl\"].minmax_by { |name| name.size } # => {\"Bob\", \"Alice\"}"},
{"lineNum":"  895","line":"  # ```"},
{"lineNum":"  896","line":"  #"},
{"lineNum":"  897","line":"  # Raises `Enumerable::EmptyError` if the collection is empty."},
{"lineNum":"  898","line":"  def minmax_by(&block : T -> U) forall U"},
{"lineNum":"  899","line":"    found, value = minmax_by_internal { |value| yield value }"},
{"lineNum":"  900","line":"    raise Enumerable::EmptyError.new unless found"},
{"lineNum":"  901","line":"    value"},
{"lineNum":"  902","line":"  end"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"  # Like `minmax_by` but returns `{nil, nil}` if the collection is empty."},
{"lineNum":"  905","line":"  def minmax_by?(&block : T -> U) forall U"},
{"lineNum":"  906","line":"    found, value = minmax_by_internal { |value| yield value }"},
{"lineNum":"  907","line":"    found ? value : {nil, nil}"},
{"lineNum":"  908","line":"  end"},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"  private def minmax_by_internal(&block : T -> U) forall U"},
{"lineNum":"  911","line":"    min = uninitialized U"},
{"lineNum":"  912","line":"    max = uninitialized U"},
{"lineNum":"  913","line":"    objmin = uninitialized T"},
{"lineNum":"  914","line":"    objmax = uninitialized T"},
{"lineNum":"  915","line":"    found = false"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"    each_with_index do |elem, i|"},
{"lineNum":"  918","line":"      value = yield elem"},
{"lineNum":"  919","line":"      if i == 0 || value < min"},
{"lineNum":"  920","line":"        min = value"},
{"lineNum":"  921","line":"        objmin = elem"},
{"lineNum":"  922","line":"      end"},
{"lineNum":"  923","line":"      if i == 0 || value > max"},
{"lineNum":"  924","line":"        max = value"},
{"lineNum":"  925","line":"        objmax = elem"},
{"lineNum":"  926","line":"      end"},
{"lineNum":"  927","line":"      found = true"},
{"lineNum":"  928","line":"    end"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"    {found, {objmin, objmax}}"},
{"lineNum":"  931","line":"  end"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"  # Returns a `Tuple` with both the minimum and maximum value"},
{"lineNum":"  934","line":"  # the block returns when passed the elements in the collection."},
{"lineNum":"  935","line":"  #"},
{"lineNum":"  936","line":"  # ```"},
{"lineNum":"  937","line":"  # [\"Alice\", \"Bob\", \"Carl\"].minmax_of { |name| name.size } # => {3, 5}"},
{"lineNum":"  938","line":"  # ```"},
{"lineNum":"  939","line":"  #"},
{"lineNum":"  940","line":"  # Raises `Enumerable::EmptyError` if the collection is empty."},
{"lineNum":"  941","line":"  def minmax_of(&block : T -> U) forall U"},
{"lineNum":"  942","line":"    found, value = minmax_of_internal { |value| yield value }"},
{"lineNum":"  943","line":"    raise Enumerable::EmptyError.new unless found"},
{"lineNum":"  944","line":"    value"},
{"lineNum":"  945","line":"  end"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"  # Like `minmax_of` but returns `{nil, nil}` if the collection is empty."},
{"lineNum":"  948","line":"  def minmax_of?(&block : T -> U) forall U"},
{"lineNum":"  949","line":"    found, value = minmax_of_internal { |value| yield value }"},
{"lineNum":"  950","line":"    found ? value : {nil, nil}"},
{"lineNum":"  951","line":"  end"},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"  private def minmax_of_internal(&block : T -> U) forall U"},
{"lineNum":"  954","line":"    min = uninitialized U"},
{"lineNum":"  955","line":"    max = uninitialized U"},
{"lineNum":"  956","line":"    found = false"},
{"lineNum":"  957","line":""},
{"lineNum":"  958","line":"    each_with_index do |elem, i|"},
{"lineNum":"  959","line":"      value = yield elem"},
{"lineNum":"  960","line":"      if i == 0 || value < min"},
{"lineNum":"  961","line":"        min = value"},
{"lineNum":"  962","line":"      end"},
{"lineNum":"  963","line":"      if i == 0 || value > max"},
{"lineNum":"  964","line":"        max = value"},
{"lineNum":"  965","line":"      end"},
{"lineNum":"  966","line":"      found = true"},
{"lineNum":"  967","line":"    end"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"    {found, {min, max}}"},
{"lineNum":"  970","line":"  end"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"  # Returns `true` if the passed block returns `true`"},
{"lineNum":"  973","line":"  # for none of the elements of the collection."},
{"lineNum":"  974","line":"  #"},
{"lineNum":"  975","line":"  # ```"},
{"lineNum":"  976","line":"  # [1, 2, 3].none? { |i| i > 5 } # => true"},
{"lineNum":"  977","line":"  # ```"},
{"lineNum":"  978","line":"  #"},
{"lineNum":"  979","line":"  # It\'s the opposite of `all?`."},
{"lineNum":"  980","line":"  def none?"},
{"lineNum":"  981","line":"    each { |e| return false if yield(e) }"},
{"lineNum":"  982","line":"    true"},
{"lineNum":"  983","line":"  end"},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"  # Returns `true` if all of the elements of the collection are `false` or `nil`."},
{"lineNum":"  986","line":"  #"},
{"lineNum":"  987","line":"  # ```"},
{"lineNum":"  988","line":"  # [nil, false].none?       # => true"},
{"lineNum":"  989","line":"  # [nil, false, true].none? # => false"},
{"lineNum":"  990","line":"  # ```"},
{"lineNum":"  991","line":"  #"},
{"lineNum":"  992","line":"  # It\'s the opposite of `all?`."},
{"lineNum":"  993","line":"  def none?"},
{"lineNum":"  994","line":"    none? &.itself"},
{"lineNum":"  995","line":"  end"},
{"lineNum":"  996","line":""},
{"lineNum":"  997","line":"  # Returns `true` if the passed block returns `true`"},
{"lineNum":"  998","line":"  # for exactly one of the elements of the collection."},
{"lineNum":"  999","line":"  #"},
{"lineNum":" 1000","line":"  # ```"},
{"lineNum":" 1001","line":"  # [1, 2, 3].one? { |i| i > 2 } # => true"},
{"lineNum":" 1002","line":"  # [1, 2, 3].one? { |i| i > 1 } # => false"},
{"lineNum":" 1003","line":"  # ```"},
{"lineNum":" 1004","line":"  def one?"},
{"lineNum":" 1005","line":"    c = 0"},
{"lineNum":" 1006","line":"    each do |e|"},
{"lineNum":" 1007","line":"      c += 1 if yield(e)"},
{"lineNum":" 1008","line":"      return false if c > 1"},
{"lineNum":" 1009","line":"    end"},
{"lineNum":" 1010","line":"    c == 1"},
{"lineNum":" 1011","line":"  end"},
{"lineNum":" 1012","line":""},
{"lineNum":" 1013","line":"  # Returns a `Tuple` with two arrays. The first one contains the elements"},
{"lineNum":" 1014","line":"  # in the collection for which the passed block returned `true`,"},
{"lineNum":" 1015","line":"  # and the second one those for which it returned `false`."},
{"lineNum":" 1016","line":"  #"},
{"lineNum":" 1017","line":"  # ```"},
{"lineNum":" 1018","line":"  # [1, 2, 3, 4, 5, 6].partition { |i| i % 2 == 0 } # => {[2, 4, 6], [1, 3, 5]}"},
{"lineNum":" 1019","line":"  # ```"},
{"lineNum":" 1020","line":"  def partition"},
{"lineNum":" 1021","line":"    a, b = [] of T, [] of T"},
{"lineNum":" 1022","line":"    each do |e|"},
{"lineNum":" 1023","line":"      value = yield(e)"},
{"lineNum":" 1024","line":"      value ? a.push(e) : b.push(e)"},
{"lineNum":" 1025","line":"    end"},
{"lineNum":" 1026","line":"    {a, b}"},
{"lineNum":" 1027","line":"  end"},
{"lineNum":" 1028","line":""},
{"lineNum":" 1029","line":"  # Returns an `Array` with all the elements in the collection for which"},
{"lineNum":" 1030","line":"  # the passed block returns `false`."},
{"lineNum":" 1031","line":"  #"},
{"lineNum":" 1032","line":"  # ```"},
{"lineNum":" 1033","line":"  # [1, 2, 3, 4, 5, 6].reject { |i| i % 2 == 0 } # => [1, 3, 5]"},
{"lineNum":" 1034","line":"  # ```"},
{"lineNum":" 1035","line":"  def reject(&block : T ->)"},
{"lineNum":" 1036","line":"    ary = [] of T"},
{"lineNum":" 1037","line":"    each { |e| ary << e unless yield e }"},
{"lineNum":" 1038","line":"    ary"},
{"lineNum":" 1039","line":"  end"},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"  # Returns an `Array` with all the elements in the collection for which"},
{"lineNum":" 1042","line":"  # the passed block returns `true`."},
{"lineNum":" 1043","line":"  #"},
{"lineNum":" 1044","line":"  # ```"},
{"lineNum":" 1045","line":"  # [1, 2, 3, 4, 5, 6].select { |i| i % 2 == 0 } # => [2, 4, 6]"},
{"lineNum":" 1046","line":"  # ```"},
{"lineNum":" 1047","line":"  def select(&block : T ->)"},
{"lineNum":" 1048","line":"    ary = [] of T"},
{"lineNum":" 1049","line":"    each { |e| ary << e if yield e }"},
{"lineNum":" 1050","line":"    ary"},
{"lineNum":" 1051","line":"  end"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"  # Returns the number of elements in the collection."},
{"lineNum":" 1054","line":"  #"},
{"lineNum":" 1055","line":"  # ```"},
{"lineNum":" 1056","line":"  # [1, 2, 3, 4].size # => 4"},
{"lineNum":" 1057","line":"  # ```"},
{"lineNum":" 1058","line":"  def size"},
{"lineNum":" 1059","line":"    count { true }"},
{"lineNum":" 1060","line":"  end"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"  # Returns an `Array` with the first *count* elements removed"},
{"lineNum":" 1063","line":"  # from the original collection."},
{"lineNum":" 1064","line":"  #"},
{"lineNum":" 1065","line":"  # If *count* is bigger than the number of elements in the collection, returns an empty array."},
{"lineNum":" 1066","line":"  #"},
{"lineNum":" 1067","line":"  # ```"},
{"lineNum":" 1068","line":"  # [1, 2, 3, 4, 5, 6].skip(3) # => [4, 5, 6]"},
{"lineNum":" 1069","line":"  # ```"},
{"lineNum":" 1070","line":"  def skip(count : Int)"},
{"lineNum":" 1071","line":"    raise ArgumentError.new(\"Attempt to skip negative size\") if count < 0"},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"    array = Array(T).new"},
{"lineNum":" 1074","line":"    each_with_index do |e, i|"},
{"lineNum":" 1075","line":"      array << e if i >= count"},
{"lineNum":" 1076","line":"    end"},
{"lineNum":" 1077","line":"    array"},
{"lineNum":" 1078","line":"  end"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"  # Skips elements up to, but not including, the first element for which"},
{"lineNum":" 1081","line":"  # the block returns `nil` or `false` and returns an `Array`"},
{"lineNum":" 1082","line":"  # containing the remaining elements."},
{"lineNum":" 1083","line":"  #"},
{"lineNum":" 1084","line":"  # ```"},
{"lineNum":" 1085","line":"  # [1, 2, 3, 4, 5, 0].skip_while { |i| i < 3 } # => [3, 4, 5, 0]"},
{"lineNum":" 1086","line":"  # ```"},
{"lineNum":" 1087","line":"  def skip_while"},
{"lineNum":" 1088","line":"    result = Array(T).new"},
{"lineNum":" 1089","line":"    block_returned_false = false"},
{"lineNum":" 1090","line":"    each do |x|"},
{"lineNum":" 1091","line":"      block_returned_false = true unless block_returned_false || yield x"},
{"lineNum":" 1092","line":"      result << x if block_returned_false"},
{"lineNum":" 1093","line":"    end"},
{"lineNum":" 1094","line":"    result"},
{"lineNum":" 1095","line":"  end"},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"  # Adds all the elements in the collection together."},
{"lineNum":" 1098","line":"  #"},
{"lineNum":" 1099","line":"  # Only collections of numbers (objects that can be added via an `+` method)"},
{"lineNum":" 1100","line":"  # are supported."},
{"lineNum":" 1101","line":"  #"},
{"lineNum":" 1102","line":"  # ```"},
{"lineNum":" 1103","line":"  # [1, 2, 3, 4, 5, 6].sum # => 21"},
{"lineNum":" 1104","line":"  # ```"},
{"lineNum":" 1105","line":"  #"},
{"lineNum":" 1106","line":"  # If the collection is empty, returns `0`."},
{"lineNum":" 1107","line":"  #"},
{"lineNum":" 1108","line":"  # ```"},
{"lineNum":" 1109","line":"  # ([] of Int32).sum # => 0"},
{"lineNum":" 1110","line":"  # ```"},
{"lineNum":" 1111","line":"  def sum"},
{"lineNum":" 1112","line":"    sum Reflect(T).first.zero"},
{"lineNum":" 1113","line":"  end"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"  # Adds *initial* and all the elements in the collection together."},
{"lineNum":" 1116","line":"  # The type of *initial* will be the type of the sum, so use this if"},
{"lineNum":" 1117","line":"  # (for instance) you need to specify a large enough type to avoid"},
{"lineNum":" 1118","line":"  # overflow."},
{"lineNum":" 1119","line":"  #"},
{"lineNum":" 1120","line":"  # Only collections of numbers (objects that can be added via an `+` method)"},
{"lineNum":" 1121","line":"  # are supported."},
{"lineNum":" 1122","line":"  #"},
{"lineNum":" 1123","line":"  # ```"},
{"lineNum":" 1124","line":"  # [1, 2, 3, 4, 5, 6].sum(7) # => 28"},
{"lineNum":" 1125","line":"  # ```"},
{"lineNum":" 1126","line":"  #"},
{"lineNum":" 1127","line":"  # If the collection is empty, returns *initial*."},
{"lineNum":" 1128","line":"  #"},
{"lineNum":" 1129","line":"  # ```"},
{"lineNum":" 1130","line":"  # ([] of Int32).sum(7) # => 7"},
{"lineNum":" 1131","line":"  # ```"},
{"lineNum":" 1132","line":"  def sum(initial)"},
{"lineNum":" 1133","line":"    sum initial, &.itself"},
{"lineNum":" 1134","line":"  end"},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":"  # Adds all results of the passed block for each element in the collection."},
{"lineNum":" 1137","line":"  #"},
{"lineNum":" 1138","line":"  # ```"},
{"lineNum":" 1139","line":"  # [\"Alice\", \"Bob\"].sum { |name| name.size } # => 8 (5 + 3)"},
{"lineNum":" 1140","line":"  # ```"},
{"lineNum":" 1141","line":"  #"},
{"lineNum":" 1142","line":"  # If the collection is empty, returns `0`."},
{"lineNum":" 1143","line":"  #"},
{"lineNum":" 1144","line":"  # ```"},
{"lineNum":" 1145","line":"  # ([] of Int32).sum { |x| x + 1 } # => 0"},
{"lineNum":" 1146","line":"  # ```"},
{"lineNum":" 1147","line":"  def sum(&block)"},
{"lineNum":" 1148","line":"    sum(Reflect(typeof(yield first)).first.zero) do |value|"},
{"lineNum":" 1149","line":"      yield value"},
{"lineNum":" 1150","line":"    end"},
{"lineNum":" 1151","line":"  end"},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"  # Adds *initial* and all results of the passed block for each element in the collection."},
{"lineNum":" 1154","line":"  #"},
{"lineNum":" 1155","line":"  # ```"},
{"lineNum":" 1156","line":"  # [\"Alice\", \"Bob\"].sum(1) { |name| name.size } # => 9 (1 + 5 + 3)"},
{"lineNum":" 1157","line":"  # ```"},
{"lineNum":" 1158","line":"  #"},
{"lineNum":" 1159","line":"  # If the collection is empty, returns `0`."},
{"lineNum":" 1160","line":"  #"},
{"lineNum":" 1161","line":"  # ```"},
{"lineNum":" 1162","line":"  # ([] of String).sum(1) { |name| name.size } # => 1"},
{"lineNum":" 1163","line":"  # ```"},
{"lineNum":" 1164","line":"  def sum(initial, &block)"},
{"lineNum":" 1165","line":"    reduce(initial) { |memo, e| memo + (yield e) }"},
{"lineNum":" 1166","line":"  end"},
{"lineNum":" 1167","line":""},
{"lineNum":" 1168","line":"  # Multiplies all the elements in the collection together."},
{"lineNum":" 1169","line":"  #"},
{"lineNum":" 1170","line":"  # Only collections of numbers (objects that can be multiplied via a `*` method)"},
{"lineNum":" 1171","line":"  # are supported."},
{"lineNum":" 1172","line":"  #"},
{"lineNum":" 1173","line":"  # ```"},
{"lineNum":" 1174","line":"  # [1, 2, 3, 4, 5, 6].product # => 720"},
{"lineNum":" 1175","line":"  # ```"},
{"lineNum":" 1176","line":"  #"},
{"lineNum":" 1177","line":"  # If the collection is empty, returns `1`."},
{"lineNum":" 1178","line":"  #"},
{"lineNum":" 1179","line":"  # ```"},
{"lineNum":" 1180","line":"  # ([] of Int32).product # => 1"},
{"lineNum":" 1181","line":"  # ```"},
{"lineNum":" 1182","line":"  def product"},
{"lineNum":" 1183","line":"    product Reflect(T).first.zero + 1"},
{"lineNum":" 1184","line":"  end"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"  # Multiplies *initial* and all the elements in the collection"},
{"lineNum":" 1187","line":"  # together.  The type of *initial* will be the type of the product,"},
{"lineNum":" 1188","line":"  # so use this if (for instance) you need to specify a large enough"},
{"lineNum":" 1189","line":"  # type to avoid overflow."},
{"lineNum":" 1190","line":"  #"},
{"lineNum":" 1191","line":"  # Only collections of numbers (objects that can be multiplied via a `*` method)"},
{"lineNum":" 1192","line":"  # are supported."},
{"lineNum":" 1193","line":"  #"},
{"lineNum":" 1194","line":"  # ```"},
{"lineNum":" 1195","line":"  # [1, 2, 3, 4, 5, 6].product(7) # => 5040"},
{"lineNum":" 1196","line":"  # ```"},
{"lineNum":" 1197","line":"  #"},
{"lineNum":" 1198","line":"  # If the collection is empty, returns *initial*."},
{"lineNum":" 1199","line":"  #"},
{"lineNum":" 1200","line":"  # ```"},
{"lineNum":" 1201","line":"  # ([] of Int32).product(7) # => 7"},
{"lineNum":" 1202","line":"  # ```"},
{"lineNum":" 1203","line":"  def product(initial : Number)"},
{"lineNum":" 1204","line":"    product initial, &.itself"},
{"lineNum":" 1205","line":"  end"},
{"lineNum":" 1206","line":""},
{"lineNum":" 1207","line":"  # Multiplies all results of the passed block for each element in the collection."},
{"lineNum":" 1208","line":"  #"},
{"lineNum":" 1209","line":"  # ```"},
{"lineNum":" 1210","line":"  # [\"Alice\", \"Bob\"].product { |name| name.size } # => 15 (5 * 3)"},
{"lineNum":" 1211","line":"  # ```"},
{"lineNum":" 1212","line":"  #"},
{"lineNum":" 1213","line":"  # If the collection is empty, returns `1`."},
{"lineNum":" 1214","line":"  #"},
{"lineNum":" 1215","line":"  # ```"},
{"lineNum":" 1216","line":"  # ([] of Int32).product { |x| x + 1 } # => 1"},
{"lineNum":" 1217","line":"  # ```"},
{"lineNum":" 1218","line":"  def product(&block)"},
{"lineNum":" 1219","line":"    product(Reflect(typeof(yield first)).first.zero + 1) do |value|"},
{"lineNum":" 1220","line":"      yield value"},
{"lineNum":" 1221","line":"    end"},
{"lineNum":" 1222","line":"  end"},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"  # Multiplies *initial* and all results of the passed block for each element"},
{"lineNum":" 1225","line":"  # in the collection."},
{"lineNum":" 1226","line":"  #"},
{"lineNum":" 1227","line":"  # ```"},
{"lineNum":" 1228","line":"  # [\"Alice\", \"Bob\"].product(2) { |name| name.size } # => 30 (2 * 5 * 3)"},
{"lineNum":" 1229","line":"  # ```"},
{"lineNum":" 1230","line":"  #"},
{"lineNum":" 1231","line":"  # If the collection is empty, returns `1`."},
{"lineNum":" 1232","line":"  #"},
{"lineNum":" 1233","line":"  # ```"},
{"lineNum":" 1234","line":"  # ([] of String).product(1) { |name| name.size } # => 1"},
{"lineNum":" 1235","line":"  # ```"},
{"lineNum":" 1236","line":"  def product(initial : Number, &block)"},
{"lineNum":" 1237","line":"    reduce(initial) { |memo, e| memo * (yield e) }"},
{"lineNum":" 1238","line":"  end"},
{"lineNum":" 1239","line":""},
{"lineNum":" 1240","line":"  # Returns an `Array` with the first *count* elements in the collection."},
{"lineNum":" 1241","line":"  #"},
{"lineNum":" 1242","line":"  # If *count* is bigger than the number of elements in the collection,"},
{"lineNum":" 1243","line":"  # returns as many as possible. This include the case of calling it over"},
{"lineNum":" 1244","line":"  # an empty collection, in which case it returns an empty array."},
{"lineNum":" 1245","line":"  def first(count : Int)"},
{"lineNum":" 1246","line":"    raise ArgumentError.new(\"Attempt to take negative size\") if count < 0"},
{"lineNum":" 1247","line":""},
{"lineNum":" 1248","line":"    ary = Array(T).new(count)"},
{"lineNum":" 1249","line":"    each_with_index do |e, i|"},
{"lineNum":" 1250","line":"      break if i == count"},
{"lineNum":" 1251","line":"      ary << e"},
{"lineNum":" 1252","line":"    end"},
{"lineNum":" 1253","line":"    ary"},
{"lineNum":" 1254","line":"  end"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"  # Passes elements to the block until the block returns `nil` or `false`,"},
{"lineNum":" 1257","line":"  # then stops iterating and returns an `Array` of all prior elements."},
{"lineNum":" 1258","line":"  #"},
{"lineNum":" 1259","line":"  # ```"},
{"lineNum":" 1260","line":"  # [1, 2, 3, 4, 5, 0].take_while { |i| i < 3 } # => [1, 2]"},
{"lineNum":" 1261","line":"  # ```"},
{"lineNum":" 1262","line":"  def take_while"},
{"lineNum":" 1263","line":"    result = Array(T).new"},
{"lineNum":" 1264","line":"    each do |x|"},
{"lineNum":" 1265","line":"      break unless yield x"},
{"lineNum":" 1266","line":"      result << x"},
{"lineNum":" 1267","line":"    end"},
{"lineNum":" 1268","line":"    result"},
{"lineNum":" 1269","line":"  end"},
{"lineNum":" 1270","line":""},
{"lineNum":" 1271","line":"  # Returns an `Array` with all the elements in the collection."},
{"lineNum":" 1272","line":"  #"},
{"lineNum":" 1273","line":"  # ```"},
{"lineNum":" 1274","line":"  # (1..5).to_a # => [1, 2, 3, 4, 5]"},
{"lineNum":" 1275","line":"  # ```"},
{"lineNum":" 1276","line":"  def to_a"},
{"lineNum":" 1277","line":"    ary = [] of T"},
{"lineNum":" 1278","line":"    each { |e| ary << e }"},
{"lineNum":" 1279","line":"    ary"},
{"lineNum":" 1280","line":"  end"},
{"lineNum":" 1281","line":""},
{"lineNum":" 1282","line":"  # Creates a `Hash` out of an Enumerable where each element is a"},
{"lineNum":" 1283","line":"  # 2 element structure (for instance a `Tuple` or an `Array`)."},
{"lineNum":" 1284","line":"  #"},
{"lineNum":" 1285","line":"  # ```"},
{"lineNum":" 1286","line":"  # [[:a, :b], [:c, :d]].to_h        # => {:a => :b, :c => :d}"},
{"lineNum":" 1287","line":"  # Tuple.new({:a, 1}, {:c, 2}).to_h # => {:a => 1, :c => 2}"},
{"lineNum":" 1288","line":"  # ```"},
{"lineNum":" 1289","line":"  def to_h"},
{"lineNum":" 1290","line":"    each_with_object(Hash(typeof(first[0]), typeof(first[1])).new) do |item, hash|"},
{"lineNum":" 1291","line":"      hash[item[0]] = item[1]"},
{"lineNum":" 1292","line":"    end"},
{"lineNum":" 1293","line":"  end"},
{"lineNum":" 1294","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
