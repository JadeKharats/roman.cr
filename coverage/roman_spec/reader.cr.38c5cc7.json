var data = {lines:[
{"lineNum":"    1","line":"struct Char"},
{"lineNum":"    2","line":"  # A `Char::Reader` allows iterating a `String` by Chars."},
{"lineNum":"    3","line":"  #"},
{"lineNum":"    4","line":"  # As soon as you instantiate a `Char::Reader` it will decode the first"},
{"lineNum":"    5","line":"  # char in the `String`, which can be accessed by invoking `current_char`."},
{"lineNum":"    6","line":"  # At this point `pos`, the current position in the string, will equal zero."},
{"lineNum":"    7","line":"  # Successive calls to `next_char` return the next chars in the string,"},
{"lineNum":"    8","line":"  # advancing `pos`."},
{"lineNum":"    9","line":"  #"},
{"lineNum":"   10","line":"  # Note that the null character `\'\\0\'` will be returned in `current_char` when"},
{"lineNum":"   11","line":"  # the end is reached (as well as when the string is empty). Thus, `has_next?`"},
{"lineNum":"   12","line":"  # will return `false` only when `pos` is equal to the string\'s bytesize, in which"},
{"lineNum":"   13","line":"  # case `current_char` will always be `\'\\0\'`."},
{"lineNum":"   14","line":"  struct Reader"},
{"lineNum":"   15","line":"    include Enumerable(Char)"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    # Returns the reader\'s String."},
{"lineNum":"   18","line":"    getter string : String"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    # Returns the current character."},
{"lineNum":"   21","line":"    #"},
{"lineNum":"   22","line":"    # ```"},
{"lineNum":"   23","line":"    # reader = Char::Reader.new(\"ab\")"},
{"lineNum":"   24","line":"    # reader.current_char # => \'a\'"},
{"lineNum":"   25","line":"    # reader.next_char"},
{"lineNum":"   26","line":"    # reader.current_char # => \'b\'"},
{"lineNum":"   27","line":"    # ```"},
{"lineNum":"   28","line":"    getter current_char : Char"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    # Returns the size of the `#current_char` (in bytes) as if it were encoded in UTF-8."},
{"lineNum":"   31","line":"    #"},
{"lineNum":"   32","line":"    # ```"},
{"lineNum":"   33","line":"    # reader = Char::Reader.new(\"aÃ©\")"},
{"lineNum":"   34","line":"    # reader.current_char_width # => 1"},
{"lineNum":"   35","line":"    # reader.next_char"},
{"lineNum":"   36","line":"    # reader.current_char_width # => 2"},
{"lineNum":"   37","line":"    # ```"},
{"lineNum":"   38","line":"    getter current_char_width : Int32"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    # Returns the position of the current character."},
{"lineNum":"   41","line":"    #"},
{"lineNum":"   42","line":"    # ```"},
{"lineNum":"   43","line":"    # reader = Char::Reader.new(\"ab\")"},
{"lineNum":"   44","line":"    # reader.pos # => 0"},
{"lineNum":"   45","line":"    # reader.next_char"},
{"lineNum":"   46","line":"    # reader.pos # => 1"},
{"lineNum":"   47","line":"    # ```"},
{"lineNum":"   48","line":"    getter pos : Int32"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    # If there was an error decoding the current char because"},
{"lineNum":"   51","line":"    # of an invalid UTF-8 byte sequence, returns the byte"},
{"lineNum":"   52","line":"    # that produced the invalid encoding. Returns `0` if the char would\'ve been"},
{"lineNum":"   53","line":"    # out of bounds. Otherwise returns `nil`."},
{"lineNum":"   54","line":"    getter error : UInt8?"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    # Creates a reader with the specified *string* positioned at"},
{"lineNum":"   57","line":"    # byte index *pos*."},
{"lineNum":"   58","line":"    def initialize(@string : String, pos = 0)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   59","line":"      @pos = pos.to_i","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"      @current_char = \'\\0\'","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"      @current_char_width = 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":"      @end = false","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"      decode_current_char"},
{"lineNum":"   64","line":"    end"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    # Creates a reader that will be positioned at the last char"},
{"lineNum":"   67","line":"    # of the given string."},
{"lineNum":"   68","line":"    def initialize(*, at_end @string : String)"},
{"lineNum":"   69","line":"      @pos = @string.bytesize"},
{"lineNum":"   70","line":"      @current_char = \'\\0\'"},
{"lineNum":"   71","line":"      @current_char_width = 0"},
{"lineNum":"   72","line":"      @end = false"},
{"lineNum":"   73","line":"      decode_previous_char"},
{"lineNum":"   74","line":"    end"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    # Returns `true` if there is a character left to read."},
{"lineNum":"   77","line":"    # The terminating byte `\'\\0\'` is considered a valid character"},
{"lineNum":"   78","line":"    # by this method."},
{"lineNum":"   79","line":"    #"},
{"lineNum":"   80","line":"    # ```"},
{"lineNum":"   81","line":"    # reader = Char::Reader.new(\"a\")"},
{"lineNum":"   82","line":"    # reader.has_next?      # => true"},
{"lineNum":"   83","line":"    # reader.peek_next_char # => \'\\0\'"},
{"lineNum":"   84","line":"    # ```"},
{"lineNum":"   85","line":"    def has_next?"},
{"lineNum":"   86","line":"      !@end"},
{"lineNum":"   87","line":"    end"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    # Reads the next character in the string,"},
{"lineNum":"   90","line":"    # `#pos` is incremented. Raises `IndexError` if the reader is"},
{"lineNum":"   91","line":"    # at the end of the `#string`."},
{"lineNum":"   92","line":"    #"},
{"lineNum":"   93","line":"    # ```"},
{"lineNum":"   94","line":"    # reader = Char::Reader.new(\"ab\")"},
{"lineNum":"   95","line":"    # reader.next_char # => \'b\'"},
{"lineNum":"   96","line":"    # ```"},
{"lineNum":"   97","line":"    def next_char","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"      @pos += @current_char_width","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"      if @pos > @string.bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"        raise IndexError.new","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"      end"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"      decode_current_char","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":"    end"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    # Returns the next character in the `#string`"},
{"lineNum":"  107","line":"    # without incrementing `#pos`."},
{"lineNum":"  108","line":"    # Raises `IndexError` if the reader is at"},
{"lineNum":"  109","line":"    # the end of the `#string`."},
{"lineNum":"  110","line":"    #"},
{"lineNum":"  111","line":"    # ```"},
{"lineNum":"  112","line":"    # reader = Char::Reader.new(\"ab\")"},
{"lineNum":"  113","line":"    # reader.peek_next_char # => \'b\'"},
{"lineNum":"  114","line":"    # reader.current_char   # => \'a\'"},
{"lineNum":"  115","line":"    # ```"},
{"lineNum":"  116","line":"    def peek_next_char"},
{"lineNum":"  117","line":"      next_pos = @pos + @current_char_width"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"      if next_pos > @string.bytesize"},
{"lineNum":"  120","line":"        raise IndexError.new"},
{"lineNum":"  121","line":"      end"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"      decode_char_at(next_pos) do |code_point|"},
{"lineNum":"  124","line":"        code_point.unsafe_chr"},
{"lineNum":"  125","line":"      end"},
{"lineNum":"  126","line":"    end"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    # Returns `true` if there are characters before"},
{"lineNum":"  129","line":"    # the current one."},
{"lineNum":"  130","line":"    def has_previous?"},
{"lineNum":"  131","line":"      @pos > 0"},
{"lineNum":"  132","line":"    end"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    # Returns the previous character, `#pos`"},
{"lineNum":"  135","line":"    # is decremented."},
{"lineNum":"  136","line":"    # Raises `IndexError` if the reader is at the begining of"},
{"lineNum":"  137","line":"    # the `#string`"},
{"lineNum":"  138","line":"    def previous_char : Char"},
{"lineNum":"  139","line":"      unless has_previous?"},
{"lineNum":"  140","line":"        raise IndexError.new"},
{"lineNum":"  141","line":"      end"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"      decode_previous_char.as(Char)"},
{"lineNum":"  144","line":"    end"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    # Sets `#pos` to *pos*."},
{"lineNum":"  147","line":"    #"},
{"lineNum":"  148","line":"    # ```"},
{"lineNum":"  149","line":"    # reader = Char::Reader.new(\"abc\")"},
{"lineNum":"  150","line":"    # reader.next_char"},
{"lineNum":"  151","line":"    # reader.next_char"},
{"lineNum":"  152","line":"    # reader.pos = 0"},
{"lineNum":"  153","line":"    # reader.current_char # => \'a\'"},
{"lineNum":"  154","line":"    # ```"},
{"lineNum":"  155","line":"    def pos=(pos)"},
{"lineNum":"  156","line":"      if pos > @string.bytesize"},
{"lineNum":"  157","line":"        raise IndexError.new"},
{"lineNum":"  158","line":"      end"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"      @pos = pos"},
{"lineNum":"  161","line":"      decode_current_char"},
{"lineNum":"  162","line":"      pos"},
{"lineNum":"  163","line":"    end"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    # Yields successive characters from `#string` starting from `#pos`."},
{"lineNum":"  166","line":"    #"},
{"lineNum":"  167","line":"    # ```"},
{"lineNum":"  168","line":"    # reader = Char::Reader.new(\"abc\")"},
{"lineNum":"  169","line":"    # reader.next_char"},
{"lineNum":"  170","line":"    # reader.each do |c|"},
{"lineNum":"  171","line":"    #   puts c.upcase"},
{"lineNum":"  172","line":"    # end"},
{"lineNum":"  173","line":"    # ```"},
{"lineNum":"  174","line":"    #"},
{"lineNum":"  175","line":"    # ``` text"},
{"lineNum":"  176","line":"    # B"},
{"lineNum":"  177","line":"    # C"},
{"lineNum":"  178","line":"    # ```"},
{"lineNum":"  179","line":"    def each : Nil"},
{"lineNum":"  180","line":"      while has_next?"},
{"lineNum":"  181","line":"        yield current_char"},
{"lineNum":"  182","line":"        @pos += @current_char_width"},
{"lineNum":"  183","line":"        decode_current_char"},
{"lineNum":"  184","line":"      end"},
{"lineNum":"  185","line":"    end"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    private def decode_char_at(pos)"},
{"lineNum":"  188","line":"      first = byte_at?(pos) || 0u32"},
{"lineNum":"  189","line":"      if first < 0x80","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  190","line":"        return yield first, 1, nil"},
{"lineNum":"  191","line":"      end"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"      if first < 0xc2","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  194","line":"        invalid_byte_sequence 1"},
{"lineNum":"  195","line":"      end"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"      second = byte_at?(pos + 1)"},
{"lineNum":"  198","line":"      if second.nil? || (second & 0xc0) != 0x80","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  199","line":"        invalid_byte_sequence 1"},
{"lineNum":"  200","line":"      end"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"      if first < 0xe0","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  203","line":"        return yield (first << 6) + (second - 0x3080), 2, nil","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  204","line":"      end"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"      third = byte_at?(pos + 2)"},
{"lineNum":"  207","line":"      if third.nil? || (third & 0xc0) != 0x80","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  208","line":"        invalid_byte_sequence 2"},
{"lineNum":"  209","line":"      end"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"      if first < 0xf0","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  212","line":"        if first == 0xe0 && second < 0xa0"},
{"lineNum":"  213","line":"          invalid_byte_sequence 3"},
{"lineNum":"  214","line":"        end"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"        if first == 0xed && second >= 0xa0"},
{"lineNum":"  217","line":"          invalid_byte_sequence 3"},
{"lineNum":"  218","line":"        end"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"        return yield (first << 12) + (second << 6) + (third - 0xE2080), 3, nil","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  221","line":"      end"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"      if first == 0xf0 && second < 0x90"},
{"lineNum":"  224","line":"        invalid_byte_sequence 3"},
{"lineNum":"  225","line":"      end"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"      if first == 0xf4 && second >= 0x90"},
{"lineNum":"  228","line":"        invalid_byte_sequence 3"},
{"lineNum":"  229","line":"      end"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"      fourth = byte_at?(pos + 3)"},
{"lineNum":"  232","line":"      if fourth.nil?"},
{"lineNum":"  233","line":"        invalid_byte_sequence 3"},
{"lineNum":"  234","line":"      elsif (fourth & 0xc0) != 0x80"},
{"lineNum":"  235","line":"        invalid_byte_sequence 4"},
{"lineNum":"  236","line":"      end"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"      if first < 0xf5","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  239","line":"        return yield (first << 18) + (second << 12) + (third << 6) + (fourth - 0x3C82080), 4, nil","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  240","line":"      end"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"      invalid_byte_sequence 4"},
{"lineNum":"  243","line":"    end"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    private macro invalid_byte_sequence(width)"},
{"lineNum":"  246","line":"      return yield Char::REPLACEMENT.ord, {{width}}, first.to_u8"},
{"lineNum":"  247","line":"    end"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    @[AlwaysInline]"},
{"lineNum":"  250","line":"    private def decode_current_char"},
{"lineNum":"  251","line":"      decode_char_at(@pos) do |code_point, width, error|"},
{"lineNum":"  252","line":"        @current_char_width = width","class":"lineNoCov","hits":"0","possible_hits":"27",},
{"lineNum":"  253","line":"        @end = @pos == @string.bytesize","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  254","line":"        @error = error","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  255","line":"        @current_char = code_point.unsafe_chr","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  256","line":"      end"},
{"lineNum":"  257","line":"    end"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    private def decode_previous_char"},
{"lineNum":"  260","line":"      if @pos == 0"},
{"lineNum":"  261","line":"        @end = @pos == @string.bytesize"},
{"lineNum":"  262","line":"      else"},
{"lineNum":"  263","line":"        while @pos > 0"},
{"lineNum":"  264","line":"          @pos -= 1"},
{"lineNum":"  265","line":"          break if (byte_at(@pos) & 0xC0) != 0x80"},
{"lineNum":"  266","line":"        end"},
{"lineNum":"  267","line":"        decode_char_at(@pos) do |code_point, width, error|"},
{"lineNum":"  268","line":"          @current_char_width = width"},
{"lineNum":"  269","line":"          @end = @pos == @string.bytesize"},
{"lineNum":"  270","line":"          @error = error"},
{"lineNum":"  271","line":"          @current_char = code_point.unsafe_chr"},
{"lineNum":"  272","line":"        end"},
{"lineNum":"  273","line":"      end"},
{"lineNum":"  274","line":"    end"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    private def byte_at(i)"},
{"lineNum":"  277","line":"      @string.byte_at(i).to_u32"},
{"lineNum":"  278","line":"    end"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    private def byte_at?(i)"},
{"lineNum":"  281","line":"      @string.byte_at?(i).try(&.to_u32)"},
{"lineNum":"  282","line":"    end"},
{"lineNum":"  283","line":"  end"},
{"lineNum":"  284","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 24, "covered" : 0,};
var merged_data = [];
