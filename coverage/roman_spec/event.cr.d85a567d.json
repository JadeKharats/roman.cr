var data = {lines:[
{"lineNum":"    1","line":"require \"./event/*\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# :nodoc:"},
{"lineNum":"    4","line":"module Event"},
{"lineNum":"    5","line":"  VERSION = String.new(LibEvent2.event_get_version)"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"  def self.callback(&block : Int32, LibEvent2::EventFlags, Void* ->)"},
{"lineNum":"    8","line":"    block"},
{"lineNum":"    9","line":"  end"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  # :nodoc:"},
{"lineNum":"   12","line":"  struct Event"},
{"lineNum":"   13","line":"    def initialize(@event : LibEvent2::Event)"},
{"lineNum":"   14","line":"      @freed = false"},
{"lineNum":"   15","line":"    end"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    def add(timeout : LibC::Timeval? = nil)"},
{"lineNum":"   18","line":"      if timeout"},
{"lineNum":"   19","line":"        timeout_copy = timeout","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   20","line":"        LibEvent2.event_add(@event, pointerof(timeout_copy))","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   21","line":"      else"},
{"lineNum":"   22","line":"        LibEvent2.event_add(@event, nil)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   23","line":"      end"},
{"lineNum":"   24","line":"    end"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"    def add(timeout : Time::Span)"},
{"lineNum":"   27","line":"      add LibC::Timeval.new("},
{"lineNum":"   28","line":"        tv_sec: timeout.total_seconds.to_i,","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   29","line":"        tv_usec: timeout.nanoseconds / 1_000","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   30","line":"      )"},
{"lineNum":"   31","line":"    end"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    def free"},
{"lineNum":"   34","line":"      LibEvent2.event_free(@event) unless @freed","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   35","line":"      @freed = true"},
{"lineNum":"   36","line":"    end"},
{"lineNum":"   37","line":"  end"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"  # :nodoc:"},
{"lineNum":"   40","line":"  struct Base"},
{"lineNum":"   41","line":"    def initialize"},
{"lineNum":"   42","line":"      @base = LibEvent2.event_base_new","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   43","line":"    end"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    def reinit"},
{"lineNum":"   46","line":"      unless LibEvent2.event_reinit(@base) == 0"},
{"lineNum":"   47","line":"        raise \"Error reinitializing libevent\""},
{"lineNum":"   48","line":"      end"},
{"lineNum":"   49","line":"    end"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    def new_event(s : Int32, flags : LibEvent2::EventFlags, data, &callback : LibEvent2::Callback)"},
{"lineNum":"   52","line":"      event = LibEvent2.event_new(@base, s, flags, callback, data.as(Void*))","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   53","line":"      Event.new(event)"},
{"lineNum":"   54","line":"    end"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    def run_loop"},
{"lineNum":"   57","line":"      LibEvent2.event_base_loop(@base, LibEvent2::EventLoopFlags::None)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"    end"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    def run_once"},
{"lineNum":"   61","line":"      LibEvent2.event_base_loop(@base, LibEvent2::EventLoopFlags::Once)"},
{"lineNum":"   62","line":"    end"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    def loop_break"},
{"lineNum":"   65","line":"      LibEvent2.event_base_loopbreak(@base)"},
{"lineNum":"   66","line":"    end"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    def new_dns_base(init = true)"},
{"lineNum":"   69","line":"      DnsBase.new LibEvent2.evdns_base_new(@base, init ? 1 : 0)"},
{"lineNum":"   70","line":"    end"},
{"lineNum":"   71","line":"  end"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  struct DnsBase"},
{"lineNum":"   74","line":"    def initialize(@dns_base : LibEvent2::DnsBase)"},
{"lineNum":"   75","line":"    end"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    def getaddrinfo(nodename, servname, hints, data, &callback : LibEvent2::DnsGetAddrinfoCallback)"},
{"lineNum":"   78","line":"      request = LibEvent2.evdns_getaddrinfo(@dns_base, nodename, servname, hints, callback, data.as(Void*))"},
{"lineNum":"   79","line":"      GetAddrInfoRequest.new request if request"},
{"lineNum":"   80","line":"    end"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    struct GetAddrInfoRequest"},
{"lineNum":"   83","line":"      def initialize(@request : LibEvent2::DnsGetAddrinfoRequest)"},
{"lineNum":"   84","line":"      end"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"      def cancel"},
{"lineNum":"   87","line":"        LibEvent2.evdns_getaddrinfo_cancel(@request)"},
{"lineNum":"   88","line":"      end"},
{"lineNum":"   89","line":"    end"},
{"lineNum":"   90","line":"  end"},
{"lineNum":"   91","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 9, "covered" : 0,};
var merged_data = [];
