var data = {lines:[
{"lineNum":"    1","line":"require \"crystal/system/random\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# Generates random numbers from a secure source provided by the system."},
{"lineNum":"    4","line":"#"},
{"lineNum":"    5","line":"# For example `arc4random` is used on OpenBSD, whereas on Linux it uses"},
{"lineNum":"    6","line":"# `getrandom` (if the kernel supports it) and fallbacks on reading from"},
{"lineNum":"    7","line":"# `/dev/urandom` on UNIX systems."},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# ```"},
{"lineNum":"   10","line":"# Random::Secure.rand(6)            # => 4"},
{"lineNum":"   11","line":"# [1, 5, 6].shuffle(Random::Secure) # => [6, 1, 5]"},
{"lineNum":"   12","line":"# ```"},
{"lineNum":"   13","line":"module Random::Secure"},
{"lineNum":"   14","line":"  extend Random"},
{"lineNum":"   15","line":"  extend self"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"  def next_u"},
{"lineNum":"   18","line":"    Crystal::System::Random.next_u"},
{"lineNum":"   19","line":"  end"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"  def random_bytes(buf : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   22","line":"    Crystal::System::Random.random_bytes(buf)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   23","line":"  end"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"  {% for type in [UInt8, UInt16, UInt32, UInt64] %}"},
{"lineNum":"   26","line":"    # Generates a random integer of a given type. The number of bytes to"},
{"lineNum":"   27","line":"    # generate can be limited; by default it will generate as many bytes as"},
{"lineNum":"   28","line":"    # needed to fill the integer size."},
{"lineNum":"   29","line":"    private def rand_type(type : {{type}}.class, needed_parts = nil) : {{type}}"},
{"lineNum":"   30","line":"      needed_bytes ="},
{"lineNum":"   31","line":"        if needed_parts"},
{"lineNum":"   32","line":"          needed_parts * sizeof(typeof(next_u))"},
{"lineNum":"   33","line":"        else"},
{"lineNum":"   34","line":"          sizeof({{type}})"},
{"lineNum":"   35","line":"        end"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"      buf = uninitialized UInt8[sizeof({{type}})]"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"      if needed_bytes < sizeof({{type}})"},
{"lineNum":"   40","line":"        bytes = Slice.new(buf.to_unsafe, needed_bytes)"},
{"lineNum":"   41","line":"        random_bytes(bytes)"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        bytes.reduce({{type}}.new(0)) do |result, byte|"},
{"lineNum":"   44","line":"          (result << 8) | byte"},
{"lineNum":"   45","line":"        end"},
{"lineNum":"   46","line":"      else"},
{"lineNum":"   47","line":"        random_bytes(buf.to_slice)"},
{"lineNum":"   48","line":"        buf.unsafe_as({{type}})"},
{"lineNum":"   49","line":"      end"},
{"lineNum":"   50","line":"    end"},
{"lineNum":"   51","line":"  {% end %}"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"  {% for type in [Int8, Int16, Int32, Int64] %}"},
{"lineNum":"   54","line":"    private def rand_type(type : {{type}}.class, needed_bytes = sizeof({{type}})) : {{type}}"},
{"lineNum":"   55","line":"      result = rand_type({{\"U#{type}\".id}}, needed_bytes)"},
{"lineNum":"   56","line":"      {{type}}.new(result)"},
{"lineNum":"   57","line":"    end"},
{"lineNum":"   58","line":"  {% end %}"},
{"lineNum":"   59","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:20:30", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
