var data = {lines:[
{"lineNum":"    1","line":"require \"c/signal\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    2","line":"require \"c/stdio\""},
{"lineNum":"    3","line":"require \"c/unistd\""},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"{% if flag?(:linux) %}"},
{"lineNum":"    6","line":"  enum Signal"},
{"lineNum":"    7","line":"    HUP    = LibC::SIGHUP"},
{"lineNum":"    8","line":"    INT    = LibC::SIGINT"},
{"lineNum":"    9","line":"    QUIT   = LibC::SIGQUIT"},
{"lineNum":"   10","line":"    ILL    = LibC::SIGILL"},
{"lineNum":"   11","line":"    TRAP   = LibC::SIGTRAP"},
{"lineNum":"   12","line":"    IOT    = LibC::SIGIOT"},
{"lineNum":"   13","line":"    ABRT   = LibC::SIGABRT"},
{"lineNum":"   14","line":"    FPE    = LibC::SIGFPE"},
{"lineNum":"   15","line":"    KILL   = LibC::SIGKILL"},
{"lineNum":"   16","line":"    BUS    = LibC::SIGBUS"},
{"lineNum":"   17","line":"    SEGV   = LibC::SIGSEGV"},
{"lineNum":"   18","line":"    SYS    = LibC::SIGSYS"},
{"lineNum":"   19","line":"    PIPE   = LibC::SIGPIPE"},
{"lineNum":"   20","line":"    ALRM   = LibC::SIGALRM"},
{"lineNum":"   21","line":"    TERM   = LibC::SIGTERM"},
{"lineNum":"   22","line":"    URG    = LibC::SIGURG"},
{"lineNum":"   23","line":"    STOP   = LibC::SIGSTOP"},
{"lineNum":"   24","line":"    TSTP   = LibC::SIGTSTP"},
{"lineNum":"   25","line":"    CONT   = LibC::SIGCONT"},
{"lineNum":"   26","line":"    CHLD   = LibC::SIGCHLD"},
{"lineNum":"   27","line":"    TTIN   = LibC::SIGTTIN"},
{"lineNum":"   28","line":"    TTOU   = LibC::SIGTTOU"},
{"lineNum":"   29","line":"    IO     = LibC::SIGIO"},
{"lineNum":"   30","line":"    XCPU   = LibC::SIGXCPU"},
{"lineNum":"   31","line":"    XFSZ   = LibC::SIGXFSZ"},
{"lineNum":"   32","line":"    VTALRM = LibC::SIGVTALRM"},
{"lineNum":"   33","line":"    USR1   = LibC::SIGUSR1"},
{"lineNum":"   34","line":"    USR2   = LibC::SIGUSR2"},
{"lineNum":"   35","line":"    WINCH  = LibC::SIGWINCH"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    PWR    = LibC::SIGPWR"},
{"lineNum":"   38","line":"    STKFLT = LibC::SIGSTKFLT"},
{"lineNum":"   39","line":"    UNUSED = LibC::SIGUNUSED"},
{"lineNum":"   40","line":"  end"},
{"lineNum":"   41","line":"{% else %}"},
{"lineNum":"   42","line":"  enum Signal"},
{"lineNum":"   43","line":"    HUP    = LibC::SIGHUP"},
{"lineNum":"   44","line":"    INT    = LibC::SIGINT"},
{"lineNum":"   45","line":"    QUIT   = LibC::SIGQUIT"},
{"lineNum":"   46","line":"    ILL    = LibC::SIGILL"},
{"lineNum":"   47","line":"    TRAP   = LibC::SIGTRAP"},
{"lineNum":"   48","line":"    IOT    = LibC::SIGIOT"},
{"lineNum":"   49","line":"    ABRT   = LibC::SIGABRT"},
{"lineNum":"   50","line":"    FPE    = LibC::SIGFPE"},
{"lineNum":"   51","line":"    KILL   = LibC::SIGKILL"},
{"lineNum":"   52","line":"    BUS    = LibC::SIGBUS"},
{"lineNum":"   53","line":"    SEGV   = LibC::SIGSEGV"},
{"lineNum":"   54","line":"    SYS    = LibC::SIGSYS"},
{"lineNum":"   55","line":"    PIPE   = LibC::SIGPIPE"},
{"lineNum":"   56","line":"    ALRM   = LibC::SIGALRM"},
{"lineNum":"   57","line":"    TERM   = LibC::SIGTERM"},
{"lineNum":"   58","line":"    URG    = LibC::SIGURG"},
{"lineNum":"   59","line":"    STOP   = LibC::SIGSTOP"},
{"lineNum":"   60","line":"    TSTP   = LibC::SIGTSTP"},
{"lineNum":"   61","line":"    CONT   = LibC::SIGCONT"},
{"lineNum":"   62","line":"    CHLD   = LibC::SIGCHLD"},
{"lineNum":"   63","line":"    TTIN   = LibC::SIGTTIN"},
{"lineNum":"   64","line":"    TTOU   = LibC::SIGTTOU"},
{"lineNum":"   65","line":"    IO     = LibC::SIGIO"},
{"lineNum":"   66","line":"    XCPU   = LibC::SIGXCPU"},
{"lineNum":"   67","line":"    XFSZ   = LibC::SIGXFSZ"},
{"lineNum":"   68","line":"    VTALRM = LibC::SIGVTALRM"},
{"lineNum":"   69","line":"    USR1   = LibC::SIGUSR1"},
{"lineNum":"   70","line":"    USR2   = LibC::SIGUSR2"},
{"lineNum":"   71","line":"    WINCH  = LibC::SIGWINCH"},
{"lineNum":"   72","line":"  end"},
{"lineNum":"   73","line":"{% end %}"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"# This module provides a way to handle OS signals passed to the process."},
{"lineNum":"   76","line":"#"},
{"lineNum":"   77","line":"# ```"},
{"lineNum":"   78","line":"# puts \"Ctrl+C still has the OS default action (stops the program)\""},
{"lineNum":"   79","line":"# sleep 3"},
{"lineNum":"   80","line":"#"},
{"lineNum":"   81","line":"# Signal::INT.trap do"},
{"lineNum":"   82","line":"#   puts \"Gotcha!\""},
{"lineNum":"   83","line":"# end"},
{"lineNum":"   84","line":"# puts \"Ctrl+C will be caught from now on\""},
{"lineNum":"   85","line":"# sleep 3"},
{"lineNum":"   86","line":"#"},
{"lineNum":"   87","line":"# Signal::INT.reset"},
{"lineNum":"   88","line":"# puts \"Ctrl+C is back to the OS default action\""},
{"lineNum":"   89","line":"# sleep 3"},
{"lineNum":"   90","line":"# ```"},
{"lineNum":"   91","line":"#"},
{"lineNum":"   92","line":"# Note:"},
{"lineNum":"   93","line":"# - Signals are processed through the event loop and run in their own Fiber."},
{"lineNum":"   94","line":"# - Signals may be lost if the event loop doesn\'t run before exit."},
{"lineNum":"   95","line":"# - An uncaught exception in a signal handler is a fatal error."},
{"lineNum":"   96","line":"enum Signal"},
{"lineNum":"   97","line":"  # Sets the handler for this signal to the passed function."},
{"lineNum":"   98","line":"  #"},
{"lineNum":"   99","line":"  # After executing this, whenever the current process receives the"},
{"lineNum":"  100","line":"  # corresponding signal, the passed function will be run (instead of the OS"},
{"lineNum":"  101","line":"  # default)."},
{"lineNum":"  102","line":"  def trap(block : Signal ->)"},
{"lineNum":"  103","line":"    trap &block"},
{"lineNum":"  104","line":"  end"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"  # ditto"},
{"lineNum":"  107","line":"  def trap(&block : Signal ->)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"    Event::SignalHandler.add_handler self, block"},
{"lineNum":"  109","line":"  end"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"  # Resets the handler for this signal to the OS default."},
{"lineNum":"  112","line":"  def reset"},
{"lineNum":"  113","line":"    case self"},
{"lineNum":"  114","line":"    when CHLD"},
{"lineNum":"  115","line":"      # don\'t ignore by default.  send events to a waitpid service"},
{"lineNum":"  116","line":"      trap do","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"        Event::SignalChildHandler.instance.trigger"},
{"lineNum":"  118","line":"      end"},
{"lineNum":"  119","line":"    else"},
{"lineNum":"  120","line":"      del_handler Proc(Int32, Void).new(Pointer(Void).new(0_u64), Pointer(Void).null)"},
{"lineNum":"  121","line":"    end"},
{"lineNum":"  122","line":"  end"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  # Clears the handler for this signal and prevents the OS default action."},
{"lineNum":"  125","line":"  def ignore"},
{"lineNum":"  126","line":"    del_handler Proc(Int32, Void).new(Pointer(Void).new(1_u64), Pointer(Void).null)"},
{"lineNum":"  127","line":"  end"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"  private def del_handler(block)"},
{"lineNum":"  130","line":"    Event::SignalHandler.del_handler self"},
{"lineNum":"  131","line":"    LibC.signal value, block","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"  end"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  @@default_handlers_setup = false"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"  # :nodoc:"},
{"lineNum":"  137","line":"  def self.setup_default_handlers","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"    return if @@default_handlers_setup","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"    @@default_handlers_setup = true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    Signal::PIPE.ignore"},
{"lineNum":"  142","line":"    Signal::CHLD.reset"},
{"lineNum":"  143","line":"  end"},
{"lineNum":"  144","line":"end"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"# :nodoc:"},
{"lineNum":"  147","line":"fun __crystal_sigfault_handler(sig : LibC::Int, addr : Void*)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"  Crystal.restore_blocking_state","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"  # Capture fault signals (SEGV, BUS) and finish the process printing a backtrace first"},
{"lineNum":"  151","line":"  LibC.dprintf 2, \"Invalid memory access (signal %d) at address 0x%lx\\n\", sig, addr","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"  CallStack.print_backtrace","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"  LibC._exit sig","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"end"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"LibExt.setup_sigfault_handler","class":"lineNoCov","hits":"0","possible_hits":"1",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 13, "covered" : 0,};
var merged_data = [];
