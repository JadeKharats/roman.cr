var data = {lines:[
{"lineNum":"    1","line":"# `Set` implements a collection of unordered values with no duplicates."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# An `Enumerable` object can be converted to `Set` using the `#to_set` method."},
{"lineNum":"    4","line":"#"},
{"lineNum":"    5","line":"# `Set` uses `Hash` as storage, so you must note the following points:"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# * Equality of elements is determined according to `Object#==` and `Object#hash`."},
{"lineNum":"    8","line":"# * `Set` assumes that the identity of each element does not change while it is stored. Modifying an element of a set will render the set to an unreliable state."},
{"lineNum":"    9","line":"#"},
{"lineNum":"   10","line":"# ### Example"},
{"lineNum":"   11","line":"#"},
{"lineNum":"   12","line":"# ```"},
{"lineNum":"   13","line":"# s1 = Set{1, 2}"},
{"lineNum":"   14","line":"# s2 = [1, 2].to_set"},
{"lineNum":"   15","line":"# s3 = Set.new [1, 2]"},
{"lineNum":"   16","line":"# s1 == s2 # => true"},
{"lineNum":"   17","line":"# s1 == s3 # => true"},
{"lineNum":"   18","line":"# s1.add(2)"},
{"lineNum":"   19","line":"# s1.concat([6, 8])"},
{"lineNum":"   20","line":"# s1.subset? s2 # => false"},
{"lineNum":"   21","line":"# s2.subset? s1 # => true"},
{"lineNum":"   22","line":"# ```"},
{"lineNum":"   23","line":"struct Set(T)"},
{"lineNum":"   24","line":"  include Enumerable(T)"},
{"lineNum":"   25","line":"  include Iterable(T)"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"  # Creates a new, empty `Set`."},
{"lineNum":"   28","line":"  #"},
{"lineNum":"   29","line":"  # ```"},
{"lineNum":"   30","line":"  # s = Set(Int32).new"},
{"lineNum":"   31","line":"  # s.empty? # => true"},
{"lineNum":"   32","line":"  # ```"},
{"lineNum":"   33","line":"  #"},
{"lineNum":"   34","line":"  # An initial capacity can be specified, and it will be set as the initial capacity"},
{"lineNum":"   35","line":"  # of the internal `Hash`."},
{"lineNum":"   36","line":"  def initialize(initial_capacity = nil)"},
{"lineNum":"   37","line":"    @hash = Hash(T, Nil).new(initial_capacity: initial_capacity)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   38","line":"  end"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"  # Optimized version of `new` used when *other* is also an `Indexable`"},
{"lineNum":"   41","line":"  def self.new(other : Indexable(T))"},
{"lineNum":"   42","line":"    Set(T).new(other.size).concat(other)"},
{"lineNum":"   43","line":"  end"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"  # Creates a new set from the elements in *enumerable*."},
{"lineNum":"   46","line":"  #"},
{"lineNum":"   47","line":"  # ```"},
{"lineNum":"   48","line":"  # a = [1, 3, 5]"},
{"lineNum":"   49","line":"  # s = Set.new a"},
{"lineNum":"   50","line":"  # s.empty? # => false"},
{"lineNum":"   51","line":"  # ```"},
{"lineNum":"   52","line":"  def self.new(enumerable : Enumerable(T))"},
{"lineNum":"   53","line":"    Set(T).new.concat(enumerable)"},
{"lineNum":"   54","line":"  end"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"  # Alias for `add`"},
{"lineNum":"   57","line":"  def <<(object : T)"},
{"lineNum":"   58","line":"    add object"},
{"lineNum":"   59","line":"  end"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  # Adds *object* to the set and returns `self`."},
{"lineNum":"   62","line":"  #"},
{"lineNum":"   63","line":"  # ```"},
{"lineNum":"   64","line":"  # s = Set{1, 5}"},
{"lineNum":"   65","line":"  # s.includes? 8 # => false"},
{"lineNum":"   66","line":"  # s << 8"},
{"lineNum":"   67","line":"  # s.includes? 8 # => true"},
{"lineNum":"   68","line":"  # ```"},
{"lineNum":"   69","line":"  def add(object : T)"},
{"lineNum":"   70","line":"    @hash[object] = nil"},
{"lineNum":"   71","line":"    self"},
{"lineNum":"   72","line":"  end"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"  # Adds `#each` element of *elems* to the set and returns `self`."},
{"lineNum":"   75","line":"  #"},
{"lineNum":"   76","line":"  # ```"},
{"lineNum":"   77","line":"  # s = Set{1, 5}"},
{"lineNum":"   78","line":"  # s.concat [5, 5, 8, 9]"},
{"lineNum":"   79","line":"  # s.size # => 4"},
{"lineNum":"   80","line":"  # ```"},
{"lineNum":"   81","line":"  #"},
{"lineNum":"   82","line":"  # See also: `#|` to merge two sets and return a new one."},
{"lineNum":"   83","line":"  def concat(elems)"},
{"lineNum":"   84","line":"    elems.each { |elem| self << elem }"},
{"lineNum":"   85","line":"    self"},
{"lineNum":"   86","line":"  end"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"  # Returns `true` if *object* exists in the set."},
{"lineNum":"   89","line":"  #"},
{"lineNum":"   90","line":"  # ```"},
{"lineNum":"   91","line":"  # s = Set{1, 5}"},
{"lineNum":"   92","line":"  # s.includes? 5 # => true"},
{"lineNum":"   93","line":"  # s.includes? 9 # => false"},
{"lineNum":"   94","line":"  # ```"},
{"lineNum":"   95","line":"  def includes?(object)"},
{"lineNum":"   96","line":"    @hash.has_key?(object)"},
{"lineNum":"   97","line":"  end"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  # Removes the *object* from the set and returns `self`."},
{"lineNum":"  100","line":"  #"},
{"lineNum":"  101","line":"  # ```"},
{"lineNum":"  102","line":"  # s = Set{1, 5}"},
{"lineNum":"  103","line":"  # s.includes? 5 # => true"},
{"lineNum":"  104","line":"  # s.delete 5"},
{"lineNum":"  105","line":"  # s.includes? 5 # => false"},
{"lineNum":"  106","line":"  # ```"},
{"lineNum":"  107","line":"  def delete(object)"},
{"lineNum":"  108","line":"    @hash.delete(object)"},
{"lineNum":"  109","line":"    self"},
{"lineNum":"  110","line":"  end"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  # Returns the number of elements in the set."},
{"lineNum":"  113","line":"  #"},
{"lineNum":"  114","line":"  # ```"},
{"lineNum":"  115","line":"  # s = Set{1, 5}"},
{"lineNum":"  116","line":"  # s.size # => 2"},
{"lineNum":"  117","line":"  # ```"},
{"lineNum":"  118","line":"  def size"},
{"lineNum":"  119","line":"    @hash.size"},
{"lineNum":"  120","line":"  end"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  # Removes all elements in the set, and returns `self`."},
{"lineNum":"  123","line":"  #"},
{"lineNum":"  124","line":"  # ```"},
{"lineNum":"  125","line":"  # s = Set{1, 5}"},
{"lineNum":"  126","line":"  # s.size # => 2"},
{"lineNum":"  127","line":"  # s.clear"},
{"lineNum":"  128","line":"  # s.size # => 0"},
{"lineNum":"  129","line":"  # ```"},
{"lineNum":"  130","line":"  def clear"},
{"lineNum":"  131","line":"    @hash.clear"},
{"lineNum":"  132","line":"    self"},
{"lineNum":"  133","line":"  end"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"  # Returns `true` if the set is empty."},
{"lineNum":"  136","line":"  #"},
{"lineNum":"  137","line":"  # ```"},
{"lineNum":"  138","line":"  # s = Set(Int32).new"},
{"lineNum":"  139","line":"  # s.empty? # => true"},
{"lineNum":"  140","line":"  # s << 3"},
{"lineNum":"  141","line":"  # s.empty? # => false"},
{"lineNum":"  142","line":"  # ```"},
{"lineNum":"  143","line":"  def empty?"},
{"lineNum":"  144","line":"    @hash.empty?"},
{"lineNum":"  145","line":"  end"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  # Yields each element of the set, and returns `self`."},
{"lineNum":"  148","line":"  def each"},
{"lineNum":"  149","line":"    @hash.each_key do |key|"},
{"lineNum":"  150","line":"      yield key"},
{"lineNum":"  151","line":"    end"},
{"lineNum":"  152","line":"  end"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"  # Returns an iterator for each element of the set."},
{"lineNum":"  155","line":"  def each"},
{"lineNum":"  156","line":"    @hash.each_key"},
{"lineNum":"  157","line":"  end"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"  # Intersection: returns a new set containing elements common to both sets."},
{"lineNum":"  160","line":"  #"},
{"lineNum":"  161","line":"  # ```"},
{"lineNum":"  162","line":"  # Set{1, 1, 3, 5} & Set{1, 2, 3}               # => Set{1, 3}"},
{"lineNum":"  163","line":"  # Set{\'a\', \'b\', \'b\', \'z\'} & Set{\'a\', \'b\', \'c\'} # => Set{\'a\', \'b\'}"},
{"lineNum":"  164","line":"  # ```"},
{"lineNum":"  165","line":"  def &(other : Set)"},
{"lineNum":"  166","line":"    smallest, largest = self, other"},
{"lineNum":"  167","line":"    if largest.size < smallest.size"},
{"lineNum":"  168","line":"      smallest, largest = largest, smallest"},
{"lineNum":"  169","line":"    end"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    set = Set(T).new"},
{"lineNum":"  172","line":"    smallest.each do |value|"},
{"lineNum":"  173","line":"      set.add value if largest.includes?(value)"},
{"lineNum":"  174","line":"    end"},
{"lineNum":"  175","line":"    set"},
{"lineNum":"  176","line":"  end"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"  # Union: returns a new set containing all unique elements from both sets."},
{"lineNum":"  179","line":"  #"},
{"lineNum":"  180","line":"  # ```"},
{"lineNum":"  181","line":"  # Set{1, 1, 3, 5} | Set{1, 2, 3}               # => Set{1, 3, 5, 2}"},
{"lineNum":"  182","line":"  # Set{\'a\', \'b\', \'b\', \'z\'} | Set{\'a\', \'b\', \'c\'} # => Set{\'a\', \'b\', \'z\', \'c\'}"},
{"lineNum":"  183","line":"  # ```"},
{"lineNum":"  184","line":"  #"},
{"lineNum":"  185","line":"  # See also: `#concat` to add elements from a set to `self`."},
{"lineNum":"  186","line":"  def |(other : Set(U)) forall U"},
{"lineNum":"  187","line":"    set = Set(T | U).new(Math.max(size, other.size))"},
{"lineNum":"  188","line":"    each { |value| set.add value }"},
{"lineNum":"  189","line":"    other.each { |value| set.add value }"},
{"lineNum":"  190","line":"    set"},
{"lineNum":"  191","line":"  end"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"  # Difference: returns a new set containing elements in this set that are not"},
{"lineNum":"  194","line":"  # present in the other."},
{"lineNum":"  195","line":"  #"},
{"lineNum":"  196","line":"  # ```"},
{"lineNum":"  197","line":"  # Set{1, 2, 3, 4, 5} - Set{2, 4}               # => Set{1, 3, 5}"},
{"lineNum":"  198","line":"  # Set{\'a\', \'b\', \'b\', \'z\'} - Set{\'a\', \'b\', \'c\'} # => Set{\'z\'}"},
{"lineNum":"  199","line":"  # ```"},
{"lineNum":"  200","line":"  def -(other : Set)"},
{"lineNum":"  201","line":"    set = Set(T).new"},
{"lineNum":"  202","line":"    each do |value|"},
{"lineNum":"  203","line":"      set.add value unless other.includes?(value)"},
{"lineNum":"  204","line":"    end"},
{"lineNum":"  205","line":"    set"},
{"lineNum":"  206","line":"  end"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"  # Difference: returns a new set containing elements in this set that are not"},
{"lineNum":"  209","line":"  # present in the other enumerable."},
{"lineNum":"  210","line":"  #"},
{"lineNum":"  211","line":"  # ```"},
{"lineNum":"  212","line":"  # Set{1, 2, 3, 4, 5} - [2, 4]               # => Set{1, 3, 5}"},
{"lineNum":"  213","line":"  # Set{\'a\', \'b\', \'b\', \'z\'} - [\'a\', \'b\', \'c\'] # => Set{\'z\'}"},
{"lineNum":"  214","line":"  # ```"},
{"lineNum":"  215","line":"  def -(other : Enumerable)"},
{"lineNum":"  216","line":"    dup.subtract other"},
{"lineNum":"  217","line":"  end"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"  # Symmetric Difference: returns a new set `(self - other) | (other - self)`."},
{"lineNum":"  220","line":"  # Equivalently, returns `(self | other) - (self & other)`."},
{"lineNum":"  221","line":"  #"},
{"lineNum":"  222","line":"  # ```"},
{"lineNum":"  223","line":"  # Set{1, 2, 3, 4, 5} ^ Set{2, 4, 6}            # => Set{1, 3, 5, 6}"},
{"lineNum":"  224","line":"  # Set{\'a\', \'b\', \'b\', \'z\'} ^ Set{\'a\', \'b\', \'c\'} # => Set{\'z\', \'c\'}"},
{"lineNum":"  225","line":"  # ```"},
{"lineNum":"  226","line":"  def ^(other : Set(U)) forall U"},
{"lineNum":"  227","line":"    set = Set(T | U).new"},
{"lineNum":"  228","line":"    each do |value|"},
{"lineNum":"  229","line":"      set.add value unless other.includes?(value)"},
{"lineNum":"  230","line":"    end"},
{"lineNum":"  231","line":"    other.each do |value|"},
{"lineNum":"  232","line":"      set.add value unless includes?(value)"},
{"lineNum":"  233","line":"    end"},
{"lineNum":"  234","line":"    set"},
{"lineNum":"  235","line":"  end"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"  # Symmetric Difference: returns a new set `(self - other) | (other - self)`."},
{"lineNum":"  238","line":"  # Equivalently, returns `(self | other) - (self & other)`."},
{"lineNum":"  239","line":"  #"},
{"lineNum":"  240","line":"  # ```"},
{"lineNum":"  241","line":"  # Set{1, 2, 3, 4, 5} ^ [2, 4, 6]            # => Set{1, 3, 5, 6}"},
{"lineNum":"  242","line":"  # Set{\'a\', \'b\', \'b\', \'z\'} ^ [\'a\', \'b\', \'c\'] # => Set{\'z\', \'c\'}"},
{"lineNum":"  243","line":"  # ```"},
{"lineNum":"  244","line":"  def ^(other : Enumerable(U)) forall U"},
{"lineNum":"  245","line":"    set = Set(T | U).new(self)"},
{"lineNum":"  246","line":"    other.each do |value|"},
{"lineNum":"  247","line":"      if includes?(value)"},
{"lineNum":"  248","line":"        set.delete value"},
{"lineNum":"  249","line":"      else"},
{"lineNum":"  250","line":"        set.add value"},
{"lineNum":"  251","line":"      end"},
{"lineNum":"  252","line":"    end"},
{"lineNum":"  253","line":"    set"},
{"lineNum":"  254","line":"  end"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"  # Returns `self` after removing from it those elements that are present in"},
{"lineNum":"  257","line":"  # the given enumerable."},
{"lineNum":"  258","line":"  #"},
{"lineNum":"  259","line":"  # ```"},
{"lineNum":"  260","line":"  # Set{\'a\', \'b\', \'b\', \'z\'}.subtract Set{\'a\', \'b\', \'c\'} # => Set{\'z\'}"},
{"lineNum":"  261","line":"  # Set{1, 2, 3, 4, 5}.subtract [2, 4, 6]               # => Set{1, 3, 5}"},
{"lineNum":"  262","line":"  # ```"},
{"lineNum":"  263","line":"  def subtract(other : Enumerable)"},
{"lineNum":"  264","line":"    other.each do |value|"},
{"lineNum":"  265","line":"      delete value"},
{"lineNum":"  266","line":"    end"},
{"lineNum":"  267","line":"    self"},
{"lineNum":"  268","line":"  end"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"  # Returns `true` if both sets have the same elements."},
{"lineNum":"  271","line":"  #"},
{"lineNum":"  272","line":"  # ```"},
{"lineNum":"  273","line":"  # Set{1, 5} == Set{1, 5} # => true"},
{"lineNum":"  274","line":"  # ```"},
{"lineNum":"  275","line":"  def ==(other : Set)"},
{"lineNum":"  276","line":"    same?(other) || @hash == other.@hash"},
{"lineNum":"  277","line":"  end"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"  # Same as `#includes?`."},
{"lineNum":"  280","line":"  #"},
{"lineNum":"  281","line":"  # It is for convenience with using on `case` statement."},
{"lineNum":"  282","line":"  #"},
{"lineNum":"  283","line":"  # ```"},
{"lineNum":"  284","line":"  # red_like = Set{\"red\", \"pink\", \"violet\"}"},
{"lineNum":"  285","line":"  # blue_like = Set{\"blue\", \"azure\", \"violet\"}"},
{"lineNum":"  286","line":"  #"},
{"lineNum":"  287","line":"  # case \"violet\""},
{"lineNum":"  288","line":"  # when red_like & blue_like"},
{"lineNum":"  289","line":"  #   puts \"red & blue like color!\""},
{"lineNum":"  290","line":"  # when red_like"},
{"lineNum":"  291","line":"  #   puts \"red like color!\""},
{"lineNum":"  292","line":"  # when blue_like"},
{"lineNum":"  293","line":"  #   puts \"blue like color!\""},
{"lineNum":"  294","line":"  # end"},
{"lineNum":"  295","line":"  # ```"},
{"lineNum":"  296","line":"  #"},
{"lineNum":"  297","line":"  # See also: `Object#===`."},
{"lineNum":"  298","line":"  def ===(object : T)"},
{"lineNum":"  299","line":"    includes? object"},
{"lineNum":"  300","line":"  end"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"  # Returns a new `Set` with all of the same elements."},
{"lineNum":"  303","line":"  def dup"},
{"lineNum":"  304","line":"    Set.new(self)"},
{"lineNum":"  305","line":"  end"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"  # Returns a new `Set` with all of the elements cloned."},
{"lineNum":"  308","line":"  def clone"},
{"lineNum":"  309","line":"    clone = Set(T).new(self.size)"},
{"lineNum":"  310","line":"    each do |element|"},
{"lineNum":"  311","line":"      clone << element.clone"},
{"lineNum":"  312","line":"    end"},
{"lineNum":"  313","line":"    clone"},
{"lineNum":"  314","line":"  end"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"  # Returns the elements as an `Array`."},
{"lineNum":"  317","line":"  #"},
{"lineNum":"  318","line":"  # ```"},
{"lineNum":"  319","line":"  # Set{1, 5}.to_a # => [1,5]"},
{"lineNum":"  320","line":"  # ```"},
{"lineNum":"  321","line":"  def to_a"},
{"lineNum":"  322","line":"    @hash.keys"},
{"lineNum":"  323","line":"  end"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"  # Alias of `#to_s`."},
{"lineNum":"  326","line":"  def inspect(io)"},
{"lineNum":"  327","line":"    to_s(io)"},
{"lineNum":"  328","line":"  end"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"  def pretty_print(pp) : Nil"},
{"lineNum":"  331","line":"    pp.list(\"Set{\", self, \"}\")"},
{"lineNum":"  332","line":"  end"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"  # See `Object#hash(hasher)`"},
{"lineNum":"  335","line":"  def_hash @hash"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"  # Returns `true` if the set and the given set have at least one element in"},
{"lineNum":"  338","line":"  # common."},
{"lineNum":"  339","line":"  #"},
{"lineNum":"  340","line":"  # ```"},
{"lineNum":"  341","line":"  # Set{1, 2, 3}.intersects? Set{4, 5} # => false"},
{"lineNum":"  342","line":"  # Set{1, 2, 3}.intersects? Set{3, 4} # => true"},
{"lineNum":"  343","line":"  # ```"},
{"lineNum":"  344","line":"  def intersects?(other : Set)"},
{"lineNum":"  345","line":"    if size < other.size"},
{"lineNum":"  346","line":"      any? { |o| other.includes?(o) }"},
{"lineNum":"  347","line":"    else"},
{"lineNum":"  348","line":"      other.any? { |o| includes?(o) }"},
{"lineNum":"  349","line":"    end"},
{"lineNum":"  350","line":"  end"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"  # Writes a string representation of the set to *io*."},
{"lineNum":"  353","line":"  def to_s(io)"},
{"lineNum":"  354","line":"    io << \"Set{\""},
{"lineNum":"  355","line":"    join \", \", io, &.inspect(io)"},
{"lineNum":"  356","line":"    io << \"}\""},
{"lineNum":"  357","line":"  end"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"  # Returns `true` if the set is a subset of the *other* set."},
{"lineNum":"  360","line":"  #"},
{"lineNum":"  361","line":"  # This set must have the same or fewer elements than the *other* set, and all"},
{"lineNum":"  362","line":"  # of elements in this set must be present in the *other* set."},
{"lineNum":"  363","line":"  #"},
{"lineNum":"  364","line":"  # ```"},
{"lineNum":"  365","line":"  # Set{1, 5}.subset? Set{1, 3, 5}    # => true"},
{"lineNum":"  366","line":"  # Set{1, 3, 5}.subset? Set{1, 3, 5} # => true"},
{"lineNum":"  367","line":"  # ```"},
{"lineNum":"  368","line":"  def subset?(other : Set)"},
{"lineNum":"  369","line":"    return false if other.size < size"},
{"lineNum":"  370","line":"    all? { |value| other.includes?(value) }"},
{"lineNum":"  371","line":"  end"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"  # Returns `true` if the set is a proper subset of the *other* set."},
{"lineNum":"  374","line":"  #"},
{"lineNum":"  375","line":"  # This set must have fewer elements than the *other* set, and all"},
{"lineNum":"  376","line":"  # of elements in this set must be present in the *other* set."},
{"lineNum":"  377","line":"  #"},
{"lineNum":"  378","line":"  # ```"},
{"lineNum":"  379","line":"  # Set{1, 5}.proper_subset? Set{1, 3, 5}    # => true"},
{"lineNum":"  380","line":"  # Set{1, 3, 5}.proper_subset? Set{1, 3, 5} # => false"},
{"lineNum":"  381","line":"  # ```"},
{"lineNum":"  382","line":"  def proper_subset?(other : Set)"},
{"lineNum":"  383","line":"    return false if other.size <= size"},
{"lineNum":"  384","line":"    all? { |value| other.includes?(value) }"},
{"lineNum":"  385","line":"  end"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"  # Returns `true` if the set is a superset of the *other* set."},
{"lineNum":"  388","line":"  #"},
{"lineNum":"  389","line":"  # The *other* must have the same or fewer elements than this set, and all of"},
{"lineNum":"  390","line":"  # elements in the *other* set must be present in this set."},
{"lineNum":"  391","line":"  #"},
{"lineNum":"  392","line":"  # ```"},
{"lineNum":"  393","line":"  # Set{1, 3, 5}.superset? Set{1, 5}    # => true"},
{"lineNum":"  394","line":"  # Set{1, 3, 5}.superset? Set{1, 3, 5} # => true"},
{"lineNum":"  395","line":"  # ```"},
{"lineNum":"  396","line":"  def superset?(other : Set)"},
{"lineNum":"  397","line":"    other.subset?(self)"},
{"lineNum":"  398","line":"  end"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"  # Returns `true` if the set is a superset of the *other* set."},
{"lineNum":"  401","line":"  #"},
{"lineNum":"  402","line":"  # The *other* must have the same or fewer elements than this set, and all of"},
{"lineNum":"  403","line":"  # elements in the *other* set must be present in this set."},
{"lineNum":"  404","line":"  #"},
{"lineNum":"  405","line":"  # ```"},
{"lineNum":"  406","line":"  # Set{1, 3, 5}.proper_superset? Set{1, 5}    # => true"},
{"lineNum":"  407","line":"  # Set{1, 3, 5}.proper_superset? Set{1, 3, 5} # => false"},
{"lineNum":"  408","line":"  # ```"},
{"lineNum":"  409","line":"  def proper_superset?(other : Set)"},
{"lineNum":"  410","line":"    other.proper_subset?(self)"},
{"lineNum":"  411","line":"  end"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"  # :nodoc:"},
{"lineNum":"  414","line":"  def object_id"},
{"lineNum":"  415","line":"    @hash.object_id"},
{"lineNum":"  416","line":"  end"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"  # :nodoc:"},
{"lineNum":"  419","line":"  def same?(other : Set)"},
{"lineNum":"  420","line":"    @hash.same?(other.@hash)"},
{"lineNum":"  421","line":"  end"},
{"lineNum":"  422","line":"end"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"module Enumerable"},
{"lineNum":"  425","line":"  # Returns a new `Set` with each unique element in the enumerable."},
{"lineNum":"  426","line":"  def to_set"},
{"lineNum":"  427","line":"    Set.new(self)"},
{"lineNum":"  428","line":"  end"},
{"lineNum":"  429","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
