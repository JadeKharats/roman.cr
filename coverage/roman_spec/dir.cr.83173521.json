var data = {lines:[
{"lineNum":"    1","line":"require \"c/dirent\""},
{"lineNum":"    2","line":"require \"c/unistd\""},
{"lineNum":"    3","line":"require \"c/sys/stat\""},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"# Objects of class `Dir` are directory streams representing directories in the underlying file system."},
{"lineNum":"    6","line":"# They provide a variety of ways to list directories and their contents."},
{"lineNum":"    7","line":"#"},
{"lineNum":"    8","line":"# The directory used in these examples contains the two regular files (`config.h` and `main.rb`),"},
{"lineNum":"    9","line":"# the parent directory (`..`), and the directory itself (`.`)."},
{"lineNum":"   10","line":"#"},
{"lineNum":"   11","line":"# See also: `File`."},
{"lineNum":"   12","line":"class Dir"},
{"lineNum":"   13","line":"  include Enumerable(String)"},
{"lineNum":"   14","line":"  include Iterable(String)"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"  getter path : String"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"  # Returns a new directory object for the named directory."},
{"lineNum":"   19","line":"  def initialize(@path)"},
{"lineNum":"   20","line":"    @dir = LibC.opendir(@path.check_no_null_byte)"},
{"lineNum":"   21","line":"    unless @dir"},
{"lineNum":"   22","line":"      raise Errno.new(\"Error opening directory \'#{@path}\'\")"},
{"lineNum":"   23","line":"    end"},
{"lineNum":"   24","line":"    @closed = false"},
{"lineNum":"   25","line":"  end"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"  # Alias for `new(path)`"},
{"lineNum":"   28","line":"  def self.open(path) : self"},
{"lineNum":"   29","line":"    new path"},
{"lineNum":"   30","line":"  end"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"  # Opens a directory and yields it, closing it at the end of the block."},
{"lineNum":"   33","line":"  # Returns the value of the block."},
{"lineNum":"   34","line":"  def self.open(path)"},
{"lineNum":"   35","line":"    dir = new path"},
{"lineNum":"   36","line":"    begin"},
{"lineNum":"   37","line":"      yield dir"},
{"lineNum":"   38","line":"    ensure"},
{"lineNum":"   39","line":"      dir.close"},
{"lineNum":"   40","line":"    end"},
{"lineNum":"   41","line":"  end"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"  # Calls the block once for each entry in this directory,"},
{"lineNum":"   44","line":"  # passing the filename of each entry as a parameter to the block."},
{"lineNum":"   45","line":"  #"},
{"lineNum":"   46","line":"  # ```"},
{"lineNum":"   47","line":"  # Dir.mkdir(\"testdir\")"},
{"lineNum":"   48","line":"  # File.write(\"testdir/config.h\", \"\")"},
{"lineNum":"   49","line":"  #"},
{"lineNum":"   50","line":"  # d = Dir.new(\"testdir\")"},
{"lineNum":"   51","line":"  # d.each { |x| puts \"Got #{x}\" }"},
{"lineNum":"   52","line":"  # ```"},
{"lineNum":"   53","line":"  #"},
{"lineNum":"   54","line":"  # produces:"},
{"lineNum":"   55","line":"  #"},
{"lineNum":"   56","line":"  # ```text"},
{"lineNum":"   57","line":"  # Got ."},
{"lineNum":"   58","line":"  # Got .."},
{"lineNum":"   59","line":"  # Got config.h"},
{"lineNum":"   60","line":"  # ```"},
{"lineNum":"   61","line":"  def each : Nil"},
{"lineNum":"   62","line":"    while entry = read"},
{"lineNum":"   63","line":"      yield entry"},
{"lineNum":"   64","line":"    end"},
{"lineNum":"   65","line":"  end"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"  def each"},
{"lineNum":"   68","line":"    EntryIterator.new(self)"},
{"lineNum":"   69","line":"  end"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"  # Returns an array containing all of the filenames in the given directory."},
{"lineNum":"   72","line":"  def entries : Array(String)"},
{"lineNum":"   73","line":"    entries = [] of String"},
{"lineNum":"   74","line":"    each do |filename|"},
{"lineNum":"   75","line":"      entries << filename"},
{"lineNum":"   76","line":"    end"},
{"lineNum":"   77","line":"    entries"},
{"lineNum":"   78","line":"  end"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  # Calls the block once for each entry except for `.` and `..` in this directory,"},
{"lineNum":"   81","line":"  # passing the filename of each entry as a parameter to the block."},
{"lineNum":"   82","line":"  #"},
{"lineNum":"   83","line":"  # ```"},
{"lineNum":"   84","line":"  # Dir.mkdir(\"testdir\")"},
{"lineNum":"   85","line":"  # File.write(\"testdir/config.h\", \"\")"},
{"lineNum":"   86","line":"  #"},
{"lineNum":"   87","line":"  # d = Dir.new(\"testdir\")"},
{"lineNum":"   88","line":"  # d.each_child { |x| puts \"Got #{x}\" }"},
{"lineNum":"   89","line":"  # ```"},
{"lineNum":"   90","line":"  #"},
{"lineNum":"   91","line":"  # produces:"},
{"lineNum":"   92","line":"  #"},
{"lineNum":"   93","line":"  # ```text"},
{"lineNum":"   94","line":"  # Got config.h"},
{"lineNum":"   95","line":"  # ```"},
{"lineNum":"   96","line":"  def each_child : Nil"},
{"lineNum":"   97","line":"    excluded = {\".\", \"..\"}"},
{"lineNum":"   98","line":"    while entry = read"},
{"lineNum":"   99","line":"      yield entry unless excluded.includes?(entry)"},
{"lineNum":"  100","line":"    end"},
{"lineNum":"  101","line":"  end"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"  def each_child"},
{"lineNum":"  104","line":"    ChildIterator.new(self)"},
{"lineNum":"  105","line":"  end"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"  # Returns an array containing all of the filenames except for `.` and `..`"},
{"lineNum":"  108","line":"  # in the given directory."},
{"lineNum":"  109","line":"  def children : Array(String)"},
{"lineNum":"  110","line":"    entries = [] of String"},
{"lineNum":"  111","line":"    each_child do |filename|"},
{"lineNum":"  112","line":"      entries << filename"},
{"lineNum":"  113","line":"    end"},
{"lineNum":"  114","line":"    entries"},
{"lineNum":"  115","line":"  end"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"  # Reads the next entry from dir and returns it as a string. Returns `nil` at the end of the stream."},
{"lineNum":"  118","line":"  #"},
{"lineNum":"  119","line":"  # ```"},
{"lineNum":"  120","line":"  # d = Dir.new(\"testdir\")"},
{"lineNum":"  121","line":"  # array = [] of String"},
{"lineNum":"  122","line":"  # while file = d.read"},
{"lineNum":"  123","line":"  #   array << file"},
{"lineNum":"  124","line":"  # end"},
{"lineNum":"  125","line":"  # array.sort # => [\".\", \"..\", \"config.h\"]"},
{"lineNum":"  126","line":"  # ```"},
{"lineNum":"  127","line":"  def read"},
{"lineNum":"  128","line":"    # readdir() returns NULL for failure and sets errno or returns NULL for EOF but leaves errno as is.  wtf."},
{"lineNum":"  129","line":"    Errno.value = 0"},
{"lineNum":"  130","line":"    ent = LibC.readdir(@dir)"},
{"lineNum":"  131","line":"    if ent"},
{"lineNum":"  132","line":"      String.new(ent.value.d_name.to_unsafe)"},
{"lineNum":"  133","line":"    elsif Errno.value != 0"},
{"lineNum":"  134","line":"      raise Errno.new(\"readdir\")"},
{"lineNum":"  135","line":"    else"},
{"lineNum":"  136","line":"      nil"},
{"lineNum":"  137","line":"    end"},
{"lineNum":"  138","line":"  end"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  # Repositions this directory to the first entry."},
{"lineNum":"  141","line":"  def rewind"},
{"lineNum":"  142","line":"    LibC.rewinddir(@dir)"},
{"lineNum":"  143","line":"    self"},
{"lineNum":"  144","line":"  end"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"  # Closes the directory stream."},
{"lineNum":"  147","line":"  def close"},
{"lineNum":"  148","line":"    return if @closed"},
{"lineNum":"  149","line":"    if LibC.closedir(@dir) != 0"},
{"lineNum":"  150","line":"      raise Errno.new(\"closedir\")"},
{"lineNum":"  151","line":"    end"},
{"lineNum":"  152","line":"    @closed = true"},
{"lineNum":"  153","line":"  end"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  # Returns the current working directory."},
{"lineNum":"  156","line":"  def self.current : String"},
{"lineNum":"  157","line":"    if dir = LibC.getcwd(nil, 0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  158","line":"      String.new(dir).tap { LibC.free(dir.as(Void*)) }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  159","line":"    else"},
{"lineNum":"  160","line":"      raise Errno.new(\"getcwd\")","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  161","line":"    end"},
{"lineNum":"  162","line":"  end"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"  # Changes the current working directory of the process to the given string."},
{"lineNum":"  165","line":"  def self.cd(path)"},
{"lineNum":"  166","line":"    if LibC.chdir(path.check_no_null_byte) != 0"},
{"lineNum":"  167","line":"      raise Errno.new(\"Error while changing directory to #{path.inspect}\")"},
{"lineNum":"  168","line":"    end"},
{"lineNum":"  169","line":"  end"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"  # Changes the current working directory of the process to the given string"},
{"lineNum":"  172","line":"  # and invokes the block, restoring the original working directory"},
{"lineNum":"  173","line":"  # when the block exits."},
{"lineNum":"  174","line":"  def self.cd(path)"},
{"lineNum":"  175","line":"    old = current"},
{"lineNum":"  176","line":"    begin"},
{"lineNum":"  177","line":"      cd(path)"},
{"lineNum":"  178","line":"      yield"},
{"lineNum":"  179","line":"    ensure"},
{"lineNum":"  180","line":"      cd(old)"},
{"lineNum":"  181","line":"    end"},
{"lineNum":"  182","line":"  end"},
{"lineNum":"  183","line":"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  184","line":"  # See `#each`."},
{"lineNum":"  185","line":"  def self.each(dirname)"},
{"lineNum":"  186","line":"    Dir.open(dirname) do |dir|"},
{"lineNum":"  187","line":"      dir.each do |filename|"},
{"lineNum":"  188","line":"        yield filename"},
{"lineNum":"  189","line":"      end"},
{"lineNum":"  190","line":"    end"},
{"lineNum":"  191","line":"  end"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"  # See `#entries`."},
{"lineNum":"  194","line":"  def self.entries(dirname) : Array(String)"},
{"lineNum":"  195","line":"    Dir.open(dirname) do |dir|"},
{"lineNum":"  196","line":"      return dir.entries"},
{"lineNum":"  197","line":"    end"},
{"lineNum":"  198","line":"  end"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"  # See `#each_child`."},
{"lineNum":"  201","line":"  def self.each_child(dirname)"},
{"lineNum":"  202","line":"    Dir.open(dirname) do |dir|"},
{"lineNum":"  203","line":"      dir.each_child do |filename|"},
{"lineNum":"  204","line":"        yield filename"},
{"lineNum":"  205","line":"      end"},
{"lineNum":"  206","line":"    end"},
{"lineNum":"  207","line":"  end"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"  # See `#children`."},
{"lineNum":"  210","line":"  def self.children(dirname) : Array(String)"},
{"lineNum":"  211","line":"    Dir.open(dirname) do |dir|"},
{"lineNum":"  212","line":"      return dir.children"},
{"lineNum":"  213","line":"    end"},
{"lineNum":"  214","line":"  end"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"  # Returns `true` if the given path exists and is a directory"},
{"lineNum":"  217","line":"  def self.exists?(path) : Bool","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":"    if LibC.stat(path.check_no_null_byte, out stat) != 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"      if Errno.value == Errno::ENOENT || Errno.value == Errno::ENOTDIR","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":"        return false"},
{"lineNum":"  221","line":"      else"},
{"lineNum":"  222","line":"        raise Errno.new(\"stat\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":"      end"},
{"lineNum":"  224","line":"    end"},
{"lineNum":"  225","line":"    File::Stat.new(stat).directory?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"  end"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"  # Returns `true` if the directory at *path* is empty, otherwise returns `false`."},
{"lineNum":"  229","line":"  # Raises `Errno` if the directory at *path* does not exist."},
{"lineNum":"  230","line":"  #"},
{"lineNum":"  231","line":"  # ```"},
{"lineNum":"  232","line":"  # Dir.mkdir(\"bar\")"},
{"lineNum":"  233","line":"  # Dir.empty?(\"bar\") # => true"},
{"lineNum":"  234","line":"  # File.write(\"bar/a_file\", \"The content\")"},
{"lineNum":"  235","line":"  # Dir.empty?(\"bar\") # => false"},
{"lineNum":"  236","line":"  # ```"},
{"lineNum":"  237","line":"  def self.empty?(path) : Bool"},
{"lineNum":"  238","line":"    raise Errno.new(\"Error determining size of \'#{path}\'\") unless exists?(path)"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"    each_child(path) do |f|"},
{"lineNum":"  241","line":"      return false"},
{"lineNum":"  242","line":"    end"},
{"lineNum":"  243","line":"    true"},
{"lineNum":"  244","line":"  end"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"  # Creates a new directory at the given path. The linux-style permission mode"},
{"lineNum":"  247","line":"  # can be specified, with a default of 777 (0o777)."},
{"lineNum":"  248","line":"  def self.mkdir(path, mode = 0o777)"},
{"lineNum":"  249","line":"    if LibC.mkdir(path.check_no_null_byte, mode) == -1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":"      raise Errno.new(\"Unable to create directory \'#{path}\'\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"    end"},
{"lineNum":"  252","line":"    0"},
{"lineNum":"  253","line":"  end"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"  # Creates a new directory at the given path, including any non-existing"},
{"lineNum":"  256","line":"  # intermediate directories. The linux-style permission mode can be specified,"},
{"lineNum":"  257","line":"  # with a default of 777 (0o777)."},
{"lineNum":"  258","line":"  def self.mkdir_p(path, mode = 0o777)"},
{"lineNum":"  259","line":"    return 0 if Dir.exists?(path)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    components = path.split(File::SEPARATOR)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"    if components.first == \".\" || components.first == \"\""},
{"lineNum":"  263","line":"      subpath = components.shift"},
{"lineNum":"  264","line":"    else"},
{"lineNum":"  265","line":"      subpath = \".\""},
{"lineNum":"  266","line":"    end"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"    components.each do |component|"},
{"lineNum":"  269","line":"      subpath = File.join subpath, component","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"      mkdir(subpath, mode) unless Dir.exists?(subpath)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  272","line":"    end"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    0"},
{"lineNum":"  275","line":"  end"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"  # Removes the directory at the given path."},
{"lineNum":"  278","line":"  def self.rmdir(path)"},
{"lineNum":"  279","line":"    if LibC.rmdir(path.check_no_null_byte) == -1"},
{"lineNum":"  280","line":"      raise Errno.new(\"Unable to remove directory \'#{path}\'\")"},
{"lineNum":"  281","line":"    end"},
{"lineNum":"  282","line":"    0"},
{"lineNum":"  283","line":"  end"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"  def to_s(io)"},
{"lineNum":"  286","line":"    io << \"#<Dir:\" << @path << \">\""},
{"lineNum":"  287","line":"  end"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"  def inspect(io)"},
{"lineNum":"  290","line":"    to_s(io)"},
{"lineNum":"  291","line":"  end"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"  def pretty_print(pp)"},
{"lineNum":"  294","line":"    pp.text inspect"},
{"lineNum":"  295","line":"  end"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"  private struct EntryIterator"},
{"lineNum":"  298","line":"    include Iterator(String)"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    def initialize(@dir : Dir)"},
{"lineNum":"  301","line":"    end"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    def next"},
{"lineNum":"  304","line":"      @dir.read || stop"},
{"lineNum":"  305","line":"    end"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"    def rewind"},
{"lineNum":"  308","line":"      @dir.rewind"},
{"lineNum":"  309","line":"      self"},
{"lineNum":"  310","line":"    end"},
{"lineNum":"  311","line":"  end"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"  private struct ChildIterator"},
{"lineNum":"  314","line":"    include Iterator(String)"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"    def initialize(@dir : Dir)"},
{"lineNum":"  317","line":"    end"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    def next"},
{"lineNum":"  320","line":"      excluded = {\".\", \"..\"}"},
{"lineNum":"  321","line":"      while entry = @dir.read"},
{"lineNum":"  322","line":"        return entry unless excluded.includes?(entry)"},
{"lineNum":"  323","line":"      end"},
{"lineNum":"  324","line":"      stop"},
{"lineNum":"  325","line":"    end"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    def rewind"},
{"lineNum":"  328","line":"      @dir.rewind"},
{"lineNum":"  329","line":"      self"},
{"lineNum":"  330","line":"    end"},
{"lineNum":"  331","line":"  end"},
{"lineNum":"  332","line":"end"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"require \"./dir/*\""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 15, "covered" : 0,};
var merged_data = [];
