var data = {lines:[
{"lineNum":"    1","line":"require \"crystal/system/time\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# `Time` represents an instance in time. Here are some examples:"},
{"lineNum":"    4","line":"#"},
{"lineNum":"    5","line":"# ### Basic Usage"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# ```"},
{"lineNum":"    8","line":"# time = Time.new(2016, 2, 15, 10, 20, 30)"},
{"lineNum":"    9","line":"#"},
{"lineNum":"   10","line":"# time.year    # => 2016"},
{"lineNum":"   11","line":"# time.month   # => 2"},
{"lineNum":"   12","line":"# time.day     # => 15"},
{"lineNum":"   13","line":"# time.hour    # => 10"},
{"lineNum":"   14","line":"# time.minute  # => 20"},
{"lineNum":"   15","line":"# time.second  # => 30"},
{"lineNum":"   16","line":"# time.monday? # => true"},
{"lineNum":"   17","line":"#"},
{"lineNum":"   18","line":"# # Creating a time instance with a date only"},
{"lineNum":"   19","line":"# Time.new(2016, 2, 15) # => 2016-02-15 00:00:00"},
{"lineNum":"   20","line":"#"},
{"lineNum":"   21","line":"# # Specifying a time"},
{"lineNum":"   22","line":"# Time.new(2016, 2, 15, 10, 20, 30) # => 2016-02-15 10:20:30"},
{"lineNum":"   23","line":"#"},
{"lineNum":"   24","line":"# # Creating a time instance in UTC"},
{"lineNum":"   25","line":"# Time.utc(2016, 2, 15, 10, 20, 30) # => 2016-02-15 10:20:30 UTC"},
{"lineNum":"   26","line":"# ```"},
{"lineNum":"   27","line":"#"},
{"lineNum":"   28","line":"# ### Formatting Time"},
{"lineNum":"   29","line":"#"},
{"lineNum":"   30","line":"# The `to_s` method returns a `String` value in the assigned format."},
{"lineNum":"   31","line":"#"},
{"lineNum":"   32","line":"# ```"},
{"lineNum":"   33","line":"# time = Time.new(2015, 10, 12)"},
{"lineNum":"   34","line":"# time.to_s(\"%Y-%m-%d\") # => \"2015-10-12\""},
{"lineNum":"   35","line":"# ```"},
{"lineNum":"   36","line":"#"},
{"lineNum":"   37","line":"# See `Time::Format` for all the directives."},
{"lineNum":"   38","line":"#"},
{"lineNum":"   39","line":"# ### Calculation"},
{"lineNum":"   40","line":"#"},
{"lineNum":"   41","line":"# ```"},
{"lineNum":"   42","line":"# Time.new(2015, 10, 10) - 5.days # => 2015-10-05 00:00:00"},
{"lineNum":"   43","line":"#"},
{"lineNum":"   44","line":"# # Time calculation returns a Time::Span instance"},
{"lineNum":"   45","line":"# span = Time.new(2015, 10, 10) - Time.new(2015, 9, 10)"},
{"lineNum":"   46","line":"# span.days          # => 30"},
{"lineNum":"   47","line":"# span.total_hours   # => 720"},
{"lineNum":"   48","line":"# span.total_minutes # => 43200"},
{"lineNum":"   49","line":"#"},
{"lineNum":"   50","line":"# # Calculation between Time::Span instances"},
{"lineNum":"   51","line":"# span_a = Time::Span.new(3, 0, 0)"},
{"lineNum":"   52","line":"# span_b = Time::Span.new(2, 0, 0)"},
{"lineNum":"   53","line":"# span = span_a - span_b"},
{"lineNum":"   54","line":"# span       # => 01:00:00"},
{"lineNum":"   55","line":"# span.class # => Time::Span"},
{"lineNum":"   56","line":"# span.hours # => 1"},
{"lineNum":"   57","line":"# ```"},
{"lineNum":"   58","line":"struct Time"},
{"lineNum":"   59","line":"  include Comparable(self)"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  # :nodoc:"},
{"lineNum":"   62","line":"  DAYS_MONTH = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"  # :nodoc:"},
{"lineNum":"   65","line":"  DAYS_MONTH_LEAP = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"  # :nodoc:"},
{"lineNum":"   68","line":"  SECONDS_PER_MINUTE = 60"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"  # :nodoc:"},
{"lineNum":"   71","line":"  SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  # :nodoc:"},
{"lineNum":"   74","line":"  SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"  # :nodoc:"},
{"lineNum":"   77","line":"  SECONDS_PER_WEEK = 7 * SECONDS_PER_DAY"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"  # :nodoc:"},
{"lineNum":"   80","line":"  NANOSECONDS_PER_MILLISECOND = 1_000_000_i64"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"  # :nodoc:"},
{"lineNum":"   83","line":"  NANOSECONDS_PER_SECOND = 1_000_000_000_i64"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"  # :nodoc:"},
{"lineNum":"   86","line":"  NANOSECONDS_PER_MINUTE = NANOSECONDS_PER_SECOND * 60"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"  # :nodoc:"},
{"lineNum":"   89","line":"  NANOSECONDS_PER_HOUR = NANOSECONDS_PER_MINUTE * 60"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"  # :nodoc:"},
{"lineNum":"   92","line":"  NANOSECONDS_PER_DAY = NANOSECONDS_PER_HOUR * 24"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  # :nodoc:"},
{"lineNum":"   95","line":"  DAYS_PER_400_YEARS = 365*400 + 97"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"  # :nodoc:"},
{"lineNum":"   98","line":"  DAYS_PER_100_YEARS = 365*100 + 24"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"  # :nodoc:"},
{"lineNum":"  101","line":"  DAYS_PER_4_YEARS = 365*4 + 1"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"  # :nodoc:"},
{"lineNum":"  104","line":"  UNIX_SECONDS = SECONDS_PER_DAY.to_i64 * (1969*365 + 1969/4 - 1969/100 + 1969/400)"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"  # :nodoc:"},
{"lineNum":"  107","line":"  MAX_SECONDS = 315537897599_i64"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"  # `DayOfWeek` represents the day."},
{"lineNum":"  110","line":"  #"},
{"lineNum":"  111","line":"  # ```"},
{"lineNum":"  112","line":"  # time = Time.new(2016, 2, 15)"},
{"lineNum":"  113","line":"  # time.day_of_week # => Monday"},
{"lineNum":"  114","line":"  # ```"},
{"lineNum":"  115","line":"  #"},
{"lineNum":"  116","line":"  # Alternatively, you can use question methods:"},
{"lineNum":"  117","line":"  #"},
{"lineNum":"  118","line":"  # ```"},
{"lineNum":"  119","line":"  # time.friday? # => false"},
{"lineNum":"  120","line":"  # time.monday? # => true"},
{"lineNum":"  121","line":"  # ```"},
{"lineNum":"  122","line":"  enum DayOfWeek"},
{"lineNum":"  123","line":"    Sunday"},
{"lineNum":"  124","line":"    Monday"},
{"lineNum":"  125","line":"    Tuesday"},
{"lineNum":"  126","line":"    Wednesday"},
{"lineNum":"  127","line":"    Thursday"},
{"lineNum":"  128","line":"    Friday"},
{"lineNum":"  129","line":"    Saturday"},
{"lineNum":"  130","line":"  end"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"  # `Kind` represents a specified time zone."},
{"lineNum":"  133","line":"  #"},
{"lineNum":"  134","line":"  # Initializing a `Time` instance with specified `Kind`:"},
{"lineNum":"  135","line":"  #"},
{"lineNum":"  136","line":"  # ```"},
{"lineNum":"  137","line":"  # time = Time.new(2016, 2, 15, 21, 1, 10, 0, Time::Kind::Local)"},
{"lineNum":"  138","line":"  # ```"},
{"lineNum":"  139","line":"  #"},
{"lineNum":"  140","line":"  # Alternatively, you can switch the `Kind` for any instance:"},
{"lineNum":"  141","line":"  #"},
{"lineNum":"  142","line":"  # ```"},
{"lineNum":"  143","line":"  # time.to_utc   # => 2016-02-15 21:00:00 UTC"},
{"lineNum":"  144","line":"  # time.to_local # => 2016-02-16 05:01:10 +0800"},
{"lineNum":"  145","line":"  # ```"},
{"lineNum":"  146","line":"  #"},
{"lineNum":"  147","line":"  # Inspection:"},
{"lineNum":"  148","line":"  #"},
{"lineNum":"  149","line":"  # ```"},
{"lineNum":"  150","line":"  # time.local? # => true"},
{"lineNum":"  151","line":"  # time.utc?   # => false"},
{"lineNum":"  152","line":"  # ```"},
{"lineNum":"  153","line":"  #"},
{"lineNum":"  154","line":"  enum Kind"},
{"lineNum":"  155","line":"    Unspecified = 0"},
{"lineNum":"  156","line":"    Utc         = 1"},
{"lineNum":"  157","line":"    Local       = 2"},
{"lineNum":"  158","line":"  end"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  @seconds : Int64"},
{"lineNum":"  161","line":"  @nanoseconds : Int32"},
{"lineNum":"  162","line":"  @kind : Kind"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"  # Returns a clock from an unspecified starting point, but strictly linearly"},
{"lineNum":"  165","line":"  # increasing. This clock should be independent from discontinuous jumps in the"},
{"lineNum":"  166","line":"  # system time, such as leap seconds, time zone adjustments or manual changes"},
{"lineNum":"  167","line":"  # to the computer\'s time."},
{"lineNum":"  168","line":"  #"},
{"lineNum":"  169","line":"  # For example, the monotonic clock must always be used to measure an elapsed"},
{"lineNum":"  170","line":"  # time."},
{"lineNum":"  171","line":"  def self.monotonic : Time::Span"},
{"lineNum":"  172","line":"    seconds, nanoseconds = Crystal::System::Time.monotonic"},
{"lineNum":"  173","line":"    Time::Span.new(seconds: seconds, nanoseconds: nanoseconds)","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  174","line":"  end"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"  # Measures how long the block took to run. Relies on `monotonic` to not be"},
{"lineNum":"  177","line":"  # affected by time fluctuations."},
{"lineNum":"  178","line":"  def self.measure : Time::Span"},
{"lineNum":"  179","line":"    start = monotonic"},
{"lineNum":"  180","line":"    yield"},
{"lineNum":"  181","line":"    monotonic - start"},
{"lineNum":"  182","line":"  end"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"  def self.new"},
{"lineNum":"  185","line":"    seconds, nanoseconds, offset = Time.compute_seconds_nanoseconds_and_offset"},
{"lineNum":"  186","line":"    new(seconds: seconds + offset, nanoseconds: nanoseconds, kind: Kind::Local)"},
{"lineNum":"  187","line":"  end"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  def self.new(year, month, day, hour = 0, minute = 0, second = 0, *, nanosecond = 0, kind = Kind::Unspecified)"},
{"lineNum":"  190","line":"    unless 1 <= year <= 9999 &&"},
{"lineNum":"  191","line":"           1 <= month <= 12 &&"},
{"lineNum":"  192","line":"           1 <= day <= Time.days_in_month(year, month) &&"},
{"lineNum":"  193","line":"           0 <= hour <= 23 &&"},
{"lineNum":"  194","line":"           0 <= minute <= 59 &&"},
{"lineNum":"  195","line":"           0 <= second <= 59 &&"},
{"lineNum":"  196","line":"           0 <= nanosecond <= 999_999_999"},
{"lineNum":"  197","line":"      raise ArgumentError.new \"Invalid time\""},
{"lineNum":"  198","line":"    end"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    days = absolute_days(year, month, day)"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    seconds = 1_i64 *"},
{"lineNum":"  203","line":"              SECONDS_PER_DAY * days +"},
{"lineNum":"  204","line":"              SECONDS_PER_HOUR * hour +"},
{"lineNum":"  205","line":"              SECONDS_PER_MINUTE * minute +"},
{"lineNum":"  206","line":"              second"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    new(seconds: seconds, nanoseconds: nanosecond.to_i, kind: kind)"},
{"lineNum":"  209","line":"  end"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"  # :nodoc:"},
{"lineNum":"  212","line":"  def self.new(time : LibC::Timespec, kind = Kind::Unspecified)"},
{"lineNum":"  213","line":"    seconds = UNIX_SECONDS + time.tv_sec"},
{"lineNum":"  214","line":"    nanoseconds = time.tv_nsec.to_i"},
{"lineNum":"  215","line":"    new(seconds: seconds, nanoseconds: nanoseconds, kind: kind)"},
{"lineNum":"  216","line":"  end"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"  def initialize(*, @seconds : Int64, @nanoseconds : Int32, @kind : Kind)"},
{"lineNum":"  219","line":"    unless 0 <= @nanoseconds < NANOSECONDS_PER_SECOND"},
{"lineNum":"  220","line":"      raise ArgumentError.new \"Invalid time: nanoseconds out of range\""},
{"lineNum":"  221","line":"    end"},
{"lineNum":"  222","line":"  end"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"  # Returns a new `Time` instance that corresponds to the number"},
{"lineNum":"  225","line":"  # seconds elapsed since the unix epoch (00:00:00 UTC on 1 January 1970)."},
{"lineNum":"  226","line":"  #"},
{"lineNum":"  227","line":"  # ```"},
{"lineNum":"  228","line":"  # Time.epoch(981173106) # => 2001-02-03 04:05:06 UTC"},
{"lineNum":"  229","line":"  # ```"},
{"lineNum":"  230","line":"  def self.epoch(seconds : Int) : Time"},
{"lineNum":"  231","line":"    utc(seconds: UNIX_SECONDS + seconds, nanoseconds: 0)"},
{"lineNum":"  232","line":"  end"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"  # Returns a new `Time` instance that corresponds to the number"},
{"lineNum":"  235","line":"  # milliseconds elapsed since the unix epoch (00:00:00 UTC on 1 January 1970)."},
{"lineNum":"  236","line":"  #"},
{"lineNum":"  237","line":"  # ```"},
{"lineNum":"  238","line":"  # time = Time.epoch_ms(981173106789) # => 2001-02-03 04:05:06.789 UTC"},
{"lineNum":"  239","line":"  # time.millisecond                   # => 789"},
{"lineNum":"  240","line":"  # ```"},
{"lineNum":"  241","line":"  def self.epoch_ms(milliseconds : Int) : Time"},
{"lineNum":"  242","line":"    milliseconds = milliseconds.to_i64"},
{"lineNum":"  243","line":"    seconds = UNIX_SECONDS + (milliseconds / 1_000)"},
{"lineNum":"  244","line":"    nanoseconds = (milliseconds % 1000) * NANOSECONDS_PER_MILLISECOND"},
{"lineNum":"  245","line":"    utc(seconds: seconds, nanoseconds: nanoseconds.to_i)"},
{"lineNum":"  246","line":"  end"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"  # Returns a new `Time` instance at the specified time in UTC time zone."},
{"lineNum":"  249","line":"  def self.utc(year, month, day, hour = 0, minute = 0, second = 0, *, nanosecond = 0) : Time"},
{"lineNum":"  250","line":"    new(year, month, day, hour, minute, second, nanosecond: nanosecond, kind: Kind::Utc)"},
{"lineNum":"  251","line":"  end"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"  # Returns a new `Time` instance at the specified time in UTC time zone."},
{"lineNum":"  254","line":"  def self.utc(*, seconds : Int64, nanoseconds : Int32) : Time"},
{"lineNum":"  255","line":"    new(seconds: seconds, nanoseconds: nanoseconds, kind: Kind::Utc)"},
{"lineNum":"  256","line":"  end"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"  def clone : self"},
{"lineNum":"  259","line":"    self"},
{"lineNum":"  260","line":"  end"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"  # Returns a `Time` that is later than this `Time` by the `Time::Span` *span*."},
{"lineNum":"  263","line":"  def +(span : Time::Span) : Time"},
{"lineNum":"  264","line":"    add_span span.to_i, span.nanoseconds"},
{"lineNum":"  265","line":"  end"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"  # Returns a `Time` that is earlier than this `Time` by the `Time::Span` *span*."},
{"lineNum":"  268","line":"  def -(span : Time::Span) : Time"},
{"lineNum":"  269","line":"    add_span -span.to_i, -span.nanoseconds"},
{"lineNum":"  270","line":"  end"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"  # Adds a number of months specified by *other*\'s value."},
{"lineNum":"  273","line":"  def +(other : Time::MonthSpan) : Time"},
{"lineNum":"  274","line":"    add_months other.value"},
{"lineNum":"  275","line":"  end"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"  # Subtracts a number of months specified by *other*\'s value."},
{"lineNum":"  278","line":"  def -(other : Time::MonthSpan) : Time"},
{"lineNum":"  279","line":"    add_months -other.value"},
{"lineNum":"  280","line":"  end"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"  private def add_months(months)"},
{"lineNum":"  283","line":"    day = self.day"},
{"lineNum":"  284","line":"    month = self.month + months.remainder(12)"},
{"lineNum":"  285","line":"    year = self.year + months.tdiv(12)"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"    if month < 1"},
{"lineNum":"  288","line":"      month = 12 + month"},
{"lineNum":"  289","line":"      year -= 1"},
{"lineNum":"  290","line":"    elsif month > 12"},
{"lineNum":"  291","line":"      month = month - 12"},
{"lineNum":"  292","line":"      year += 1"},
{"lineNum":"  293","line":"    end"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    maxday = Time.days_in_month(year, month)"},
{"lineNum":"  296","line":"    if day > maxday"},
{"lineNum":"  297","line":"      day = maxday"},
{"lineNum":"  298","line":"    end"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    temp = Time.new(year, month, day, kind: kind)"},
{"lineNum":"  301","line":"    temp + time_of_day"},
{"lineNum":"  302","line":"  end"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"  # Returns a `Time` that is this number of *seconds* and *nanoseconds* later."},
{"lineNum":"  305","line":"  def add_span(seconds : Int, nanoseconds : Int) : Time"},
{"lineNum":"  306","line":"    seconds = total_seconds + seconds"},
{"lineNum":"  307","line":"    nanoseconds = self.nanosecond.to_i64 + nanoseconds"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    # Nanoseconds might end up outside the min/max nanosecond"},
{"lineNum":"  310","line":"    # range, so take care of that"},
{"lineNum":"  311","line":"    seconds += nanoseconds.tdiv(NANOSECONDS_PER_SECOND)"},
{"lineNum":"  312","line":"    nanoseconds = nanoseconds.remainder(NANOSECONDS_PER_SECOND)"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"    if nanoseconds < 0"},
{"lineNum":"  315","line":"      seconds -= 1"},
{"lineNum":"  316","line":"      nanoseconds += NANOSECONDS_PER_SECOND"},
{"lineNum":"  317","line":"    end"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    unless 0 <= seconds <= MAX_SECONDS"},
{"lineNum":"  320","line":"      raise ArgumentError.new \"Invalid time\""},
{"lineNum":"  321","line":"    end"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    Time.new(seconds: seconds, nanoseconds: nanoseconds.to_i, kind: kind)"},
{"lineNum":"  324","line":"  end"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"  # Returns the amount of time between *other* and `self`."},
{"lineNum":"  327","line":"  #"},
{"lineNum":"  328","line":"  # The amount can be negative if `self` is a `Time` that happens before *other*."},
{"lineNum":"  329","line":"  def -(other : Time) : Time::Span"},
{"lineNum":"  330","line":"    if local? && other.utc?"},
{"lineNum":"  331","line":"      self - other.to_local"},
{"lineNum":"  332","line":"    elsif utc? && other.local?"},
{"lineNum":"  333","line":"      self - other.to_utc"},
{"lineNum":"  334","line":"    else"},
{"lineNum":"  335","line":"      Span.new("},
{"lineNum":"  336","line":"        seconds: total_seconds - other.total_seconds,"},
{"lineNum":"  337","line":"        nanoseconds: nanosecond - other.nanosecond,"},
{"lineNum":"  338","line":"      )"},
{"lineNum":"  339","line":"    end"},
{"lineNum":"  340","line":"  end"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"  # Returns the current time in the local time zone."},
{"lineNum":"  343","line":"  def self.now : Time"},
{"lineNum":"  344","line":"    new"},
{"lineNum":"  345","line":"  end"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"  # Returns the current time in UTC time zone."},
{"lineNum":"  348","line":"  def self.utc_now : Time"},
{"lineNum":"  349","line":"    seconds, nanoseconds = compute_seconds_and_nanoseconds"},
{"lineNum":"  350","line":"    utc(seconds: seconds, nanoseconds: nanoseconds)"},
{"lineNum":"  351","line":"  end"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"  # Returns a copy of `self` with time-of-day components (hour, minute, ...) set to zero."},
{"lineNum":"  354","line":"  def date : Time"},
{"lineNum":"  355","line":"    Time.new(year, month, day, kind: kind)"},
{"lineNum":"  356","line":"  end"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"  # Returns the year number (in the Common Era)."},
{"lineNum":"  359","line":"  def year : Int32"},
{"lineNum":"  360","line":"    year_month_day_day_year[0]"},
{"lineNum":"  361","line":"  end"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"  # Returns the month number of the year (`1..12`)."},
{"lineNum":"  364","line":"  def month : Int32"},
{"lineNum":"  365","line":"    year_month_day_day_year[1]"},
{"lineNum":"  366","line":"  end"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"  # Returns the day number of the month (`1..31`)."},
{"lineNum":"  369","line":"  def day : Int32"},
{"lineNum":"  370","line":"    year_month_day_day_year[2]"},
{"lineNum":"  371","line":"  end"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"  # Returns the hour of the day (`0..23`)."},
{"lineNum":"  374","line":"  def hour : Int32"},
{"lineNum":"  375","line":"    ((total_seconds % SECONDS_PER_DAY) / SECONDS_PER_HOUR).to_i"},
{"lineNum":"  376","line":"  end"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"  # Returns the minute of the hour (`0..59`)."},
{"lineNum":"  379","line":"  def minute : Int32"},
{"lineNum":"  380","line":"    ((total_seconds % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE).to_i"},
{"lineNum":"  381","line":"  end"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"  # Returns the second of the minute (`0..59`)."},
{"lineNum":"  384","line":"  def second : Int32"},
{"lineNum":"  385","line":"    (total_seconds % SECONDS_PER_MINUTE).to_i"},
{"lineNum":"  386","line":"  end"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"  # Returns the millisecond of the second (`0..999`)."},
{"lineNum":"  389","line":"  def millisecond : Int32"},
{"lineNum":"  390","line":"    nanosecond / NANOSECONDS_PER_MILLISECOND"},
{"lineNum":"  391","line":"  end"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"  # Returns the nanosecond of the second (`0..999_999_999`)."},
{"lineNum":"  394","line":"  def nanosecond : Int32"},
{"lineNum":"  395","line":"    @nanoseconds"},
{"lineNum":"  396","line":"  end"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"  # Returns how much time has passed since midnight of this day."},
{"lineNum":"  399","line":"  def time_of_day : Time::Span"},
{"lineNum":"  400","line":"    Span.new(nanoseconds: NANOSECONDS_PER_SECOND * (total_seconds % SECONDS_PER_DAY) + nanosecond)"},
{"lineNum":"  401","line":"  end"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"  # Returns the day of the week (`Sunday..Saturday`)."},
{"lineNum":"  404","line":"  def day_of_week : Time::DayOfWeek"},
{"lineNum":"  405","line":"    value = ((total_seconds / SECONDS_PER_DAY) + 1) % 7"},
{"lineNum":"  406","line":"    DayOfWeek.new value.to_i"},
{"lineNum":"  407","line":"  end"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"  # Returns the day number of the year (`1..365`, or `1..366` on leap years)."},
{"lineNum":"  410","line":"  def day_of_year : Int32"},
{"lineNum":"  411","line":"    year_month_day_day_year[3]"},
{"lineNum":"  412","line":"  end"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"  # Returns `Kind` (UTC/local) of the instance."},
{"lineNum":"  415","line":"  def kind : Kind"},
{"lineNum":"  416","line":"    @kind"},
{"lineNum":"  417","line":"  end"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"  # Returns `true` if `Kind` is set to *Utc*."},
{"lineNum":"  420","line":"  def utc? : Bool"},
{"lineNum":"  421","line":"    kind == Kind::Utc"},
{"lineNum":"  422","line":"  end"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"  # Returns `true` if `Kind` is set to *Local*."},
{"lineNum":"  425","line":"  def local? : Bool"},
{"lineNum":"  426","line":"    kind == Kind::Local"},
{"lineNum":"  427","line":"  end"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"  def <=>(other : self)"},
{"lineNum":"  430","line":"    if utc? && other.local?"},
{"lineNum":"  431","line":"      self <=> other.to_utc"},
{"lineNum":"  432","line":"    elsif local? && other.utc?"},
{"lineNum":"  433","line":"      to_utc <=> other"},
{"lineNum":"  434","line":"    else"},
{"lineNum":"  435","line":"      cmp = total_seconds <=> other.total_seconds"},
{"lineNum":"  436","line":"      cmp = nanosecond <=> other.nanosecond if cmp == 0"},
{"lineNum":"  437","line":"      cmp"},
{"lineNum":"  438","line":"    end"},
{"lineNum":"  439","line":"  end"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"  def_hash total_seconds, nanosecond"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"  # Returns how many days this *month* (`1..12`) of this *year* has (28, 29, 30 or 31)."},
{"lineNum":"  444","line":"  #"},
{"lineNum":"  445","line":"  # ```"},
{"lineNum":"  446","line":"  # Time.days_in_month(2016, 2) # => 29"},
{"lineNum":"  447","line":"  # Time.days_in_month(1990, 4) # => 30"},
{"lineNum":"  448","line":"  # ```"},
{"lineNum":"  449","line":"  def self.days_in_month(year : Int, month : Int) : Int32"},
{"lineNum":"  450","line":"    unless 1 <= month <= 12"},
{"lineNum":"  451","line":"      raise ArgumentError.new \"Invalid month\""},
{"lineNum":"  452","line":"    end"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"    unless 1 <= year <= 9999"},
{"lineNum":"  455","line":"      raise ArgumentError.new \"Invalid year\""},
{"lineNum":"  456","line":"    end"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    days = leap_year?(year) ? DAYS_MONTH_LEAP : DAYS_MONTH"},
{"lineNum":"  459","line":"    days[month]"},
{"lineNum":"  460","line":"  end"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"  # Returns number of days in *year*."},
{"lineNum":"  463","line":"  #"},
{"lineNum":"  464","line":"  # ```"},
{"lineNum":"  465","line":"  # Time.days_in_year(1990) # => 365"},
{"lineNum":"  466","line":"  # Time.days_in_year(2004) # => 366"},
{"lineNum":"  467","line":"  # ```"},
{"lineNum":"  468","line":"  def self.days_in_year(year : Int) : Int32"},
{"lineNum":"  469","line":"    leap_year?(year) ? 366 : 365"},
{"lineNum":"  470","line":"  end"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"  # Returns whether this *year* is leap (February has one more day)."},
{"lineNum":"  473","line":"  def self.leap_year?(year : Int) : Bool"},
{"lineNum":"  474","line":"    unless 1 <= year <= 9999"},
{"lineNum":"  475","line":"      raise ArgumentError.new \"Invalid year\""},
{"lineNum":"  476","line":"    end"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"    (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)"},
{"lineNum":"  479","line":"  end"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"  def inspect(io : IO)"},
{"lineNum":"  482","line":"    Format.new(\"%F %T\").format(self, io)"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    case"},
{"lineNum":"  485","line":"    when utc?"},
{"lineNum":"  486","line":"      io << \" UTC\""},
{"lineNum":"  487","line":"    when local?"},
{"lineNum":"  488","line":"      Format.new(\" %:z\").format(self, io)"},
{"lineNum":"  489","line":"    end"},
{"lineNum":"  490","line":"    io"},
{"lineNum":"  491","line":"  end"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"  # Formats this time using the given format (see `Time::Format`)."},
{"lineNum":"  494","line":"  #"},
{"lineNum":"  495","line":"  # ```"},
{"lineNum":"  496","line":"  # time = Time.new(2016, 4, 5)"},
{"lineNum":"  497","line":"  # time.to_s(\"%F\") # => \"2016-04-05\""},
{"lineNum":"  498","line":"  # ```"},
{"lineNum":"  499","line":"  def to_s(format : String) : String"},
{"lineNum":"  500","line":"    Format.new(format).format(self)"},
{"lineNum":"  501","line":"  end"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"  # Formats this time using the given format (see `Time::Format`)"},
{"lineNum":"  504","line":"  # into the given *io*."},
{"lineNum":"  505","line":"  def to_s(format : String, io : IO) : Nil"},
{"lineNum":"  506","line":"    Format.new(format).format(self, io)"},
{"lineNum":"  507","line":"  end"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"  # Parses a Time in the given *time* string, using the given *pattern* (see"},
{"lineNum":"  510","line":"  # `Time::Format`)."},
{"lineNum":"  511","line":"  #"},
{"lineNum":"  512","line":"  # ```"},
{"lineNum":"  513","line":"  # Time.parse(\"2016-04-05\", \"%F\") # => 2016-04-05 00:00:00"},
{"lineNum":"  514","line":"  # ```"},
{"lineNum":"  515","line":"  def self.parse(time : String, pattern : String, kind = Time::Kind::Unspecified) : Time"},
{"lineNum":"  516","line":"    Format.new(pattern, kind).parse(time)"},
{"lineNum":"  517","line":"  end"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"  # Returns the number of seconds since the Epoch for this time."},
{"lineNum":"  520","line":"  #"},
{"lineNum":"  521","line":"  # ```"},
{"lineNum":"  522","line":"  # time = Time.parse(\"2016-01-12 03:04:05 UTC\", \"%F %T %z\")"},
{"lineNum":"  523","line":"  # time.epoch # => 1452567845"},
{"lineNum":"  524","line":"  # ```"},
{"lineNum":"  525","line":"  def epoch : Int64"},
{"lineNum":"  526","line":"    (to_utc.total_seconds - UNIX_SECONDS).to_i64"},
{"lineNum":"  527","line":"  end"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"  # Returns the number of milliseconds since the Epoch for this time."},
{"lineNum":"  530","line":"  #"},
{"lineNum":"  531","line":"  # ```"},
{"lineNum":"  532","line":"  # time = Time.parse(\"2016-01-12 03:04:05.678 UTC\", \"%F %T.%L %z\")"},
{"lineNum":"  533","line":"  # time.epoch_ms # => 1452567845678"},
{"lineNum":"  534","line":"  # ```"},
{"lineNum":"  535","line":"  def epoch_ms : Int64"},
{"lineNum":"  536","line":"    epoch * 1_000 + (nanosecond / NANOSECONDS_PER_MILLISECOND)"},
{"lineNum":"  537","line":"  end"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"  # Returns the number of seconds since the Epoch for this time,"},
{"lineNum":"  540","line":"  # as a `Float64`."},
{"lineNum":"  541","line":"  #"},
{"lineNum":"  542","line":"  # ```"},
{"lineNum":"  543","line":"  # time = Time.parse(\"2016-01-12 03:04:05.678 UTC\", \"%F %T.%L %z\")"},
{"lineNum":"  544","line":"  # time.epoch_f # => 1452567845.678"},
{"lineNum":"  545","line":"  # ```"},
{"lineNum":"  546","line":"  def epoch_f : Float64"},
{"lineNum":"  547","line":"    epoch.to_f + nanosecond.to_f / 1e9"},
{"lineNum":"  548","line":"  end"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"  # Returns a copy of this `Time` converted to UTC."},
{"lineNum":"  551","line":"  def to_utc : Time"},
{"lineNum":"  552","line":"    if utc?"},
{"lineNum":"  553","line":"      self"},
{"lineNum":"  554","line":"    else"},
{"lineNum":"  555","line":"      Time.utc("},
{"lineNum":"  556","line":"        seconds: total_seconds - Time.compute_offset,"},
{"lineNum":"  557","line":"        nanoseconds: nanosecond"},
{"lineNum":"  558","line":"      )"},
{"lineNum":"  559","line":"    end"},
{"lineNum":"  560","line":"  end"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"  # Returns a copy of this `Time` converted to the local time zone."},
{"lineNum":"  563","line":"  def to_local : Time"},
{"lineNum":"  564","line":"    if local?"},
{"lineNum":"  565","line":"      self"},
{"lineNum":"  566","line":"    else"},
{"lineNum":"  567","line":"      Time.new("},
{"lineNum":"  568","line":"        seconds: total_seconds + Time.compute_offset,"},
{"lineNum":"  569","line":"        nanoseconds: nanosecond,"},
{"lineNum":"  570","line":"        kind: Kind::Local,"},
{"lineNum":"  571","line":"      )"},
{"lineNum":"  572","line":"    end"},
{"lineNum":"  573","line":"  end"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"  private macro def_at_beginning(interval)"},
{"lineNum":"  576","line":"    # Returns the time when the {{interval.id}} that contains `self` starts."},
{"lineNum":"  577","line":"    def at_beginning_of_{{interval.id}} : Time"},
{"lineNum":"  578","line":"      year, month, day, day_year = year_month_day_day_year"},
{"lineNum":"  579","line":"      {{yield}}"},
{"lineNum":"  580","line":"    end"},
{"lineNum":"  581","line":"  end"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"  private macro def_at_end(interval)"},
{"lineNum":"  584","line":"    # Returns the time when the {{interval.id}} that includes `self` ends."},
{"lineNum":"  585","line":"    def at_end_of_{{interval.id}} : Time"},
{"lineNum":"  586","line":"      year, month, day, day_year = year_month_day_day_year"},
{"lineNum":"  587","line":"      {{yield}}"},
{"lineNum":"  588","line":"    end"},
{"lineNum":"  589","line":"  end"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"  def_at_beginning(year) { Time.new(year, 1, 1, kind: kind) }"},
{"lineNum":"  592","line":"  def_at_beginning(semester) { Time.new(year, ((month - 1) / 6) * 6 + 1, 1, kind: kind) }"},
{"lineNum":"  593","line":"  def_at_beginning(quarter) { Time.new(year, ((month - 1) / 3) * 3 + 1, 1, kind: kind) }"},
{"lineNum":"  594","line":"  def_at_beginning(month) { Time.new(year, month, 1, kind: kind) }"},
{"lineNum":"  595","line":"  def_at_beginning(day) { Time.new(year, month, day, kind: kind) }"},
{"lineNum":"  596","line":"  def_at_beginning(hour) { Time.new(year, month, day, hour, kind: kind) }"},
{"lineNum":"  597","line":"  def_at_beginning(minute) { Time.new(year, month, day, hour, minute, kind: kind) }"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"  # Returns the time when the week that includes `self` starts."},
{"lineNum":"  600","line":"  def at_beginning_of_week : Time"},
{"lineNum":"  601","line":"    dow = day_of_week.value"},
{"lineNum":"  602","line":"    if dow == 0"},
{"lineNum":"  603","line":"      (self - 6.days).at_beginning_of_day"},
{"lineNum":"  604","line":"    else"},
{"lineNum":"  605","line":"      (self - (dow - 1).days).at_beginning_of_day"},
{"lineNum":"  606","line":"    end"},
{"lineNum":"  607","line":"  end"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"  def_at_end(year) { Time.new(year, 12, 31, 23, 59, 59, nanosecond: 999_999_999, kind: kind) }"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"  # Returns the time when the half-year that includes `self` ends."},
{"lineNum":"  612","line":"  def at_end_of_semester : Time"},
{"lineNum":"  613","line":"    year, month = year_month_day_day_year"},
{"lineNum":"  614","line":"    if month <= 6"},
{"lineNum":"  615","line":"      month, day = 6, 30"},
{"lineNum":"  616","line":"    else"},
{"lineNum":"  617","line":"      month, day = 12, 31"},
{"lineNum":"  618","line":"    end"},
{"lineNum":"  619","line":"    Time.new(year, month, day, 23, 59, 59, nanosecond: 999_999_999, kind: kind)"},
{"lineNum":"  620","line":"  end"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"  # Returns the time when the quarter-year that includes `self` ends."},
{"lineNum":"  623","line":"  def at_end_of_quarter : Time"},
{"lineNum":"  624","line":"    year, month = year_month_day_day_year"},
{"lineNum":"  625","line":"    if month <= 3"},
{"lineNum":"  626","line":"      month, day = 3, 31"},
{"lineNum":"  627","line":"    elsif month <= 6"},
{"lineNum":"  628","line":"      month, day = 6, 30"},
{"lineNum":"  629","line":"    elsif month <= 9"},
{"lineNum":"  630","line":"      month, day = 9, 30"},
{"lineNum":"  631","line":"    else"},
{"lineNum":"  632","line":"      month, day = 12, 31"},
{"lineNum":"  633","line":"    end"},
{"lineNum":"  634","line":"    Time.new(year, month, day, 23, 59, 59, nanosecond: 999_999_999, kind: kind)"},
{"lineNum":"  635","line":"  end"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"  def_at_end(month) { Time.new(year, month, Time.days_in_month(year, month), 23, 59, 59, nanosecond: 999_999_999, kind: kind) }"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"  # Returns the time when the week that includes `self` ends."},
{"lineNum":"  640","line":"  def at_end_of_week : Time"},
{"lineNum":"  641","line":"    dow = day_of_week.value"},
{"lineNum":"  642","line":"    if dow == 0"},
{"lineNum":"  643","line":"      at_end_of_day"},
{"lineNum":"  644","line":"    else"},
{"lineNum":"  645","line":"      (self + (7 - dow).days).at_end_of_day"},
{"lineNum":"  646","line":"    end"},
{"lineNum":"  647","line":"  end"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"  def_at_end(day) { Time.new(year, month, day, 23, 59, 59, nanosecond: 999_999_999, kind: kind) }"},
{"lineNum":"  650","line":"  def_at_end(hour) { Time.new(year, month, day, hour, 59, 59, nanosecond: 999_999_999, kind: kind) }"},
{"lineNum":"  651","line":"  def_at_end(minute) { Time.new(year, month, day, hour, minute, 59, nanosecond: 999_999_999, kind: kind) }"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"  # Returns the midday (12:00) of the day represented by `self`."},
{"lineNum":"  654","line":"  def at_midday : Time"},
{"lineNum":"  655","line":"    year, month, day = year_month_day_day_year"},
{"lineNum":"  656","line":"    Time.new(year, month, day, 12, 0, 0, nanosecond: 0, kind: kind)"},
{"lineNum":"  657","line":"  end"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"  {% for name in DayOfWeek.constants %}"},
{"lineNum":"  660","line":"    # Does `self` happen on {{name.id}}?"},
{"lineNum":"  661","line":"    def {{name.id.downcase}}? : Bool"},
{"lineNum":"  662","line":"      day_of_week.{{name.id.downcase}}?"},
{"lineNum":"  663","line":"    end"},
{"lineNum":"  664","line":"  {% end %}"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"  protected def self.absolute_days(year, month, day)"},
{"lineNum":"  667","line":"    days = leap_year?(year) ? DAYS_MONTH_LEAP : DAYS_MONTH"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"    temp = 0"},
{"lineNum":"  670","line":"    m = 1"},
{"lineNum":"  671","line":"    while m < month"},
{"lineNum":"  672","line":"      temp += days[m]"},
{"lineNum":"  673","line":"      m += 1"},
{"lineNum":"  674","line":"    end"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"    (day - 1) + temp + (365*(year - 1)) + ((year - 1)/4) - ((year - 1)/100) + ((year - 1)/400)"},
{"lineNum":"  677","line":"  end"},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"  protected def total_seconds"},
{"lineNum":"  680","line":"    @seconds"},
{"lineNum":"  681","line":"  end"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"  private def year_month_day_day_year"},
{"lineNum":"  684","line":"    m = 1"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"    days = DAYS_MONTH"},
{"lineNum":"  687","line":"    totaldays = total_seconds / SECONDS_PER_DAY"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"    num400 = totaldays / DAYS_PER_400_YEARS"},
{"lineNum":"  690","line":"    totaldays -= num400 * DAYS_PER_400_YEARS"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"    num100 = totaldays / DAYS_PER_100_YEARS"},
{"lineNum":"  693","line":"    if num100 == 4 # leap"},
{"lineNum":"  694","line":"      num100 = 3"},
{"lineNum":"  695","line":"    end"},
{"lineNum":"  696","line":"    totaldays -= num100 * DAYS_PER_100_YEARS"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"    num4 = totaldays / DAYS_PER_4_YEARS"},
{"lineNum":"  699","line":"    totaldays -= num4 * DAYS_PER_4_YEARS"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"    numyears = totaldays / 365"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"    if numyears == 4 # leap"},
{"lineNum":"  704","line":"      numyears = 3"},
{"lineNum":"  705","line":"    end"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"    year = num400*400 + num100*100 + num4*4 + numyears + 1"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"    totaldays -= numyears * 365"},
{"lineNum":"  710","line":"    day_year = totaldays + 1"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"    if (numyears == 3) && ((num100 == 3) || !(num4 == 24)) # 31 dec leapyear"},
{"lineNum":"  713","line":"      days = DAYS_MONTH_LEAP"},
{"lineNum":"  714","line":"    end"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"    while totaldays >= days[m]"},
{"lineNum":"  717","line":"      totaldays -= days[m]"},
{"lineNum":"  718","line":"      m += 1"},
{"lineNum":"  719","line":"    end"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"    month = m"},
{"lineNum":"  722","line":"    day = totaldays + 1"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"    {year.to_i, month.to_i, day.to_i, day_year.to_i}"},
{"lineNum":"  725","line":"  end"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"  # Returns the local time offset in minutes relative to GMT."},
{"lineNum":"  728","line":"  #"},
{"lineNum":"  729","line":"  # ```"},
{"lineNum":"  730","line":"  # # Assume in Argentina, where it\'s GMT-3"},
{"lineNum":"  731","line":"  # Time.local_offset_in_minutes # => -180"},
{"lineNum":"  732","line":"  # ```"},
{"lineNum":"  733","line":"  def self.local_offset_in_minutes"},
{"lineNum":"  734","line":"    compute_offset / SECONDS_PER_MINUTE"},
{"lineNum":"  735","line":"  end"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"  # Returns `seconds, nanoseconds, offset` where"},
{"lineNum":"  738","line":"  # `offset` is the number of seconds for now\'s timezone offset."},
{"lineNum":"  739","line":"  protected def self.compute_seconds_nanoseconds_and_offset"},
{"lineNum":"  740","line":"    seconds, nanoseconds = compute_seconds_and_nanoseconds"},
{"lineNum":"  741","line":"    offset = compute_offset(seconds)"},
{"lineNum":"  742","line":"    {seconds, nanoseconds, offset}"},
{"lineNum":"  743","line":"  end"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"  protected def self.compute_offset"},
{"lineNum":"  746","line":"    seconds, nanoseconds = compute_seconds_and_nanoseconds"},
{"lineNum":"  747","line":"    compute_offset(seconds)"},
{"lineNum":"  748","line":"  end"},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"  private def self.compute_offset(seconds)"},
{"lineNum":"  751","line":"    Crystal::System::Time.compute_utc_offset(seconds)"},
{"lineNum":"  752","line":"  end"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"  private def self.compute_seconds_and_nanoseconds"},
{"lineNum":"  755","line":"    Crystal::System::Time.compute_utc_seconds_and_nanoseconds"},
{"lineNum":"  756","line":"  end"},
{"lineNum":"  757","line":"end"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"require \"./time/**\""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
