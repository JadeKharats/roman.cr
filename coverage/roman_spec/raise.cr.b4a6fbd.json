var data = {lines:[
{"lineNum":"    1","line":"require \"c/stdio\""},
{"lineNum":"    2","line":"require \"c/stdlib\""},
{"lineNum":"    3","line":"require \"callstack\""},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"CallStack.skip(__FILE__)"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"private struct LEBReader"},
{"lineNum":"    8","line":"  def initialize(@data : UInt8*)"},
{"lineNum":"    9","line":"  end"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  def data"},
{"lineNum":"   12","line":"    @data"},
{"lineNum":"   13","line":"  end"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"  def read_uint8","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   16","line":"    value = @data.value"},
{"lineNum":"   17","line":"    @data += 1"},
{"lineNum":"   18","line":"    value"},
{"lineNum":"   19","line":"  end"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"  def read_uint32","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   22","line":"    value = @data.as(UInt32*).value"},
{"lineNum":"   23","line":"    @data += 4"},
{"lineNum":"   24","line":"    value"},
{"lineNum":"   25","line":"  end"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"  def read_uleb128"},
{"lineNum":"   28","line":"    result = 0_u64"},
{"lineNum":"   29","line":"    shift = 0"},
{"lineNum":"   30","line":"    while true"},
{"lineNum":"   31","line":"      byte = read_uint8","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   32","line":"      result |= ((0x7f_u64 & byte) << shift)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"      break if (byte & 0x80_u8) == 0","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   34","line":"      shift += 7"},
{"lineNum":"   35","line":"    end"},
{"lineNum":"   36","line":"    result"},
{"lineNum":"   37","line":"  end"},
{"lineNum":"   38","line":"end"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"{% if flag?(:arm) %}","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   41","line":"  # On ARM EHABI the personality routine is responsible for actually"},
{"lineNum":"   42","line":"  # unwinding a single stack frame before returning (ARM EHABI Sec. 6.1)."},
{"lineNum":"   43","line":"  private macro __crystal_continue_unwind"},
{"lineNum":"   44","line":"    if LibUnwind.__gnu_unwind_frame(ucb, context) != LibUnwind::ReasonCode::NO_REASON"},
{"lineNum":"   45","line":"      return LibUnwind::ReasonCode::FAILURE"},
{"lineNum":"   46","line":"    end"},
{"lineNum":"   47","line":"    #puts \"continue\""},
{"lineNum":"   48","line":"    return LibUnwind::ReasonCode::CONTINUE_UNWIND"},
{"lineNum":"   49","line":"  end"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"  # :nodoc:"},
{"lineNum":"   52","line":"  fun __crystal_personality(state : LibUnwind::State, ucb : LibUnwind::ControlBlock*, context : LibUnwind::Context) : LibUnwind::ReasonCode"},
{"lineNum":"   53","line":"    #puts \"\\n__crystal_personality(#{state}, #{ucb}, #{context})\""},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    case LibUnwind::State.new(state.value & LibUnwind::State::ACTION_MASK.value)"},
{"lineNum":"   56","line":"    when LibUnwind::State::VIRTUAL_UNWIND_FRAME"},
{"lineNum":"   57","line":"      if state.force_unwind?"},
{"lineNum":"   58","line":"        __crystal_continue_unwind"},
{"lineNum":"   59","line":"      else"},
{"lineNum":"   60","line":"        actions = LibUnwind::Action::SEARCH_PHASE"},
{"lineNum":"   61","line":"      end"},
{"lineNum":"   62","line":"    when LibUnwind::State::UNWIND_FRAME_STARTING"},
{"lineNum":"   63","line":"      actions = LibUnwind::Action::HANDLER_FRAME"},
{"lineNum":"   64","line":"    when LibUnwind::State::UNWIND_FRAME_RESUME"},
{"lineNum":"   65","line":"      __crystal_continue_unwind"},
{"lineNum":"   66","line":"    else"},
{"lineNum":"   67","line":"      exit(-1)"},
{"lineNum":"   68","line":"    end"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    if state.force_unwind?"},
{"lineNum":"   71","line":"      actions |= LibUnwind::Action::FORCE_UNWIND"},
{"lineNum":"   72","line":"    end"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    start = __crystal_get_region_start(ucb)"},
{"lineNum":"   75","line":"    lsd = __crystal_get_language_specific_data(ucb)"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    ip = __crystal_unwind_get_ip(context)"},
{"lineNum":"   78","line":"    throw_offset = ip - 1 - start"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    leb = LEBReader.new(lsd)"},
{"lineNum":"   81","line":"    leb.read_uint8               # @LPStart encoding"},
{"lineNum":"   82","line":"    if leb.read_uint8 != 0xff_u8 # @TType encoding"},
{"lineNum":"   83","line":"      leb.read_uleb128           # @TType base offset"},
{"lineNum":"   84","line":"    end"},
{"lineNum":"   85","line":"    leb.read_uint8                     # CS Encoding"},
{"lineNum":"   86","line":"    cs_table_length = leb.read_uleb128 # CS table length"},
{"lineNum":"   87","line":"    cs_table_end = leb.data + cs_table_length"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    while leb.data < cs_table_end"},
{"lineNum":"   90","line":"      cs_offset = leb.read_uint32"},
{"lineNum":"   91","line":"      cs_length = leb.read_uint32"},
{"lineNum":"   92","line":"      cs_addr = leb.read_uint32"},
{"lineNum":"   93","line":"      action = leb.read_uleb128"},
{"lineNum":"   94","line":"      #puts \"cs_offset: #{cs_offset}, cs_length: #{cs_length}, cs_addr: #{cs_addr}, action: #{action}\""},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"      if cs_addr != 0"},
{"lineNum":"   97","line":"        if cs_offset <= throw_offset && throw_offset <= cs_offset + cs_length"},
{"lineNum":"   98","line":"          if actions.includes? LibUnwind::Action::SEARCH_PHASE"},
{"lineNum":"   99","line":"            #puts \"found\""},
{"lineNum":"  100","line":"            return LibUnwind::ReasonCode::HANDLER_FOUND"},
{"lineNum":"  101","line":"          end"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"          if actions.includes? LibUnwind::Action::HANDLER_FRAME"},
{"lineNum":"  104","line":"            __crystal_unwind_set_gr(context, LibUnwind::EH_REGISTER_0, ucb.address.to_u32)"},
{"lineNum":"  105","line":"            __crystal_unwind_set_gr(context, LibUnwind::EH_REGISTER_1, ucb.value.exception_type_id.to_u32)"},
{"lineNum":"  106","line":"            __crystal_unwind_set_ip(context, start + cs_addr)"},
{"lineNum":"  107","line":"            #puts \"install\""},
{"lineNum":"  108","line":"            return LibUnwind::ReasonCode::INSTALL_CONTEXT"},
{"lineNum":"  109","line":"          end"},
{"lineNum":"  110","line":"        end"},
{"lineNum":"  111","line":"      end"},
{"lineNum":"  112","line":"    end"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    __crystal_continue_unwind"},
{"lineNum":"  115","line":"  end"},
{"lineNum":"  116","line":"{% else %}"},
{"lineNum":"  117","line":"  # :nodoc:"},
{"lineNum":"  118","line":"  fun __crystal_personality(version : Int32, actions : LibUnwind::Action, exception_class : UInt64, exception_object : LibUnwind::Exception*, context : Void*) : LibUnwind::ReasonCode"},
{"lineNum":"  119","line":"    start = LibUnwind.get_region_start(context)"},
{"lineNum":"  120","line":"    ip = LibUnwind.get_ip(context)"},
{"lineNum":"  121","line":"    throw_offset = ip - 1 - start"},
{"lineNum":"  122","line":"    lsd = LibUnwind.get_language_specific_data(context)"},
{"lineNum":"  123","line":"    #puts \"Personality - actions : #{actions}, start: #{start}, ip: #{ip}, throw_offset: #{throw_offset}\""},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    leb = LEBReader.new(lsd)"},
{"lineNum":"  126","line":"    leb.read_uint8               # @LPStart encoding"},
{"lineNum":"  127","line":"    if leb.read_uint8 != 0xff_u8 # @TType encoding"},
{"lineNum":"  128","line":"      leb.read_uleb128           # @TType base offset"},
{"lineNum":"  129","line":"    end"},
{"lineNum":"  130","line":"    leb.read_uint8                     # CS Encoding"},
{"lineNum":"  131","line":"    cs_table_length = leb.read_uleb128 # CS table length"},
{"lineNum":"  132","line":"    cs_table_end = leb.data + cs_table_length"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    while leb.data < cs_table_end"},
{"lineNum":"  135","line":"      cs_offset = leb.read_uint32"},
{"lineNum":"  136","line":"      cs_length = leb.read_uint32"},
{"lineNum":"  137","line":"      cs_addr = leb.read_uint32"},
{"lineNum":"  138","line":"      action = leb.read_uleb128"},
{"lineNum":"  139","line":"      #puts \"cs_offset: #{cs_offset}, cs_length: #{cs_length}, cs_addr: #{cs_addr}, action: #{action}\""},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"      if cs_addr != 0"},
{"lineNum":"  142","line":"        if cs_offset <= throw_offset && throw_offset <= cs_offset + cs_length"},
{"lineNum":"  143","line":"          if actions.includes? LibUnwind::Action::SEARCH_PHASE"},
{"lineNum":"  144","line":"            #puts \"found\""},
{"lineNum":"  145","line":"            return LibUnwind::ReasonCode::HANDLER_FOUND"},
{"lineNum":"  146","line":"          end"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"          if actions.includes? LibUnwind::Action::HANDLER_FRAME"},
{"lineNum":"  149","line":"            LibUnwind.set_gr(context, LibUnwind::EH_REGISTER_0, exception_object.address)"},
{"lineNum":"  150","line":"            LibUnwind.set_gr(context, LibUnwind::EH_REGISTER_1, exception_object.value.exception_type_id)"},
{"lineNum":"  151","line":"            LibUnwind.set_ip(context, start + cs_addr)"},
{"lineNum":"  152","line":"            #puts \"install\""},
{"lineNum":"  153","line":"            return LibUnwind::ReasonCode::INSTALL_CONTEXT"},
{"lineNum":"  154","line":"          end"},
{"lineNum":"  155","line":"        end"},
{"lineNum":"  156","line":"      end"},
{"lineNum":"  157","line":"    end"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    #puts \"continue\""},
{"lineNum":"  160","line":"    return LibUnwind::ReasonCode::CONTINUE_UNWIND"},
{"lineNum":"  161","line":"  end"},
{"lineNum":"  162","line":"{% end %}"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"# :nodoc:"},
{"lineNum":"  165","line":"@[Raises]"},
{"lineNum":"  166","line":"fun __crystal_raise(unwind_ex : LibUnwind::Exception*) : NoReturn","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":"  ret = LibUnwind.raise_exception(unwind_ex)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"  LibC.dprintf 2, \"Failed to raise an exception: %s\\n\", ret.to_s","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"  CallStack.print_backtrace","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"  LibC.exit(ret)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"end"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"# :nodoc:"},
{"lineNum":"  174","line":"fun __crystal_get_exception(unwind_ex : LibUnwind::Exception*) : UInt64","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  175","line":"  unwind_ex.value.exception_object"},
{"lineNum":"  176","line":"end"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"# Raises the *exception*."},
{"lineNum":"  179","line":"#"},
{"lineNum":"  180","line":"# This will set the exception\'s callstack if it hasn\'t been already."},
{"lineNum":"  181","line":"# Re-raising a previously catched exception won\'t replace the callstack."},
{"lineNum":"  182","line":"def raise(exception : Exception) : NoReturn","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  183","line":"  exception.callstack ||= CallStack.new"},
{"lineNum":"  184","line":"  unwind_ex = Pointer(LibUnwind::Exception).malloc","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  185","line":"  unwind_ex.value.exception_class = LibC::SizeT.zero"},
{"lineNum":"  186","line":"  unwind_ex.value.exception_cleanup = LibC::SizeT.zero","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  187","line":"  unwind_ex.value.exception_object = exception.object_id"},
{"lineNum":"  188","line":"  unwind_ex.value.exception_type_id = exception.crystal_type_id"},
{"lineNum":"  189","line":"  __crystal_raise(unwind_ex)","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  190","line":"end"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"# Raises an Exception with the *message*."},
{"lineNum":"  193","line":"def raise(message : String) : NoReturn","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"  raise Exception.new(message)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"end"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"# :nodoc:"},
{"lineNum":"  198","line":"fun __crystal_raise_string(message : UInt8*)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"  raise String.new(message)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 20, "covered" : 0,};
var merged_data = [];
