var data = {lines:[
{"lineNum":"    1","line":"# `OptionParser` is a class for command-line options processing. It supports:","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# * Short and long modifier style options (example: `-h`, `--help`)"},
{"lineNum":"    4","line":"# * Passing arguments to the flags (example: `-f filename.txt`)"},
{"lineNum":"    5","line":"# * Automatic help message generation"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# Run `crystal` for an example of a CLI built with `OptionParser`."},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Short example:"},
{"lineNum":"   10","line":"#"},
{"lineNum":"   11","line":"# ```"},
{"lineNum":"   12","line":"# require \"option_parser\""},
{"lineNum":"   13","line":"#"},
{"lineNum":"   14","line":"# upcase = false"},
{"lineNum":"   15","line":"# destination = \"World\""},
{"lineNum":"   16","line":"#"},
{"lineNum":"   17","line":"# OptionParser.parse! do |parser|"},
{"lineNum":"   18","line":"#   parser.banner = \"Usage: salute [arguments]\""},
{"lineNum":"   19","line":"#   parser.on(\"-u\", \"--upcase\", \"Upcases the salute\") { upcase = true }"},
{"lineNum":"   20","line":"#   parser.on(\"-t NAME\", \"--to=NAME\", \"Specifies the name to salute\") { |name| destination = name }"},
{"lineNum":"   21","line":"#   parser.on(\"-h\", \"--help\", \"Show this help\") { puts parser }"},
{"lineNum":"   22","line":"# end"},
{"lineNum":"   23","line":"#"},
{"lineNum":"   24","line":"# destination = destination.upcase if upcase"},
{"lineNum":"   25","line":"# puts \"Hello #{destination}!\""},
{"lineNum":"   26","line":"# ```"},
{"lineNum":"   27","line":"class OptionParser"},
{"lineNum":"   28","line":"  class Exception < ::Exception"},
{"lineNum":"   29","line":"  end"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"  class InvalidOption < Exception"},
{"lineNum":"   32","line":"    def initialize(option)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"      super(\"Invalid option: #{option}\")","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   34","line":"    end"},
{"lineNum":"   35","line":"  end"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"  class MissingOption < Exception"},
{"lineNum":"   38","line":"    def initialize(option)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":"      super(\"Missing option: #{option}\")","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   40","line":"    end"},
{"lineNum":"   41","line":"  end"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"  # :nodoc:"},
{"lineNum":"   44","line":"  record Handler,"},
{"lineNum":"   45","line":"    flag : String,"},
{"lineNum":"   46","line":"    block : String ->"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"  # Creates a new parser, with its configuration specified in the block,"},
{"lineNum":"   49","line":"  # and uses it to parse the passed *args*."},
{"lineNum":"   50","line":"  def self.parse(args) : self"},
{"lineNum":"   51","line":"    parser = OptionParser.new","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"    yield parser"},
{"lineNum":"   53","line":"    parser.parse(args)"},
{"lineNum":"   54","line":"    parser"},
{"lineNum":"   55","line":"  end"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"  # Creates a new parser, with its configuration specified in the block,"},
{"lineNum":"   58","line":"  # and uses it to parse the arguments passed to the program."},
{"lineNum":"   59","line":"  def self.parse! : self"},
{"lineNum":"   60","line":"    parse(ARGV) { |parser| yield parser }"},
{"lineNum":"   61","line":"  end"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  protected property flags : Array(String)"},
{"lineNum":"   64","line":"  protected property handlers : Array(Handler)"},
{"lineNum":"   65","line":"  protected property unknown_args"},
{"lineNum":"   66","line":"  protected property missing_option"},
{"lineNum":"   67","line":"  protected property invalid_option"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"  # Creates a new parser."},
{"lineNum":"   70","line":"  def initialize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"    @flags = [] of String","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"    @handlers = [] of Handler","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"    @missing_option = ->(option : String) { raise MissingOption.new(option) }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"    @invalid_option = ->(option : String) { raise InvalidOption.new(option) }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"  end"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  # Creates a new parser, with its configuration specified in the block."},
{"lineNum":"   78","line":"  def self.new"},
{"lineNum":"   79","line":"    new.tap { |parser| yield parser }"},
{"lineNum":"   80","line":"  end"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"  # Establishes the initial message for the help printout."},
{"lineNum":"   83","line":"  # Typically, you want to write here the name of your program,"},
{"lineNum":"   84","line":"  # and a one-line template of its invocation."},
{"lineNum":"   85","line":"  #"},
{"lineNum":"   86","line":"  # Example:"},
{"lineNum":"   87","line":"  #"},
{"lineNum":"   88","line":"  # ```"},
{"lineNum":"   89","line":"  # parser = OptionParser.new"},
{"lineNum":"   90","line":"  # parser.banner = \"Usage: crystal [command] [switches] [program file] [--] [arguments]\""},
{"lineNum":"   91","line":"  # ```"},
{"lineNum":"   92","line":"  setter banner : String?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  # Establishes a handler for a *flag*."},
{"lineNum":"   95","line":"  #"},
{"lineNum":"   96","line":"  # Flags must start with a dash or double dash. They can also have"},
{"lineNum":"   97","line":"  # an optional argument, which will get passed to the block."},
{"lineNum":"   98","line":"  # Each flag has a description, which will be used for the help message."},
{"lineNum":"   99","line":"  #"},
{"lineNum":"  100","line":"  # Examples of valid flags:"},
{"lineNum":"  101","line":"  #"},
{"lineNum":"  102","line":"  # * `-a`, `-B`"},
{"lineNum":"  103","line":"  # * `--something-longer`"},
{"lineNum":"  104","line":"  # * `-f FILE`, `--file FILE`, `--file=FILE` (these will yield the passed value to the block as a string)"},
{"lineNum":"  105","line":"  def on(flag : String, description : String, &block : String ->)"},
{"lineNum":"  106","line":"    check_starts_with_dash flag, \"flag\""},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    append_flag flag, description","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  109","line":"    @handlers << Handler.new(flag, block)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  110","line":"  end"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  # Establishes a handler for a pair of short and long flags."},
{"lineNum":"  113","line":"  #"},
{"lineNum":"  114","line":"  # See the other definition of `on` for examples."},
{"lineNum":"  115","line":"  def on(short_flag : String, long_flag : String, description : String, &block : String ->)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"    check_starts_with_dash short_flag, \"short_flag\", allow_empty: true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"    check_starts_with_dash long_flag, \"long_flag\""},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    append_flag \"#{short_flag}, #{long_flag}\", description","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    has_argument = /([ =].+)/","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"    if long_flag =~ has_argument","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"      argument = $1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":"      short_flag += argument unless short_flag =~ has_argument","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"    end"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    @handlers << Handler.new(short_flag, block)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"    @handlers << Handler.new(long_flag, block)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"  end"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"  # Adds a separator, with an optional header message,"},
{"lineNum":"  132","line":"  # that will be used to print the help."},
{"lineNum":"  133","line":"  #"},
{"lineNum":"  134","line":"  # This way, you can group the different options in an easier to read way."},
{"lineNum":"  135","line":"  def separator(message = \"\")"},
{"lineNum":"  136","line":"    @flags << message.to_s"},
{"lineNum":"  137","line":"  end"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"  # Sets a handler for regular arguments that didn\'t match any of the setup options."},
{"lineNum":"  140","line":"  #"},
{"lineNum":"  141","line":"  # You typically use this to get the main arguments (not modifiers)"},
{"lineNum":"  142","line":"  # that your program expects (for example, filenames)"},
{"lineNum":"  143","line":"  def unknown_args(&@unknown_args : Array(String), Array(String) ->)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"  end"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"  # Sets a handler for when a option that expects an argument wasn\'t given any."},
{"lineNum":"  147","line":"  #"},
{"lineNum":"  148","line":"  # You typically use this to display a help message."},
{"lineNum":"  149","line":"  # The default raises `MissingOption`."},
{"lineNum":"  150","line":"  def missing_option(&@missing_option : String ->)"},
{"lineNum":"  151","line":"  end"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"  # Sets a handler for option arguments that didn\'t match any of the setup options."},
{"lineNum":"  154","line":"  #"},
{"lineNum":"  155","line":"  # You typically use this to display a help message."},
{"lineNum":"  156","line":"  # The default raises `InvalidOption`."},
{"lineNum":"  157","line":"  def invalid_option(&@invalid_option : String ->)"},
{"lineNum":"  158","line":"  end"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  # Returns all the setup options, formatted in a help message."},
{"lineNum":"  161","line":"  def to_s(io : IO)"},
{"lineNum":"  162","line":"    if banner = @banner","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"      io << banner"},
{"lineNum":"  164","line":"      io << \"\\n\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"    end"},
{"lineNum":"  166","line":"    @flags.join \"\\n\", io"},
{"lineNum":"  167","line":"  end"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  private def append_flag(flag, description)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"    if flag.size >= 33","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"      @flags << \"    #{flag}\\n#{\" \" * 37}#{description}\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"    else"},
{"lineNum":"  173","line":"      @flags << \"    #{flag}#{\" \" * (33 - flag.size)}#{description}\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"    end"},
{"lineNum":"  175","line":"  end"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"  # Parses the passed *args*, running the handlers associated to each option."},
{"lineNum":"  178","line":"  def parse(args)"},
{"lineNum":"  179","line":"    ParseTask.new(self, args).parse","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":"  end"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"  # Parses the passed the arguments passed to the program,"},
{"lineNum":"  183","line":"  # running the handlers associated to each option.","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  184","line":"  def parse!"},
{"lineNum":"  185","line":"    parse ARGV"},
{"lineNum":"  186","line":"  end"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"  private def check_starts_with_dash(arg, name, allow_empty = false)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  189","line":"    return if allow_empty && arg.empty?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    unless arg.starts_with?(\'-\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"      raise ArgumentError.new(\"Argument \'#{name}\' (#{arg.inspect}) must start with a dash (-)\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"    end"},
{"lineNum":"  194","line":"  end"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"  private struct ParseTask"},
{"lineNum":"  197","line":"    @double_dash_index : Int32?"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    def initialize(@parser : OptionParser, @args : Array(String))"},
{"lineNum":"  200","line":"      double_dash_index = @double_dash_index = @args.index(\"--\")"},
{"lineNum":"  201","line":"      if double_dash_index"},
{"lineNum":"  202","line":"        @args.delete_at(double_dash_index)"},
{"lineNum":"  203","line":"      end"},
{"lineNum":"  204","line":"    end"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    def parse","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"      @parser.handlers.each do |handler|"},
{"lineNum":"  208","line":"        process_handler handler","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"      end"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"      if unknown_args = @parser.unknown_args","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":"        double_dash_index = @double_dash_index","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":"        if double_dash_index","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":"          before_dash = @args[0...double_dash_index]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"          after_dash = @args[double_dash_index..-1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":"        else"},
{"lineNum":"  217","line":"          before_dash = @args"},
{"lineNum":"  218","line":"          after_dash = [] of String","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  219","line":"        end"},
{"lineNum":"  220","line":"        unknown_args.call(before_dash, after_dash)"},
{"lineNum":"  221","line":"      end"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"      check_invalid_options"},
{"lineNum":"  224","line":"    end"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    private def process_handler(handler)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":"      flag = handler.flag"},
{"lineNum":"  228","line":"      block = handler.block"},
{"lineNum":"  229","line":"      case flag"},
{"lineNum":"  230","line":"      when /--(\\S+)\\s+\\[\\S+\\]/","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  231","line":"        process_double_flag(\"--#{$1}\", block)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  232","line":"      when /--(\\S+)(\\s+|\\=)(\\S+)?/","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  233","line":"        process_double_flag(\"--#{$1}\", block, true)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  234","line":"      when /--\\S+/","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  235","line":"        process_flag_presence(flag, block)"},
{"lineNum":"  236","line":"      when /-(.)\\s*\\[\\S+\\]/","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":"        process_single_flag(flag[0..1], block)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":"      when /-(.)\\s+\\S+/, /-(.)\\s+/, /-(.)\\S+/","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  239","line":"        process_single_flag(flag[0..1], block, true)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"      else"},
{"lineNum":"  241","line":"        process_flag_presence(flag, block)"},
{"lineNum":"  242","line":"      end"},
{"lineNum":"  243","line":"    end"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    private def process_flag_presence(flag, block)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"      while index = args_index(flag)"},
{"lineNum":"  247","line":"        delete_arg_at_index(index)"},
{"lineNum":"  248","line":"        block.call \"\""},
{"lineNum":"  249","line":"      end"},
{"lineNum":"  250","line":"    end"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    private def process_double_flag(flag, block, raise_if_missing = false)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  253","line":"      while index = args_index { |arg| arg.split(\"=\")[0] == flag }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  254","line":"        arg = @args[index]"},
{"lineNum":"  255","line":"        if arg.size == flag.size","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  256","line":"          delete_arg_at_index(index)"},
{"lineNum":"  257","line":"          if index < args_size","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  258","line":"            block.call delete_arg_at_index(index)"},
{"lineNum":"  259","line":"          else"},
{"lineNum":"  260","line":"            if raise_if_missing","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":"              @parser.missing_option.call(flag)"},
{"lineNum":"  262","line":"            end"},
{"lineNum":"  263","line":"          end"},
{"lineNum":"  264","line":"        elsif arg[flag.size] == \'=\'","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"          delete_arg_at_index(index)"},
{"lineNum":"  266","line":"          value = arg[flag.size + 1..-1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"          if value.empty?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"            @parser.missing_option.call(flag)"},
{"lineNum":"  269","line":"          else"},
{"lineNum":"  270","line":"            block.call value"},
{"lineNum":"  271","line":"          end"},
{"lineNum":"  272","line":"        end"},
{"lineNum":"  273","line":"      end"},
{"lineNum":"  274","line":"    end"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    private def process_single_flag(flag, block, raise_if_missing = false)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  277","line":"      while index = args_index { |arg| arg.starts_with?(flag) }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  278","line":"        arg = delete_arg_at_index(index)"},
{"lineNum":"  279","line":"        if arg.size == flag.size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  280","line":"          if index < args_size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"            block.call delete_arg_at_index(index)"},
{"lineNum":"  282","line":"          else"},
{"lineNum":"  283","line":"            @parser.missing_option.call(flag) if raise_if_missing","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  284","line":"          end"},
{"lineNum":"  285","line":"        else"},
{"lineNum":"  286","line":"          value = arg[2..-1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"          @parser.missing_option.call(flag) if raise_if_missing && value.empty?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  288","line":"          block.call value"},
{"lineNum":"  289","line":"        end"},
{"lineNum":"  290","line":"      end"},
{"lineNum":"  291","line":"    end"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"    private def args_size"},
{"lineNum":"  294","line":"      @double_dash_index || @args.size"},
{"lineNum":"  295","line":"    end"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"    private def args_index(flag)"},
{"lineNum":"  298","line":"      args_index { |arg| arg == flag }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  299","line":"    end"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    private def args_index"},
{"lineNum":"  302","line":"      index = @args.index { |arg| yield arg }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  303","line":"      if index"},
{"lineNum":"  304","line":"        if (double_dash_index = @double_dash_index) && index >= double_dash_index","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  305","line":"          return nil"},
{"lineNum":"  306","line":"        end"},
{"lineNum":"  307","line":"      end"},
{"lineNum":"  308","line":"      index"},
{"lineNum":"  309","line":"    end"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    private def delete_arg_at_index(index)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  312","line":"      arg = @args.delete_at(index)"},
{"lineNum":"  313","line":"      decrement_double_dash_index"},
{"lineNum":"  314","line":"      arg"},
{"lineNum":"  315","line":"    end"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"    private def decrement_double_dash_index"},
{"lineNum":"  318","line":"      if double_dash_index = @double_dash_index","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  319","line":"        @double_dash_index = double_dash_index - 1","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  320","line":"      end"},
{"lineNum":"  321","line":"    end"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    private def check_invalid_options","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"      @args.each_with_index do |arg, index|"},
{"lineNum":"  325","line":"        return if (double_dash_index = @double_dash_index) && index >= double_dash_index","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"        if arg.starts_with?(\'-\') && arg != \"-\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  328","line":"          @parser.invalid_option.call(arg)"},
{"lineNum":"  329","line":"        end"},
{"lineNum":"  330","line":"      end"},
{"lineNum":"  331","line":"    end"},
{"lineNum":"  332","line":"  end"},
{"lineNum":"  333","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 79, "covered" : 0,};
var merged_data = [];
