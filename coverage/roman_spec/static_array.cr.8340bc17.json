var data = {lines:[
{"lineNum":"    1","line":"# A fixed-size, stack allocated array."},
{"lineNum":"    2","line":"struct StaticArray(T, N)"},
{"lineNum":"    3","line":"  include Indexable(T)"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"  # Create a new `StaticArray` with the given *args*. The type of the"},
{"lineNum":"    6","line":"  # static array will be the union of the type of the given *args*,"},
{"lineNum":"    7","line":"  # and its size will be the number of elements in *args*."},
{"lineNum":"    8","line":"  #"},
{"lineNum":"    9","line":"  # ```"},
{"lineNum":"   10","line":"  # ary = StaticArray[1, \'a\']"},
{"lineNum":"   11","line":"  # ary[0]    # => 1"},
{"lineNum":"   12","line":"  # ary[1]    # => \'a\'"},
{"lineNum":"   13","line":"  # ary.class # => StaticArray(Char | Int32, 2)"},
{"lineNum":"   14","line":"  # ```"},
{"lineNum":"   15","line":"  #"},
{"lineNum":"   16","line":"  # See also: `Number.static_array`."},
{"lineNum":"   17","line":"  macro [](*args)"},
{"lineNum":"   18","line":"    %array = uninitialized StaticArray(typeof({{*args}}), {{args.size}})"},
{"lineNum":"   19","line":"    {% for arg, i in args %}"},
{"lineNum":"   20","line":"      %array.to_unsafe[{{i}}] = {{arg}}"},
{"lineNum":"   21","line":"    {% end %}"},
{"lineNum":"   22","line":"    %array"},
{"lineNum":"   23","line":"  end"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"  # Creates a new static array and invokes the"},
{"lineNum":"   26","line":"  # block once for each index of the array, assigning the"},
{"lineNum":"   27","line":"  # block\'s value in that index."},
{"lineNum":"   28","line":"  #"},
{"lineNum":"   29","line":"  # ```"},
{"lineNum":"   30","line":"  # StaticArray(Int32, 3).new { |i| i * 2 } # => StaticArray[0, 2, 4]"},
{"lineNum":"   31","line":"  # ```"},
{"lineNum":"   32","line":"  def self.new(&block : Int32 -> T)"},
{"lineNum":"   33","line":"    array = uninitialized self"},
{"lineNum":"   34","line":"    N.times do |i|"},
{"lineNum":"   35","line":"      array.to_unsafe[i] = yield i","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   36","line":"    end"},
{"lineNum":"   37","line":"    array"},
{"lineNum":"   38","line":"  end"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"  # Creates a new static array filled with the given value."},
{"lineNum":"   41","line":"  #"},
{"lineNum":"   42","line":"  # ```"},
{"lineNum":"   43","line":"  # StaticArray(Int32, 3).new(42) # => StaticArray[42, 42, 42]"},
{"lineNum":"   44","line":"  # ```"},
{"lineNum":"   45","line":"  def self.new(value : T)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   46","line":"    new { value }"},
{"lineNum":"   47","line":"  end"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"  # Disallow creating an uninitialized StaticArray with new."},
{"lineNum":"   50","line":"  # If this is desired, one can use `array = uninitialized ...`"},
{"lineNum":"   51","line":"  # which makes it clear that it\'s unsafe."},
{"lineNum":"   52","line":"  private def initialize"},
{"lineNum":"   53","line":"  end"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"  # Equality. Returns `true` if each element in `self` is equal to each"},
{"lineNum":"   56","line":"  # corresponding element in *other*."},
{"lineNum":"   57","line":"  #"},
{"lineNum":"   58","line":"  # ```"},
{"lineNum":"   59","line":"  # array = StaticArray(Int32, 3).new 0  # => StaticArray[0, 0, 0]"},
{"lineNum":"   60","line":"  # array2 = StaticArray(Int32, 3).new 0 # => StaticArray[0, 0, 0]"},
{"lineNum":"   61","line":"  # array3 = StaticArray(Int32, 3).new 1 # => StaticArray[1, 1, 1]"},
{"lineNum":"   62","line":"  # array == array2                      # => true"},
{"lineNum":"   63","line":"  # array == array3                      # => false"},
{"lineNum":"   64","line":"  # ```"},
{"lineNum":"   65","line":"  def ==(other : StaticArray)"},
{"lineNum":"   66","line":"    return false unless size == other.size"},
{"lineNum":"   67","line":"    each_with_index do |e, i|"},
{"lineNum":"   68","line":"      return false unless e == other[i]"},
{"lineNum":"   69","line":"    end"},
{"lineNum":"   70","line":"    true"},
{"lineNum":"   71","line":"  end"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  # Equality with another object. Always returns `false`."},
{"lineNum":"   74","line":"  #"},
{"lineNum":"   75","line":"  # ```"},
{"lineNum":"   76","line":"  # array = StaticArray(Int32, 3).new 0 # => StaticArray[0, 0, 0]"},
{"lineNum":"   77","line":"  # array == nil                        # => false"},
{"lineNum":"   78","line":"  # ```"},
{"lineNum":"   79","line":"  def ==(other)"},
{"lineNum":"   80","line":"    false"},
{"lineNum":"   81","line":"  end"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"  @[AlwaysInline]"},
{"lineNum":"   84","line":"  def unsafe_at(index : Int)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   85","line":"    to_unsafe[index]","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   86","line":"  end"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"  # Sets the given value at the given *index*."},
{"lineNum":"   89","line":"  #"},
{"lineNum":"   90","line":"  # Negative indices can be used to start counting from the end of the array."},
{"lineNum":"   91","line":"  # Raises `IndexError` if trying to set an element outside the array\'s range."},
{"lineNum":"   92","line":"  #"},
{"lineNum":"   93","line":"  # ```"},
{"lineNum":"   94","line":"  # array = StaticArray(Int32, 3).new { |i| i + 1 } # => StaticArray[1, 2, 3]"},
{"lineNum":"   95","line":"  # array[2] = 2                                    # => 2"},
{"lineNum":"   96","line":"  # array                                           # => StaticArray[1, 2, 2]"},
{"lineNum":"   97","line":"  # array[4] = 4                                    # raises IndexError"},
{"lineNum":"   98","line":"  # ```"},
{"lineNum":"   99","line":"  @[AlwaysInline]"},
{"lineNum":"  100","line":"  def []=(index : Int, value : T)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  101","line":"    index = check_index_out_of_bounds index","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"    to_unsafe[index] = value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"  end"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"  # Yields the current element at the given index and updates the value"},
{"lineNum":"  106","line":"  # at the given *index* with the block\'s value."},
{"lineNum":"  107","line":"  # Raises `IndexError` if trying to set an element outside the array\'s range."},
{"lineNum":"  108","line":"  #"},
{"lineNum":"  109","line":"  # ```"},
{"lineNum":"  110","line":"  # array = StaticArray(Int32, 3).new { |i| i + 1 } # => StaticArray[1, 2, 3]"},
{"lineNum":"  111","line":"  # array.update(1) { |x| x * 2 }                   # => 4"},
{"lineNum":"  112","line":"  # array                                           # => StaticArray[1, 4, 3]"},
{"lineNum":"  113","line":"  # array.update(5) { |x| x * 2 }                   # raises IndexError"},
{"lineNum":"  114","line":"  # ```"},
{"lineNum":"  115","line":"  def update(index : Int)"},
{"lineNum":"  116","line":"    index = check_index_out_of_bounds index"},
{"lineNum":"  117","line":"    to_unsafe[index] = yield to_unsafe[index]"},
{"lineNum":"  118","line":"  end"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"  # Returns the size of `self`"},
{"lineNum":"  121","line":"  #"},
{"lineNum":"  122","line":"  # ```"},
{"lineNum":"  123","line":"  # array = StaticArray(Int32, 3).new { |i| i + 1 }"},
{"lineNum":"  124","line":"  # array.size # => 3"},
{"lineNum":"  125","line":"  # ```"},
{"lineNum":"  126","line":"  def size","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  127","line":"    N"},
{"lineNum":"  128","line":"  end"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"  # Fills the array by substituting all elements with the given value."},
{"lineNum":"  131","line":"  #"},
{"lineNum":"  132","line":"  # ```"},
{"lineNum":"  133","line":"  # array = StaticArray(Int32, 3).new { |i| i + 1 }"},
{"lineNum":"  134","line":"  # array.[]= 2 # => nil"},
{"lineNum":"  135","line":"  # array       # => StaticArray[2, 2, 2]"},
{"lineNum":"  136","line":"  # ```"},
{"lineNum":"  137","line":"  def []=(value : T)"},
{"lineNum":"  138","line":"    size.times do |i|"},
{"lineNum":"  139","line":"      to_unsafe[i] = value"},
{"lineNum":"  140","line":"    end"},
{"lineNum":"  141","line":"  end"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"  # Modifies `self` by randomizing the order of elements in the array"},
{"lineNum":"  144","line":"  # using the given *random* number generator.  Returns `self`."},
{"lineNum":"  145","line":"  #"},
{"lineNum":"  146","line":"  # ```"},
{"lineNum":"  147","line":"  # a = StaticArray(Int32, 3).new { |i| i + 1 } # => StaticArray[1, 2, 3]"},
{"lineNum":"  148","line":"  # a.shuffle!(Random.new(42))                  # => StaticArray[3, 2, 1]"},
{"lineNum":"  149","line":"  # a                                           # => StaticArray[3, 2, 1]"},
{"lineNum":"  150","line":"  # ```"},
{"lineNum":"  151","line":"  def shuffle!(random = Random::DEFAULT)"},
{"lineNum":"  152","line":"    to_slice.shuffle!(random)"},
{"lineNum":"  153","line":"    self"},
{"lineNum":"  154","line":"  end"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"  # Invokes the given block for each element of `self`, replacing the element"},
{"lineNum":"  157","line":"  # with the value returned by the block. Returns `self`."},
{"lineNum":"  158","line":"  #"},
{"lineNum":"  159","line":"  # ```"},
{"lineNum":"  160","line":"  # array = StaticArray(Int32, 3).new { |i| i + 1 }"},
{"lineNum":"  161","line":"  # array.map! { |x| x*x } # => StaticArray[1, 4, 9]"},
{"lineNum":"  162","line":"  # ```"},
{"lineNum":"  163","line":"  def map!"},
{"lineNum":"  164","line":"    to_unsafe.map!(size) { |e| yield e }"},
{"lineNum":"  165","line":"    self"},
{"lineNum":"  166","line":"  end"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"  # Returns a new static array where elements are mapped by the given block."},
{"lineNum":"  169","line":"  #"},
{"lineNum":"  170","line":"  # ```"},
{"lineNum":"  171","line":"  # array = StaticArray[1, 2.5, \"a\"]"},
{"lineNum":"  172","line":"  # tuple.map &.to_s # => StaticArray[\"1\", \"2.5\", \"a\"]"},
{"lineNum":"  173","line":"  # ```"},
{"lineNum":"  174","line":"  def map(&block : T -> U) forall U"},
{"lineNum":"  175","line":"    StaticArray(U, N).new { |i| yield to_unsafe[i] }"},
{"lineNum":"  176","line":"  end"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"  # Like `map!`, but the block gets passed both the element and its index."},
{"lineNum":"  179","line":"  def map_with_index!(&block : (T, Int32) -> T)"},
{"lineNum":"  180","line":"    to_unsafe.map_with_index!(size) { |e, i| yield e, i }"},
{"lineNum":"  181","line":"    self"},
{"lineNum":"  182","line":"  end"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"  # Like `map`, but the block gets passed both the element and its index."},
{"lineNum":"  185","line":"  def map_with_index(&block : (T, Int32) -> U) forall U"},
{"lineNum":"  186","line":"    StaticArray(U, N).new { |i| yield to_unsafe[i], i }"},
{"lineNum":"  187","line":"  end"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  # Reverses the elements of this array in-place, then returns `self`."},
{"lineNum":"  190","line":"  #"},
{"lineNum":"  191","line":"  # ```"},
{"lineNum":"  192","line":"  # array = StaticArray(Int32, 3).new { |i| i + 1 }"},
{"lineNum":"  193","line":"  # array.reverse! # => StaticArray[3, 2, 1]"},
{"lineNum":"  194","line":"  # ```"},
{"lineNum":"  195","line":"  def reverse!","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  196","line":"    to_slice.reverse!","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  197","line":"    self"},
{"lineNum":"  198","line":"  end"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"  # Returns a slice that points to the elements of this static array."},
{"lineNum":"  201","line":"  # Changes made to the returned slice also affect this static array."},
{"lineNum":"  202","line":"  #"},
{"lineNum":"  203","line":"  # ```"},
{"lineNum":"  204","line":"  # array = StaticArray(Int32, 3).new(2)"},
{"lineNum":"  205","line":"  # slice = array.to_slice # => Slice[2, 2, 2]"},
{"lineNum":"  206","line":"  # slice[0] = 3"},
{"lineNum":"  207","line":"  # array # => StaticArray[3, 2, 2]"},
{"lineNum":"  208","line":"  # ```"},
{"lineNum":"  209","line":"  def to_slice","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  210","line":"    Slice.new(to_unsafe, size)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  211","line":"  end"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"  # Returns a pointer to this static array\'s data."},
{"lineNum":"  214","line":"  #"},
{"lineNum":"  215","line":"  # ```"},
{"lineNum":"  216","line":"  # ary = StaticArray(Int32, 3).new(42)"},
{"lineNum":"  217","line":"  # ary.to_unsafe[0] # => 42"},
{"lineNum":"  218","line":"  # ```"},
{"lineNum":"  219","line":"  def to_unsafe : Pointer(T)","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  220","line":"    pointerof(@buffer)"},
{"lineNum":"  221","line":"  end"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"  # Appends a string representation of this static array to the given `IO`."},
{"lineNum":"  224","line":"  #"},
{"lineNum":"  225","line":"  # ```"},
{"lineNum":"  226","line":"  # array = StaticArray(Int32, 3).new { |i| i + 1 }"},
{"lineNum":"  227","line":"  # array.to_s # => \"StaticArray[1, 2, 3]\""},
{"lineNum":"  228","line":"  # ```"},
{"lineNum":"  229","line":"  def to_s(io : IO)"},
{"lineNum":"  230","line":"    io << \"StaticArray[\""},
{"lineNum":"  231","line":"    join \", \", io, &.inspect(io)"},
{"lineNum":"  232","line":"    io << \"]\""},
{"lineNum":"  233","line":"  end"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"  def pretty_print(pp)"},
{"lineNum":"  236","line":"    # Don\'t pass `self` here because we\'ll pass `self` by"},
{"lineNum":"  237","line":"    # value and for big static arrays that seems to make"},
{"lineNum":"  238","line":"    # LLVM really slow."},
{"lineNum":"  239","line":"    # TODO: investigate why, maybe report a bug to LLVM?"},
{"lineNum":"  240","line":"    pp.list(\"StaticArray[\", to_slice, \"]\")"},
{"lineNum":"  241","line":"  end"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"  # Returns a new `StaticArray` where each element is cloned from elements in `self`."},
{"lineNum":"  244","line":"  def clone","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  245","line":"    array = uninitialized self"},
{"lineNum":"  246","line":"    N.times do |i|"},
{"lineNum":"  247","line":"      array.to_unsafe[i] = to_unsafe[i].clone","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"    end"},
{"lineNum":"  249","line":"    array"},
{"lineNum":"  250","line":"  end"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"  # :nodoc:"},
{"lineNum":"  253","line":"  def index(object, offset : Int = 0)"},
{"lineNum":"  254","line":"    # Optimize for the case of looking for a byte in a byte slice"},
{"lineNum":"  255","line":"    if T.is_a?(UInt8.class) &&"},
{"lineNum":"  256","line":"       (object.is_a?(UInt8) || (object.is_a?(Int) && 0 <= object < 256))"},
{"lineNum":"  257","line":"      return to_slice.fast_index(object, offset)"},
{"lineNum":"  258","line":"    end"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    super"},
{"lineNum":"  261","line":"  end"},
{"lineNum":"  262","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:20:30", "instrumented" : 15, "covered" : 0,};
var merged_data = [];
