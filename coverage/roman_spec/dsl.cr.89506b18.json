var data = {lines:[
{"lineNum":"    1","line":"require \"colorize\""},
{"lineNum":"    2","line":"require \"option_parser\""},
{"lineNum":"    3","line":"require \"signal\""},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"module Spec"},
{"lineNum":"    6","line":"  private COLORS = {"},
{"lineNum":"    7","line":"    success: :green,"},
{"lineNum":"    8","line":"    fail:    :red,"},
{"lineNum":"    9","line":"    error:   :red,"},
{"lineNum":"   10","line":"    pending: :yellow,"},
{"lineNum":"   11","line":"    comment: :cyan,"},
{"lineNum":"   12","line":"  }"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"  private LETTERS = {"},
{"lineNum":"   15","line":"    success: \'.\',"},
{"lineNum":"   16","line":"    fail:    \'F\',"},
{"lineNum":"   17","line":"    error:   \'E\',"},
{"lineNum":"   18","line":"    pending: \'*\',"},
{"lineNum":"   19","line":"  }"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"  @@use_colors = true"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"  # :nodoc:"},
{"lineNum":"   24","line":"  def self.color(str, status)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"    if use_colors?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   26","line":"      str.colorize(COLORS[status])","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   27","line":"    else"},
{"lineNum":"   28","line":"      str"},
{"lineNum":"   29","line":"    end"},
{"lineNum":"   30","line":"  end"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"  # :nodoc:"},
{"lineNum":"   33","line":"  def self.use_colors?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"    @@use_colors"},
{"lineNum":"   35","line":"  end"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"  # :nodoc:"},
{"lineNum":"   38","line":"  def self.use_colors=(@@use_colors)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   39","line":"  end"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"  # :nodoc:"},
{"lineNum":"   42","line":"  class AssertionFailed < Exception"},
{"lineNum":"   43","line":"    getter file : String"},
{"lineNum":"   44","line":"    getter line : Int32"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    def initialize(message, @file, @line)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   47","line":"      super(message)"},
{"lineNum":"   48","line":"    end"},
{"lineNum":"   49","line":"  end"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"  @@aborted = false"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"  # :nodoc:"},
{"lineNum":"   54","line":"  def self.abort!"},
{"lineNum":"   55","line":"    exit","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   56","line":"  end"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"  # :nodoc:"},
{"lineNum":"   59","line":"  def self.pattern=(pattern)"},
{"lineNum":"   60","line":"    @@pattern = Regex.new(Regex.escape(pattern))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   61","line":"  end"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  # :nodoc:"},
{"lineNum":"   64","line":"  def self.line=(@@line : Int32)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"  end"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"  # :nodoc:"},
{"lineNum":"   68","line":"  def self.slowest=(@@slowest : Int32)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"  end"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"  # :nodoc:"},
{"lineNum":"   72","line":"  def self.slowest","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   73","line":"    @@slowest"},
{"lineNum":"   74","line":"  end"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"  # :nodoc:"},
{"lineNum":"   77","line":"  def self.to_human(span : Time::Span)"},
{"lineNum":"   78","line":"    total_milliseconds = span.total_milliseconds"},
{"lineNum":"   79","line":"    if total_milliseconds < 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"      return \"#{(span.total_milliseconds * 1000).round.to_i} microseconds\"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   81","line":"    end"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    total_seconds = span.total_seconds"},
{"lineNum":"   84","line":"    if total_seconds < 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"      return \"#{span.total_milliseconds.round(2)} milliseconds\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"    end"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    if total_seconds < 60","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"      return \"#{total_seconds.round(2)} seconds\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"    end"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    minutes = span.minutes"},
{"lineNum":"   93","line":"    seconds = span.seconds"},
{"lineNum":"   94","line":"    \"#{minutes}:#{seconds < 10 ? \"0\" : \"\"}#{seconds} minutes\"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   95","line":"  end"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"  # :nodoc:"},
{"lineNum":"   98","line":"  def self.add_location(file, line)"},
{"lineNum":"   99","line":"    locations = @@locations ||= {} of String => Array(Int32)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  100","line":"    lines = locations[File.expand_path(file)] ||= [] of Int32"},
{"lineNum":"  101","line":"    lines << line"},
{"lineNum":"  102","line":"  end"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"  # :nodoc:"},
{"lineNum":"  105","line":"  def self.matches?(description, file, line, end_line = line)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"    spec_pattern = @@pattern"},
{"lineNum":"  107","line":"    spec_line = @@line","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"    locations = @@locations"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    # When a method invokes `it` and only forwards line information,"},
{"lineNum":"  111","line":"    # not end_line information (this can happen in code before we"},
{"lineNum":"  112","line":"    # introduced the end_line feature) then running a spec by giving"},
{"lineNum":"  113","line":"    # a line won\'t work because end_line might be located before line."},
{"lineNum":"  114","line":"    # So, we also check `line == spec_line` to somehow preserve"},
{"lineNum":"  115","line":"    # backwards compatibility."},
{"lineNum":"  116","line":"    if spec_line && (line == spec_line || line <= spec_line <= end_line)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"      return true"},
{"lineNum":"  118","line":"    end"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    if locations","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  121","line":"      lines = locations[file]?"},
{"lineNum":"  122","line":"      return true if lines && lines.any? { |l| line == l || line <= l <= end_line }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  123","line":"    end"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    if spec_pattern || spec_line || locations","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  126","line":"      Spec::RootContext.matches?(description, spec_pattern, spec_line, locations)"},
{"lineNum":"  127","line":"    else"},
{"lineNum":"  128","line":"      true"},
{"lineNum":"  129","line":"    end"},
{"lineNum":"  130","line":"  end"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"  @@fail_fast = false"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  # :nodoc:"},
{"lineNum":"  135","line":"  def self.fail_fast=(@@fail_fast)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  136","line":"  end"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"  # :nodoc:"},
{"lineNum":"  139","line":"  def self.fail_fast?"},
{"lineNum":"  140","line":"    @@fail_fast"},
{"lineNum":"  141","line":"  end"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"  # Instructs the spec runner to execute the given block"},
{"lineNum":"  144","line":"  # before each spec, regardless of where this method is invoked."},
{"lineNum":"  145","line":"  def self.before_each(&block)"},
{"lineNum":"  146","line":"    before_each = @@before_each ||= [] of ->"},
{"lineNum":"  147","line":"    before_each << block"},
{"lineNum":"  148","line":"  end"},
{"lineNum":"  149","line":"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  150","line":"  # Instructs the spec runner to execute the given block"},
{"lineNum":"  151","line":"  # after each spec, regardless of where this method is invoked."},
{"lineNum":"  152","line":"  def self.after_each(&block)"},
{"lineNum":"  153","line":"    after_each = @@after_each ||= [] of ->"},
{"lineNum":"  154","line":"    after_each << block"},
{"lineNum":"  155","line":"  end"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"  # :nodoc:"},
{"lineNum":"  158","line":"  def self.run_before_each_hooks","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"    @@before_each.try &.each &.call"},
{"lineNum":"  160","line":"  end"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"  # :nodoc:"},
{"lineNum":"  163","line":"  def self.run_after_each_hooks","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  164","line":"    @@after_each.try &.each &.call"},
{"lineNum":"  165","line":"  end"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"  # :nodoc:"},
{"lineNum":"  168","line":"  def self.run"},
{"lineNum":"  169","line":"    start_time = Time.monotonic","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"    at_exit do","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"      elapsed_time = Time.monotonic - start_time"},
{"lineNum":"  172","line":"      Spec::RootContext.print_results(elapsed_time)"},
{"lineNum":"  173","line":"      exit 1 unless Spec::RootContext.succeeded"},
{"lineNum":"  174","line":"    end"},
{"lineNum":"  175","line":"  end"},
{"lineNum":"  176","line":"end"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"require \"./*\""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 31, "covered" : 0,};
var merged_data = [];
