var data = {lines:[
{"lineNum":"    1","line":"@[Link(\"pthread\")]"},
{"lineNum":"    2","line":"{% if flag?(:freebsd) %}"},
{"lineNum":"    3","line":"  @[Link(\"gc-threaded\")]"},
{"lineNum":"    4","line":"{% else %}"},
{"lineNum":"    5","line":"  @[Link(\"gc\")]"},
{"lineNum":"    6","line":"{% end %}"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"lib LibGC"},
{"lineNum":"    9","line":"  alias Int = LibC::Int"},
{"lineNum":"   10","line":"  alias SizeT = LibC::SizeT"},
{"lineNum":"   11","line":"  alias Word = LibC::ULong"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"  fun init = GC_init"},
{"lineNum":"   14","line":"  fun malloc = GC_malloc(size : SizeT) : Void*"},
{"lineNum":"   15","line":"  fun malloc_atomic = GC_malloc_atomic(size : SizeT) : Void*"},
{"lineNum":"   16","line":"  fun realloc = GC_realloc(ptr : Void*, size : SizeT) : Void*"},
{"lineNum":"   17","line":"  fun free = GC_free(ptr : Void*)"},
{"lineNum":"   18","line":"  fun collect_a_little = GC_collect_a_little : Int"},
{"lineNum":"   19","line":"  fun collect = GC_gcollect"},
{"lineNum":"   20","line":"  fun add_roots = GC_add_roots(low : Void*, high : Void*)"},
{"lineNum":"   21","line":"  fun enable = GC_enable"},
{"lineNum":"   22","line":"  fun disable = GC_disable"},
{"lineNum":"   23","line":"  fun is_disabled = GC_is_disabled : Int"},
{"lineNum":"   24","line":"  fun set_handle_fork = GC_set_handle_fork(value : Int)"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"  fun base = GC_base(displaced_pointer : Void*) : Void*"},
{"lineNum":"   27","line":"  fun is_heap_ptr = GC_is_heap_ptr(pointer : Void*) : Int"},
{"lineNum":"   28","line":"  fun general_register_disappearing_link = GC_general_register_disappearing_link(link : Void**, obj : Void*) : Int"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"  type Finalizer = Void*, Void* ->"},
{"lineNum":"   31","line":"  fun register_finalizer = GC_register_finalizer(obj : Void*, fn : Finalizer, cd : Void*, ofn : Finalizer*, ocd : Void**)"},
{"lineNum":"   32","line":"  fun register_finalizer_ignore_self = GC_register_finalizer_ignore_self(obj : Void*, fn : Finalizer, cd : Void*, ofn : Finalizer*, ocd : Void**)"},
{"lineNum":"   33","line":"  fun invoke_finalizers = GC_invoke_finalizers : Int"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  fun get_heap_usage_safe = GC_get_heap_usage_safe(heap_size : Word*, free_bytes : Word*, unmapped_bytes : Word*, bytes_since_gc : Word*, total_bytes : Word*)"},
{"lineNum":"   36","line":"  fun set_max_heap_size = GC_set_max_heap_size(Word)"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"  fun get_start_callback = GC_get_start_callback : Void*"},
{"lineNum":"   39","line":"  fun set_start_callback = GC_set_start_callback(callback : ->)"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"  fun set_push_other_roots = GC_set_push_other_roots(proc : ->)"},
{"lineNum":"   42","line":"  fun get_push_other_roots = GC_get_push_other_roots : ->"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"  fun push_all_eager = GC_push_all_eager(bottom : Void*, top : Void*)"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"  $stackbottom = GC_stackbottom : Void*"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"  fun set_on_collection_event = GC_set_on_collection_event(cb : ->)"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"  $gc_no = GC_gc_no : LibC::ULong"},
{"lineNum":"   51","line":"  $bytes_found = GC_bytes_found : LibC::Long"},
{"lineNum":"   52","line":"  # GC_on_collection_event isn\'t exported.  Can\'t collect totals without it."},
{"lineNum":"   53","line":"  # bytes_allocd, heap_size, unmapped_bytes are macros"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"  fun size = GC_size(addr : Void*) : LibC::SizeT"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"  # Boehm GC requires to use GC_pthread_create and GC_pthread_join instead of pthread_create and pthread_join"},
{"lineNum":"   58","line":"  fun pthread_create = GC_pthread_create(thread : LibC::PthreadT*, attr : LibC::PthreadAttrT*, start : Void* -> Void*, arg : Void*) : LibC::Int"},
{"lineNum":"   59","line":"  fun pthread_join = GC_pthread_join(thread : LibC::PthreadT, value : Void**) : LibC::Int"},
{"lineNum":"   60","line":"  fun pthread_detach = GC_pthread_detach(thread : LibC::PthreadT) : LibC::Int"},
{"lineNum":"   61","line":"end"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"module GC"},
{"lineNum":"   64","line":"  # :nodoc:"},
{"lineNum":"   65","line":"  def self.malloc(size : LibC::SizeT) : Void*","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"    LibGC.malloc(size)","class":"lineNoCov","hits":"0","possible_hits":"487",},
{"lineNum":"   67","line":"  end"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"  # :nodoc:"},
{"lineNum":"   70","line":"  def self.malloc_atomic(size : LibC::SizeT) : Void*"},
{"lineNum":"   71","line":"    LibGC.malloc_atomic(size)","class":"lineNoCov","hits":"0","possible_hits":"244",},
{"lineNum":"   72","line":"  end"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"  # :nodoc:"},
{"lineNum":"   75","line":"  def self.realloc(ptr : Void*, size : LibC::SizeT) : Void*","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"    LibGC.realloc(ptr, size)","class":"lineNoCov","hits":"0","possible_hits":"42",},
{"lineNum":"   77","line":"  end"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"  def self.init"},
{"lineNum":"   80","line":"    LibGC.set_handle_fork(1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"    LibGC.init","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"  end"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"  def self.collect"},
{"lineNum":"   85","line":"    LibGC.collect"},
{"lineNum":"   86","line":"  end"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"  def self.enable"},
{"lineNum":"   89","line":"    unless LibGC.is_disabled != 0"},
{"lineNum":"   90","line":"      raise \"GC is not disabled\""},
{"lineNum":"   91","line":"    end"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    LibGC.enable"},
{"lineNum":"   94","line":"  end"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"  def self.disable"},
{"lineNum":"   97","line":"    LibGC.disable"},
{"lineNum":"   98","line":"  end"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"  def self.free(pointer : Void*)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"    LibGC.free(pointer)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"  end"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"  def self.add_finalizer(object : Reference)"},
{"lineNum":"  105","line":"    add_finalizer_impl(object)"},
{"lineNum":"  106","line":"  end"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"  def self.add_finalizer(object)"},
{"lineNum":"  109","line":"    # Nothing"},
{"lineNum":"  110","line":"  end"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  private def self.add_finalizer_impl(object : T) forall T"},
{"lineNum":"  113","line":"    LibGC.register_finalizer_ignore_self(object.as(Void*),","class":"lineNoCov","hits":"0","possible_hits":"64",},
{"lineNum":"  114","line":"      ->(obj, data) { obj.as(T).finalize },"},
{"lineNum":"  115","line":"      nil, nil, nil)"},
{"lineNum":"  116","line":"    nil"},
{"lineNum":"  117","line":"  end"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"  def self.add_root(object : Reference)"},
{"lineNum":"  120","line":"    roots = @@roots ||= [] of Pointer(Void)"},
{"lineNum":"  121","line":"    roots << Pointer(Void).new(object.object_id)"},
{"lineNum":"  122","line":"  end"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  def self.register_disappearing_link(pointer : Void**)"},
{"lineNum":"  125","line":"    base = LibGC.base(pointer.value)"},
{"lineNum":"  126","line":"    LibGC.general_register_disappearing_link(pointer, base)"},
{"lineNum":"  127","line":"  end"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"  def self.is_heap_ptr(pointer : Void*)"},
{"lineNum":"  130","line":"    LibGC.is_heap_ptr(pointer) != 0"},
{"lineNum":"  131","line":"  end"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"  def self.stats"},
{"lineNum":"  134","line":"    LibGC.get_heap_usage_safe(out heap_size, out free_bytes, out unmapped_bytes, out bytes_since_gc, out total_bytes)"},
{"lineNum":"  135","line":"    # collections = LibGC.gc_no - 1"},
{"lineNum":"  136","line":"    # bytes_found = LibGC.bytes_found"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"    Stats.new("},
{"lineNum":"  139","line":"      # collections: collections,"},
{"lineNum":"  140","line":"      # bytes_found: bytes_found,"},
{"lineNum":"  141","line":"      heap_size: heap_size,"},
{"lineNum":"  142","line":"      free_bytes: free_bytes,"},
{"lineNum":"  143","line":"      unmapped_bytes: unmapped_bytes,"},
{"lineNum":"  144","line":"      bytes_since_gc: bytes_since_gc,"},
{"lineNum":"  145","line":"      total_bytes: total_bytes"},
{"lineNum":"  146","line":"    )"},
{"lineNum":"  147","line":"  end"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"  # :nodoc:"},
{"lineNum":"  150","line":"  def self.pthread_create(thread : LibC::PthreadT*, attr : LibC::PthreadAttrT*, start : Void* -> Void*, arg : Void*)"},
{"lineNum":"  151","line":"    LibGC.pthread_create(thread, attr, start, arg)"},
{"lineNum":"  152","line":"  end"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"  # :nodoc:"},
{"lineNum":"  155","line":"  def self.pthread_join(thread : LibC::PthreadT) : Void*"},
{"lineNum":"  156","line":"    ret = LibGC.pthread_join(thread, out value)"},
{"lineNum":"  157","line":"    raise Errno.new(\"pthread_join\") unless ret == 0"},
{"lineNum":"  158","line":"    value"},
{"lineNum":"  159","line":"  end"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"  # :nodoc:"},
{"lineNum":"  162","line":"  def self.pthread_detach(thread : LibC::PthreadT)"},
{"lineNum":"  163","line":"    LibGC.pthread_detach(thread)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"  end"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"  # :nodoc:"},
{"lineNum":"  167","line":"  def self.stack_bottom","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  168","line":"    LibGC.stackbottom"},
{"lineNum":"  169","line":"  end"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"  # :nodoc:"},
{"lineNum":"  172","line":"  def self.stack_bottom=(pointer : Void*)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"    LibGC.stackbottom = pointer"},
{"lineNum":"  174","line":"  end"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"  # :nodoc:"},
{"lineNum":"  177","line":"  def self.push_stack(stack_top, stack_bottom)"},
{"lineNum":"  178","line":"    LibGC.push_all_eager(stack_top, stack_bottom)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"  end"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"  # :nodoc:"},
{"lineNum":"  182","line":"  def self.before_collect(&block)"},
{"lineNum":"  183","line":"    @@prev_push_other_roots = LibGC.get_push_other_roots","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"    @@curr_push_other_roots = block","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    LibGC.set_push_other_roots ->do","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"      @@prev_push_other_roots.try(&.call)"},
{"lineNum":"  188","line":"      @@curr_push_other_roots.try(&.call)"},
{"lineNum":"  189","line":"    end"},
{"lineNum":"  190","line":"  end"},
{"lineNum":"  191","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 17, "covered" : 0,};
var merged_data = [];
