var data = {lines:[
{"lineNum":"    1","line":"require \"c/dlfcn\""},
{"lineNum":"    2","line":"require \"c/stdio\""},
{"lineNum":"    3","line":"require \"c/string\""},
{"lineNum":"    4","line":"require \"callstack/lib_unwind\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"{% if flag?(:darwin) %}"},
{"lineNum":"    7","line":"  require \"debug/mach_o\""},
{"lineNum":"    8","line":"  require \"debug/dwarf\""},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"  lib LibC"},
{"lineNum":"   11","line":"    fun _dyld_image_count : UInt32"},
{"lineNum":"   12","line":"    fun _dyld_get_image_name(image_index : UInt32) : Char*"},
{"lineNum":"   13","line":"    fun _dyld_get_image_vmaddr_slide(image_index : UInt32) : Long"},
{"lineNum":"   14","line":"  end"},
{"lineNum":"   15","line":"{% elsif flag?(:freebsd) || flag?(:linux) || flag?(:openbsd) %}"},
{"lineNum":"   16","line":"  require \"debug/elf\""},
{"lineNum":"   17","line":"  require \"debug/dwarf\""},
{"lineNum":"   18","line":"{% end %}"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"def caller"},
{"lineNum":"   21","line":"  CallStack.new.printable_backtrace"},
{"lineNum":"   22","line":"end"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"# :nodoc:"},
{"lineNum":"   25","line":"struct CallStack"},
{"lineNum":"   26","line":"  # Compute current directory at the beginning so filenames"},
{"lineNum":"   27","line":"  # are always shown relative to the *starting* working directory."},
{"lineNum":"   28","line":"  CURRENT_DIR = begin"},
{"lineNum":"   29","line":"    dir = Process::INITIAL_PWD"},
{"lineNum":"   30","line":"    dir += File::SEPARATOR unless dir.ends_with?(File::SEPARATOR)"},
{"lineNum":"   31","line":"    dir"},
{"lineNum":"   32","line":"  end"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"  @@skip = [] of String"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"  def self.skip(filename)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   37","line":"    @@skip << filename","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   38","line":"  end"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"  skip(__FILE__)"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"  @callstack : Array(Void*)"},
{"lineNum":"   43","line":"  @backtrace : Array(String)?"},
{"lineNum":"   44","line":"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   45","line":"  def initialize"},
{"lineNum":"   46","line":"    @callstack = CallStack.unwind"},
{"lineNum":"   47","line":"  end"},
{"lineNum":"   48","line":"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"  def printable_backtrace"},
{"lineNum":"   50","line":"    @backtrace ||= decode_backtrace","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   51","line":"  end","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"  {% if flag?(:gnu) && flag?(:i686) %}"},
{"lineNum":"   54","line":"    # This is only used for the workaround described in `Exception.unwind`"},
{"lineNum":"   55","line":"    @@makecontext_range : Range(Void*, Void*)?"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    def self.makecontext_range"},
{"lineNum":"   58","line":"      @@makecontext_range ||= begin"},
{"lineNum":"   59","line":"        makecontext_start = makecontext_end = LibC.dlsym(LibC::RTLD_DEFAULT, \"makecontext\")"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        while true"},
{"lineNum":"   62","line":"          ret = LibC.dladdr(makecontext_end, out info)"},
{"lineNum":"   63","line":"          break if ret == 0 || info.dli_sname.null?"},
{"lineNum":"   64","line":"          break unless LibC.strcmp(info.dli_sname, \"makecontext\") == 0"},
{"lineNum":"   65","line":"          makecontext_end += 1"},
{"lineNum":"   66","line":"        end"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"        (makecontext_start...makecontext_end)"},
{"lineNum":"   69","line":"      end"},
{"lineNum":"   70","line":"    end"},
{"lineNum":"   71","line":"  {% end %}"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  protected def self.unwind"},
{"lineNum":"   74","line":"    callstack = [] of Void*"},
{"lineNum":"   75","line":"    backtrace_fn = ->(context : LibUnwind::Context, data : Void*) do"},
{"lineNum":"   76","line":"      bt = data.as(typeof(callstack))"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"      ip = {% if flag?(:arm) %}"},
{"lineNum":"   79","line":"             Pointer(Void).new(__crystal_unwind_get_ip(context))"},
{"lineNum":"   80","line":"           {% else %}"},
{"lineNum":"   81","line":"             Pointer(Void).new(LibUnwind.get_ip(context))"},
{"lineNum":"   82","line":"           {% end %}"},
{"lineNum":"   83","line":"      bt << ip"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"      {% if flag?(:gnu) && flag?(:i686) %}"},
{"lineNum":"   86","line":"        # This is a workaround for glibc bug: https://sourceware.org/bugzilla/show_bug.cgi?id=18635"},
{"lineNum":"   87","line":"        # The unwind info is corrupted when `makecontext` is used."},
{"lineNum":"   88","line":"        # Stop the backtrace here. There is nothing interest beyond this point anyway."},
{"lineNum":"   89","line":"        if CallStack.makecontext_range.includes?(ip)"},
{"lineNum":"   90","line":"          return LibUnwind::ReasonCode::END_OF_STACK"},
{"lineNum":"   91","line":"        end"},
{"lineNum":"   92","line":"      {% end %}"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"      LibUnwind::ReasonCode::NO_REASON"},
{"lineNum":"   95","line":"    end"},
{"lineNum":"   96","line":"","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   97","line":"    LibUnwind.backtrace(backtrace_fn, callstack.as(Void*))","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"   98","line":"    callstack"},
{"lineNum":"   99","line":"  end","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"  struct RepeatedFrame"},
{"lineNum":"  102","line":"    getter ip : Void*, count : Int32"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    def initialize(@ip : Void*)"},
{"lineNum":"  105","line":"      @count = 0"},
{"lineNum":"  106","line":"    end"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    def incr"},
{"lineNum":"  109","line":"      @count += 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"    end"},
{"lineNum":"  111","line":"  end"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"  def self.print_backtrace","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"    backtrace_fn = ->(context : LibUnwind::Context, data : Void*) do"},
{"lineNum":"  115","line":"      last_frame = data.as(RepeatedFrame*)"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"      ip = {% if flag?(:arm) %}"},
{"lineNum":"  118","line":"             Pointer(Void).new(__crystal_unwind_get_ip(context))"},
{"lineNum":"  119","line":"           {% else %}"},
{"lineNum":"  120","line":"             Pointer(Void).new(LibUnwind.get_ip(context))"},
{"lineNum":"  121","line":"           {% end %}"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"      if last_frame.value.ip == ip"},
{"lineNum":"  124","line":"        last_frame.value.incr"},
{"lineNum":"  125","line":"      else"},
{"lineNum":"  126","line":"        print_frame(last_frame.value) unless last_frame.value.ip.address == 0"},
{"lineNum":"  127","line":"        last_frame.value = RepeatedFrame.new ip"},
{"lineNum":"  128","line":"      end"},
{"lineNum":"  129","line":"      LibUnwind::ReasonCode::NO_REASON"},
{"lineNum":"  130","line":"    end"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    rf = RepeatedFrame.new(Pointer(Void).null)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":"    LibUnwind.backtrace(backtrace_fn, pointerof(rf).as(Void*))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"    print_frame(rf)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"  end"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"  private def self.print_frame(repeated_frame)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"    frame = decode_frame(repeated_frame.ip)"},
{"lineNum":"  139","line":"    if frame","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":"      offset, sname = frame"},
{"lineNum":"  141","line":"      if repeated_frame.count == 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  142","line":"        LibC.dprintf 2, \"[0x%lx] %s +%ld\\n\", repeated_frame.ip, sname, offset","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"      else"},
{"lineNum":"  144","line":"        LibC.dprintf 2, \"[0x%lx] %s +%ld (%ld times)\\n\", repeated_frame.ip, sname, offset, repeated_frame.count + 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"      end"},
{"lineNum":"  146","line":"    else"},
{"lineNum":"  147","line":"      if repeated_frame.count == 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"        LibC.dprintf 2, \"[0x%lx] ???\\n\", repeated_frame.ip","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"      else","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  150","line":"        LibC.dprintf 2, \"[0x%lx] ??? (%ld times)\\n\", repeated_frame.ip, repeated_frame.count + 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"      end"},
{"lineNum":"  152","line":"    end"},
{"lineNum":"  153","line":"  end"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  private def decode_backtrace"},
{"lineNum":"  156","line":"    show_full_info = ENV[\"CRYSTAL_CALLSTACK_FULL_INFO\"]? == \"1\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    @callstack.compact_map do |ip|"},
{"lineNum":"  159","line":"      pc = CallStack.decode_address(ip)"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"      file, line, column = CallStack.decode_line_number(pc)"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"      if file && file != \"??\"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  164","line":"        next if @@skip.includes?(file)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"        # Turn to relative to the current dir, if possible"},
{"lineNum":"  167","line":"        file = file.lchop(CURRENT_DIR)"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"        file_line_column = \"#{file}:#{line}:#{column}\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  170","line":"      end"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"      if name = CallStack.decode_function_name(pc)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"        function = name"},
{"lineNum":"  174","line":"      elsif frame = CallStack.decode_frame(ip)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"        _, sname = frame"},
{"lineNum":"  176","line":"        function = String.new(sname)"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"        # We ignore these because they are part of `raise`\'s internals,"},
{"lineNum":"  179","line":"        # and we can\'t rely on a correct filename being available"},
{"lineNum":"  180","line":"        # (for example if on Mac and without running `dsymutil`)"},
{"lineNum":"  181","line":"        #"},
{"lineNum":"  182","line":"        # We also ignore `main` because it\'s always at the same place"},
{"lineNum":"  183","line":"        # and adds no info.","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  184","line":"        if function.starts_with?(\"*raise<\") ||"},
{"lineNum":"  185","line":"           function.starts_with?(\"*CallStack::\") ||","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  186","line":"           function.starts_with?(\"*CallStack#\")"},
{"lineNum":"  187","line":"          next"},
{"lineNum":"  188","line":"        end"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"        # Crystal methods (their mangled name) start with `*`, so"},
{"lineNum":"  191","line":"        # we remove that to have less clutter in the output."},
{"lineNum":"  192","line":"        function = function.lchop(\'*\')"},
{"lineNum":"  193","line":"      else"},
{"lineNum":"  194","line":"        function = \"???\""},
{"lineNum":"  195","line":"      end"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"      if file_line_column","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  198","line":"        if show_full_info && (frame = CallStack.decode_frame(ip))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  199","line":"          _, sname = frame"},
{"lineNum":"  200","line":"          line = \"#{file_line_column} in \'#{String.new(sname)}\'\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  201","line":"        else","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"          line = \"#{file_line_column} in \'#{function}\'\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  203","line":"        end"},
{"lineNum":"  204","line":"      else"},
{"lineNum":"  205","line":"        line = function"},
{"lineNum":"  206","line":"      end"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"      if show_full_info","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  209","line":"        line = \"#{line} at 0x#{ip.address.to_s(16)}\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  210","line":"      end"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"      line","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  213","line":"    end"},
{"lineNum":"  214","line":"  end"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"  {% if flag?(:darwin) || flag?(:freebsd) || flag?(:linux) || flag?(:openbsd) %}","class":"lineNoCov","hits":"0","possible_hits":"45",},
{"lineNum":"  217","line":"    @@dwarf_line_numbers : Debug::DWARF::LineNumbers?"},
{"lineNum":"  218","line":"    @@dwarf_function_names : Array(Tuple(LibC::SizeT, LibC::SizeT, String))?"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    protected def self.decode_line_number(pc)"},
{"lineNum":"  221","line":"      read_dwarf_sections unless @@dwarf_line_numbers"},
{"lineNum":"  222","line":"      if ln = @@dwarf_line_numbers"},
{"lineNum":"  223","line":"        if row = ln.find(pc)"},
{"lineNum":"  224","line":"          path = ln.files[row.file]?"},
{"lineNum":"  225","line":"          if dirname = ln.directories[row.directory]?"},
{"lineNum":"  226","line":"            path = \"#{dirname}/#{path}\""},
{"lineNum":"  227","line":"          end"},
{"lineNum":"  228","line":"          return {path, row.line, row.column}"},
{"lineNum":"  229","line":"        end"},
{"lineNum":"  230","line":"      end"},
{"lineNum":"  231","line":"      {\"??\", 0, 0}"},
{"lineNum":"  232","line":"    end"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    protected def self.decode_function_name(pc)"},
{"lineNum":"  235","line":"      read_dwarf_sections unless @@dwarf_function_names"},
{"lineNum":"  236","line":"      if fn = @@dwarf_function_names"},
{"lineNum":"  237","line":"        fn.each do |(low_pc, high_pc, function_name)|"},
{"lineNum":"  238","line":"          return function_name if low_pc <= pc <= high_pc"},
{"lineNum":"  239","line":"        end"},
{"lineNum":"  240","line":"      end"},
{"lineNum":"  241","line":"    end"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    protected def self.parse_function_names_from_dwarf(info, strings)"},
{"lineNum":"  244","line":"      info.each do |code, abbrev, attributes|"},
{"lineNum":"  245","line":"        next unless abbrev && abbrev.tag.subprogram?"},
{"lineNum":"  246","line":"        name = low_pc = high_pc = nil"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"        attributes.each do |(at, form, value)|"},
{"lineNum":"  249","line":"          case at"},
{"lineNum":"  250","line":"          when Debug::DWARF::AT::DW_AT_name"},
{"lineNum":"  251","line":"            value = strings.try(&.decode(value.as(UInt32 | UInt64))) if form.strp?"},
{"lineNum":"  252","line":"            name = value.as(String)"},
{"lineNum":"  253","line":"          when Debug::DWARF::AT::DW_AT_low_pc"},
{"lineNum":"  254","line":"            low_pc = value.as(LibC::SizeT)"},
{"lineNum":"  255","line":"          when Debug::DWARF::AT::DW_AT_high_pc"},
{"lineNum":"  256","line":"            if form.addr?"},
{"lineNum":"  257","line":"              high_pc = value.as(LibC::SizeT)"},
{"lineNum":"  258","line":"            elsif value.responds_to?(:to_i)"},
{"lineNum":"  259","line":"              high_pc = low_pc.as(LibC::SizeT) + value.to_i"},
{"lineNum":"  260","line":"            end"},
{"lineNum":"  261","line":"          end"},
{"lineNum":"  262","line":"        end"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"        if low_pc && high_pc && name"},
{"lineNum":"  265","line":"          yield low_pc, high_pc, name"},
{"lineNum":"  266","line":"        end"},
{"lineNum":"  267","line":"      end"},
{"lineNum":"  268","line":"    end"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    {% if flag?(:darwin) %}"},
{"lineNum":"  271","line":"      @@image_slide : LibC::Long?"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"      protected def self.read_dwarf_sections"},
{"lineNum":"  274","line":"        locate_dsym_bundle do |mach_o|"},
{"lineNum":"  275","line":"          mach_o.read_section?(\"__debug_line\") do |sh, io|"},
{"lineNum":"  276","line":"            @@dwarf_line_numbers = Debug::DWARF::LineNumbers.new(io, sh.size)"},
{"lineNum":"  277","line":"          end"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"          strings = mach_o.read_section?(\"__debug_str\") do |sh, io|"},
{"lineNum":"  280","line":"            Debug::DWARF::Strings.new(io, sh.offset)"},
{"lineNum":"  281","line":"          end"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"          mach_o.read_section?(\"__debug_info\") do |sh, io|"},
{"lineNum":"  284","line":"            names = [] of {LibC::SizeT, LibC::SizeT, String}"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"            while io.tell - sh.offset < sh.size"},
{"lineNum":"  287","line":"              offset = io.tell - sh.offset"},
{"lineNum":"  288","line":"              info = Debug::DWARF::Info.new(io, offset)"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"              mach_o.read_section?(\"__debug_abbrev\") do |sh, io|"},
{"lineNum":"  291","line":"                info.read_abbreviations(io)"},
{"lineNum":"  292","line":"              end"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"              parse_function_names_from_dwarf(info, strings) do |name, low_pc, high_pc|"},
{"lineNum":"  295","line":"                names << {name, low_pc, high_pc}"},
{"lineNum":"  296","line":"              end"},
{"lineNum":"  297","line":"            end"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"            @@dwarf_function_names = names"},
{"lineNum":"  300","line":"          end"},
{"lineNum":"  301","line":"        end"},
{"lineNum":"  302","line":"      end"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"      # DWARF uses fixed addresses but Darwin loads exectutables at a random"},
{"lineNum":"  305","line":"      # address, so we must remove the load offset from the IP to match the"},
{"lineNum":"  306","line":"      # addresses in DWARF sections."},
{"lineNum":"  307","line":"      #"},
{"lineNum":"  308","line":"      # See https://en.wikipedia.org/wiki/Address_space_layout_randomization"},
{"lineNum":"  309","line":"      protected def self.decode_address(ip)"},
{"lineNum":"  310","line":"        ip.address - image_slide"},
{"lineNum":"  311","line":"      end"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"      # Searches the companion dSYM bundle with the DWARF sections for the"},
{"lineNum":"  314","line":"      # current program as generated by `dsymutil`. It may be a `foo.dwarf` file"},
{"lineNum":"  315","line":"      # or within a `foo.dSYM` bundle for a program named `foo`."},
{"lineNum":"  316","line":"      #"},
{"lineNum":"  317","line":"      # See <http://wiki.dwarfstd.org/index.php?title=Apple%27s_%22Lazy%22_DWARF_Scheme> for details."},
{"lineNum":"  318","line":"      private def self.locate_dsym_bundle"},
{"lineNum":"  319","line":"        program = Process.executable_path"},
{"lineNum":"  320","line":"        return unless program"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"        files = {"},
{"lineNum":"  323","line":"          \"#{program}.dSYM/Contents/Resources/DWARF/#{File.basename(program)}\","},
{"lineNum":"  324","line":"          \"#{program}.dwarf\""},
{"lineNum":"  325","line":"        }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"        files.each do |dwarf|"},
{"lineNum":"  328","line":"          next unless File.exists?(dwarf)"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"          Debug::MachO.open(program) do |mach_o|"},
{"lineNum":"  331","line":"            Debug::MachO.open(dwarf) do |dsym|"},
{"lineNum":"  332","line":"              if dsym.uuid == mach_o.uuid"},
{"lineNum":"  333","line":"                return yield dsym"},
{"lineNum":"  334","line":"              end"},
{"lineNum":"  335","line":"            end"},
{"lineNum":"  336","line":"          end"},
{"lineNum":"  337","line":"        end"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"        nil"},
{"lineNum":"  340","line":"      end"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"      # The address offset at which the program was loaded at."},
{"lineNum":"  343","line":"      private def self.image_slide"},
{"lineNum":"  344","line":"        @@image_slide ||= search_image_slide"},
{"lineNum":"  345","line":"      end"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"      private def self.search_image_slide"},
{"lineNum":"  348","line":"        buffer = GC.malloc_atomic(LibC::PATH_MAX).as(UInt8*)"},
{"lineNum":"  349","line":"        size = LibC::PATH_MAX.to_u32"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"        if LibC._NSGetExecutablePath(buffer, pointerof(size)) == -1"},
{"lineNum":"  352","line":"          buffer = GC.malloc_atomic(size).as(UInt8*)"},
{"lineNum":"  353","line":"          if LibC._NSGetExecutablePath(buffer, pointerof(size)) == -1"},
{"lineNum":"  354","line":"            return LibC::Long.new(0)"},
{"lineNum":"  355","line":"          end"},
{"lineNum":"  356","line":"        end"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"        program = String.new(buffer)"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"        LibC._dyld_image_count.times do |i|"},
{"lineNum":"  361","line":"          if program == String.new(LibC._dyld_get_image_name(i))"},
{"lineNum":"  362","line":"            return LibC._dyld_get_image_vmaddr_slide(i)"},
{"lineNum":"  363","line":"          end"},
{"lineNum":"  364","line":"        end"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"        LibC::Long.new(0)"},
{"lineNum":"  367","line":"      end"},
{"lineNum":"  368","line":"    {% else %}"},
{"lineNum":"  369","line":"      @@base_address : UInt64|UInt32|Nil"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"      protected def self.read_dwarf_sections"},
{"lineNum":"  372","line":"        Debug::ELF.open(PROGRAM_NAME) do |elf|"},
{"lineNum":"  373","line":"          elf.read_section?(\".text\") do |sh, _|"},
{"lineNum":"  374","line":"            @@base_address = sh.addr - sh.offset"},
{"lineNum":"  375","line":"          end"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"          elf.read_section?(\".debug_line\") do |sh, io|"},
{"lineNum":"  378","line":"            @@dwarf_line_numbers = Debug::DWARF::LineNumbers.new(io, sh.size)"},
{"lineNum":"  379","line":"          end"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"          strings = elf.read_section?(\".debug_str\") do |sh, io|"},
{"lineNum":"  382","line":"            Debug::DWARF::Strings.new(io, sh.offset)"},
{"lineNum":"  383","line":"          end"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"          elf.read_section?(\".debug_info\") do |sh, io|"},
{"lineNum":"  386","line":"            names = [] of {LibC::SizeT, LibC::SizeT, String}"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"            while io.tell - sh.offset < sh.size"},
{"lineNum":"  389","line":"              offset = io.tell - sh.offset"},
{"lineNum":"  390","line":"              info = Debug::DWARF::Info.new(io, offset)"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"              elf.read_section?(\".debug_abbrev\") do |sh, io|"},
{"lineNum":"  393","line":"                info.read_abbreviations(io)"},
{"lineNum":"  394","line":"              end"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"              parse_function_names_from_dwarf(info, strings) do |name, low_pc, high_pc|"},
{"lineNum":"  397","line":"                names << {name, low_pc, high_pc}"},
{"lineNum":"  398","line":"              end"},
{"lineNum":"  399","line":"            end"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"            @@dwarf_function_names = names"},
{"lineNum":"  402","line":"          end"},
{"lineNum":"  403","line":"        end"},
{"lineNum":"  404","line":"      end"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"      # DWARF uses fixed addresses but some platforms (e.g., OpenBSD or Linux"},
{"lineNum":"  407","line":"      # with the [PaX patch](https://en.wikipedia.org/wiki/PaX)) load"},
{"lineNum":"  408","line":"      # executables at a random address, so we must remove the load offset from"},
{"lineNum":"  409","line":"      # the IP to match the addresses in DWARF sections."},
{"lineNum":"  410","line":"      #"},
{"lineNum":"  411","line":"      # See https://en.wikipedia.org/wiki/Address_space_layout_randomization"},
{"lineNum":"  412","line":"      protected def self.decode_address(ip)"},
{"lineNum":"  413","line":"        if LibC.dladdr(ip, out info) != 0"},
{"lineNum":"  414","line":"          unless info.dli_fbase.address == @@base_address"},
{"lineNum":"  415","line":"            return ip.address - info.dli_fbase.address"},
{"lineNum":"  416","line":"          end"},
{"lineNum":"  417","line":"        end"},
{"lineNum":"  418","line":"        ip.address"},
{"lineNum":"  419","line":"      end"},
{"lineNum":"  420","line":"    {% end %}"},
{"lineNum":"  421","line":"  {% else %}"},
{"lineNum":"  422","line":"    def self.decode_address(ip)"},
{"lineNum":"  423","line":"      ip"},
{"lineNum":"  424","line":"    end"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"    def self.decode_line_number(pc)"},
{"lineNum":"  427","line":"      {\"??\", 0, 0}"},
{"lineNum":"  428","line":"    end"},
{"lineNum":"  429","line":"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  430","line":"    def self.decode_function_name(pc)"},
{"lineNum":"  431","line":"      nil","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  432","line":"    end"},
{"lineNum":"  433","line":"  {% end %}"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"  protected def self.decode_frame(ip, original_ip = ip)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  436","line":"    if LibC.dladdr(ip, out info) != 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  437","line":"      offset = original_ip - info.dli_saddr"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"      if offset == 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  440","line":"        return decode_frame(ip - 1, original_ip)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"      end"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"      unless info.dli_sname.null?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  444","line":"        {offset, info.dli_sname}"},
{"lineNum":"  445","line":"      end"},
{"lineNum":"  446","line":"    end"},
{"lineNum":"  447","line":"  end"},
{"lineNum":"  448","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 47, "covered" : 0,};
var merged_data = [];
