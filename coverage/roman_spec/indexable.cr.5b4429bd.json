var data = {lines:[
{"lineNum":"    1","line":"# A container that allows accessing elements via a numeric index."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Indexing starts at `0`. A negative index is assumed to be"},
{"lineNum":"    4","line":"# relative to the end of the container: `-1` indicates the last element,"},
{"lineNum":"    5","line":"# `-2` is the next to last element, and so on."},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# Types including this module are typically `Array`-like types."},
{"lineNum":"    8","line":"module Indexable(T)"},
{"lineNum":"    9","line":"  include Iterable(T)"},
{"lineNum":"   10","line":"  include Enumerable(T)"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"  # Returns the number of elements in this container."},
{"lineNum":"   13","line":"  abstract def size"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"  # Returns the element at the given *index*, without doing any bounds check."},
{"lineNum":"   16","line":"  #"},
{"lineNum":"   17","line":"  # `Indexable` makes sure to invoke this method with *index* in `0...size`,"},
{"lineNum":"   18","line":"  # so converting negative indices to positive ones is not needed here."},
{"lineNum":"   19","line":"  #"},
{"lineNum":"   20","line":"  # Clients never invoke this method directly. Instead, they access"},
{"lineNum":"   21","line":"  # elements with `#[](index)` and `#[]?(index)`."},
{"lineNum":"   22","line":"  #"},
{"lineNum":"   23","line":"  # This method should only be directly invoked if you are absolutely"},
{"lineNum":"   24","line":"  # sure the index is in bounds, to avoid a bounds check for a small boost"},
{"lineNum":"   25","line":"  # of performance."},
{"lineNum":"   26","line":"  abstract def unsafe_at(index : Int)"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"  # Returns the element at the given *index*, if in bounds,"},
{"lineNum":"   29","line":"  # otherwise executes the given block and returns its value."},
{"lineNum":"   30","line":"  #"},
{"lineNum":"   31","line":"  # ```"},
{"lineNum":"   32","line":"  # a = [:foo, :bar]"},
{"lineNum":"   33","line":"  # a.at(0) { :baz } # => :foo"},
{"lineNum":"   34","line":"  # a.at(2) { :baz } # => :baz"},
{"lineNum":"   35","line":"  # ```"},
{"lineNum":"   36","line":"  def at(index : Int)"},
{"lineNum":"   37","line":"    index = check_index_out_of_bounds(index) do"},
{"lineNum":"   38","line":"      return yield"},
{"lineNum":"   39","line":"    end"},
{"lineNum":"   40","line":"    unsafe_at(index)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"  end"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"  # Returns the element at the given *index*, if in bounds,"},
{"lineNum":"   44","line":"  # otherwise raises `IndexError`."},
{"lineNum":"   45","line":"  #"},
{"lineNum":"   46","line":"  # ```"},
{"lineNum":"   47","line":"  # a = [:foo, :bar]"},
{"lineNum":"   48","line":"  # a.at(0) # => :foo"},
{"lineNum":"   49","line":"  # a.at(2) # raises IndexError"},
{"lineNum":"   50","line":"  # ```"},
{"lineNum":"   51","line":"  @[AlwaysInline]"},
{"lineNum":"   52","line":"  def at(index : Int)"},
{"lineNum":"   53","line":"    at(index) { raise IndexError.new }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   54","line":"  end"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"  # Returns the element at the given *index*."},
{"lineNum":"   57","line":"  #"},
{"lineNum":"   58","line":"  # Negative indices can be used to start counting from the end of the array."},
{"lineNum":"   59","line":"  # Raises `IndexError` if trying to access an element outside the array\'s range."},
{"lineNum":"   60","line":"  #"},
{"lineNum":"   61","line":"  # ```"},
{"lineNum":"   62","line":"  # ary = [\'a\', \'b\', \'c\']"},
{"lineNum":"   63","line":"  # ary[0]  # => \'a\'"},
{"lineNum":"   64","line":"  # ary[2]  # => \'c\'"},
{"lineNum":"   65","line":"  # ary[-1] # => \'c\'"},
{"lineNum":"   66","line":"  # ary[-2] # => \'b\'"},
{"lineNum":"   67","line":"  #"},
{"lineNum":"   68","line":"  # ary[3]  # raises IndexError"},
{"lineNum":"   69","line":"  # ary[-4] # raises IndexError"},
{"lineNum":"   70","line":"  # ```"},
{"lineNum":"   71","line":"  @[AlwaysInline]"},
{"lineNum":"   72","line":"  def [](index : Int)"},
{"lineNum":"   73","line":"    at(index)"},
{"lineNum":"   74","line":"  end"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"  # Returns the element at the given *index*."},
{"lineNum":"   77","line":"  #"},
{"lineNum":"   78","line":"  # Negative indices can be used to start counting from the end of the array."},
{"lineNum":"   79","line":"  # Returns `nil` if trying to access an element outside the array\'s range."},
{"lineNum":"   80","line":"  #"},
{"lineNum":"   81","line":"  # ```"},
{"lineNum":"   82","line":"  # ary = [\'a\', \'b\', \'c\']"},
{"lineNum":"   83","line":"  # ary[0]?  # => \'a\'"},
{"lineNum":"   84","line":"  # ary[2]?  # => \'c\'"},
{"lineNum":"   85","line":"  # ary[-1]? # => \'c\'"},
{"lineNum":"   86","line":"  # ary[-2]? # => \'b\'"},
{"lineNum":"   87","line":"  #"},
{"lineNum":"   88","line":"  # ary[3]?  # nil"},
{"lineNum":"   89","line":"  # ary[-4]? # nil"},
{"lineNum":"   90","line":"  # ```"},
{"lineNum":"   91","line":"  @[AlwaysInline]"},
{"lineNum":"   92","line":"  def []?(index : Int)"},
{"lineNum":"   93","line":"    at(index) { nil }"},
{"lineNum":"   94","line":"  end"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"  # By using binary search, returns the first element"},
{"lineNum":"   97","line":"  # for which the passed block returns `true`."},
{"lineNum":"   98","line":"  #"},
{"lineNum":"   99","line":"  # If the block returns `false`, the finding element exists"},
{"lineNum":"  100","line":"  # behind. If the block returns `true`, the finding element"},
{"lineNum":"  101","line":"  # is itself or exists infront."},
{"lineNum":"  102","line":"  #"},
{"lineNum":"  103","line":"  # Binary search needs sorted array, so `self` has to be sorted."},
{"lineNum":"  104","line":"  #"},
{"lineNum":"  105","line":"  # Returns `nil` if the block didn\'t return `true` for any element."},
{"lineNum":"  106","line":"  #"},
{"lineNum":"  107","line":"  # ```"},
{"lineNum":"  108","line":"  # [2, 5, 7, 10].bsearch { |x| x >= 4 } # => 5"},
{"lineNum":"  109","line":"  # [2, 5, 7, 10].bsearch { |x| x > 10 } # => nil"},
{"lineNum":"  110","line":"  # ```"},
{"lineNum":"  111","line":"  def bsearch"},
{"lineNum":"  112","line":"    bsearch_index { |value| yield value }.try { |index| unsafe_at(index) }"},
{"lineNum":"  113","line":"  end"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"  # By using binary search, returns the index of the first element"},
{"lineNum":"  116","line":"  # for which the passed block returns `true`."},
{"lineNum":"  117","line":"  #"},
{"lineNum":"  118","line":"  # If the block returns `false`, the finding element exists"},
{"lineNum":"  119","line":"  # behind. If the block returns `true`, the finding element"},
{"lineNum":"  120","line":"  # is itself or exists infront."},
{"lineNum":"  121","line":"  #"},
{"lineNum":"  122","line":"  # Binary search needs sorted array, so `self` has to be sorted."},
{"lineNum":"  123","line":"  #"},
{"lineNum":"  124","line":"  # Returns `nil` if the block didn\'t return `true` for any element."},
{"lineNum":"  125","line":"  #"},
{"lineNum":"  126","line":"  # ```"},
{"lineNum":"  127","line":"  # [2, 5, 7, 10].bsearch_index { |x, i| x >= 4 } # => 1"},
{"lineNum":"  128","line":"  # [2, 5, 7, 10].bsearch_index { |x, i| x > 10 } # => nil"},
{"lineNum":"  129","line":"  # ```"},
{"lineNum":"  130","line":"  def bsearch_index"},
{"lineNum":"  131","line":"    (0...size).bsearch { |index| yield unsafe_at(index), index }"},
{"lineNum":"  132","line":"  end"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  # Calls the given block once for each element in `self`, passing that"},
{"lineNum":"  135","line":"  # element as a parameter."},
{"lineNum":"  136","line":"  #"},
{"lineNum":"  137","line":"  # ```"},
{"lineNum":"  138","line":"  # a = [\"a\", \"b\", \"c\"]"},
{"lineNum":"  139","line":"  # a.each { |x| print x, \" -- \" }"},
{"lineNum":"  140","line":"  # ```"},
{"lineNum":"  141","line":"  #"},
{"lineNum":"  142","line":"  # produces:"},
{"lineNum":"  143","line":"  #"},
{"lineNum":"  144","line":"  # ```text"},
{"lineNum":"  145","line":"  # a -- b -- c --"},
{"lineNum":"  146","line":"  # ```"},
{"lineNum":"  147","line":"  def each"},
{"lineNum":"  148","line":"    each_index do |i|"},
{"lineNum":"  149","line":"      yield unsafe_at(i)"},
{"lineNum":"  150","line":"    end"},
{"lineNum":"  151","line":"  end"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"  # Returns an `Iterator` for the elements of `self`."},
{"lineNum":"  154","line":"  #"},
{"lineNum":"  155","line":"  # ```"},
{"lineNum":"  156","line":"  # a = [\"a\", \"b\", \"c\"]"},
{"lineNum":"  157","line":"  # iter = a.each"},
{"lineNum":"  158","line":"  # iter.next # => \"a\""},
{"lineNum":"  159","line":"  # iter.next # => \"b\""},
{"lineNum":"  160","line":"  # ```"},
{"lineNum":"  161","line":"  #"},
{"lineNum":"  162","line":"  # The returned iterator keeps a reference to `self`: if the array"},
{"lineNum":"  163","line":"  # changes, the returned values of the iterator change as well."},
{"lineNum":"  164","line":"  def each"},
{"lineNum":"  165","line":"    ItemIterator(self, T).new(self)"},
{"lineNum":"  166","line":"  end"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"  # Calls the given block once for each index in `self`, passing that"},
{"lineNum":"  169","line":"  # index as a parameter."},
{"lineNum":"  170","line":"  #"},
{"lineNum":"  171","line":"  # ```"},
{"lineNum":"  172","line":"  # a = [\"a\", \"b\", \"c\"]"},
{"lineNum":"  173","line":"  # a.each_index { |x| print x, \" -- \" }"},
{"lineNum":"  174","line":"  # ```"},
{"lineNum":"  175","line":"  #"},
{"lineNum":"  176","line":"  # produces:"},
{"lineNum":"  177","line":"  #"},
{"lineNum":"  178","line":"  # ```text"},
{"lineNum":"  179","line":"  # 0 -- 1 -- 2 --"},
{"lineNum":"  180","line":"  # ```"},
{"lineNum":"  181","line":"  def each_index : Nil"},
{"lineNum":"  182","line":"    i = 0"},
{"lineNum":"  183","line":"    while i < size"},
{"lineNum":"  184","line":"      yield i"},
{"lineNum":"  185","line":"      i += 1"},
{"lineNum":"  186","line":"    end"},
{"lineNum":"  187","line":"  end"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  # Returns an `Iterator` for each index in `self`."},
{"lineNum":"  190","line":"  #"},
{"lineNum":"  191","line":"  # ```"},
{"lineNum":"  192","line":"  # a = [\"a\", \"b\", \"c\"]"},
{"lineNum":"  193","line":"  # iter = a.each_index"},
{"lineNum":"  194","line":"  # iter.next # => 0"},
{"lineNum":"  195","line":"  # iter.next # => 1"},
{"lineNum":"  196","line":"  # ```"},
{"lineNum":"  197","line":"  #"},
{"lineNum":"  198","line":"  # The returned iterator keeps a reference to `self`. If the array"},
{"lineNum":"  199","line":"  # changes, the returned values of the iterator will change as well."},
{"lineNum":"  200","line":"  def each_index"},
{"lineNum":"  201","line":"    IndexIterator.new(self)"},
{"lineNum":"  202","line":"  end"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"  # Returns `true` if `self` is empty, `false` otherwise."},
{"lineNum":"  205","line":"  #"},
{"lineNum":"  206","line":"  # ```"},
{"lineNum":"  207","line":"  # ([] of Int32).empty? # => true"},
{"lineNum":"  208","line":"  # ([1]).empty?         # => false"},
{"lineNum":"  209","line":"  # ```"},
{"lineNum":"  210","line":"  def empty?","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"  211","line":"    size == 0"},
{"lineNum":"  212","line":"  end"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"  # Optimized version of `equals?` used when `other` is also an `Indexable`."},
{"lineNum":"  215","line":"  def equals?(other : Indexable)"},
{"lineNum":"  216","line":"    return false if size != other.size"},
{"lineNum":"  217","line":"    each_with_index do |item, i|"},
{"lineNum":"  218","line":"      return false unless yield(item, other.unsafe_at(i))"},
{"lineNum":"  219","line":"    end"},
{"lineNum":"  220","line":"    true"},
{"lineNum":"  221","line":"  end"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"  # Determines if `self` equals *other* according to a comparison"},
{"lineNum":"  224","line":"  # done by the given block."},
{"lineNum":"  225","line":"  #"},
{"lineNum":"  226","line":"  # If `self`\'s size is the same as *other*\'s size, this method yields"},
{"lineNum":"  227","line":"  # elements from `self` and *other* in tandem: if the block returns true"},
{"lineNum":"  228","line":"  # for all of them, this method returns `true`. Otherwise it returns `false`."},
{"lineNum":"  229","line":"  #"},
{"lineNum":"  230","line":"  # ```"},
{"lineNum":"  231","line":"  # a = [1, 2, 3]"},
{"lineNum":"  232","line":"  # b = [\"a\", \"ab\", \"abc\"]"},
{"lineNum":"  233","line":"  # a.equals?(b) { |x, y| x == y.size } # => true"},
{"lineNum":"  234","line":"  # a.equals?(b) { |x, y| x == y }      # => false"},
{"lineNum":"  235","line":"  # ```"},
{"lineNum":"  236","line":"  def equals?(other)"},
{"lineNum":"  237","line":"    return false if size != other.size"},
{"lineNum":"  238","line":"    each_with_index do |item, i|"},
{"lineNum":"  239","line":"      return false unless yield(item, other[i])"},
{"lineNum":"  240","line":"    end"},
{"lineNum":"  241","line":"    true"},
{"lineNum":"  242","line":"  end"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"  # Returns the first element of `self` if it\'s not empty, or raises `IndexError`."},
{"lineNum":"  245","line":"  #"},
{"lineNum":"  246","line":"  # ```"},
{"lineNum":"  247","line":"  # ([1, 2, 3]).first   # => 1"},
{"lineNum":"  248","line":"  # ([] of Int32).first # raises IndexError"},
{"lineNum":"  249","line":"  # ```"},
{"lineNum":"  250","line":"  def first","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"    first { raise IndexError.new }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  252","line":"  end"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"  # Returns the first element of `self` if it\'s not empty, or the given block\'s value."},
{"lineNum":"  255","line":"  #"},
{"lineNum":"  256","line":"  # ```"},
{"lineNum":"  257","line":"  # ([1, 2, 3]).first { 4 }   # => 1"},
{"lineNum":"  258","line":"  # ([] of Int32).first { 4 } # => 4"},
{"lineNum":"  259","line":"  # ```"},
{"lineNum":"  260","line":"  def first"},
{"lineNum":"  261","line":"    size == 0 ? yield : unsafe_at(0)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  262","line":"  end"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"  # Returns the first element of `self` if it\'s not empty, or `nil`."},
{"lineNum":"  265","line":"  #"},
{"lineNum":"  266","line":"  # ```"},
{"lineNum":"  267","line":"  # ([1, 2, 3]).first?   # => 1"},
{"lineNum":"  268","line":"  # ([] of Int32).first? # => nil"},
{"lineNum":"  269","line":"  # ```"},
{"lineNum":"  270","line":"  def first?"},
{"lineNum":"  271","line":"    first { nil }"},
{"lineNum":"  272","line":"  end"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"  # See `Object#hash(hasher)`"},
{"lineNum":"  275","line":"  def hash(hasher)"},
{"lineNum":"  276","line":"    hasher = size.hash(hasher)"},
{"lineNum":"  277","line":"    each do |elem|"},
{"lineNum":"  278","line":"      hasher = elem.hash(hasher)"},
{"lineNum":"  279","line":"    end"},
{"lineNum":"  280","line":"    hasher"},
{"lineNum":"  281","line":"  end"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"  # Returns the index of the first appearance of *value* in `self`"},
{"lineNum":"  284","line":"  # starting from the given *offset*, or `nil` if the value is not in `self`."},
{"lineNum":"  285","line":"  #"},
{"lineNum":"  286","line":"  # ```"},
{"lineNum":"  287","line":"  # [1, 2, 3, 1, 2, 3].index(2, offset: 2) # => 4"},
{"lineNum":"  288","line":"  # ```"},
{"lineNum":"  289","line":"  def index(object, offset : Int = 0)"},
{"lineNum":"  290","line":"    index(offset) { |e| e == object }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  291","line":"  end"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"  # Returns the index of the first object in `self` for which the block"},
{"lineNum":"  294","line":"  # returns `true`, starting from the given *offset*, or `nil` if no match"},
{"lineNum":"  295","line":"  # is found."},
{"lineNum":"  296","line":"  #"},
{"lineNum":"  297","line":"  # ```"},
{"lineNum":"  298","line":"  # [1, 2, 3, 1, 2, 3].index(offset: 2) { |x| x < 2 } # => 3"},
{"lineNum":"  299","line":"  # ```"},
{"lineNum":"  300","line":"  def index(offset : Int = 0)"},
{"lineNum":"  301","line":"    offset += size if offset < 0"},
{"lineNum":"  302","line":"    return nil if offset < 0"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"    offset.upto(size - 1) do |i|"},
{"lineNum":"  305","line":"      if yield unsafe_at(i)"},
{"lineNum":"  306","line":"        return i"},
{"lineNum":"  307","line":"      end"},
{"lineNum":"  308","line":"    end"},
{"lineNum":"  309","line":"    nil"},
{"lineNum":"  310","line":"  end"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"  # Returns the last element of `self` if it\'s not empty, or raises `IndexError`."},
{"lineNum":"  313","line":"  #"},
{"lineNum":"  314","line":"  # ```"},
{"lineNum":"  315","line":"  # ([1, 2, 3]).last   # => 3"},
{"lineNum":"  316","line":"  # ([] of Int32).last # raises IndexError"},
{"lineNum":"  317","line":"  # ```"},
{"lineNum":"  318","line":"  def last"},
{"lineNum":"  319","line":"    last { raise IndexError.new }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  320","line":"  end"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"  # Returns the last element of `self` if it\'s not empty, or the given block\'s value."},
{"lineNum":"  323","line":"  #"},
{"lineNum":"  324","line":"  # ```"},
{"lineNum":"  325","line":"  # ([1, 2, 3]).last { 4 }   # => 3"},
{"lineNum":"  326","line":"  # ([] of Int32).last { 4 } # => 4"},
{"lineNum":"  327","line":"  # ```"},
{"lineNum":"  328","line":"  def last"},
{"lineNum":"  329","line":"    size == 0 ? yield : unsafe_at(size - 1)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  330","line":"  end"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"  # Returns the last element of `self` if it\'s not empty, or `nil`."},
{"lineNum":"  333","line":"  #"},
{"lineNum":"  334","line":"  # ```"},
{"lineNum":"  335","line":"  # ([1, 2, 3]).last?   # => 3"},
{"lineNum":"  336","line":"  # ([] of Int32).last? # => nil"},
{"lineNum":"  337","line":"  # ```"},
{"lineNum":"  338","line":"  def last?"},
{"lineNum":"  339","line":"    last { nil }"},
{"lineNum":"  340","line":"  end"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"  # Same as `#each`, but works in reverse."},
{"lineNum":"  343","line":"  def reverse_each(&block) : Nil"},
{"lineNum":"  344","line":"    (size - 1).downto(0) do |i|"},
{"lineNum":"  345","line":"      yield unsafe_at(i)"},
{"lineNum":"  346","line":"    end","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  347","line":"  end"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"  # Returns an `Iterator` over the elements of `self` in reverse order."},
{"lineNum":"  350","line":"  def reverse_each"},
{"lineNum":"  351","line":"    ReverseItemIterator(self, T).new(self)"},
{"lineNum":"  352","line":"  end"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"  # Returns the index of the last appearance of *value* in `self`, or"},
{"lineNum":"  355","line":"  # `nil` if the value is not in `self`."},
{"lineNum":"  356","line":"  #"},
{"lineNum":"  357","line":"  # If *offset* is given, it defines the position to _end_ the search"},
{"lineNum":"  358","line":"  # (elements beyond this point are ignored).","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  359","line":"  #"},
{"lineNum":"  360","line":"  # ```"},
{"lineNum":"  361","line":"  # [1, 2, 3, 2, 3].rindex(2)            # => 3"},
{"lineNum":"  362","line":"  # [1, 2, 3, 2, 3].rindex(2, offset: 2) # => 1"},
{"lineNum":"  363","line":"  # ```"},
{"lineNum":"  364","line":"  def rindex(value, offset = size - 1)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  365","line":"    rindex(offset) { |elem| elem == value }"},
{"lineNum":"  366","line":"  end"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"  # Returns the index of the first object in `self` for which the block"},
{"lineNum":"  369","line":"  # returns `true`, starting from the last object, or `nil` if no match"},
{"lineNum":"  370","line":"  # is found."},
{"lineNum":"  371","line":"  #"},
{"lineNum":"  372","line":"  # If *offset* is given, the search starts from that index towards the"},
{"lineNum":"  373","line":"  # first elements in `self`."},
{"lineNum":"  374","line":"  #"},
{"lineNum":"  375","line":"  # ```"},
{"lineNum":"  376","line":"  # [1, 2, 3, 2, 3].rindex { |x| x < 3 }            # => 3"},
{"lineNum":"  377","line":"  # [1, 2, 3, 2, 3].rindex(offset: 2) { |x| x < 3 } # => 1"},
{"lineNum":"  378","line":"  # ```"},
{"lineNum":"  379","line":"  def rindex(offset = size - 1)"},
{"lineNum":"  380","line":"    offset += size if offset < 0","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  381","line":"    return nil if offset >= size","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    offset.downto(0) do |i|"},
{"lineNum":"  384","line":"      if yield unsafe_at(i)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  385","line":"        return i"},
{"lineNum":"  386","line":"      end"},
{"lineNum":"  387","line":"    end"},
{"lineNum":"  388","line":"    nil"},
{"lineNum":"  389","line":"  end"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"  # Returns a random element from `self`, using the given *random* number generator."},
{"lineNum":"  392","line":"  # Raises `IndexError` if `self` is empty."},
{"lineNum":"  393","line":"  #"},
{"lineNum":"  394","line":"  # ```"},
{"lineNum":"  395","line":"  # a = [1, 2, 3]"},
{"lineNum":"  396","line":"  # a.sample                # => 2"},
{"lineNum":"  397","line":"  # a.sample                # => 1"},
{"lineNum":"  398","line":"  # a.sample(Random.new(1)) # => 3"},
{"lineNum":"  399","line":"  # ```"},
{"lineNum":"  400","line":"  def sample(random = Random::DEFAULT)"},
{"lineNum":"  401","line":"    raise IndexError.new if size == 0"},
{"lineNum":"  402","line":"    unsafe_at(random.rand(size))"},
{"lineNum":"  403","line":"  end"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"  # Returns a `Tuple` populated with the elements at the given indexes."},
{"lineNum":"  406","line":"  # Raises `IndexError` if any index is invalid."},
{"lineNum":"  407","line":"  #"},
{"lineNum":"  408","line":"  # ```"},
{"lineNum":"  409","line":"  # [\"a\", \"b\", \"c\", \"d\"].values_at(0, 2) # => {\"a\", \"c\"}"},
{"lineNum":"  410","line":"  # ```"},
{"lineNum":"  411","line":"  def values_at(*indexes : Int)"},
{"lineNum":"  412","line":"    indexes.map { |index| self[index] }"},
{"lineNum":"  413","line":"  end"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"  def zip(other : Indexable)"},
{"lineNum":"  416","line":"    each_with_index do |elem, i|"},
{"lineNum":"  417","line":"      yield elem, other[i]"},
{"lineNum":"  418","line":"    end"},
{"lineNum":"  419","line":"  end"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"  def zip(other : Indexable(U)) forall U"},
{"lineNum":"  422","line":"    pairs = Array({T, U}).new(size)"},
{"lineNum":"  423","line":"    zip(other) { |x, y| pairs << {x, y} }"},
{"lineNum":"  424","line":"    pairs"},
{"lineNum":"  425","line":"  end"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"  def zip?(other : Indexable)"},
{"lineNum":"  428","line":"    each_with_index do |elem, i|"},
{"lineNum":"  429","line":"      yield elem, other[i]?"},
{"lineNum":"  430","line":"    end"},
{"lineNum":"  431","line":"  end"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"  def zip?(other : Indexable(U)) forall U"},
{"lineNum":"  434","line":"    pairs = Array({T, U?}).new(size)"},
{"lineNum":"  435","line":"    zip?(other) { |x, y| pairs << {x, y} }"},
{"lineNum":"  436","line":"    pairs"},
{"lineNum":"  437","line":"  end"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"  private def check_index_out_of_bounds(index)"},
{"lineNum":"  440","line":"    check_index_out_of_bounds(index) { raise IndexError.new }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  441","line":"  end"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"  private def check_index_out_of_bounds(index)"},
{"lineNum":"  444","line":"    index += size if index < 0","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":"  445","line":"    if 0 <= index < size"},
{"lineNum":"  446","line":"      index"},
{"lineNum":"  447","line":"    else"},
{"lineNum":"  448","line":"      yield"},
{"lineNum":"  449","line":"    end"},
{"lineNum":"  450","line":"  end"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"  # :nodoc:"},
{"lineNum":"  453","line":"  def self.range_to_index_and_count(range, collection_size)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  454","line":"    start_index = range.begin"},
{"lineNum":"  455","line":"    start_index += collection_size if start_index < 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  456","line":"    raise IndexError.new if start_index < 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    end_index = range.end"},
{"lineNum":"  459","line":"    end_index += collection_size if end_index < 0","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  460","line":"    end_index -= 1 if range.excludes_end?","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  461","line":"    count = end_index - start_index + 1"},
{"lineNum":"  462","line":"    count = 0 if count < 0","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"    {start_index, count}"},
{"lineNum":"  465","line":"  end"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"  private class ItemIterator(A, T)"},
{"lineNum":"  468","line":"    include Iterator(T)"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"    def initialize(@array : A, @index = 0)"},
{"lineNum":"  471","line":"    end"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    def next"},
{"lineNum":"  474","line":"      if @index >= @array.size"},
{"lineNum":"  475","line":"        stop"},
{"lineNum":"  476","line":"      else"},
{"lineNum":"  477","line":"        value = @array[@index]"},
{"lineNum":"  478","line":"        @index += 1"},
{"lineNum":"  479","line":"        value"},
{"lineNum":"  480","line":"      end"},
{"lineNum":"  481","line":"    end"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"    def rewind"},
{"lineNum":"  484","line":"      @index = 0"},
{"lineNum":"  485","line":"      self"},
{"lineNum":"  486","line":"    end"},
{"lineNum":"  487","line":"  end"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"  private class ReverseItemIterator(A, T)"},
{"lineNum":"  490","line":"    include Iterator(T)"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    def initialize(@array : A, @index : Int32 = array.size - 1)"},
{"lineNum":"  493","line":"    end"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"    def next"},
{"lineNum":"  496","line":"      if @index < 0"},
{"lineNum":"  497","line":"        stop"},
{"lineNum":"  498","line":"      else"},
{"lineNum":"  499","line":"        value = @array[@index]"},
{"lineNum":"  500","line":"        @index -= 1"},
{"lineNum":"  501","line":"        value"},
{"lineNum":"  502","line":"      end"},
{"lineNum":"  503","line":"    end"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"    def rewind"},
{"lineNum":"  506","line":"      @index = @array.size - 1"},
{"lineNum":"  507","line":"      self"},
{"lineNum":"  508","line":"    end"},
{"lineNum":"  509","line":"  end"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"  private class IndexIterator(A)"},
{"lineNum":"  512","line":"    include Iterator(Int32)"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"    def initialize(@array : A, @index = 0)"},
{"lineNum":"  515","line":"    end"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"    def next"},
{"lineNum":"  518","line":"      if @index >= @array.size"},
{"lineNum":"  519","line":"        stop"},
{"lineNum":"  520","line":"      else"},
{"lineNum":"  521","line":"        value = @index"},
{"lineNum":"  522","line":"        @index += 1"},
{"lineNum":"  523","line":"        value"},
{"lineNum":"  524","line":"      end"},
{"lineNum":"  525","line":"    end"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"    def rewind"},
{"lineNum":"  528","line":"      @index = 0"},
{"lineNum":"  529","line":"      self"},
{"lineNum":"  530","line":"    end"},
{"lineNum":"  531","line":"  end"},
{"lineNum":"  532","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 23, "covered" : 0,};
var merged_data = [];
