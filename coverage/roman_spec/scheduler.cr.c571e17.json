var data = {lines:[
{"lineNum":"    1","line":"require \"event\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# :nodoc:"},
{"lineNum":"    4","line":"class Scheduler"},
{"lineNum":"    5","line":"  @@runnables = Deque(Fiber).new"},
{"lineNum":"    6","line":"  @@eb = Event::Base.new"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"  def self.reschedule","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    9","line":"    if runnable = @@runnables.shift?","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   10","line":"      runnable.resume"},
{"lineNum":"   11","line":"    else"},
{"lineNum":"   12","line":"      loop_fiber.resume"},
{"lineNum":"   13","line":"    end"},
{"lineNum":"   14","line":"    nil"},
{"lineNum":"   15","line":"  end"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"  def self.loop_fiber"},
{"lineNum":"   18","line":"    @@loop_fiber ||= Fiber.new { @@eb.run_loop }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   19","line":"  end"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"  def self.after_fork"},
{"lineNum":"   22","line":"    @@eb.reinit"},
{"lineNum":"   23","line":"  end"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"  def self.create_resume_event(fiber)","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   26","line":"    @@eb.new_event(-1, LibEvent2::EventFlags::None, fiber) do |s, flags, data|"},
{"lineNum":"   27","line":"      data.as(Fiber).resume"},
{"lineNum":"   28","line":"    end"},
{"lineNum":"   29","line":"  end"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"  def self.create_fd_write_event(io : IO::FileDescriptor, edge_triggered : Bool = false)"},
{"lineNum":"   32","line":"    flags = LibEvent2::EventFlags::Write"},
{"lineNum":"   33","line":"    flags |= LibEvent2::EventFlags::Persist | LibEvent2::EventFlags::ET if edge_triggered","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   34","line":"    event = @@eb.new_event(io.fd, flags, io) do |s, flags, data|"},
{"lineNum":"   35","line":"      fd_io = data.as(IO::FileDescriptor)"},
{"lineNum":"   36","line":"      if flags.includes?(LibEvent2::EventFlags::Write)"},
{"lineNum":"   37","line":"        fd_io.resume_write"},
{"lineNum":"   38","line":"      elsif flags.includes?(LibEvent2::EventFlags::Timeout)"},
{"lineNum":"   39","line":"        fd_io.resume_write(timed_out: true)"},
{"lineNum":"   40","line":"      end"},
{"lineNum":"   41","line":"    end"},
{"lineNum":"   42","line":"    event"},
{"lineNum":"   43","line":"  end"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"  def self.create_fd_write_event(sock : Socket, edge_triggered : Bool = false)"},
{"lineNum":"   46","line":"    flags = LibEvent2::EventFlags::Write"},
{"lineNum":"   47","line":"    flags |= LibEvent2::EventFlags::Persist | LibEvent2::EventFlags::ET if edge_triggered"},
{"lineNum":"   48","line":"    event = @@eb.new_event(sock.fd, flags, sock) do |s, flags, data|"},
{"lineNum":"   49","line":"      sock_ref = data.as(Socket)"},
{"lineNum":"   50","line":"      if flags.includes?(LibEvent2::EventFlags::Write)"},
{"lineNum":"   51","line":"        sock_ref.resume_write"},
{"lineNum":"   52","line":"      elsif flags.includes?(LibEvent2::EventFlags::Timeout)"},
{"lineNum":"   53","line":"        sock_ref.resume_write(timed_out: true)"},
{"lineNum":"   54","line":"      end"},
{"lineNum":"   55","line":"    end"},
{"lineNum":"   56","line":"    event"},
{"lineNum":"   57","line":"  end"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"  def self.create_fd_read_event(io : IO::FileDescriptor, edge_triggered : Bool = false)"},
{"lineNum":"   60","line":"    flags = LibEvent2::EventFlags::Read"},
{"lineNum":"   61","line":"    flags |= LibEvent2::EventFlags::Persist | LibEvent2::EventFlags::ET if edge_triggered","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   62","line":"    event = @@eb.new_event(io.fd, flags, io) do |s, flags, data|"},
{"lineNum":"   63","line":"      fd_io = data.as(IO::FileDescriptor)"},
{"lineNum":"   64","line":"      if flags.includes?(LibEvent2::EventFlags::Read)"},
{"lineNum":"   65","line":"        fd_io.resume_read"},
{"lineNum":"   66","line":"      elsif flags.includes?(LibEvent2::EventFlags::Timeout)"},
{"lineNum":"   67","line":"        fd_io.resume_read(timed_out: true)"},
{"lineNum":"   68","line":"      end"},
{"lineNum":"   69","line":"    end"},
{"lineNum":"   70","line":"    event"},
{"lineNum":"   71","line":"  end"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  def self.create_fd_read_event(sock : Socket, edge_triggered : Bool = false)"},
{"lineNum":"   74","line":"    flags = LibEvent2::EventFlags::Read"},
{"lineNum":"   75","line":"    flags |= LibEvent2::EventFlags::Persist | LibEvent2::EventFlags::ET if edge_triggered"},
{"lineNum":"   76","line":"    event = @@eb.new_event(sock.fd, flags, sock) do |s, flags, data|"},
{"lineNum":"   77","line":"      sock_ref = data.as(Socket)"},
{"lineNum":"   78","line":"      if flags.includes?(LibEvent2::EventFlags::Read)"},
{"lineNum":"   79","line":"        sock_ref.resume_read"},
{"lineNum":"   80","line":"      elsif flags.includes?(LibEvent2::EventFlags::Timeout)"},
{"lineNum":"   81","line":"        sock_ref.resume_read(timed_out: true)"},
{"lineNum":"   82","line":"      end"},
{"lineNum":"   83","line":"    end"},
{"lineNum":"   84","line":"    event"},
{"lineNum":"   85","line":"  end"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"  def self.create_signal_event(signal : Signal, chan)"},
{"lineNum":"   88","line":"    flags = LibEvent2::EventFlags::Signal | LibEvent2::EventFlags::Persist"},
{"lineNum":"   89","line":"    event = @@eb.new_event(Int32.new(signal.to_i), flags, chan) do |s, flags, data|"},
{"lineNum":"   90","line":"      ch = data.as(Channel::Buffered(Signal))"},
{"lineNum":"   91","line":"      sig = Signal.new(s)"},
{"lineNum":"   92","line":"      ch.send sig"},
{"lineNum":"   93","line":"    end"},
{"lineNum":"   94","line":"    event.add"},
{"lineNum":"   95","line":"    event"},
{"lineNum":"   96","line":"  end"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"  @@dns_base : Event::DnsBase?"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"  private def self.dns_base"},
{"lineNum":"  101","line":"    @@dns_base ||= @@eb.new_dns_base"},
{"lineNum":"  102","line":"  end"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"  def self.create_dns_request(nodename, servname, hints, data, &callback : LibEvent2::DnsGetAddrinfoCallback)"},
{"lineNum":"  105","line":"    dns_base.getaddrinfo(nodename, servname, hints, data, &callback)"},
{"lineNum":"  106","line":"  end"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"  def self.enqueue(fiber : Fiber)"},
{"lineNum":"  109","line":"    @@runnables << fiber"},
{"lineNum":"  110","line":"  end"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  def self.enqueue(fibers : Enumerable(Fiber))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"    @@runnables.concat fibers"},
{"lineNum":"  114","line":"  end"},
{"lineNum":"  115","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
