var data = {lines:[
{"lineNum":"    1","line":"# A tuple is a fixed-size, immutable, stack-allocated sequence of values"},
{"lineNum":"    2","line":"# of possibly different types."},
{"lineNum":"    3","line":"#"},
{"lineNum":"    4","line":"# You can think of a `Tuple` as an immutable `Array` whose types for each position"},
{"lineNum":"    5","line":"# are known at compile time."},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# A tuple can be created with the usual `new` method or with a tuple literal:"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# ```"},
{"lineNum":"   10","line":"# tuple = {1, \"hello\", \'x\'} # Tuple(Int32, String, Char)"},
{"lineNum":"   11","line":"# tuple[0]                  # => 1"},
{"lineNum":"   12","line":"# tuple[1]                  # => \"hello\""},
{"lineNum":"   13","line":"# tuple[2]                  # => \'x\'"},
{"lineNum":"   14","line":"# ```"},
{"lineNum":"   15","line":"#"},
{"lineNum":"   16","line":"# The compiler knows what types are in each position, so when indexing"},
{"lineNum":"   17","line":"# a tuple with an integer literal the compiler will return"},
{"lineNum":"   18","line":"# the value in that index and with the expected type, like in the above"},
{"lineNum":"   19","line":"# snippet. Indexing with an integer literal outside the bounds of the tuple"},
{"lineNum":"   20","line":"# will give a compile-time error."},
{"lineNum":"   21","line":"#"},
{"lineNum":"   22","line":"# Indexing with an integer value that is only known at runtime will return"},
{"lineNum":"   23","line":"# a value whose type is the union of all the types in the tuple, and might raise"},
{"lineNum":"   24","line":"# `IndexError`."},
{"lineNum":"   25","line":"#"},
{"lineNum":"   26","line":"# Tuples are the preferred way to return fixed-size multiple return"},
{"lineNum":"   27","line":"# values because no memory is needed to be allocated for them:"},
{"lineNum":"   28","line":"#"},
{"lineNum":"   29","line":"# ```"},
{"lineNum":"   30","line":"# def one_and_hello"},
{"lineNum":"   31","line":"#   {1, \"hello\"}"},
{"lineNum":"   32","line":"# end"},
{"lineNum":"   33","line":"#"},
{"lineNum":"   34","line":"# one, hello = one_and_hello"},
{"lineNum":"   35","line":"# one   # => 1"},
{"lineNum":"   36","line":"# hello # => \"hello\""},
{"lineNum":"   37","line":"# ```"},
{"lineNum":"   38","line":"#"},
{"lineNum":"   39","line":"# Good examples of the above are `Number#divmod` and `Enumerable#minmax`."},
{"lineNum":"   40","line":"#"},
{"lineNum":"   41","line":"# Tuples can be splat with the `*` operator and passed to methods:"},
{"lineNum":"   42","line":"#"},
{"lineNum":"   43","line":"# ```"},
{"lineNum":"   44","line":"# def multiply(string, value)"},
{"lineNum":"   45","line":"#   string * value"},
{"lineNum":"   46","line":"# end"},
{"lineNum":"   47","line":"#"},
{"lineNum":"   48","line":"# tuple = {\"hey\", 2}"},
{"lineNum":"   49","line":"# value = multiply(*tuple) # same as multiply tuple[0], tuple[1]"},
{"lineNum":"   50","line":"# value                    # => \"heyhey\""},
{"lineNum":"   51","line":"# ```"},
{"lineNum":"   52","line":"#"},
{"lineNum":"   53","line":"# Finally, when using a splat argument in a method definition its type"},
{"lineNum":"   54","line":"# will be a tuple of the call arguments:"},
{"lineNum":"   55","line":"#"},
{"lineNum":"   56","line":"# ```"},
{"lineNum":"   57","line":"# def splat_test(*args)"},
{"lineNum":"   58","line":"#   args"},
{"lineNum":"   59","line":"# end"},
{"lineNum":"   60","line":"#"},
{"lineNum":"   61","line":"# tuple = splat_test 1, \"hello\", \'x\'"},
{"lineNum":"   62","line":"# tuple.class # => Tuple(Int32, String, Char)"},
{"lineNum":"   63","line":"# tuple       # => {1, \"hello\", \'x\'}"},
{"lineNum":"   64","line":"# ```"},
{"lineNum":"   65","line":"struct Tuple"},
{"lineNum":"   66","line":"  include Indexable(Union(*T))"},
{"lineNum":"   67","line":"  include Comparable(Tuple)"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"  # Creates a tuple that will contain the given arguments."},
{"lineNum":"   70","line":"  #"},
{"lineNum":"   71","line":"  # This method is useful in macros and generic code because with it you can"},
{"lineNum":"   72","line":"  # creates empty tuples, something that you can\'t do with a tuple literal."},
{"lineNum":"   73","line":"  #"},
{"lineNum":"   74","line":"  # ```"},
{"lineNum":"   75","line":"  # Tuple.new(1, \"hello\", \'x\') #=> {1, \"hello\", \'x\'}"},
{"lineNum":"   76","line":"  # Tuple.new                  #=> {}"},
{"lineNum":"   77","line":"  #"},
{"lineNum":"   78","line":"  # {}                         # syntax error"},
{"lineNum":"   79","line":"  # ```"},
{"lineNum":"   80","line":"  def self.new(*args : *T)"},
{"lineNum":"   81","line":"    args"},
{"lineNum":"   82","line":"  end"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"  # Creates a tuple from the given array, with elements casted to the given types."},
{"lineNum":"   85","line":"  #"},
{"lineNum":"   86","line":"  # ```"},
{"lineNum":"   87","line":"  # Tuple(String, Int64).from([\"world\", 2])       # => {\"world\", 2}"},
{"lineNum":"   88","line":"  # Tuple(String, Int64).from([\"world\", 2]).class # => {String, Int64}"},
{"lineNum":"   89","line":"  # ```"},
{"lineNum":"   90","line":"  #"},
{"lineNum":"   91","line":"  # See also: `#from`."},
{"lineNum":"   92","line":"  def self.from(array : Array) : self"},
{"lineNum":"   93","line":"    {% begin %}"},
{"lineNum":"   94","line":"    Tuple.new(*{{T}}).from(array)"},
{"lineNum":"   95","line":"    {% end %}"},
{"lineNum":"   96","line":"  end"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"  # Expects to be called on a tuple of types, creates a tuple from the given array,"},
{"lineNum":"   99","line":"  # with types casted appropriately."},
{"lineNum":"  100","line":"  #"},
{"lineNum":"  101","line":"  # This allows you to easily pass an array as individual arguments to a method."},
{"lineNum":"  102","line":"  #"},
{"lineNum":"  103","line":"  # ```"},
{"lineNum":"  104","line":"  # def speak_about(thing : String, n : Int64)"},
{"lineNum":"  105","line":"  #   \"I see #{n} #{thing}s\""},
{"lineNum":"  106","line":"  # end"},
{"lineNum":"  107","line":"  #"},
{"lineNum":"  108","line":"  # data = JSON.parse(%([\"world\", 2])).as_a"},
{"lineNum":"  109","line":"  # speak_about(*{String, Int64}.from(data)) # => \"I see 2 worlds\""},
{"lineNum":"  110","line":"  # ```"},
{"lineNum":"  111","line":"  def from(array : Array)"},
{"lineNum":"  112","line":"    if size != array.size"},
{"lineNum":"  113","line":"      raise ArgumentError.new \"Expected array of size #{size} but one of size #{array.size} was given.\""},
{"lineNum":"  114","line":"    end"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"    {% begin %}"},
{"lineNum":"  117","line":"    Tuple.new("},
{"lineNum":"  118","line":"    {% for i in 0...@type.size %}"},
{"lineNum":"  119","line":"      self[{{i}}].cast(array[{{i}}]),"},
{"lineNum":"  120","line":"    {% end %}"},
{"lineNum":"  121","line":"    )"},
{"lineNum":"  122","line":"    {% end %}"},
{"lineNum":"  123","line":"  end"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"  def unsafe_at(index : Int)"},
{"lineNum":"  126","line":"    self[index]"},
{"lineNum":"  127","line":"  end"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"  # Returns the element at the given *index*. Read the type docs to understand"},
{"lineNum":"  130","line":"  # the difference between indexing with a number literal or a variable."},
{"lineNum":"  131","line":"  #"},
{"lineNum":"  132","line":"  # ```"},
{"lineNum":"  133","line":"  # tuple = {1, \"hello\", \'x\'}"},
{"lineNum":"  134","line":"  # tuple[0] # => 1 (Int32)"},
{"lineNum":"  135","line":"  # tuple[3] # compile error: index out of bounds for tuple {Int32, String, Char}"},
{"lineNum":"  136","line":"  #"},
{"lineNum":"  137","line":"  # i = 0"},
{"lineNum":"  138","line":"  # tuple[i] # => 1 (Int32 | String | Char)"},
{"lineNum":"  139","line":"  #"},
{"lineNum":"  140","line":"  # i = 3"},
{"lineNum":"  141","line":"  # tuple[i] # raises IndexError"},
{"lineNum":"  142","line":"  # ```"},
{"lineNum":"  143","line":"  def [](index : Int)"},
{"lineNum":"  144","line":"    at(index)"},
{"lineNum":"  145","line":"  end"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  # Returns the element at the given *index* or `nil` if out of bounds."},
{"lineNum":"  148","line":"  #"},
{"lineNum":"  149","line":"  # ```"},
{"lineNum":"  150","line":"  # tuple = {1, \"hello\", \'x\'}"},
{"lineNum":"  151","line":"  # tuple[0]? # => 1"},
{"lineNum":"  152","line":"  # tuple[3]? # => nil"},
{"lineNum":"  153","line":"  # ```"},
{"lineNum":"  154","line":"  def []?(index : Int)"},
{"lineNum":"  155","line":"    at(index) { nil }"},
{"lineNum":"  156","line":"  end"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"  # Returns the element at the given *index* or raises IndexError if out of bounds."},
{"lineNum":"  159","line":"  #"},
{"lineNum":"  160","line":"  # ```"},
{"lineNum":"  161","line":"  # tuple = {1, \"hello\", \'x\'}"},
{"lineNum":"  162","line":"  # tuple.at(0) # => 1"},
{"lineNum":"  163","line":"  # tuple.at(3) # raises IndexError"},
{"lineNum":"  164","line":"  # ```"},
{"lineNum":"  165","line":"  def at(index : Int)"},
{"lineNum":"  166","line":"    at(index) { raise IndexError.new }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  167","line":"  end"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  # Returns the element at the given *index* or the value returned by the block if"},
{"lineNum":"  170","line":"  # out of bounds."},
{"lineNum":"  171","line":"  #"},
{"lineNum":"  172","line":"  # ```"},
{"lineNum":"  173","line":"  # tuple = {1, \"hello\", \'x\'}"},
{"lineNum":"  174","line":"  # tuple.at(0) { 10 } # => 1"},
{"lineNum":"  175","line":"  # tuple.at(3) { 10 } # => 10"},
{"lineNum":"  176","line":"  # ```"},
{"lineNum":"  177","line":"  def at(index : Int)"},
{"lineNum":"  178","line":"    index += size if index < 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  179","line":"    {% for i in 0...T.size %}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  180","line":"      return self[{{i}}] if {{i}} == index"},
{"lineNum":"  181","line":"    {% end %}"},
{"lineNum":"  182","line":"    yield"},
{"lineNum":"  183","line":"  end"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"  # Yields each of the elements in this tuple."},
{"lineNum":"  186","line":"  #"},
{"lineNum":"  187","line":"  # ```"},
{"lineNum":"  188","line":"  # tuple = {1, \"hello\", \'x\'}"},
{"lineNum":"  189","line":"  # tuple.each do |value|"},
{"lineNum":"  190","line":"  #   puts value"},
{"lineNum":"  191","line":"  # end"},
{"lineNum":"  192","line":"  # ```"},
{"lineNum":"  193","line":"  #"},
{"lineNum":"  194","line":"  # Output:"},
{"lineNum":"  195","line":"  #"},
{"lineNum":"  196","line":"  # ```text"},
{"lineNum":"  197","line":"  # 1"},
{"lineNum":"  198","line":"  # \"hello\""},
{"lineNum":"  199","line":"  # \'x\'"},
{"lineNum":"  200","line":"  # ```"},
{"lineNum":"  201","line":"  def each : Nil"},
{"lineNum":"  202","line":"    {% for i in 0...T.size %}"},
{"lineNum":"  203","line":"      yield self[{{i}}]"},
{"lineNum":"  204","line":"    {% end %}"},
{"lineNum":"  205","line":"  end"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"  # Returns `true` if this tuple has the same size as the other tuple"},
{"lineNum":"  208","line":"  # and their elements are equal to each other when  compared with `==`."},
{"lineNum":"  209","line":"  #"},
{"lineNum":"  210","line":"  # ```"},
{"lineNum":"  211","line":"  # t1 = {1, \"hello\"}"},
{"lineNum":"  212","line":"  # t2 = {1.0, \"hello\"}"},
{"lineNum":"  213","line":"  # t3 = {2, \"hello\"}"},
{"lineNum":"  214","line":"  #"},
{"lineNum":"  215","line":"  # t1 == t2 # => true"},
{"lineNum":"  216","line":"  # t1 == t3 # => false"},
{"lineNum":"  217","line":"  # ```"},
{"lineNum":"  218","line":"  def ==(other : self)"},
{"lineNum":"  219","line":"    {% for i in 0...T.size %}"},
{"lineNum":"  220","line":"      return false unless self[{{i}}] == other[{{i}}]"},
{"lineNum":"  221","line":"    {% end %}"},
{"lineNum":"  222","line":"    true"},
{"lineNum":"  223","line":"  end"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"  # ditto"},
{"lineNum":"  226","line":"  def ==(other : Tuple)"},
{"lineNum":"  227","line":"    return false unless size == other.size"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    size.times do |i|"},
{"lineNum":"  230","line":"      return false unless self[i] == other[i]"},
{"lineNum":"  231","line":"    end"},
{"lineNum":"  232","line":"    true"},
{"lineNum":"  233","line":"  end"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"  def ==(other)"},
{"lineNum":"  236","line":"    false"},
{"lineNum":"  237","line":"  end"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"  # Returns `true` if case equality holds for the elements in `self` and *other*."},
{"lineNum":"  240","line":"  #"},
{"lineNum":"  241","line":"  # ```"},
{"lineNum":"  242","line":"  # {1, 2} === {1, 2} # => true"},
{"lineNum":"  243","line":"  # {1, 2} === {1, 3} # => false"},
{"lineNum":"  244","line":"  # ```"},
{"lineNum":"  245","line":"  #"},
{"lineNum":"  246","line":"  # See also: `Object#===`."},
{"lineNum":"  247","line":"  def ===(other : self)"},
{"lineNum":"  248","line":"    {% for i in 0...T.size %}"},
{"lineNum":"  249","line":"      return false unless self[{{i}}] === other[{{i}}]"},
{"lineNum":"  250","line":"    {% end %}"},
{"lineNum":"  251","line":"    true"},
{"lineNum":"  252","line":"  end"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"  # Returns `true` if `self` and *other* have the same size and case equality holds"},
{"lineNum":"  255","line":"  # for the elements in `self` and *other*."},
{"lineNum":"  256","line":"  #"},
{"lineNum":"  257","line":"  # ```"},
{"lineNum":"  258","line":"  # {1, 2} === {1, 2, 3}             # => false"},
{"lineNum":"  259","line":"  # {/o+/, \"bar\"} === {\"foo\", \"bar\"} # => true"},
{"lineNum":"  260","line":"  # ```"},
{"lineNum":"  261","line":"  #"},
{"lineNum":"  262","line":"  # See also: `Object#===`."},
{"lineNum":"  263","line":"  def ===(other : Tuple)"},
{"lineNum":"  264","line":"    return false unless size == other.size"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"    size.times do |i|"},
{"lineNum":"  267","line":"      return false unless self[i] === other[i]"},
{"lineNum":"  268","line":"    end"},
{"lineNum":"  269","line":"    true"},
{"lineNum":"  270","line":"  end"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"  # Implements the comparison operator."},
{"lineNum":"  273","line":"  #"},
{"lineNum":"  274","line":"  # Each object in each tuple is compared (using the `<=>` operator)."},
{"lineNum":"  275","line":"  #"},
{"lineNum":"  276","line":"  # Tuples are compared in an \"element-wise\" manner; the first element of this tuple is"},
{"lineNum":"  277","line":"  # compared with the first one of *other* using the `<=>` operator, then each of the second elements,"},
{"lineNum":"  278","line":"  # etc. As soon as the result of any such comparison is non zero"},
{"lineNum":"  279","line":"  # (i.e. the two corresponding elements are not equal), that result is returned for the whole tuple comparison."},
{"lineNum":"  280","line":"  #"},
{"lineNum":"  281","line":"  # If all the elements are equal, then the result is based on a comparison of the tuple sizes."},
{"lineNum":"  282","line":"  # Thus, two tuples are \"equal\" according to `<=>` if, and only if, they have the same size"},
{"lineNum":"  283","line":"  # and the value of each element is equal to the value of the corresponding element in the other tuple."},
{"lineNum":"  284","line":"  #"},
{"lineNum":"  285","line":"  # ```"},
{"lineNum":"  286","line":"  # {\"a\", \"a\", \"c\"} <=> {\"a\", \"b\", \"c\"} # => -1"},
{"lineNum":"  287","line":"  # {1, 2, 3, 4, 5, 6} <=> {1, 2}       # => +1"},
{"lineNum":"  288","line":"  # {1, 2} <=> {1, 2.0}                 # => 0"},
{"lineNum":"  289","line":"  # ```"},
{"lineNum":"  290","line":"  #"},
{"lineNum":"  291","line":"  # See also: `Object#<=>`."},
{"lineNum":"  292","line":"  def <=>(other : self)"},
{"lineNum":"  293","line":"    {% for i in 0...T.size %}"},
{"lineNum":"  294","line":"      cmp = self[{{i}}] <=> other[{{i}}]"},
{"lineNum":"  295","line":"      return cmp unless cmp == 0"},
{"lineNum":"  296","line":"    {% end %}"},
{"lineNum":"  297","line":"    0"},
{"lineNum":"  298","line":"  end"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"  # ditto"},
{"lineNum":"  301","line":"  def <=>(other : Tuple)"},
{"lineNum":"  302","line":"    min_size = Math.min(size, other.size)"},
{"lineNum":"  303","line":"    min_size.times do |i|"},
{"lineNum":"  304","line":"      cmp = self[i] <=> other[i]"},
{"lineNum":"  305","line":"      return cmp unless cmp == 0"},
{"lineNum":"  306","line":"    end"},
{"lineNum":"  307","line":"    size <=> other.size"},
{"lineNum":"  308","line":"  end"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"  # See `Object#hash(hasher)`"},
{"lineNum":"  311","line":"  def hash(hasher)"},
{"lineNum":"  312","line":"    {% for i in 0...T.size %}"},
{"lineNum":"  313","line":"      hasher = self[{{i}}].hash(hasher)"},
{"lineNum":"  314","line":"    {% end %}"},
{"lineNum":"  315","line":"    hasher"},
{"lineNum":"  316","line":"  end"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"  # Returns a tuple containing cloned elements of this tuple using the `clone` method."},
{"lineNum":"  319","line":"  def clone"},
{"lineNum":"  320","line":"    {% begin %}"},
{"lineNum":"  321","line":"      Tuple.new("},
{"lineNum":"  322","line":"        {% for i in 0...T.size %}"},
{"lineNum":"  323","line":"          self[{{i}}].clone,"},
{"lineNum":"  324","line":"        {% end %}"},
{"lineNum":"  325","line":"      )"},
{"lineNum":"  326","line":"    {% end %}"},
{"lineNum":"  327","line":"  end"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"  # Returns a tuple that contains `self`\'s elements followed by *other*\'s elements."},
{"lineNum":"  330","line":"  #"},
{"lineNum":"  331","line":"  # ```"},
{"lineNum":"  332","line":"  # t1 = {1, 2}"},
{"lineNum":"  333","line":"  # t2 = {\"foo\", \"bar\"}"},
{"lineNum":"  334","line":"  # t3 = t1 + t2"},
{"lineNum":"  335","line":"  # t3         # => {1, 2, \"foo\", \"bar\"}"},
{"lineNum":"  336","line":"  # typeof(t3) # => Tuple(Int32, Int32, String, String)"},
{"lineNum":"  337","line":"  # ```"},
{"lineNum":"  338","line":"  def +(other : Tuple)"},
{"lineNum":"  339","line":"    plus_implementation(other)"},
{"lineNum":"  340","line":"  end"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"  private def plus_implementation(other : U) forall U"},
{"lineNum":"  343","line":"    {% begin %}"},
{"lineNum":"  344","line":"      Tuple.new("},
{"lineNum":"  345","line":"        {% for i in 0...@type.size %}"},
{"lineNum":"  346","line":"          self[{{i}}],"},
{"lineNum":"  347","line":"        {% end %}"},
{"lineNum":"  348","line":"        {% for i in 0...U.size %}"},
{"lineNum":"  349","line":"          other[{{i}}],"},
{"lineNum":"  350","line":"        {% end %}"},
{"lineNum":"  351","line":"      )"},
{"lineNum":"  352","line":"    {% end %}"},
{"lineNum":"  353","line":"  end"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"  # Returns the number of elements in this tuple."},
{"lineNum":"  356","line":"  #"},
{"lineNum":"  357","line":"  # ```"},
{"lineNum":"  358","line":"  # {\'a\', \'b\'}.size # => 2"},
{"lineNum":"  359","line":"  # ```"},
{"lineNum":"  360","line":"  def size"},
{"lineNum":"  361","line":"    {{T.size}}"},
{"lineNum":"  362","line":"  end"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"  # Returns the types of this tuple type."},
{"lineNum":"  365","line":"  #"},
{"lineNum":"  366","line":"  # ```"},
{"lineNum":"  367","line":"  # tuple = {1, \"hello\", \'x\'}"},
{"lineNum":"  368","line":"  # tuple.class.types # => {Int32, String, Char}"},
{"lineNum":"  369","line":"  # ```"},
{"lineNum":"  370","line":"  def self.types"},
{"lineNum":"  371","line":"    Tuple.new(*{{T}})"},
{"lineNum":"  372","line":"  end"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"  # Same as `to_s`."},
{"lineNum":"  375","line":"  def inspect"},
{"lineNum":"  376","line":"    to_s"},
{"lineNum":"  377","line":"  end"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"  # Appends a string representation of this tuple to the given `IO`."},
{"lineNum":"  380","line":"  #"},
{"lineNum":"  381","line":"  # ```"},
{"lineNum":"  382","line":"  # tuple = {1, \"hello\"}"},
{"lineNum":"  383","line":"  # tuple.to_s # => \"{1, \\\"hello\\\"}\""},
{"lineNum":"  384","line":"  # ```"},
{"lineNum":"  385","line":"  def to_s(io)"},
{"lineNum":"  386","line":"    io << \"{\""},
{"lineNum":"  387","line":"    join \", \", io, &.inspect(io)"},
{"lineNum":"  388","line":"    io << \"}\""},
{"lineNum":"  389","line":"  end"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"  def pretty_print(pp) : Nil"},
{"lineNum":"  392","line":"    pp.list(\"{\", self, \"}\")"},
{"lineNum":"  393","line":"  end"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"  # Returns a new tuple where elements are mapped by the given block."},
{"lineNum":"  396","line":"  #"},
{"lineNum":"  397","line":"  # ```"},
{"lineNum":"  398","line":"  # tuple = {1, 2.5, \"a\"}"},
{"lineNum":"  399","line":"  # tuple.map &.to_s # => {\"1\", \"2.5\", \"a\"}"},
{"lineNum":"  400","line":"  # ```"},
{"lineNum":"  401","line":"  def map"},
{"lineNum":"  402","line":"    {% begin %}"},
{"lineNum":"  403","line":"      Tuple.new("},
{"lineNum":"  404","line":"        {% for i in 0...T.size %}"},
{"lineNum":"  405","line":"          (yield self[{{i}}]),"},
{"lineNum":"  406","line":"        {% end %}"},
{"lineNum":"  407","line":"      )"},
{"lineNum":"  408","line":"   {% end %}"},
{"lineNum":"  409","line":"  end"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"  # Like `map`, but the block gets passed both the element and its index."},
{"lineNum":"  412","line":"  #"},
{"lineNum":"  413","line":"  # ```"},
{"lineNum":"  414","line":"  # tuple = {1, 2.5, \"a\"}"},
{"lineNum":"  415","line":"  # tuple.map_with_index { |e, i| \"tuple[#{i}]: #{e}\" } # => {\"tuple[0]: 1\", \"tuple[1]: 2.5\", \"tuple[2]: a\"}"},
{"lineNum":"  416","line":"  # ```"},
{"lineNum":"  417","line":"  def map_with_index"},
{"lineNum":"  418","line":"    {% begin %}"},
{"lineNum":"  419","line":"      Tuple.new("},
{"lineNum":"  420","line":"        {% for i in 0...T.size %}"},
{"lineNum":"  421","line":"          (yield self[{{i}}], {{i}}),"},
{"lineNum":"  422","line":"        {% end %}"},
{"lineNum":"  423","line":"      )"},
{"lineNum":"  424","line":"    {% end %}"},
{"lineNum":"  425","line":"  end"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"  # Returns a new tuple where the elements are in reverse order."},
{"lineNum":"  428","line":"  #"},
{"lineNum":"  429","line":"  # ```"},
{"lineNum":"  430","line":"  # tuple = {1, 2.5, \"a\"}"},
{"lineNum":"  431","line":"  # tuple.reverse # => {\"a\", 2.5, 1}"},
{"lineNum":"  432","line":"  # ```"},
{"lineNum":"  433","line":"  def reverse"},
{"lineNum":"  434","line":"    {% begin %}"},
{"lineNum":"  435","line":"      Tuple.new("},
{"lineNum":"  436","line":"        {% for i in 1..T.size %}"},
{"lineNum":"  437","line":"          self[{{T.size - i}}],"},
{"lineNum":"  438","line":"        {% end %}"},
{"lineNum":"  439","line":"      )"},
{"lineNum":"  440","line":"    {% end %}"},
{"lineNum":"  441","line":"  end"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"  # Yields each of the elements in this tuple in reverse order."},
{"lineNum":"  444","line":"  #"},
{"lineNum":"  445","line":"  # ```"},
{"lineNum":"  446","line":"  # tuple = {1, \"hello\", \'x\'}"},
{"lineNum":"  447","line":"  # tuple.reverse_each do |value|"},
{"lineNum":"  448","line":"  #   puts value"},
{"lineNum":"  449","line":"  # end"},
{"lineNum":"  450","line":"  # ```"},
{"lineNum":"  451","line":"  #"},
{"lineNum":"  452","line":"  # Output:"},
{"lineNum":"  453","line":"  #"},
{"lineNum":"  454","line":"  # ```text"},
{"lineNum":"  455","line":"  # \'x\'"},
{"lineNum":"  456","line":"  # \"hello\""},
{"lineNum":"  457","line":"  # 1"},
{"lineNum":"  458","line":"  # ```"},
{"lineNum":"  459","line":"  def reverse_each"},
{"lineNum":"  460","line":"    {% for i in 1..T.size %}"},
{"lineNum":"  461","line":"      yield self[{{T.size - i}}]"},
{"lineNum":"  462","line":"    {% end %}"},
{"lineNum":"  463","line":"    nil"},
{"lineNum":"  464","line":"  end"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"  # Returns the first element of this tuple. Doesn\'t compile"},
{"lineNum":"  467","line":"  # if the tuple is empty."},
{"lineNum":"  468","line":"  #"},
{"lineNum":"  469","line":"  # ```"},
{"lineNum":"  470","line":"  # tuple = {1, 2.5}"},
{"lineNum":"  471","line":"  # tuple.first # => 1"},
{"lineNum":"  472","line":"  # ```"},
{"lineNum":"  473","line":"  def first"},
{"lineNum":"  474","line":"    self[0]"},
{"lineNum":"  475","line":"  end"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"  # Returns the first element of this tuple, or `nil` if this"},
{"lineNum":"  478","line":"  # is the empty tuple."},
{"lineNum":"  479","line":"  #"},
{"lineNum":"  480","line":"  # ```"},
{"lineNum":"  481","line":"  # tuple = {1, 2.5}"},
{"lineNum":"  482","line":"  # tuple.first? # => 1"},
{"lineNum":"  483","line":"  #"},
{"lineNum":"  484","line":"  # empty = Tuple.new"},
{"lineNum":"  485","line":"  # empty.first? # => nil"},
{"lineNum":"  486","line":"  # ```"},
{"lineNum":"  487","line":"  def first?"},
{"lineNum":"  488","line":"    {% if T.size == 0 %}"},
{"lineNum":"  489","line":"      nil"},
{"lineNum":"  490","line":"    {% else %}"},
{"lineNum":"  491","line":"      self[0]"},
{"lineNum":"  492","line":"    {% end %}"},
{"lineNum":"  493","line":"  end"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"  # Returns the last element of this tuple. Doesn\'t compile"},
{"lineNum":"  496","line":"  # if the tuple is empty."},
{"lineNum":"  497","line":"  #"},
{"lineNum":"  498","line":"  # ```"},
{"lineNum":"  499","line":"  # tuple = {1, 2.5}"},
{"lineNum":"  500","line":"  # tuple.last # => 2.5"},
{"lineNum":"  501","line":"  # ```"},
{"lineNum":"  502","line":"  def last"},
{"lineNum":"  503","line":"    {% begin %}"},
{"lineNum":"  504","line":"      self[{{T.size - 1}}]"},
{"lineNum":"  505","line":"    {% end %}"},
{"lineNum":"  506","line":"  end"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"  # Returns the last element of this tuple, or `nil` if this"},
{"lineNum":"  509","line":"  # is the empty tuple."},
{"lineNum":"  510","line":"  #"},
{"lineNum":"  511","line":"  # ```"},
{"lineNum":"  512","line":"  # tuple = {1, 2.5}"},
{"lineNum":"  513","line":"  # tuple.last? # => 2.5"},
{"lineNum":"  514","line":"  #"},
{"lineNum":"  515","line":"  # empty = Tuple.new"},
{"lineNum":"  516","line":"  # empty.last? # => nil"},
{"lineNum":"  517","line":"  # ```"},
{"lineNum":"  518","line":"  def last?"},
{"lineNum":"  519","line":"    {% if T.size == 0 %}"},
{"lineNum":"  520","line":"      nil"},
{"lineNum":"  521","line":"    {% else %}"},
{"lineNum":"  522","line":"      self[{{T.size - 1}}]"},
{"lineNum":"  523","line":"    {% end %}"},
{"lineNum":"  524","line":"  end"},
{"lineNum":"  525","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
