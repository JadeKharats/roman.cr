var data = {lines:[
{"lineNum":"    1","line":"require \"callstack\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"CallStack.skip(__FILE__)"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"# Represents errors that occur during application execution."},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# Exception and it\'s descendants are used to communicate between raise and"},
{"lineNum":"    8","line":"# rescue statements in `begin ... end` blocks."},
{"lineNum":"    9","line":"# Exception objects carry information about the exception – its type (the"},
{"lineNum":"   10","line":"# exception’s class name), an optional descriptive string, and"},
{"lineNum":"   11","line":"# optional traceback information."},
{"lineNum":"   12","line":"# Exception subclasses may add additional information."},
{"lineNum":"   13","line":"class Exception"},
{"lineNum":"   14","line":"  getter message : String?"},
{"lineNum":"   15","line":"  # Returns the previous exception at the time this exception was raised."},
{"lineNum":"   16","line":"  # This is useful for wrapping exceptions and retaining the original"},
{"lineNum":"   17","line":"  # exception information."},
{"lineNum":"   18","line":"  getter cause : Exception?"},
{"lineNum":"   19","line":"  property callstack : CallStack?","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"  def initialize(@message : String? = nil, @cause : Exception? = nil)","class":"lineNoCov","hits":"0","possible_hits":"149",},
{"lineNum":"   22","line":"  end"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"  # Returns any backtrace associated with the exception."},
{"lineNum":"   25","line":"  # The backtrace is an array of strings, each containing"},
{"lineNum":"   26","line":"  # “0xAddress: Function at File Line Column”."},
{"lineNum":"   27","line":"  def backtrace"},
{"lineNum":"   28","line":"    self.backtrace?.not_nil!","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   29","line":"  end"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"  # Returns any backtrace associated with the exception if the call stack exists."},
{"lineNum":"   32","line":"  # The backtrace is an array of strings, each containing"},
{"lineNum":"   33","line":"  # “0xAddress: Function at File Line Column”."},
{"lineNum":"   34","line":"  def backtrace?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":"    @callstack.try &.printable_backtrace","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   36","line":"  end"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"  def to_s(io : IO)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   39","line":"    io << message"},
{"lineNum":"   40","line":"  end"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"  def inspect(io : IO)"},
{"lineNum":"   43","line":"    io << \"#<\" << self.class.name << \":\" << message << \">\""},
{"lineNum":"   44","line":"  end"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"  def inspect_with_backtrace"},
{"lineNum":"   47","line":"    String.build do |io|"},
{"lineNum":"   48","line":"      inspect_with_backtrace io"},
{"lineNum":"   49","line":"    end"},
{"lineNum":"   50","line":"  end"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"  def inspect_with_backtrace(io : IO)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   53","line":"    io << message << \" (\" << self.class << \")\\n\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"    backtrace?.try &.each do |frame|","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"      io.print \"  from \""},
{"lineNum":"   56","line":"      io.puts frame","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"    end"},
{"lineNum":"   58","line":"    io.flush"},
{"lineNum":"   59","line":"  end"},
{"lineNum":"   60","line":"end"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"# Raised when the given index is invalid."},
{"lineNum":"   63","line":"#"},
{"lineNum":"   64","line":"# ```"},
{"lineNum":"   65","line":"# a = [:foo, :bar]"},
{"lineNum":"   66","line":"# a[2] # raises IndexError"},
{"lineNum":"   67","line":"# ```"},
{"lineNum":"   68","line":"class IndexError < Exception"},
{"lineNum":"   69","line":"  def initialize(message = \"Index out of bounds\")","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   70","line":"    super(message)"},
{"lineNum":"   71","line":"  end"},
{"lineNum":"   72","line":"end"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"# Raised when the arguments are wrong and there isn\'t a more specific `Exception` class."},
{"lineNum":"   75","line":"#"},
{"lineNum":"   76","line":"# ```"},
{"lineNum":"   77","line":"# [1, 2, 3].first(-4) # raises ArgumentError (attempt to take negative size)"},
{"lineNum":"   78","line":"# ```"},
{"lineNum":"   79","line":"class ArgumentError < Exception"},
{"lineNum":"   80","line":"  def initialize(message = \"Argument error\")","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"   81","line":"    super(message)"},
{"lineNum":"   82","line":"  end"},
{"lineNum":"   83","line":"end"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"# Raised when the type cast failed."},
{"lineNum":"   86","line":"#"},
{"lineNum":"   87","line":"# ```"},
{"lineNum":"   88","line":"# [1, \"hi\"][1].as(Int32) # raises TypeCastError (cast to Int32 failed)"},
{"lineNum":"   89","line":"# ```"},
{"lineNum":"   90","line":"class TypeCastError < Exception"},
{"lineNum":"   91","line":"  def initialize(message = \"Type Cast error\")","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   92","line":"    super(message)"},
{"lineNum":"   93","line":"  end"},
{"lineNum":"   94","line":"end"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"class InvalidByteSequenceError < Exception"},
{"lineNum":"   97","line":"  def initialize(message = \"Invalid byte sequence in UTF-8 string\")","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   98","line":"    super(message)"},
{"lineNum":"   99","line":"  end"},
{"lineNum":"  100","line":"end"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"# Raised when the specified key is not found."},
{"lineNum":"  103","line":"#"},
{"lineNum":"  104","line":"# ```"},
{"lineNum":"  105","line":"# h = {\"foo\" => \"bar\"}"},
{"lineNum":"  106","line":"# h[\"baz\"] # raises KeyError (Missing hash key: \"baz\")"},
{"lineNum":"  107","line":"# ```"},
{"lineNum":"  108","line":"class KeyError < Exception"},
{"lineNum":"  109","line":"end"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"# Raised when attempting to divide an integer by 0."},
{"lineNum":"  112","line":"#"},
{"lineNum":"  113","line":"# ```"},
{"lineNum":"  114","line":"# 1 / 0 # raises DivisionByZero (Division by zero)"},
{"lineNum":"  115","line":"# ```"},
{"lineNum":"  116","line":"class DivisionByZero < Exception"},
{"lineNum":"  117","line":"  def initialize(message = \"Division by zero\")"},
{"lineNum":"  118","line":"    super(message)"},
{"lineNum":"  119","line":"  end"},
{"lineNum":"  120","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 14, "covered" : 0,};
var merged_data = [];
