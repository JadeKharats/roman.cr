var data = {lines:[
{"lineNum":"    1","line":"# Provides methods that answer questions about unicode characters,"},
{"lineNum":"    2","line":"# and the `Unicode::CaseOptions` enum for special case conversions"},
{"lineNum":"    3","line":"# like Turkic."},
{"lineNum":"    4","line":"#"},
{"lineNum":"    5","line":"# There\'s no need to use the methods defined in this module"},
{"lineNum":"    6","line":"# because they are exposed in `Char` in a more convenient way"},
{"lineNum":"    7","line":"# (`Char#upcase`, `Char#downcase`, `Char#whitespace?`, etc.)"},
{"lineNum":"    8","line":"module Unicode"},
{"lineNum":"    9","line":"  # Options to pass to `upcase`, `downcase`, `uppercase?`"},
{"lineNum":"   10","line":"  # and `lowercase?` to control their behaviour."},
{"lineNum":"   11","line":"  @[Flags]"},
{"lineNum":"   12","line":"  enum CaseOptions"},
{"lineNum":"   13","line":"    # Only transform ASCII characters."},
{"lineNum":"   14","line":"    ASCII"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    # Use Turkic case rules:"},
{"lineNum":"   17","line":"    #"},
{"lineNum":"   18","line":"    # ```"},
{"lineNum":"   19","line":"    # \'İ\'.downcase(Unicode::CaseOptions::Turkic) # => \'i\'"},
{"lineNum":"   20","line":"    # \'I\'.downcase(Unicode::CaseOptions::Turkic) # => \'ı\'"},
{"lineNum":"   21","line":"    # \'i\'.upcase(Unicode::CaseOptions::Turkic)   # => \'İ\'"},
{"lineNum":"   22","line":"    # \'ı\'.upcase(Unicode::CaseOptions::Turkic)   # => \'I\'"},
{"lineNum":"   23","line":"    # ```"},
{"lineNum":"   24","line":"    Turkic"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"    # Unicode case folding, which is more far-reaching than Unicode case mapping."},
{"lineNum":"   27","line":"    Fold"},
{"lineNum":"   28","line":"  end"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"  def self.upcase(char : Char, options : CaseOptions)"},
{"lineNum":"   31","line":"    result = check_upcase_ascii(char, options)"},
{"lineNum":"   32","line":"    return result if result"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    result = check_upcase_turkic(char, options)"},
{"lineNum":"   35","line":"    return result if result"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    check_upcase_ranges(char)"},
{"lineNum":"   38","line":"  end"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"  def self.upcase(char : Char, options : CaseOptions)"},
{"lineNum":"   41","line":"    result = check_upcase_ascii(char, options)"},
{"lineNum":"   42","line":"    if result"},
{"lineNum":"   43","line":"      yield result"},
{"lineNum":"   44","line":"      return"},
{"lineNum":"   45","line":"    end"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    result = check_upcase_turkic(char, options)"},
{"lineNum":"   48","line":"    if result"},
{"lineNum":"   49","line":"      yield result"},
{"lineNum":"   50","line":"      return"},
{"lineNum":"   51","line":"    end"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    result = special_cases_upcase[char.ord]?"},
{"lineNum":"   54","line":"    if result"},
{"lineNum":"   55","line":"      result.each { |c| yield c.unsafe_chr if c != 0 }"},
{"lineNum":"   56","line":"      return"},
{"lineNum":"   57","line":"    end"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    yield check_upcase_ranges(char)"},
{"lineNum":"   60","line":"  end"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"  private def self.check_upcase_ascii(char, options)"},
{"lineNum":"   63","line":"    if (char.ascii? && options.none?) || options.ascii?"},
{"lineNum":"   64","line":"      if char.ascii_lowercase?"},
{"lineNum":"   65","line":"        return (char.ord - 32).unsafe_chr"},
{"lineNum":"   66","line":"      else"},
{"lineNum":"   67","line":"        return char"},
{"lineNum":"   68","line":"      end"},
{"lineNum":"   69","line":"    end"},
{"lineNum":"   70","line":"    nil"},
{"lineNum":"   71","line":"  end"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  private def self.check_upcase_turkic(char, options)"},
{"lineNum":"   74","line":"    if options.turkic?"},
{"lineNum":"   75","line":"      case char"},
{"lineNum":"   76","line":"      when \'ı\'; return \'I\'"},
{"lineNum":"   77","line":"      when \'i\'; return \'İ\'"},
{"lineNum":"   78","line":"      end"},
{"lineNum":"   79","line":"    end"},
{"lineNum":"   80","line":"    nil"},
{"lineNum":"   81","line":"  end"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"  private def self.check_upcase_ranges(char)"},
{"lineNum":"   84","line":"    result = search_ranges(upcase_ranges, char.ord)"},
{"lineNum":"   85","line":"    return char + result if result"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    result = search_alternate(alternate_ranges, char.ord)"},
{"lineNum":"   88","line":"    return char - 1 if result && (char.ord - result).odd?"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    char"},
{"lineNum":"   91","line":"  end"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"  def self.downcase(char : Char, options : CaseOptions)"},
{"lineNum":"   94","line":"    result = check_downcase_ascii(char, options)"},
{"lineNum":"   95","line":"    return result if result","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    result = check_downcase_turkic(char, options)"},
{"lineNum":"   98","line":"    return result if result"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    results = check_downcase_fold(char, options)"},
{"lineNum":"  101","line":"    return results[0].unsafe_chr if results && results.size == 1"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    check_downcase_ranges(char)"},
{"lineNum":"  104","line":"  end","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  105","line":"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  106","line":"  def self.downcase(char : Char, options : CaseOptions)"},
{"lineNum":"  107","line":"    result = check_downcase_ascii(char, options)"},
{"lineNum":"  108","line":"    if result","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"      yield result","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  110","line":"      return"},
{"lineNum":"  111","line":"    end"},
{"lineNum":"  112","line":"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"    result = check_downcase_turkic(char, options)"},
{"lineNum":"  114","line":"    if result"},
{"lineNum":"  115","line":"      yield result"},
{"lineNum":"  116","line":"      return","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  117","line":"    end"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    result = check_downcase_fold(char, options)"},
{"lineNum":"  120","line":"    if result"},
{"lineNum":"  121","line":"      result.each { |c| yield c.unsafe_chr if c != 0 }"},
{"lineNum":"  122","line":"      return"},
{"lineNum":"  123","line":"    end"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    result = special_cases_downcase[char.ord]?"},
{"lineNum":"  126","line":"    if result"},
{"lineNum":"  127","line":"      result.each { |c| yield c.unsafe_chr if c != 0 }"},
{"lineNum":"  128","line":"      return"},
{"lineNum":"  129","line":"    end"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    yield check_downcase_ranges(char)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  132","line":"  end"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  private def self.check_downcase_ascii(char, options)"},
{"lineNum":"  135","line":"    if (char.ascii? && options.none?) || options.ascii?"},
{"lineNum":"  136","line":"      if char.ascii_uppercase?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  137","line":"        return (char.ord + 32).unsafe_chr"},
{"lineNum":"  138","line":"      else"},
{"lineNum":"  139","line":"        return char"},
{"lineNum":"  140","line":"      end"},
{"lineNum":"  141","line":"    end"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    nil"},
{"lineNum":"  144","line":"  end"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"  private def self.check_downcase_turkic(char, options)"},
{"lineNum":"  147","line":"    if options.turkic?"},
{"lineNum":"  148","line":"      case char"},
{"lineNum":"  149","line":"      when \'I\'; return \'ı\'"},
{"lineNum":"  150","line":"      when \'İ\'; return \'i\'"},
{"lineNum":"  151","line":"      end"},
{"lineNum":"  152","line":"    end"},
{"lineNum":"  153","line":"    nil"},
{"lineNum":"  154","line":"  end"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"  private def self.check_downcase_fold(char, options)"},
{"lineNum":"  157","line":"    if options.fold?"},
{"lineNum":"  158","line":"      result = search_ranges(casefold_ranges, char.ord)"},
{"lineNum":"  159","line":"      return {char.ord + result} if result"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"      return fold_cases[char.ord]?"},
{"lineNum":"  162","line":"    end"},
{"lineNum":"  163","line":"    nil"},
{"lineNum":"  164","line":"  end"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"  private def self.check_downcase_ranges(char)"},
{"lineNum":"  167","line":"    result = search_ranges(downcase_ranges, char.ord)"},
{"lineNum":"  168","line":"    return char + result if result","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    result = search_alternate(alternate_ranges, char.ord)"},
{"lineNum":"  171","line":"    return char + 1 if result && (char.ord - result).even?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    char"},
{"lineNum":"  174","line":"  end"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"  def self.lowercase?(char : Char)"},
{"lineNum":"  177","line":"    in_category?(char.ord, category_Ll)"},
{"lineNum":"  178","line":"  end"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"  def self.uppercase?(char : Char)"},
{"lineNum":"  181","line":"    in_category?(char.ord, category_Lu)"},
{"lineNum":"  182","line":"  end"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"  def self.letter?(char : Char)"},
{"lineNum":"  185","line":"    in_any_category?(char.ord, category_Lu, category_Ll, category_Lt)"},
{"lineNum":"  186","line":"  end"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"  def self.number?(char : Char)"},
{"lineNum":"  189","line":"    in_any_category?(char.ord, category_Nd, category_Nl, category_No)"},
{"lineNum":"  190","line":"  end"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"  def self.control?(char : Char)"},
{"lineNum":"  193","line":"    in_any_category?(char.ord, category_Cs, category_Co, category_Cn, category_Cf, category_Cc)"},
{"lineNum":"  194","line":"  end"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"  def self.whitespace?(char : Char)"},
{"lineNum":"  197","line":"    in_any_category?(char.ord, category_Zs, category_Zl, category_Zp)"},
{"lineNum":"  198","line":"  end"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"  def self.mark?(char : Char)"},
{"lineNum":"  201","line":"    in_any_category?(char.ord, category_Mn, category_Me, category_Mc)"},
{"lineNum":"  202","line":"  end"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"  private def self.search_ranges(haystack, needle)"},
{"lineNum":"  205","line":"    value = haystack.bsearch { |low, high, delta| needle <= high }"},
{"lineNum":"  206","line":"    if value && value[0] <= needle <= value[1]"},
{"lineNum":"  207","line":"      value[2]"},
{"lineNum":"  208","line":"    else"},
{"lineNum":"  209","line":"      nil"},
{"lineNum":"  210","line":"    end"},
{"lineNum":"  211","line":"  end"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"  private def self.search_alternate(haystack, needle)"},
{"lineNum":"  214","line":"    value = haystack.bsearch { |low, high| needle <= high }"},
{"lineNum":"  215","line":"    if value && value[0] <= needle <= value[1]"},
{"lineNum":"  216","line":"      value[0]"},
{"lineNum":"  217","line":"    else"},
{"lineNum":"  218","line":"      nil"},
{"lineNum":"  219","line":"    end"},
{"lineNum":"  220","line":"  end"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"  private def self.in_category?(needle, haystack)"},
{"lineNum":"  223","line":"    value = haystack.bsearch { |low, high, stride| needle <= high }"},
{"lineNum":"  224","line":"    if value && value[0] <= needle <= value[1]"},
{"lineNum":"  225","line":"      (needle - value[0]).divisible_by?(value[2])"},
{"lineNum":"  226","line":"    else"},
{"lineNum":"  227","line":"      false"},
{"lineNum":"  228","line":"    end"},
{"lineNum":"  229","line":"  end"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"  def self.in_any_category?(needle, *haystacks)"},
{"lineNum":"  232","line":"    haystacks.any? { |haystack| in_category?(needle, haystack) }"},
{"lineNum":"  233","line":"  end"},
{"lineNum":"  234","line":"end"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"require \"./data\""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 11, "covered" : 0,};
var merged_data = [];
