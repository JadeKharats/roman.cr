var data = {lines:[
{"lineNum":"    1","line":"# The top-level number type."},
{"lineNum":"    2","line":"struct Number"},
{"lineNum":"    3","line":"  include Comparable(Number)"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"  alias Primitive = Int::Primitive | Float::Primitive"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"  def self.zero : self"},
{"lineNum":"    8","line":"    new(0)"},
{"lineNum":"    9","line":"  end"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  # Returns self."},
{"lineNum":"   12","line":"  def +"},
{"lineNum":"   13","line":"    self"},
{"lineNum":"   14","line":"  end"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"  # Creates an `Array` of `self` with the given values, which will be casted"},
{"lineNum":"   17","line":"  # to this type with the `new` method (defined in each `Number` type)."},
{"lineNum":"   18","line":"  #"},
{"lineNum":"   19","line":"  # ```"},
{"lineNum":"   20","line":"  # floats = Float64[1, 2, 3, 4]"},
{"lineNum":"   21","line":"  # floats.class # => Array(Float64)"},
{"lineNum":"   22","line":"  #"},
{"lineNum":"   23","line":"  # ints = Int64[1, 2, 3]"},
{"lineNum":"   24","line":"  # ints.class # => Array(Int64)"},
{"lineNum":"   25","line":"  # ```"},
{"lineNum":"   26","line":"  macro [](*nums)"},
{"lineNum":"   27","line":"    Array({{@type}}).build({{nums.size}}) do |%buffer|"},
{"lineNum":"   28","line":"      {% for num, i in nums %}"},
{"lineNum":"   29","line":"        %buffer[{{i}}] = {{@type}}.new({{num}})"},
{"lineNum":"   30","line":"      {% end %}"},
{"lineNum":"   31","line":"      {{nums.size}}"},
{"lineNum":"   32","line":"    end"},
{"lineNum":"   33","line":"  end"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  # Creates a `Slice` of `self` with the given values, which will be casted"},
{"lineNum":"   36","line":"  # to this type with the `new` method (defined in each `Number` type)."},
{"lineNum":"   37","line":"  #"},
{"lineNum":"   38","line":"  # The slice is allocated on the heap."},
{"lineNum":"   39","line":"  #"},
{"lineNum":"   40","line":"  # ```"},
{"lineNum":"   41","line":"  # floats = Float64.slice(1, 2, 3, 4)"},
{"lineNum":"   42","line":"  # floats.class # => Slice(Float64)"},
{"lineNum":"   43","line":"  #"},
{"lineNum":"   44","line":"  # ints = Int64.slice(1, 2, 3)"},
{"lineNum":"   45","line":"  # ints.class # => Slice(Int64)"},
{"lineNum":"   46","line":"  # ```"},
{"lineNum":"   47","line":"  macro slice(*nums, read_only = false)"},
{"lineNum":"   48","line":"    %slice = Slice({{@type}}).new({{nums.size}}, read_only: {{read_only}})"},
{"lineNum":"   49","line":"    {% for num, i in nums %}"},
{"lineNum":"   50","line":"      %slice.to_unsafe[{{i}}] = {{@type}}.new({{num}})"},
{"lineNum":"   51","line":"    {% end %}"},
{"lineNum":"   52","line":"    %slice"},
{"lineNum":"   53","line":"  end"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"  # Creates a `StaticArray` of `self` with the given values, which will be casted"},
{"lineNum":"   56","line":"  # to this type with the `new` method (defined in each `Number` type)."},
{"lineNum":"   57","line":"  #"},
{"lineNum":"   58","line":"  # ```"},
{"lineNum":"   59","line":"  # floats = Float64.static_array(1, 2, 3, 4)"},
{"lineNum":"   60","line":"  # floats.class # => StaticArray(Float64, 4)"},
{"lineNum":"   61","line":"  #"},
{"lineNum":"   62","line":"  # ints = Int64.static_array(1, 2, 3)"},
{"lineNum":"   63","line":"  # ints.class # => StaticArray(Int64, 3)"},
{"lineNum":"   64","line":"  # ```"},
{"lineNum":"   65","line":"  macro static_array(*nums)"},
{"lineNum":"   66","line":"    %array = uninitialized StaticArray({{@type}}, {{nums.size}})"},
{"lineNum":"   67","line":"    {% for num, i in nums %}"},
{"lineNum":"   68","line":"      %array.to_unsafe[{{i}}] = {{@type}}.new({{num}})"},
{"lineNum":"   69","line":"    {% end %}"},
{"lineNum":"   70","line":"    %array"},
{"lineNum":"   71","line":"  end"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  # Invokes the given block with the sequence of numbers starting at `self`,"},
{"lineNum":"   74","line":"  # incremented by *by* on each call, and with an optional *to*."},
{"lineNum":"   75","line":"  #"},
{"lineNum":"   76","line":"  # ```"},
{"lineNum":"   77","line":"  # 3.step(to: 10, by: 2) do |n|"},
{"lineNum":"   78","line":"  #   puts n"},
{"lineNum":"   79","line":"  # end"},
{"lineNum":"   80","line":"  # ```"},
{"lineNum":"   81","line":"  #"},
{"lineNum":"   82","line":"  # Output:"},
{"lineNum":"   83","line":"  #"},
{"lineNum":"   84","line":"  # ```text"},
{"lineNum":"   85","line":"  # 3"},
{"lineNum":"   86","line":"  # 5"},
{"lineNum":"   87","line":"  # 7"},
{"lineNum":"   88","line":"  # 9"},
{"lineNum":"   89","line":"  # ```"},
{"lineNum":"   90","line":"  def step(*, to = nil, by = 1)"},
{"lineNum":"   91","line":"    x = self + (by - by)"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    if to"},
{"lineNum":"   94","line":"      if by > 0"},
{"lineNum":"   95","line":"        while x <= to"},
{"lineNum":"   96","line":"          yield x"},
{"lineNum":"   97","line":"          x += by"},
{"lineNum":"   98","line":"        end"},
{"lineNum":"   99","line":"      elsif by < 0"},
{"lineNum":"  100","line":"        while x >= to"},
{"lineNum":"  101","line":"          yield x"},
{"lineNum":"  102","line":"          x += by"},
{"lineNum":"  103","line":"        end"},
{"lineNum":"  104","line":"      end"},
{"lineNum":"  105","line":"    else"},
{"lineNum":"  106","line":"      while true"},
{"lineNum":"  107","line":"        yield x"},
{"lineNum":"  108","line":"        x += by"},
{"lineNum":"  109","line":"      end"},
{"lineNum":"  110","line":"    end"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    self"},
{"lineNum":"  113","line":"  end"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"  def step(*, to = nil, by = 1)"},
{"lineNum":"  116","line":"    StepIterator.new(self + (by - by), to, by)"},
{"lineNum":"  117","line":"  end"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"  # Returns the absolute value of this number."},
{"lineNum":"  120","line":"  #"},
{"lineNum":"  121","line":"  # ```"},
{"lineNum":"  122","line":"  # 123.abs  # => 123"},
{"lineNum":"  123","line":"  # -123.abs # => 123"},
{"lineNum":"  124","line":"  # ```"},
{"lineNum":"  125","line":"  def abs"},
{"lineNum":"  126","line":"    self < 0 ? -self : self"},
{"lineNum":"  127","line":"  end"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"  # Returns the square of `self` (`self * self`)."},
{"lineNum":"  130","line":"  #"},
{"lineNum":"  131","line":"  # ```"},
{"lineNum":"  132","line":"  # 4.abs2   # => 16"},
{"lineNum":"  133","line":"  # 1.5.abs2 # => 2.25"},
{"lineNum":"  134","line":"  # ```"},
{"lineNum":"  135","line":"  def abs2"},
{"lineNum":"  136","line":"    self * self"},
{"lineNum":"  137","line":"  end"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"  # Returns the sign of this number as an `Int32`."},
{"lineNum":"  140","line":"  # * `-1` if this number is negative"},
{"lineNum":"  141","line":"  # * `0` if this number is zero"},
{"lineNum":"  142","line":"  # * `1` if this number is positive"},
{"lineNum":"  143","line":"  #"},
{"lineNum":"  144","line":"  # ```"},
{"lineNum":"  145","line":"  # 123.sign # => 1"},
{"lineNum":"  146","line":"  # 0.sign   # => 0"},
{"lineNum":"  147","line":"  # -42.sign # => -1"},
{"lineNum":"  148","line":"  # ```"},
{"lineNum":"  149","line":"  def sign"},
{"lineNum":"  150","line":"    self < 0 ? -1 : (self == 0 ? 0 : 1)"},
{"lineNum":"  151","line":"  end"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"  # Returns a `Tuple` of two elements containing the quotient"},
{"lineNum":"  154","line":"  # and modulus obtained by dividing `self` by *number*."},
{"lineNum":"  155","line":"  #"},
{"lineNum":"  156","line":"  # ```"},
{"lineNum":"  157","line":"  # 11.divmod(3)  # => {3, 2}"},
{"lineNum":"  158","line":"  # 11.divmod(-3) # => {-4, -1}"},
{"lineNum":"  159","line":"  # ```"},
{"lineNum":"  160","line":"  def divmod(number)"},
{"lineNum":"  161","line":"    {(self / number).floor, self % number}"},
{"lineNum":"  162","line":"  end"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"  # Implements the comparison operator."},
{"lineNum":"  165","line":"  #"},
{"lineNum":"  166","line":"  # See also: `Object#<=>`."},
{"lineNum":"  167","line":"  def <=>(other)"},
{"lineNum":"  168","line":"    self > other ? 1 : (self < other ? -1 : 0)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  169","line":"  end"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"  # Keeps *digits* significants digits of this number in the given *base*."},
{"lineNum":"  172","line":"  #"},
{"lineNum":"  173","line":"  # ```"},
{"lineNum":"  174","line":"  # 1234.567.significant(1) # => 1000"},
{"lineNum":"  175","line":"  # 1234.567.significant(2) # => 1200"},
{"lineNum":"  176","line":"  # 1234.567.significant(3) # => 1230"},
{"lineNum":"  177","line":"  # 1234.567.significant(4) # => 1235"},
{"lineNum":"  178","line":"  # 1234.567.significant(5) # => 1234.6"},
{"lineNum":"  179","line":"  # 1234.567.significant(6) # => 1234.57"},
{"lineNum":"  180","line":"  # 1234.567.significant(7) # => 1234.567"},
{"lineNum":"  181","line":"  # 1234.567.significant(8) # => 1234.567"},
{"lineNum":"  182","line":"  #"},
{"lineNum":"  183","line":"  # 15.159.significant(1, base = 2) # => 16"},
{"lineNum":"  184","line":"  # ```"},
{"lineNum":"  185","line":"  def significant(digits, base = 10)"},
{"lineNum":"  186","line":"    if digits < 0"},
{"lineNum":"  187","line":"      raise ArgumentError.new \"digits should be non-negative\""},
{"lineNum":"  188","line":"    end"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    x = self.to_f"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    if x == 0"},
{"lineNum":"  193","line":"      return x"},
{"lineNum":"  194","line":"    end"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    y = if base == 10"},
{"lineNum":"  197","line":"          10 ** ((Math.log10(self.abs) - digits + 1).floor)"},
{"lineNum":"  198","line":"        elsif base == 2"},
{"lineNum":"  199","line":"          2 ** ((Math.log2(self.abs) - digits + 1).floor)"},
{"lineNum":"  200","line":"        else"},
{"lineNum":"  201","line":"          base ** (((Math.log2(self.abs)) / (Math.log2(base)) - digits + 1).floor)"},
{"lineNum":"  202","line":"        end"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    self.class.new((x / y).round * y)"},
{"lineNum":"  205","line":"  end"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"  # Rounds this number to a given precision in decimal *digits*."},
{"lineNum":"  208","line":"  #"},
{"lineNum":"  209","line":"  # ```"},
{"lineNum":"  210","line":"  # -1763.116.round(2) # => -1763.12"},
{"lineNum":"  211","line":"  # ```"},
{"lineNum":"  212","line":"  def round(digits, base = 10)"},
{"lineNum":"  213","line":"    x = self.to_f"},
{"lineNum":"  214","line":"    if digits < 0"},
{"lineNum":"  215","line":"      y = base ** (-digits)"},
{"lineNum":"  216","line":"      self.class.new((x / y).round * y)"},
{"lineNum":"  217","line":"    else"},
{"lineNum":"  218","line":"      y = base ** digits","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  219","line":"      self.class.new((x * y).round / y)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  220","line":"    end"},
{"lineNum":"  221","line":"  end"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"  # Clamps a value within *range*."},
{"lineNum":"  224","line":"  #"},
{"lineNum":"  225","line":"  # ```"},
{"lineNum":"  226","line":"  # 5.clamp(10..100)   # => 10"},
{"lineNum":"  227","line":"  # 50.clamp(10..100)  # => 50"},
{"lineNum":"  228","line":"  # 500.clamp(10..100) # => 100"},
{"lineNum":"  229","line":"  # ```"},
{"lineNum":"  230","line":"  def clamp(range : Range)"},
{"lineNum":"  231","line":"    raise ArgumentError.new(\"Can\'t clamp an exclusive range\") if range.exclusive?"},
{"lineNum":"  232","line":"    clamp range.begin, range.end"},
{"lineNum":"  233","line":"  end"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"  # Clamps a value between *min* and *max*."},
{"lineNum":"  236","line":"  #"},
{"lineNum":"  237","line":"  # ```"},
{"lineNum":"  238","line":"  # 5.clamp(10, 100)   # => 10"},
{"lineNum":"  239","line":"  # 50.clamp(10, 100)  # => 50"},
{"lineNum":"  240","line":"  # 500.clamp(10, 100) # => 100"},
{"lineNum":"  241","line":"  # ```"},
{"lineNum":"  242","line":"  def clamp(min, max)"},
{"lineNum":"  243","line":"    return max if self > max"},
{"lineNum":"  244","line":"    return min if self < min"},
{"lineNum":"  245","line":"    self"},
{"lineNum":"  246","line":"  end"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"  # Returns `true` if value is equal to zero."},
{"lineNum":"  249","line":"  #"},
{"lineNum":"  250","line":"  # ```"},
{"lineNum":"  251","line":"  # 0.zero? # => true"},
{"lineNum":"  252","line":"  # 5.zero? # => false"},
{"lineNum":"  253","line":"  # ```"},
{"lineNum":"  254","line":"  def zero? : Bool"},
{"lineNum":"  255","line":"    self == 0"},
{"lineNum":"  256","line":"  end"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"  private class StepIterator(T, L, B)"},
{"lineNum":"  259","line":"    include Iterator(T)"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    @n : T"},
{"lineNum":"  262","line":"    @to : L"},
{"lineNum":"  263","line":"    @by : B"},
{"lineNum":"  264","line":"    @original : T"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"    def initialize(@n : T, @to : L, @by : B)"},
{"lineNum":"  267","line":"      @original = @n"},
{"lineNum":"  268","line":"    end"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    def next"},
{"lineNum":"  271","line":"      if to = @to"},
{"lineNum":"  272","line":"        if @by > 0"},
{"lineNum":"  273","line":"          return stop if @n > to"},
{"lineNum":"  274","line":"        elsif @by < 0"},
{"lineNum":"  275","line":"          return stop if @n < to"},
{"lineNum":"  276","line":"        end"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"        value = @n"},
{"lineNum":"  279","line":"        @n += @by"},
{"lineNum":"  280","line":"        value"},
{"lineNum":"  281","line":"      else"},
{"lineNum":"  282","line":"        value = @n"},
{"lineNum":"  283","line":"        @n += @by"},
{"lineNum":"  284","line":"        value"},
{"lineNum":"  285","line":"      end"},
{"lineNum":"  286","line":"    end"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"    def rewind"},
{"lineNum":"  289","line":"      @n = @original"},
{"lineNum":"  290","line":"      self"},
{"lineNum":"  291","line":"    end"},
{"lineNum":"  292","line":"  end"},
{"lineNum":"  293","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
