var data = {lines:[
{"lineNum":"    1","line":"# A `Range` represents an interval: a set of values with a beginning and an end."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Ranges may be constructed using the usual `new` method or with literals:"},
{"lineNum":"    4","line":"#"},
{"lineNum":"    5","line":"# ```"},
{"lineNum":"    6","line":"# x..y  # an inclusive range, in mathematics: [x, y]"},
{"lineNum":"    7","line":"# x...y # an exclusive range, in mathematics: [x, y)"},
{"lineNum":"    8","line":"# ```"},
{"lineNum":"    9","line":"#"},
{"lineNum":"   10","line":"# An easy way to remember which one is inclusive and which one is exclusive it"},
{"lineNum":"   11","line":"# to think of the extra dot as if it pushes *y* further away, thus leaving it outside of the range."},
{"lineNum":"   12","line":"#"},
{"lineNum":"   13","line":"# Ranges typically involve integers, but can be created using arbitrary objects"},
{"lineNum":"   14","line":"# as long as they define `succ` (or `pred` for `reverse_each`), to get the"},
{"lineNum":"   15","line":"# next element in the range, and `<` and `==`, to know when the range reached the end:"},
{"lineNum":"   16","line":"#"},
{"lineNum":"   17","line":"# ```"},
{"lineNum":"   18","line":"# # Represents a string of \'x\'s."},
{"lineNum":"   19","line":"# struct Xs"},
{"lineNum":"   20","line":"#   include Comparable(Xs)"},
{"lineNum":"   21","line":"#"},
{"lineNum":"   22","line":"#   getter size"},
{"lineNum":"   23","line":"#"},
{"lineNum":"   24","line":"#   def initialize(@size : Int32)"},
{"lineNum":"   25","line":"#   end"},
{"lineNum":"   26","line":"#"},
{"lineNum":"   27","line":"#   def succ"},
{"lineNum":"   28","line":"#     Xs.new(@size + 1)"},
{"lineNum":"   29","line":"#   end"},
{"lineNum":"   30","line":"#"},
{"lineNum":"   31","line":"#   def <=>(other)"},
{"lineNum":"   32","line":"#     @size <=> other.size"},
{"lineNum":"   33","line":"#   end"},
{"lineNum":"   34","line":"#"},
{"lineNum":"   35","line":"#   def inspect(io)"},
{"lineNum":"   36","line":"#     @size.times { io << \'x\' }"},
{"lineNum":"   37","line":"#   end"},
{"lineNum":"   38","line":"#"},
{"lineNum":"   39","line":"#   def to_s(io)"},
{"lineNum":"   40","line":"#     io << @size << \' \'"},
{"lineNum":"   41","line":"#     inspect(io)"},
{"lineNum":"   42","line":"#   end"},
{"lineNum":"   43","line":"# end"},
{"lineNum":"   44","line":"# ```"},
{"lineNum":"   45","line":"#"},
{"lineNum":"   46","line":"# An example of using `Xs` to construct a range:"},
{"lineNum":"   47","line":"#"},
{"lineNum":"   48","line":"# ```"},
{"lineNum":"   49","line":"# r = Xs.new(3)..Xs.new(6)"},
{"lineNum":"   50","line":"# r.to_s                 # => \"xxx..xxxxxx\""},
{"lineNum":"   51","line":"# r.to_a                 # => [Xs.new(3), Xs.new(4), Xs.new(5), Xs.new(6)]"},
{"lineNum":"   52","line":"# r.includes?(Xs.new(5)) # => true"},
{"lineNum":"   53","line":"# ```"},
{"lineNum":"   54","line":"struct Range(B, E)"},
{"lineNum":"   55","line":"  include Enumerable(B)"},
{"lineNum":"   56","line":"  include Iterable(B)"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"  # Returns the object that defines the beginning of this range."},
{"lineNum":"   59","line":"  #"},
{"lineNum":"   60","line":"  # ```"},
{"lineNum":"   61","line":"  # (1..10).begin  # => 1"},
{"lineNum":"   62","line":"  # (1...10).begin # => 1"},
{"lineNum":"   63","line":"  # ```"},
{"lineNum":"   64","line":"  getter begin : B"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"  # Returns the object that defines the end of the range."},
{"lineNum":"   67","line":"  #"},
{"lineNum":"   68","line":"  # ```"},
{"lineNum":"   69","line":"  # (1..10).end  # => 10"},
{"lineNum":"   70","line":"  # (1...10).end # => 10"},
{"lineNum":"   71","line":"  # ```"},
{"lineNum":"   72","line":"  getter end : E"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"  # Returns `true` if the range is exclusive."},
{"lineNum":"   75","line":"  # Returns `false` otherwise (default)."},
{"lineNum":"   76","line":"  getter? exclusive : Bool"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"  # Constructs a `Range` using the given beginning and end."},
{"lineNum":"   79","line":"  #"},
{"lineNum":"   80","line":"  # ```"},
{"lineNum":"   81","line":"  # Range.new(1, 10)                  # => 1..10"},
{"lineNum":"   82","line":"  # Range.new(1, 10, exclusive: true) # => 1...10"},
{"lineNum":"   83","line":"  # ```"},
{"lineNum":"   84","line":"  def initialize(@begin : B, @end : E, @exclusive : Bool = false)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   85","line":"  end"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"  # Returns an `Iterator` that cycles over the values of this range."},
{"lineNum":"   88","line":"  #"},
{"lineNum":"   89","line":"  # ```"},
{"lineNum":"   90","line":"  # (1..3).cycle.first(5).to_a # => [1, 2, 3, 1, 2]"},
{"lineNum":"   91","line":"  # ```"},
{"lineNum":"   92","line":"  def cycle"},
{"lineNum":"   93","line":"    each.cycle"},
{"lineNum":"   94","line":"  end"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"  # Iterates over the elements of this range, passing each in turn to the block."},
{"lineNum":"   97","line":"  #"},
{"lineNum":"   98","line":"  # ```"},
{"lineNum":"   99","line":"  # (10..15).each { |n| print n, \' \' }"},
{"lineNum":"  100","line":"  # # prints: 10 11 12 13 14 15"},
{"lineNum":"  101","line":"  # ```"},
{"lineNum":"  102","line":"  def each : Nil"},
{"lineNum":"  103","line":"    current = @begin"},
{"lineNum":"  104","line":"    while current < @end"},
{"lineNum":"  105","line":"      yield current"},
{"lineNum":"  106","line":"      current = current.succ"},
{"lineNum":"  107","line":"    end"},
{"lineNum":"  108","line":"    yield current if !@exclusive && current == @end"},
{"lineNum":"  109","line":"  end"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"  # Returns an `Iterator` over the elements of this range."},
{"lineNum":"  112","line":"  #"},
{"lineNum":"  113","line":"  # ```"},
{"lineNum":"  114","line":"  # (1..3).each.skip(1).to_a # => [2, 3]"},
{"lineNum":"  115","line":"  # ```"},
{"lineNum":"  116","line":"  def each"},
{"lineNum":"  117","line":"    ItemIterator.new(self)"},
{"lineNum":"  118","line":"  end"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"  # Iterates over the elements of this range in reverse order,"},
{"lineNum":"  121","line":"  # passing each in turn to the block."},
{"lineNum":"  122","line":"  #"},
{"lineNum":"  123","line":"  # ```"},
{"lineNum":"  124","line":"  # (10...15).reverse_each { |n| print n, \' \' }"},
{"lineNum":"  125","line":"  # # prints: 14 13 12 11 10"},
{"lineNum":"  126","line":"  # ```"},
{"lineNum":"  127","line":"  def reverse_each : Nil"},
{"lineNum":"  128","line":"    yield @end if !@exclusive && !(@end < @begin)"},
{"lineNum":"  129","line":"    current = @end"},
{"lineNum":"  130","line":"    while @begin < current"},
{"lineNum":"  131","line":"      current = current.pred"},
{"lineNum":"  132","line":"      yield current"},
{"lineNum":"  133","line":"    end"},
{"lineNum":"  134","line":"  end"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"  # Returns a reverse `Iterator` over the elements of this range."},
{"lineNum":"  137","line":"  #"},
{"lineNum":"  138","line":"  # ```"},
{"lineNum":"  139","line":"  # (1..3).reverse_each.skip(1).to_a # => [2, 1]"},
{"lineNum":"  140","line":"  # ```"},
{"lineNum":"  141","line":"  def reverse_each"},
{"lineNum":"  142","line":"    ReverseIterator.new(self)"},
{"lineNum":"  143","line":"  end"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"  # Iterates over this range, passing each nth element to the block."},
{"lineNum":"  146","line":"  #"},
{"lineNum":"  147","line":"  # ```"},
{"lineNum":"  148","line":"  # range = Xs.new(1)..Xs.new(10)"},
{"lineNum":"  149","line":"  # range.step(2) { |x| puts x }"},
{"lineNum":"  150","line":"  # puts"},
{"lineNum":"  151","line":"  # range.step(3) { |x| puts x }"},
{"lineNum":"  152","line":"  # ```"},
{"lineNum":"  153","line":"  #"},
{"lineNum":"  154","line":"  # Produces:"},
{"lineNum":"  155","line":"  #"},
{"lineNum":"  156","line":"  # ```text"},
{"lineNum":"  157","line":"  # 1 x"},
{"lineNum":"  158","line":"  # 3 xxx"},
{"lineNum":"  159","line":"  # 5 xxxxx"},
{"lineNum":"  160","line":"  # 7 xxxxxxx"},
{"lineNum":"  161","line":"  # 9 xxxxxxxxx"},
{"lineNum":"  162","line":"  #"},
{"lineNum":"  163","line":"  # 1 x"},
{"lineNum":"  164","line":"  # 4 xxxx"},
{"lineNum":"  165","line":"  # 7 xxxxxxx"},
{"lineNum":"  166","line":"  # 10 xxxxxxxxxx"},
{"lineNum":"  167","line":"  # ```"},
{"lineNum":"  168","line":"  #"},
{"lineNum":"  169","line":"  # See `Range`\'s overview for the definition of `Xs`."},
{"lineNum":"  170","line":"  def step(by = 1)"},
{"lineNum":"  171","line":"    current = @begin"},
{"lineNum":"  172","line":"    while current < @end"},
{"lineNum":"  173","line":"      yield current"},
{"lineNum":"  174","line":"      by.times { current = current.succ }"},
{"lineNum":"  175","line":"    end"},
{"lineNum":"  176","line":"    yield current if !@exclusive && current == @end"},
{"lineNum":"  177","line":"    self"},
{"lineNum":"  178","line":"  end"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"  # Returns an `Iterator` that returns each nth element in this range."},
{"lineNum":"  181","line":"  #"},
{"lineNum":"  182","line":"  # ```"},
{"lineNum":"  183","line":"  # (1..10).step(3).skip(1).to_a # => [4, 7, 10]"},
{"lineNum":"  184","line":"  # ```"},
{"lineNum":"  185","line":"  def step(by = 1)"},
{"lineNum":"  186","line":"    StepIterator(self, B, typeof(by)).new(self, by)"},
{"lineNum":"  187","line":"  end"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  # Returns `true` if this range excludes the *end* element."},
{"lineNum":"  190","line":"  #"},
{"lineNum":"  191","line":"  # ```"},
{"lineNum":"  192","line":"  # (1..10).excludes_end?  # => false"},
{"lineNum":"  193","line":"  # (1...10).excludes_end? # => true"},
{"lineNum":"  194","line":"  # ```"},
{"lineNum":"  195","line":"  def excludes_end?"},
{"lineNum":"  196","line":"    @exclusive"},
{"lineNum":"  197","line":"  end"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"  # Returns `true` if this range includes the given *value*."},
{"lineNum":"  200","line":"  #"},
{"lineNum":"  201","line":"  # ```"},
{"lineNum":"  202","line":"  # (1..10).includes?(4)  # => true"},
{"lineNum":"  203","line":"  # (1..10).includes?(10) # => true"},
{"lineNum":"  204","line":"  # (1..10).includes?(11) # => false"},
{"lineNum":"  205","line":"  #"},
{"lineNum":"  206","line":"  # (1...10).includes?(9)  # => true"},
{"lineNum":"  207","line":"  # (1...10).includes?(10) # => false"},
{"lineNum":"  208","line":"  # ```"},
{"lineNum":"  209","line":"  def includes?(value)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"    if @exclusive","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  211","line":"      @begin <= value < @end"},
{"lineNum":"  212","line":"    else"},
{"lineNum":"  213","line":"      @begin <= value <= @end"},
{"lineNum":"  214","line":"    end"},
{"lineNum":"  215","line":"  end"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"  # Same as `includes?`."},
{"lineNum":"  218","line":"  def covers?(value)"},
{"lineNum":"  219","line":"    includes?(value)"},
{"lineNum":"  220","line":"  end"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"  # Same as `includes?`, useful for the `case` expression."},
{"lineNum":"  223","line":"  #"},
{"lineNum":"  224","line":"  # ```"},
{"lineNum":"  225","line":"  # case 79"},
{"lineNum":"  226","line":"  # when 1..50   then puts \"low\""},
{"lineNum":"  227","line":"  # when 51..75  then puts \"medium\""},
{"lineNum":"  228","line":"  # when 76..100 then puts \"high\""},
{"lineNum":"  229","line":"  # end"},
{"lineNum":"  230","line":"  # ```"},
{"lineNum":"  231","line":"  #"},
{"lineNum":"  232","line":"  # Produces:"},
{"lineNum":"  233","line":"  #"},
{"lineNum":"  234","line":"  # ```text"},
{"lineNum":"  235","line":"  # high"},
{"lineNum":"  236","line":"  # ```"},
{"lineNum":"  237","line":"  #"},
{"lineNum":"  238","line":"  # See also: `Object#===`."},
{"lineNum":"  239","line":"  def ===(value)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"    includes?(value)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  241","line":"  end"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"  # :nodoc:"},
{"lineNum":"  244","line":"  def to_s(io : IO)"},
{"lineNum":"  245","line":"    @begin.inspect(io)"},
{"lineNum":"  246","line":"    io << (@exclusive ? \"...\" : \"..\")"},
{"lineNum":"  247","line":"    @end.inspect(io)"},
{"lineNum":"  248","line":"  end"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"  # :nodoc:"},
{"lineNum":"  251","line":"  def inspect(io)"},
{"lineNum":"  252","line":"    to_s(io)"},
{"lineNum":"  253","line":"  end"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"  # If `self` is a `Int` range, it provides O(1) implementation,"},
{"lineNum":"  256","line":"  # otherwise it is same as `Enumerable#sum`."},
{"lineNum":"  257","line":"  def sum(initial)"},
{"lineNum":"  258","line":"    b = self.begin"},
{"lineNum":"  259","line":"    e = self.end"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    if b.is_a?(Int) && e.is_a?(Int)"},
{"lineNum":"  262","line":"      e -= 1 if @exclusive"},
{"lineNum":"  263","line":"      n = e - b + 1"},
{"lineNum":"  264","line":"      if n >= 0"},
{"lineNum":"  265","line":"        initial + n * (b + e) / 2"},
{"lineNum":"  266","line":"      else"},
{"lineNum":"  267","line":"        initial"},
{"lineNum":"  268","line":"      end"},
{"lineNum":"  269","line":"    else"},
{"lineNum":"  270","line":"      super"},
{"lineNum":"  271","line":"    end"},
{"lineNum":"  272","line":"  end"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"  # Returns a new `Range` with `begin` and `end` cloned."},
{"lineNum":"  275","line":"  def clone"},
{"lineNum":"  276","line":"    Range.new(@begin.clone, @end.clone, @exclusive)"},
{"lineNum":"  277","line":"  end"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"  # :nodoc:"},
{"lineNum":"  280","line":"  def map(&block : B -> U) forall U"},
{"lineNum":"  281","line":"    b = self.begin"},
{"lineNum":"  282","line":"    e = self.end"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    # Optimized implementation for int range"},
{"lineNum":"  285","line":"    if b.is_a?(Int) && e.is_a?(Int)"},
{"lineNum":"  286","line":"      e -= 1 if @exclusive"},
{"lineNum":"  287","line":"      n = e - b + 1"},
{"lineNum":"  288","line":"      n = 0 if n < 0"},
{"lineNum":"  289","line":"      Array(U).new(n) { |i| yield b + i }"},
{"lineNum":"  290","line":"    else"},
{"lineNum":"  291","line":"      super { |i| yield i }"},
{"lineNum":"  292","line":"    end"},
{"lineNum":"  293","line":"  end"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"  # :nodoc:"},
{"lineNum":"  296","line":"  def size"},
{"lineNum":"  297","line":"    b = self.begin"},
{"lineNum":"  298","line":"    e = self.end"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    # Optimized implementation for int range"},
{"lineNum":"  301","line":"    if b.is_a?(Int) && e.is_a?(Int)"},
{"lineNum":"  302","line":"      e -= 1 if @exclusive"},
{"lineNum":"  303","line":"      n = e - b + 1"},
{"lineNum":"  304","line":"      n < 0 ? 0 : n"},
{"lineNum":"  305","line":"    else"},
{"lineNum":"  306","line":"      super"},
{"lineNum":"  307","line":"    end"},
{"lineNum":"  308","line":"  end"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"  private class ItemIterator(B, E)"},
{"lineNum":"  311","line":"    include Iterator(B)"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    @range : Range(B, E)"},
{"lineNum":"  314","line":"    @current : B"},
{"lineNum":"  315","line":"    @reached_end : Bool"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"    def initialize(@range : Range(B, E), @current = range.begin, @reached_end = false)"},
{"lineNum":"  318","line":"    end"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"    def next"},
{"lineNum":"  321","line":"      return stop if @reached_end"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"      if @current < @range.end"},
{"lineNum":"  324","line":"        value = @current"},
{"lineNum":"  325","line":"        @current = @current.succ"},
{"lineNum":"  326","line":"        value"},
{"lineNum":"  327","line":"      else"},
{"lineNum":"  328","line":"        @reached_end = true"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"        if !@range.excludes_end? && @current == @range.end"},
{"lineNum":"  331","line":"          @current"},
{"lineNum":"  332","line":"        else"},
{"lineNum":"  333","line":"          stop"},
{"lineNum":"  334","line":"        end"},
{"lineNum":"  335","line":"      end"},
{"lineNum":"  336","line":"    end"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    def rewind"},
{"lineNum":"  339","line":"      @current = @range.begin"},
{"lineNum":"  340","line":"      @reached_end = false"},
{"lineNum":"  341","line":"      self"},
{"lineNum":"  342","line":"    end"},
{"lineNum":"  343","line":"  end"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"  private class ReverseIterator(B, E)"},
{"lineNum":"  346","line":"    include Iterator(E)"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"    @range : Range(B, E)"},
{"lineNum":"  349","line":"    @current : E"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"    def initialize(@range : Range(B, E), @current = range.end)"},
{"lineNum":"  352","line":"      rewind"},
{"lineNum":"  353","line":"    end"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    def next"},
{"lineNum":"  356","line":"      return stop if @current <= @range.begin"},
{"lineNum":"  357","line":"      return @current = @current.pred"},
{"lineNum":"  358","line":"    end"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"    def rewind"},
{"lineNum":"  361","line":"      if @range.excludes_end?"},
{"lineNum":"  362","line":"        @current = @range.end"},
{"lineNum":"  363","line":"      else"},
{"lineNum":"  364","line":"        @current = @range.end.succ"},
{"lineNum":"  365","line":"      end"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"      self"},
{"lineNum":"  368","line":"    end"},
{"lineNum":"  369","line":"  end"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"  private class StepIterator(R, B, N)"},
{"lineNum":"  372","line":"    include Iterator(B)"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"    @range : R"},
{"lineNum":"  375","line":"    @step : N"},
{"lineNum":"  376","line":"    @current : B"},
{"lineNum":"  377","line":"    @reached_end : Bool"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    def initialize(@range, @step, @current = range.begin, @reached_end = false)"},
{"lineNum":"  380","line":"    end"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"    def next"},
{"lineNum":"  383","line":"      return stop if @reached_end"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"      if @current < @range.end"},
{"lineNum":"  386","line":"        value = @current"},
{"lineNum":"  387","line":"        @step.times { @current = @current.succ }"},
{"lineNum":"  388","line":"        value"},
{"lineNum":"  389","line":"      else"},
{"lineNum":"  390","line":"        @reached_end = true"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"        if !@range.excludes_end? && @current == @range.end"},
{"lineNum":"  393","line":"          @current"},
{"lineNum":"  394","line":"        else"},
{"lineNum":"  395","line":"          stop"},
{"lineNum":"  396","line":"        end"},
{"lineNum":"  397","line":"      end"},
{"lineNum":"  398","line":"    end"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"    def rewind"},
{"lineNum":"  401","line":"      @current = @range.begin"},
{"lineNum":"  402","line":"      @reached_end = false"},
{"lineNum":"  403","line":"      self"},
{"lineNum":"  404","line":"    end"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"    def sum(initial)"},
{"lineNum":"  407","line":"      super if @reached_end"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"      b = @current"},
{"lineNum":"  410","line":"      e = @range.end"},
{"lineNum":"  411","line":"      d = @step"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"      if b.is_a?(Int) && e.is_a?(Int) && d.is_a?(Int)"},
{"lineNum":"  414","line":"        e -= 1 if @range.excludes_end?"},
{"lineNum":"  415","line":"        n = (e - b) / d + 1"},
{"lineNum":"  416","line":"        if n >= 0"},
{"lineNum":"  417","line":"          e = b + (n - 1) * d"},
{"lineNum":"  418","line":"          initial + n * (b + e) / 2"},
{"lineNum":"  419","line":"        else"},
{"lineNum":"  420","line":"          initial"},
{"lineNum":"  421","line":"        end"},
{"lineNum":"  422","line":"      else"},
{"lineNum":"  423","line":"        super"},
{"lineNum":"  424","line":"      end"},
{"lineNum":"  425","line":"    end"},
{"lineNum":"  426","line":"  end"},
{"lineNum":"  427","line":"end"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"require \"./range/*\""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:20:30", "instrumented" : 5, "covered" : 0,};
var merged_data = [];
