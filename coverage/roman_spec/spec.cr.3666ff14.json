var data = {lines:[
{"lineNum":"    1","line":"require \"./spec/dsl\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# Crystal\'s built-in testing library. It provides a structure for writing executable examples"},
{"lineNum":"    4","line":"# of how your code should behave. A domain specific language allows you to write them in a way similar to natural language."},
{"lineNum":"    5","line":"#"},
{"lineNum":"    6","line":"# The Crystal compiler has a `spec` command with tools to constrain which examples get run and tailor the output."},
{"lineNum":"    7","line":"#"},
{"lineNum":"    8","line":"# A basic spec looks something like this:"},
{"lineNum":"    9","line":"#"},
{"lineNum":"   10","line":"# ```"},
{"lineNum":"   11","line":"# require \"spec\""},
{"lineNum":"   12","line":"#"},
{"lineNum":"   13","line":"# describe Array do"},
{"lineNum":"   14","line":"#   describe \"#size\" do"},
{"lineNum":"   15","line":"#     it \"correctly reports the number of elements in the Array\" do"},
{"lineNum":"   16","line":"#       [1, 2, 3].size.should eq 3"},
{"lineNum":"   17","line":"#     end"},
{"lineNum":"   18","line":"#   end"},
{"lineNum":"   19","line":"#"},
{"lineNum":"   20","line":"#   describe \"#empty?\" do"},
{"lineNum":"   21","line":"#     it \"is empty when no elements are in the array\" do"},
{"lineNum":"   22","line":"#       ([] of Int32).empty?.should be_true"},
{"lineNum":"   23","line":"#     end"},
{"lineNum":"   24","line":"#"},
{"lineNum":"   25","line":"#     it \"is not empty if there are elements in the array\" do"},
{"lineNum":"   26","line":"#       [1].empty?.should be_false"},
{"lineNum":"   27","line":"#     end"},
{"lineNum":"   28","line":"#   end"},
{"lineNum":"   29","line":"#"},
{"lineNum":"   30","line":"#   # lots more specs"},
{"lineNum":"   31","line":"#"},
{"lineNum":"   32","line":"# end"},
{"lineNum":"   33","line":"# ```"},
{"lineNum":"   34","line":"#"},
{"lineNum":"   35","line":"# Test files are structured by use of the `describe` or `context` methods."},
{"lineNum":"   36","line":"# Typically a top level `describe` defines the `outer` unit (such as a class)"},
{"lineNum":"   37","line":"# that is to be tested by the spec. Further `describe` calls can be nested within"},
{"lineNum":"   38","line":"# the outer unit to specify smaller units under test (such as individual methods)."},
{"lineNum":"   39","line":"# `describe` can also be used to set up a certain context - think empty `Array` versus"},
{"lineNum":"   40","line":"# `Array` with elements. The `context` method behaves just like the `describe` method"},
{"lineNum":"   41","line":"# and may be used instead, to emphasize context to the reader."},
{"lineNum":"   42","line":"#"},
{"lineNum":"   43","line":"# Within a `describe` block, concrete test cases are defined with `it` . A"},
{"lineNum":"   44","line":"# descriptive string is supplied to `it` describing what the test case"},
{"lineNum":"   45","line":"# tests specifically."},
{"lineNum":"   46","line":"#"},
{"lineNum":"   47","line":"# Specs then use the `should` method to verify that the expected value is"},
{"lineNum":"   48","line":"# returned. See the example above for details."},
{"lineNum":"   49","line":"#"},
{"lineNum":"   50","line":"# By convention, specs live in the `spec` directory of a project. You can compile"},
{"lineNum":"   51","line":"# and run the specs of a project by running `crystal spec`."},
{"lineNum":"   52","line":"#"},
{"lineNum":"   53","line":"# ```shell"},
{"lineNum":"   54","line":"# # Run  all specs in files matching spec/**/*_spec.cr"},
{"lineNum":"   55","line":"# crystal spec"},
{"lineNum":"   56","line":"#"},
{"lineNum":"   57","line":"# # Run all specs in files matching spec/my/test/**/*_spec.cr"},
{"lineNum":"   58","line":"# crystal spec spec/my/test/"},
{"lineNum":"   59","line":"#"},
{"lineNum":"   60","line":"# # Run all specs in spec/my/test/file_spec.cr"},
{"lineNum":"   61","line":"# crystal spec spec/my/test/file_spec.cr"},
{"lineNum":"   62","line":"#"},
{"lineNum":"   63","line":"# # Run the spec or group defined in line 14 of spec/my/test/file_spec.cr"},
{"lineNum":"   64","line":"# crystal spec spec/my/test/file_spec.cr:14"},
{"lineNum":"   65","line":"# ```"},
{"lineNum":"   66","line":"module Spec"},
{"lineNum":"   67","line":"end"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"OptionParser.parse! do |opts|","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   70","line":"  opts.banner = \"crystal spec runner\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"  opts.on(\"-e \", \"--example STRING\", \"run examples whose full nested names include STRING\") do |pattern|","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"    Spec.pattern = pattern"},
{"lineNum":"   73","line":"  end"},
{"lineNum":"   74","line":"  opts.on(\"-l \", \"--line LINE\", \"run examples whose line matches LINE\") do |line|","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"    Spec.line = line.to_i"},
{"lineNum":"   76","line":"  end"},
{"lineNum":"   77","line":"  opts.on(\"-p\", \"--profile\", \"Print the 10 slowest specs\") do","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"    Spec.slowest = 10"},
{"lineNum":"   79","line":"  end"},
{"lineNum":"   80","line":"  opts.on(\"--fail-fast\", \"abort the run on first failure\") do","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"    Spec.fail_fast = true"},
{"lineNum":"   82","line":"  end"},
{"lineNum":"   83","line":"  opts.on(\"--location file:line\", \"run example at line \'line\' in file \'file\', multiple allowed\") do |location|","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"    if location =~ /\\A(.+?)\\:(\\d+)\\Z/"},
{"lineNum":"   85","line":"      Spec.add_location $1, $2.to_i"},
{"lineNum":"   86","line":"    else"},
{"lineNum":"   87","line":"      STDERR.puts \"location #{location} must be file:line\""},
{"lineNum":"   88","line":"      exit 1"},
{"lineNum":"   89","line":"    end"},
{"lineNum":"   90","line":"  end"},
{"lineNum":"   91","line":"  opts.on(\"--junit_output OUTPUT_DIR\", \"generate JUnit XML output\") do |output_dir|","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"    junit_formatter = Spec::JUnitFormatter.file(output_dir)"},
{"lineNum":"   93","line":"    Spec.add_formatter(junit_formatter)"},
{"lineNum":"   94","line":"  end"},
{"lineNum":"   95","line":"  opts.on(\"--help\", \"show this help\") do |pattern|","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"    puts opts"},
{"lineNum":"   97","line":"    exit"},
{"lineNum":"   98","line":"  end"},
{"lineNum":"   99","line":"  opts.on(\"-v\", \"--verbose\", \"verbose output\") do","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"    Spec.override_default_formatter(Spec::VerboseFormatter.new)"},
{"lineNum":"  101","line":"  end"},
{"lineNum":"  102","line":"  opts.on(\"--no-color\", \"Disable colored output\") do","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"    Spec.use_colors = false"},
{"lineNum":"  104","line":"  end"},
{"lineNum":"  105","line":"  opts.unknown_args do |args|"},
{"lineNum":"  106","line":"  end"},
{"lineNum":"  107","line":"end"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"unless ARGV.empty?","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  110","line":"  STDERR.puts \"Error: unknown argument \'#{ARGV.first}\'\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  111","line":"  exit 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"end"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"if ENV[\"SPEC_VERBOSE\"]? == \"1\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"  Spec.override_default_formatter(Spec::VerboseFormatter.new)"},
{"lineNum":"  116","line":"end"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"Signal::INT.trap { Spec.abort! }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"Spec.run"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 16, "covered" : 0,};
var merged_data = [];
