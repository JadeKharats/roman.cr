var data = {lines:[
{"lineNum":"    1","line":"require \"./syscall\""},
{"lineNum":"    2","line":"require \"c/fcntl\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"# An `IO` over a file descriptor."},
{"lineNum":"    5","line":"class IO::FileDescriptor < IO"},
{"lineNum":"    6","line":"  include IO::Buffered"},
{"lineNum":"    7","line":"  include IO::Syscall"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"  @read_event : Event::Event?"},
{"lineNum":"   10","line":"  @write_event : Event::Event?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"  def initialize(@fd : Int32, blocking = false)","class":"lineNoCov","hits":"0","possible_hits":"55",},
{"lineNum":"   13","line":"    @closed = false","class":"lineNoCov","hits":"0","possible_hits":"55",},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"    unless blocking"},
{"lineNum":"   16","line":"      self.blocking = false","class":"lineNoCov","hits":"0","possible_hits":"54",},
{"lineNum":"   17","line":"    end"},
{"lineNum":"   18","line":"  end"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"  def blocking"},
{"lineNum":"   21","line":"    fcntl(LibC::F_GETFL) & LibC::O_NONBLOCK == 0"},
{"lineNum":"   22","line":"  end"},
{"lineNum":"   23","line":"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   24","line":"  def blocking=(value)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   25","line":"    current_flags = fcntl(LibC::F_GETFL)"},
{"lineNum":"   26","line":"    new_flags = current_flags"},
{"lineNum":"   27","line":"    if value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   28","line":"      new_flags &= ~LibC::O_NONBLOCK","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"    else"},
{"lineNum":"   30","line":"      new_flags |= LibC::O_NONBLOCK"},
{"lineNum":"   31","line":"    end"},
{"lineNum":"   32","line":"    fcntl(LibC::F_SETFL, new_flags) unless new_flags == current_flags","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   33","line":"  end"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  def close_on_exec?"},
{"lineNum":"   36","line":"    flags = fcntl(LibC::F_GETFD)"},
{"lineNum":"   37","line":"    (flags & LibC::FD_CLOEXEC) == LibC::FD_CLOEXEC"},
{"lineNum":"   38","line":"  end"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"  def close_on_exec=(arg : Bool)"},
{"lineNum":"   41","line":"    fcntl(LibC::F_SETFD, arg ? LibC::FD_CLOEXEC : 0)"},
{"lineNum":"   42","line":"    arg"},
{"lineNum":"   43","line":"  end"},
{"lineNum":"   44","line":"","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   45","line":"  def self.fcntl(fd, cmd, arg = 0)"},
{"lineNum":"   46","line":"    r = LibC.fcntl fd, cmd, arg","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   47","line":"    raise Errno.new(\"fcntl() failed\") if r == -1","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   48","line":"    r"},
{"lineNum":"   49","line":"  end"},
{"lineNum":"   50","line":"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   51","line":"  def fcntl(cmd, arg = 0)"},
{"lineNum":"   52","line":"    self.class.fcntl @fd, cmd, arg"},
{"lineNum":"   53","line":"  end","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"  def stat"},
{"lineNum":"   56","line":"    if LibC.fstat(@fd, out stat) != 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"      raise Errno.new(\"Unable to get stat\")","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   58","line":"    end"},
{"lineNum":"   59","line":"    File::Stat.new(stat)"},
{"lineNum":"   60","line":"  end"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"  # Seeks to a given *offset* (in bytes) according to the *whence* argument."},
{"lineNum":"   63","line":"  # Returns `self`.","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   64","line":"  #"},
{"lineNum":"   65","line":"  # ```"},
{"lineNum":"   66","line":"  # File.write(\"testfile\", \"abc\")"},
{"lineNum":"   67","line":"  #","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   68","line":"  # file = File.new(\"testfile\")"},
{"lineNum":"   69","line":"  # file.gets(3) # => \"abc\""},
{"lineNum":"   70","line":"  # file.seek(1, IO::Seek::Set)"},
{"lineNum":"   71","line":"  # file.gets(2) # => \"bc\""},
{"lineNum":"   72","line":"  # file.seek(-1, IO::Seek::Current)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   73","line":"  # file.gets(1) # => \"c\""},
{"lineNum":"   74","line":"  # ```"},
{"lineNum":"   75","line":"  def seek(offset, whence : Seek = Seek::Set)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   76","line":"    check_open"},
{"lineNum":"   77","line":"","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   78","line":"    flush"},
{"lineNum":"   79","line":"    offset -= @in_buffer_rem.size if whence.current?","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   80","line":"    seek_value = LibC.lseek(@fd, offset, whence)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    if seek_value == -1","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   83","line":"      raise Errno.new \"Unable to seek\"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   84","line":"    end"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    @in_buffer_rem = Bytes.empty","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    self"},
{"lineNum":"   89","line":"  end"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"  # Same as `seek` but yields to the block after seeking and eventually seeks"},
{"lineNum":"   92","line":"  # back to the original position when the block returns."},
{"lineNum":"   93","line":"  def seek(offset, whence : Seek = Seek::Set)"},
{"lineNum":"   94","line":"    original_pos = tell"},
{"lineNum":"   95","line":"    begin"},
{"lineNum":"   96","line":"      seek(offset, whence)"},
{"lineNum":"   97","line":"      yield"},
{"lineNum":"   98","line":"    ensure"},
{"lineNum":"   99","line":"      seek(original_pos)"},
{"lineNum":"  100","line":"    end"},
{"lineNum":"  101","line":"  end"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"  # Returns the current position (in bytes) in this `IO`."},
{"lineNum":"  104","line":"  #"},
{"lineNum":"  105","line":"  # ```"},
{"lineNum":"  106","line":"  # File.write(\"testfile\", \"hello\")"},
{"lineNum":"  107","line":"  #"},
{"lineNum":"  108","line":"  # file = File.new(\"testfile\")"},
{"lineNum":"  109","line":"  # file.pos     # => 0"},
{"lineNum":"  110","line":"  # file.gets(2) # => \"he\""},
{"lineNum":"  111","line":"  # file.pos     # => 2"},
{"lineNum":"  112","line":"  # ```"},
{"lineNum":"  113","line":"  def pos"},
{"lineNum":"  114","line":"    check_open","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"    seek_value = LibC.lseek(@fd, 0, Seek::Current)","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  117","line":"    raise Errno.new \"Unable to tell\" if seek_value == -1","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    seek_value - @in_buffer_rem.size"},
{"lineNum":"  120","line":"  end"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  # Sets the current position (in bytes) in this `IO`."},
{"lineNum":"  123","line":"  #"},
{"lineNum":"  124","line":"  # ```"},
{"lineNum":"  125","line":"  # File.write(\"testfile\", \"hello\")"},
{"lineNum":"  126","line":"  #"},
{"lineNum":"  127","line":"  # file = File.new(\"testfile\")"},
{"lineNum":"  128","line":"  # file.pos = 3"},
{"lineNum":"  129","line":"  # file.gets_to_end # => \"lo\""},
{"lineNum":"  130","line":"  # ```"},
{"lineNum":"  131","line":"  def pos=(value)"},
{"lineNum":"  132","line":"    seek value"},
{"lineNum":"  133","line":"    value"},
{"lineNum":"  134","line":"  end"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"  def fd"},
{"lineNum":"  137","line":"    @fd"},
{"lineNum":"  138","line":"  end"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  def finalize"},
{"lineNum":"  141","line":"    return if closed?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    close rescue nil"},
{"lineNum":"  144","line":"  end"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"  def closed?"},
{"lineNum":"  147","line":"    @closed"},
{"lineNum":"  148","line":"  end"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"  def tty?"},
{"lineNum":"  151","line":"    LibC.isatty(fd) == 1"},
{"lineNum":"  152","line":"  end"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"  def reopen(other : IO::FileDescriptor)"},
{"lineNum":"  155","line":"    if LibC.dup2(other.fd, self.fd) == -1"},
{"lineNum":"  156","line":"      raise Errno.new(\"Could not reopen file descriptor\")"},
{"lineNum":"  157","line":"    end"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    # flag is lost after dup"},
{"lineNum":"  160","line":"    self.close_on_exec = true"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    other"},
{"lineNum":"  163","line":"  end"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"  def inspect(io)"},
{"lineNum":"  166","line":"    io << \"#<IO::FileDescriptor:\""},
{"lineNum":"  167","line":"    if closed?"},
{"lineNum":"  168","line":"      io << \"(closed)\""},
{"lineNum":"  169","line":"    else"},
{"lineNum":"  170","line":"      io << \" fd=\" << @fd"},
{"lineNum":"  171","line":"    end"},
{"lineNum":"  172","line":"    io << \">\""},
{"lineNum":"  173","line":"    io"},
{"lineNum":"  174","line":"  end"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"  def pretty_print(pp)"},
{"lineNum":"  177","line":"    pp.text inspect"},
{"lineNum":"  178","line":"  end"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"  private def unbuffered_read(slice : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  181","line":"    read_syscall_helper(slice, \"Error reading file\") do"},
{"lineNum":"  182","line":"      # `to_i32` is acceptable because `Slice#size` is a Int32"},
{"lineNum":"  183","line":"      LibC.read(@fd, slice, slice.size).to_i32","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  184","line":"    end"},
{"lineNum":"  185","line":"  end"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"  private def unbuffered_write(slice : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  188","line":"    write_syscall_helper(slice, \"Error writing file\") do |slice|"},
{"lineNum":"  189","line":"      LibC.write(@fd, slice, slice.size).tap do |return_code|","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  190","line":"        if return_code == -1 && Errno.value == Errno::EBADF","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  191","line":"          raise IO::Error.new \"File not open for writing\"","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  192","line":"        end"},
{"lineNum":"  193","line":"      end"},
{"lineNum":"  194","line":"    end"},
{"lineNum":"  195","line":"  end"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"  private def add_read_event(timeout = @read_timeout)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  198","line":"    event = @read_event ||= Scheduler.create_fd_read_event(self)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  199","line":"    event.add timeout","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  200","line":"    nil"},
{"lineNum":"  201","line":"  end"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"  private def add_write_event(timeout = @write_timeout)","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  204","line":"    event = @write_event ||= Scheduler.create_fd_write_event(self)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  205","line":"    event.add timeout","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  206","line":"    nil"},
{"lineNum":"  207","line":"  end"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"  private def unbuffered_rewind"},
{"lineNum":"  210","line":"    seek(0, IO::Seek::Set)"},
{"lineNum":"  211","line":"    self"},
{"lineNum":"  212","line":"  end"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"  private def unbuffered_close","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  215","line":"    return if @closed","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"    err = nil"},
{"lineNum":"  218","line":"    if LibC.close(@fd) != 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  219","line":"      case Errno.value"},
{"lineNum":"  220","line":"      when Errno::EINTR, Errno::EINPROGRESS","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  221","line":"        # ignore"},
{"lineNum":"  222","line":"      else"},
{"lineNum":"  223","line":"        err = Errno.new(\"Error closing file\")","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  224","line":"      end"},
{"lineNum":"  225","line":"    end"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    @closed = true","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    @read_event.try &.free","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  230","line":"    @read_event = nil","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  231","line":"    @write_event.try &.free","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  232","line":"    @write_event = nil","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    reschedule_waiting"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"    raise err if err","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  237","line":"  end"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"  private def unbuffered_flush"},
{"lineNum":"  240","line":"    # Nothing"},
{"lineNum":"  241","line":"  end"},
{"lineNum":"  242","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 53, "covered" : 0,};
var merged_data = [];
