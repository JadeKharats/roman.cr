var data = {lines:[
{"lineNum":"    1","line":"# A Box allows turning any object to a `Void*` and back."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# A Box\'s purpose is passing data to C as a `Void*` and then converting that"},
{"lineNum":"    4","line":"# back to the original data type."},
{"lineNum":"    5","line":"#"},
{"lineNum":"    6","line":"# For an example usage, see `Proc`\'s explanation about sending Procs to C."},
{"lineNum":"    7","line":"class Box(T)"},
{"lineNum":"    8","line":"  # Returns the original object"},
{"lineNum":"    9","line":"  getter object : T"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  # Creates a `Box` with the given object."},
{"lineNum":"   12","line":"  #"},
{"lineNum":"   13","line":"  # This method isn\'t usually used directly. Instead, `Box.box` is used."},
{"lineNum":"   14","line":"  def initialize(@object : T)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   15","line":"  end"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"  # Creates a Box for an object and returns it as a `Void*`."},
{"lineNum":"   18","line":"  def self.box(object) : Void*"},
{"lineNum":"   19","line":"    new(object).as(Void*)"},
{"lineNum":"   20","line":"  end"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"  # Unboxes a `Void*` into an object of type `T`. Note that for this you must"},
{"lineNum":"   23","line":"  # specify T: `Box(T).unbox(data)`."},
{"lineNum":"   24","line":"  def self.unbox(pointer : Void*) : T","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   25","line":"    pointer.as(self).object"},
{"lineNum":"   26","line":"  end"},
{"lineNum":"   27","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
