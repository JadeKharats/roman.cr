var data = {lines:[
{"lineNum":"    1","line":"require \"./libm\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"module Math"},
{"lineNum":"    4","line":"  extend self"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"  PI    = 3.14159265358979323846"},
{"lineNum":"    7","line":"  E     = LibM.exp_f64(1.0)"},
{"lineNum":"    8","line":"  LOG2  = LibM.log_f64(2.0)"},
{"lineNum":"    9","line":"  LOG10 = LibM.log_f64(10.0)"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  {% for name in %w(acos acosh asin asinh atan atanh cbrt cos cosh erf erfc exp","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   12","line":"                   exp2 expm1 ilogb log log10 log1p log2 logb sin sinh sqrt tan tanh) %}"},
{"lineNum":"   13","line":"    # Calculates the {{name.id}} of *value*."},
{"lineNum":"   14","line":"    def {{name.id}}(value : Float32)"},
{"lineNum":"   15","line":"      LibM.{{name.id}}_f32(value)"},
{"lineNum":"   16","line":"    end"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"    # ditto"},
{"lineNum":"   19","line":"    def {{name.id}}(value : Float64)"},
{"lineNum":"   20","line":"      LibM.{{name.id}}_f64(value)"},
{"lineNum":"   21","line":"    end"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"    # ditto"},
{"lineNum":"   24","line":"    def {{name.id}}(value)"},
{"lineNum":"   25","line":"      {{name.id}}(value.to_f)"},
{"lineNum":"   26","line":"    end"},
{"lineNum":"   27","line":"  {% end %}"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"  {% for name in %w(besselj0 besselj1 bessely0 bessely1) %}"},
{"lineNum":"   30","line":"    # Calculates the {{name.id}} function of *value*."},
{"lineNum":"   31","line":"    def {{name.id}}(value : Float32)"},
{"lineNum":"   32","line":"      {% if flag?(:darwin) %}"},
{"lineNum":"   33","line":"        LibM.{{name.id}}_f64(value).to_f32"},
{"lineNum":"   34","line":"      {% else %}"},
{"lineNum":"   35","line":"        LibM.{{name.id}}_f32(value)"},
{"lineNum":"   36","line":"      {% end %}"},
{"lineNum":"   37","line":"    end"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    # ditto"},
{"lineNum":"   40","line":"    def {{name.id}}(value : Float64)"},
{"lineNum":"   41","line":"      LibM.{{name.id}}_f64(value)"},
{"lineNum":"   42","line":"    end"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    # ditto"},
{"lineNum":"   45","line":"    def {{name.id}}(value)"},
{"lineNum":"   46","line":"      {{name.id}}(value.to_f)"},
{"lineNum":"   47","line":"    end"},
{"lineNum":"   48","line":"  {% end %}"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"  # Calculates the gamma function of *value*."},
{"lineNum":"   51","line":"  #"},
{"lineNum":"   52","line":"  # Note that `gamma(n)` is same as `fact(n - 1)` for integer `n > 0`."},
{"lineNum":"   53","line":"  # However `gamma(n)` returns float and can be an approximation."},
{"lineNum":"   54","line":"  def gamma(value : Float32)"},
{"lineNum":"   55","line":"    LibM.tgamma_f32(value)"},
{"lineNum":"   56","line":"  end"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"  # ditto"},
{"lineNum":"   59","line":"  def gamma(value : Float64)"},
{"lineNum":"   60","line":"    LibM.tgamma_f64(value)"},
{"lineNum":"   61","line":"  end"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  # ditto"},
{"lineNum":"   64","line":"  def gamma(value)"},
{"lineNum":"   65","line":"    gamma(value.to_f)"},
{"lineNum":"   66","line":"  end"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"  # Calculates the logarithmic gamma of *value*."},
{"lineNum":"   69","line":"  #"},
{"lineNum":"   70","line":"  # ```"},
{"lineNum":"   71","line":"  # Math.lgamma(2.96)"},
{"lineNum":"   72","line":"  # ```"},
{"lineNum":"   73","line":"  # is the same as"},
{"lineNum":"   74","line":"  # ```"},
{"lineNum":"   75","line":"  # Math.log(Math.gamma(2.96).abs)"},
{"lineNum":"   76","line":"  # ```"},
{"lineNum":"   77","line":"  def lgamma(value : Float32)"},
{"lineNum":"   78","line":"    {% if flag?(:darwin) %}"},
{"lineNum":"   79","line":"      LibM.gamma_f64(value).to_f32"},
{"lineNum":"   80","line":"    {% else %}"},
{"lineNum":"   81","line":"      LibM.gamma_f32(value)"},
{"lineNum":"   82","line":"    {% end %}"},
{"lineNum":"   83","line":"  end"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"  # ditto"},
{"lineNum":"   86","line":"  def lgamma(value : Float64)"},
{"lineNum":"   87","line":"    LibM.gamma_f64(value)"},
{"lineNum":"   88","line":"  end"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"  # ditto"},
{"lineNum":"   91","line":"  def lgamma(value)"},
{"lineNum":"   92","line":"    lgamma(value.to_f)"},
{"lineNum":"   93","line":"  end"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"  {% for name in %w(atan2 copysign hypot) %}"},
{"lineNum":"   96","line":"    # Calculates {{name.id}} with parameters *value1* and *value2*."},
{"lineNum":"   97","line":"    def {{name.id}}(value1 : Float32, value2 : Float32)"},
{"lineNum":"   98","line":"      LibM.{{name.id}}_f32(value1, value2)"},
{"lineNum":"   99","line":"    end"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    # ditto"},
{"lineNum":"  102","line":"    def {{name.id}}(value1 : Float64, value2 : Float64)"},
{"lineNum":"  103","line":"      LibM.{{name.id}}_f64(value1, value2)"},
{"lineNum":"  104","line":"    end"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    # ditto"},
{"lineNum":"  107","line":"    def {{name.id}}(value1, value2)"},
{"lineNum":"  108","line":"      {{name.id}}(value1.to_f, value2.to_f)"},
{"lineNum":"  109","line":"    end"},
{"lineNum":"  110","line":"  {% end %}"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  # ## To be uncommented once LLVM is updated"},
{"lineNum":"  113","line":"  # def div(value1 : Int32, value2 : Int32)"},
{"lineNum":"  114","line":"  #   LibM.div_i32(value1, value2)"},
{"lineNum":"  115","line":"  # end"},
{"lineNum":"  116","line":"  #"},
{"lineNum":"  117","line":"  # def div(value1 : Float32, value2 : Float32)"},
{"lineNum":"  118","line":"  #   LibM.div_f32(value1, value2)"},
{"lineNum":"  119","line":"  # end"},
{"lineNum":"  120","line":"  #"},
{"lineNum":"  121","line":"  # def div(value1 : Float64, value2 : Float64)"},
{"lineNum":"  122","line":"  #   LibM.div_f64(value1, value2)"},
{"lineNum":"  123","line":"  # end"},
{"lineNum":"  124","line":"  #"},
{"lineNum":"  125","line":"  # def div(value1, value2)"},
{"lineNum":"  126","line":"  #   LibM.div(value1, value2)"},
{"lineNum":"  127","line":"  # end"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"  # Returns the logarithm of *numeric* to the base *base*."},
{"lineNum":"  130","line":"  def log(numeric, base)"},
{"lineNum":"  131","line":"    log(numeric) / log(base)"},
{"lineNum":"  132","line":"  end"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  def max(value1 : Float32, value2 : Float32)"},
{"lineNum":"  135","line":"    LibM.max_f32(value1, value2)"},
{"lineNum":"  136","line":"  end"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"  def max(value1 : Float64, value2 : Float64)"},
{"lineNum":"  139","line":"    LibM.max_f64(value1, value2)"},
{"lineNum":"  140","line":"  end"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"  # Returns the greater of *value1* and *value2*."},
{"lineNum":"  143","line":"  def max(value1, value2)"},
{"lineNum":"  144","line":"    value1 >= value2 ? value1 : value2"},
{"lineNum":"  145","line":"  end"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  def min(value1 : Float32, value2 : Float32)"},
{"lineNum":"  148","line":"    LibM.min_f32(value1, value2)"},
{"lineNum":"  149","line":"  end"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"  def min(value1 : Float64, value2 : Float64)"},
{"lineNum":"  152","line":"    LibM.min_f64(value1, value2)"},
{"lineNum":"  153","line":"  end"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  # Returns the smaller of *value1* and *value2*."},
{"lineNum":"  156","line":"  def min(value1, value2)"},
{"lineNum":"  157","line":"    value1 <= value2 ? value1 : value2","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  158","line":"  end"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  # ## To be uncommented once LLVM is updated"},
{"lineNum":"  161","line":"  # def rem(value1 : Int32, value2 : Int32)"},
{"lineNum":"  162","line":"  #   LibM.rem_i32(value1, value2)"},
{"lineNum":"  163","line":"  # end"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"  # def rem(value1 : Float32, value2 : Float32)"},
{"lineNum":"  166","line":"  #   LibM.rem_f32(value1, value2)"},
{"lineNum":"  167","line":"  # end"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  # def rem(value1 : Float64, value2 : Float64)"},
{"lineNum":"  170","line":"  #   LibM.rem_f64(value1, value2)"},
{"lineNum":"  171","line":"  # end"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"  # def rem(value1, value2)"},
{"lineNum":"  174","line":"  #   LibM.rem(value1, value2)"},
{"lineNum":"  175","line":"  # end"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"  {% for name in %w(besselj bessely) %}"},
{"lineNum":"  178","line":"    # Calculates {{name.id}} with parameters *value1* and *value2*."},
{"lineNum":"  179","line":"    def {{name.id}}(value1 : Int32, value2 : Float32)"},
{"lineNum":"  180","line":"      {% if flag?(:darwin) %}"},
{"lineNum":"  181","line":"        LibM.{{name.id}}_f64(value1, value2).to_f32"},
{"lineNum":"  182","line":"      {% else %}"},
{"lineNum":"  183","line":"        LibM.{{name.id}}_f32(value1, value2)"},
{"lineNum":"  184","line":"      {% end %}"},
{"lineNum":"  185","line":"    end"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    # ditto"},
{"lineNum":"  188","line":"    def {{name.id}}(value1 : Int32, value2 : Float64)"},
{"lineNum":"  189","line":"      LibM.{{name.id}}_f64(value1, value2)"},
{"lineNum":"  190","line":"    end"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    # ditto"},
{"lineNum":"  193","line":"    def {{name.id}}(value1, value2)"},
{"lineNum":"  194","line":"      {{name.id}}(value1.to_i32, value1.to_f)"},
{"lineNum":"  195","line":"    end"},
{"lineNum":"  196","line":"  {% end %}"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"  {% for name in %w(ldexp scalbn) %}"},
{"lineNum":"  199","line":"    # Calculates {{name.id}} with parameters *value1* and *value2*."},
{"lineNum":"  200","line":"    def {{name.id}}(value1 : Float32, value2 : Int32)"},
{"lineNum":"  201","line":"      LibM.{{name.id}}_f32(value1, value2)"},
{"lineNum":"  202","line":"    end"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    # ditto"},
{"lineNum":"  205","line":"    def {{name.id}}(value1 : Float64, value2 : Int32)"},
{"lineNum":"  206","line":"      LibM.{{name.id}}_f64(value1, value2)"},
{"lineNum":"  207","line":"    end"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"    # ditto"},
{"lineNum":"  210","line":"    def {{name.id}}(value1, value2)"},
{"lineNum":"  211","line":"      {{name.id}}(value1.to_f, value2.to_i32)"},
{"lineNum":"  212","line":"    end"},
{"lineNum":"  213","line":"  {% end %}"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"  # Multiplies *value* by 2 raised to power *exp*."},
{"lineNum":"  216","line":"  def scalbln(value : Float32, exp : Int64)"},
{"lineNum":"  217","line":"    LibM.scalbln_f32(value, exp)"},
{"lineNum":"  218","line":"  end"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"  # ditto"},
{"lineNum":"  221","line":"  def scalbln(value : Float64, exp : Int64)"},
{"lineNum":"  222","line":"    LibM.scalbln_f64(value, exp)"},
{"lineNum":"  223","line":"  end"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"  # ditto"},
{"lineNum":"  226","line":"  def scalbln(value, exp)"},
{"lineNum":"  227","line":"    scalbln(value.to_f, exp.to_i64)"},
{"lineNum":"  228","line":"  end"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"  # Decomposes given floating point *value* into a normalized fraction and an integral power of two."},
{"lineNum":"  231","line":"  def frexp(value : Float32)"},
{"lineNum":"  232","line":"    frac = LibM.frexp_f32(value, out exp)"},
{"lineNum":"  233","line":"    {frac, exp}"},
{"lineNum":"  234","line":"  end"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"  # ditto"},
{"lineNum":"  237","line":"  def frexp(value : Float64)"},
{"lineNum":"  238","line":"    frac = LibM.frexp_f64(value, out exp)"},
{"lineNum":"  239","line":"    {frac, exp}"},
{"lineNum":"  240","line":"  end"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"  # ditto"},
{"lineNum":"  243","line":"  def frexp(value)"},
{"lineNum":"  244","line":"    frexp(value.to_f)"},
{"lineNum":"  245","line":"  end"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"  # Computes the next highest power of 2 of *v*."},
{"lineNum":"  248","line":"  #"},
{"lineNum":"  249","line":"  # ```"},
{"lineNum":"  250","line":"  # Math.pw2ceil(33) # => 64"},
{"lineNum":"  251","line":"  # ```"},
{"lineNum":"  252","line":"  def pw2ceil(v)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  253","line":"    # Taken from http://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2"},
{"lineNum":"  254","line":"    v -= 1"},
{"lineNum":"  255","line":"    v |= v >> 1","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  256","line":"    v |= v >> 2","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  257","line":"    v |= v >> 4","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  258","line":"    v |= v >> 8","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  259","line":"    v |= v >> 16","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  260","line":"    v += 1"},
{"lineNum":"  261","line":"  end"},
{"lineNum":"  262","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 8, "covered" : 0,};
var merged_data = [];
