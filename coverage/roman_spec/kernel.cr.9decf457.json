var data = {lines:[
{"lineNum":"    1","line":"require \"c/unistd\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"STDIN  = IO::FileDescriptor.new(0, blocking: LibC.isatty(0) == 0)"},
{"lineNum":"    4","line":"STDOUT = (IO::FileDescriptor.new(1, blocking: LibC.isatty(1) == 0)).tap { |f| f.flush_on_newline = true }"},
{"lineNum":"    5","line":"STDERR = (IO::FileDescriptor.new(2, blocking: LibC.isatty(2) == 0)).tap { |f| f.flush_on_newline = true }"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"PROGRAM_NAME = String.new(ARGV_UNSAFE.value)"},
{"lineNum":"    8","line":"ARGV         = Array.new(ARGC_UNSAFE - 1) { |i| String.new(ARGV_UNSAFE[1 + i]) }"},
{"lineNum":"    9","line":"ARGF         = IO::ARGF.new(ARGV, STDIN)"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"# Repeatedly executes the block, passing an incremental `Int32`"},
{"lineNum":"   12","line":"# that starts with `0`."},
{"lineNum":"   13","line":"#"},
{"lineNum":"   14","line":"# ```"},
{"lineNum":"   15","line":"# loop do |i|"},
{"lineNum":"   16","line":"#   print \"#{i}) \""},
{"lineNum":"   17","line":"#   line = gets"},
{"lineNum":"   18","line":"#   break unless line"},
{"lineNum":"   19","line":"#   # ..."},
{"lineNum":"   20","line":"# end"},
{"lineNum":"   21","line":"# ```"},
{"lineNum":"   22","line":"def loop"},
{"lineNum":"   23","line":"  i = 0"},
{"lineNum":"   24","line":"  while true"},
{"lineNum":"   25","line":"    yield i"},
{"lineNum":"   26","line":"    i += 1"},
{"lineNum":"   27","line":"  end"},
{"lineNum":"   28","line":"end"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"# Reads a line from `STDIN`."},
{"lineNum":"   31","line":"#"},
{"lineNum":"   32","line":"# See also: `IO#gets`."},
{"lineNum":"   33","line":"def gets(*args, **options)"},
{"lineNum":"   34","line":"  STDIN.gets(*args, **options)"},
{"lineNum":"   35","line":"end"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"# Reads a line from `STDIN`."},
{"lineNum":"   38","line":"#"},
{"lineNum":"   39","line":"# See also: `IO#read_line`."},
{"lineNum":"   40","line":"def read_line(*args, **options)"},
{"lineNum":"   41","line":"  STDIN.read_line(*args, **options)"},
{"lineNum":"   42","line":"end"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"# Prints objects to STDOUT and then invokes `STDOUT.flush`."},
{"lineNum":"   45","line":"#"},
{"lineNum":"   46","line":"# See also: `IO#print`."},
{"lineNum":"   47","line":"def print(*objects : _) : Nil"},
{"lineNum":"   48","line":"  STDOUT.print *objects"},
{"lineNum":"   49","line":"  STDOUT.flush","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":"end"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"# Prints a formatted string to `STDOUT`."},
{"lineNum":"   53","line":"#"},
{"lineNum":"   54","line":"# See also: `IO#printf`."},
{"lineNum":"   55","line":"def printf(format_string, *args) : Nil"},
{"lineNum":"   56","line":"  printf format_string, args"},
{"lineNum":"   57","line":"end"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"# ditto"},
{"lineNum":"   60","line":"def printf(format_string, args : Array | Tuple) : Nil"},
{"lineNum":"   61","line":"  STDOUT.printf format_string, args"},
{"lineNum":"   62","line":"end"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"# Returns a formatted string."},
{"lineNum":"   65","line":"#"},
{"lineNum":"   66","line":"# See also: `IO#printf`."},
{"lineNum":"   67","line":"def sprintf(format_string, *args) : String"},
{"lineNum":"   68","line":"  sprintf format_string, args"},
{"lineNum":"   69","line":"end"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"# ditto"},
{"lineNum":"   72","line":"def sprintf(format_string, args : Array | Tuple) : String"},
{"lineNum":"   73","line":"  String.build(format_string.bytesize) do |str|"},
{"lineNum":"   74","line":"    String::Formatter(typeof(args)).new(format_string, args, str).format"},
{"lineNum":"   75","line":"  end"},
{"lineNum":"   76","line":"end"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"# Prints objects to `STDOUT`, each followed by a newline."},
{"lineNum":"   79","line":"#"},
{"lineNum":"   80","line":"# See also: `IO#puts`."},
{"lineNum":"   81","line":"def puts(*objects) : Nil"},
{"lineNum":"   82","line":"  STDOUT.puts *objects"},
{"lineNum":"   83","line":"end"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"# Pretty prints *object* to `STDOUT` followed"},
{"lineNum":"   86","line":"# by a newline. Returns *object*."},
{"lineNum":"   87","line":"#"},
{"lineNum":"   88","line":"# See also: `Object#pretty_print(pp)`."},
{"lineNum":"   89","line":"def p(object)"},
{"lineNum":"   90","line":"  PrettyPrint.format(object, STDOUT, 79)"},
{"lineNum":"   91","line":"  puts"},
{"lineNum":"   92","line":"  object"},
{"lineNum":"   93","line":"end"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"# Pretty prints each object in *objects* to `STDOUT`, followed"},
{"lineNum":"   96","line":"# by a newline. Returns *objects*."},
{"lineNum":"   97","line":"#"},
{"lineNum":"   98","line":"# See also: `Object#pretty_print(pp)`."},
{"lineNum":"   99","line":"def p(*objects)"},
{"lineNum":"  100","line":"  objects.each do |obj|"},
{"lineNum":"  101","line":"    p obj"},
{"lineNum":"  102","line":"  end"},
{"lineNum":"  103","line":"  objects"},
{"lineNum":"  104","line":"end"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"# Pretty prints each object in *objects* to `STDOUT`, followed"},
{"lineNum":"  107","line":"# by a newline. Returns *objects*."},
{"lineNum":"  108","line":"#"},
{"lineNum":"  109","line":"# ```"},
{"lineNum":"  110","line":"# p foo: 23, bar: 42 # => {foo: 23, bar: 42}"},
{"lineNum":"  111","line":"# ```"},
{"lineNum":"  112","line":"#"},
{"lineNum":"  113","line":"# See `Object#pretty_print(pp)`"},
{"lineNum":"  114","line":"def p(**objects)"},
{"lineNum":"  115","line":"  p(objects) unless objects.empty?"},
{"lineNum":"  116","line":"end"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"# :nodoc:"},
{"lineNum":"  119","line":"module AtExitHandlers"},
{"lineNum":"  120","line":"  @@running = false"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  def self.add(handler)"},
{"lineNum":"  123","line":"    handlers = @@handlers ||= [] of Int32 ->","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":"    handlers << handler"},
{"lineNum":"  125","line":"  end"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"  def self.run(status)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"    return if @@running","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  129","line":"    @@running = true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    @@handlers.try &.reverse_each do |handler|","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"      begin"},
{"lineNum":"  133","line":"        handler.call status","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  134","line":"      rescue handler_ex"},
{"lineNum":"  135","line":"        STDERR.puts \"Error running at_exit handler: #{handler_ex}\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  136","line":"      end"},
{"lineNum":"  137","line":"    end"},
{"lineNum":"  138","line":"  end"},
{"lineNum":"  139","line":"end"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"# Registers the given `Proc` for execution when the program exits."},
{"lineNum":"  142","line":"# If multiple handlers are registered, they are executed in reverse order of registration."},
{"lineNum":"  143","line":"#"},
{"lineNum":"  144","line":"# ```"},
{"lineNum":"  145","line":"# def do_at_exit(str1)"},
{"lineNum":"  146","line":"#   at_exit { print str1 }"},
{"lineNum":"  147","line":"# end"},
{"lineNum":"  148","line":"#"},
{"lineNum":"  149","line":"# at_exit { puts \"cruel world\" }"},
{"lineNum":"  150","line":"# do_at_exit(\"goodbye \")"},
{"lineNum":"  151","line":"# exit"},
{"lineNum":"  152","line":"# ```"},
{"lineNum":"  153","line":"#"},
{"lineNum":"  154","line":"# Produces:"},
{"lineNum":"  155","line":"#"},
{"lineNum":"  156","line":"# ```text"},
{"lineNum":"  157","line":"# goodbye cruel world"},
{"lineNum":"  158","line":"# ```"},
{"lineNum":"  159","line":"def at_exit(&handler : Int32 ->) : Nil","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"  AtExitHandlers.add(handler)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"end"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"# Terminates execution immediately, returning the given status code"},
{"lineNum":"  164","line":"# to the invoking environment."},
{"lineNum":"  165","line":"#"},
{"lineNum":"  166","line":"# Registered `at_exit` procs are executed."},
{"lineNum":"  167","line":"def exit(status = 0) : NoReturn","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  168","line":"  AtExitHandlers.run status","class":"lineNoCov","hits":"0","possible_hits":"123",},
{"lineNum":"  169","line":"  STDOUT.flush","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"  STDERR.flush","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"  Process.exit(status)"},
{"lineNum":"  172","line":"end"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"# Terminates execution immediately, printing *message* to `STDERR` and"},
{"lineNum":"  175","line":"# then calling `exit(status)`."},
{"lineNum":"  176","line":"def abort(message, status = 1) : NoReturn"},
{"lineNum":"  177","line":"  STDERR.puts message if message"},
{"lineNum":"  178","line":"  exit status"},
{"lineNum":"  179","line":"end"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"class Process"},
{"lineNum":"  182","line":"  # Hooks are defined here due to load order problems."},
{"lineNum":"  183","line":"  def self.after_fork_child_callbacks"},
{"lineNum":"  184","line":"    @@after_fork_child_callbacks ||= ["},
{"lineNum":"  185","line":"      ->Scheduler.after_fork,"},
{"lineNum":"  186","line":"      ->Event::SignalHandler.after_fork,"},
{"lineNum":"  187","line":"      ->{ Event::SignalChildHandler.instance.after_fork },"},
{"lineNum":"  188","line":"      ->Random::DEFAULT.new_seed,"},
{"lineNum":"  189","line":"    ] of -> Nil"},
{"lineNum":"  190","line":"  end"},
{"lineNum":"  191","line":"end"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"Signal.setup_default_handlers","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"at_exit { Event::SignalHandler.close }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"# Background loop to cleanup unused fiber stacks."},
{"lineNum":"  198","line":"spawn do"},
{"lineNum":"  199","line":"  loop do"},
{"lineNum":"  200","line":"    sleep 5"},
{"lineNum":"  201","line":"    Fiber.stack_pool_collect"},
{"lineNum":"  202","line":"  end"},
{"lineNum":"  203","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 17, "covered" : 0,};
var merged_data = [];
