var data = {lines:[
{"lineNum":"    1","line":"# :nodoc:"},
{"lineNum":"    2","line":"fun __crystal_malloc(size : UInt32) : Void*","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    3","line":"  GC.malloc(LibC::SizeT.new(size))"},
{"lineNum":"    4","line":"end"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"# :nodoc:"},
{"lineNum":"    7","line":"fun __crystal_malloc_atomic(size : UInt32) : Void*","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    8","line":"  GC.malloc_atomic(LibC::SizeT.new(size))"},
{"lineNum":"    9","line":"end"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"# :nodoc:"},
{"lineNum":"   12","line":"fun __crystal_realloc(pointer : Void*, size : UInt32) : Void*","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   13","line":"  GC.realloc(pointer, LibC::SizeT.new(size))"},
{"lineNum":"   14","line":"end"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"# :nodoc:"},
{"lineNum":"   17","line":"fun __crystal_malloc64(size : UInt64) : Void*","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   18","line":"  {% if flag?(:bits32) %}"},
{"lineNum":"   19","line":"    if size > UInt32::MAX"},
{"lineNum":"   20","line":"      raise ArgumentError.new(\"Given size is bigger than UInt32::MAX\")"},
{"lineNum":"   21","line":"    end"},
{"lineNum":"   22","line":"  {% end %}"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"  GC.malloc(LibC::SizeT.new(size))"},
{"lineNum":"   25","line":"end"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"# :nodoc:"},
{"lineNum":"   28","line":"fun __crystal_malloc_atomic64(size : UInt64) : Void*","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"  {% if flag?(:bits32) %}"},
{"lineNum":"   30","line":"    if size > UInt32::MAX"},
{"lineNum":"   31","line":"      raise ArgumentError.new(\"Given size is bigger than UInt32::MAX\")"},
{"lineNum":"   32","line":"    end"},
{"lineNum":"   33","line":"  {% end %}"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  GC.malloc_atomic(LibC::SizeT.new(size))"},
{"lineNum":"   36","line":"end"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"# :nodoc:"},
{"lineNum":"   39","line":"fun __crystal_realloc64(ptr : Void*, size : UInt64) : Void*","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":"  {% if flag?(:bits32) %}"},
{"lineNum":"   41","line":"    if size > UInt32::MAX"},
{"lineNum":"   42","line":"      raise ArgumentError.new(\"Given size is bigger than UInt32::MAX\")"},
{"lineNum":"   43","line":"    end"},
{"lineNum":"   44","line":"  {% end %}"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"  GC.realloc(ptr, LibC::SizeT.new(size))"},
{"lineNum":"   47","line":"end"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"module GC"},
{"lineNum":"   50","line":"  record Stats,"},
{"lineNum":"   51","line":"    # collections : LibC::ULong,"},
{"lineNum":"   52","line":"    # bytes_found : LibC::Long,"},
{"lineNum":"   53","line":"    heap_size : LibC::ULong,"},
{"lineNum":"   54","line":"    free_bytes : LibC::ULong,"},
{"lineNum":"   55","line":"    unmapped_bytes : LibC::ULong,"},
{"lineNum":"   56","line":"    bytes_since_gc : LibC::ULong,"},
{"lineNum":"   57","line":"    total_bytes : LibC::ULong"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"  def self.malloc(size : Int)"},
{"lineNum":"   60","line":"    malloc(LibC::SizeT.new(size))"},
{"lineNum":"   61","line":"  end"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  def self.malloc_atomic(size : Int)"},
{"lineNum":"   64","line":"    malloc_atomic(LibC::SizeT.new(size))"},
{"lineNum":"   65","line":"  end"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"  def self.realloc(pointer : Void*, size : Int)"},
{"lineNum":"   68","line":"    realloc(pointer, LibC::SizeT.new(size))"},
{"lineNum":"   69","line":"  end"},
{"lineNum":"   70","line":"end"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"{% if flag?(:gc_none) %}"},
{"lineNum":"   73","line":"  require \"gc/none\""},
{"lineNum":"   74","line":"{% else %}"},
{"lineNum":"   75","line":"  require \"gc/boehm\""},
{"lineNum":"   76","line":"{% end %}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
