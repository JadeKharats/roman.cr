var data = {lines:[
{"lineNum":"    1","line":"# :nodoc:"},
{"lineNum":"    2","line":"class File::PReader < IO"},
{"lineNum":"    3","line":"  include IO::Buffered"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"  getter? closed = false"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"  def initialize(@fd : Int32, @offset : Int32, @bytesize : Int32)"},
{"lineNum":"    8","line":"    @pos = 0"},
{"lineNum":"    9","line":"  end"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  def unbuffered_read(slice : Bytes)"},
{"lineNum":"   12","line":"    check_open"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    count = slice.size"},
{"lineNum":"   15","line":"    count = Math.min(count, @bytesize - @pos)"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    bytes_read = LibC.pread(@fd, slice.pointer(count).as(Void*), count, @offset + @pos)"},
{"lineNum":"   18","line":"    if bytes_read == -1"},
{"lineNum":"   19","line":"      raise Errno.new \"Error reading file\""},
{"lineNum":"   20","line":"    end"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    @pos += bytes_read"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    bytes_read"},
{"lineNum":"   25","line":"  end"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"  def unbuffered_write(slice : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   28","line":"    raise IO::Error.new(\"Can\'t write to read-only IO\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"  end"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"  def unbuffered_flush"},
{"lineNum":"   32","line":"    raise IO::Error.new(\"Can\'t flush read-only IO\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"  end"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  def unbuffered_rewind"},
{"lineNum":"   36","line":"    @pos = 0"},
{"lineNum":"   37","line":"  end"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"  def unbuffered_close"},
{"lineNum":"   40","line":"    @closed = true","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"   41","line":"  end"},
{"lineNum":"   42","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
