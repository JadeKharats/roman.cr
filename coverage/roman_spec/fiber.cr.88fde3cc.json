var data = {lines:[
{"lineNum":"    1","line":"require \"c/sys/mman\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# :nodoc:"},
{"lineNum":"    4","line":"@[NoInline]"},
{"lineNum":"    5","line":"fun _fiber_get_stack_top : Void*","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"    6","line":"  dummy = uninitialized Int32"},
{"lineNum":"    7","line":"  pointerof(dummy).as(Void*)"},
{"lineNum":"    8","line":"end"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"class Fiber"},
{"lineNum":"   11","line":"  STACK_SIZE = 8 * 1024 * 1024"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"  @@first_fiber : Fiber? = nil"},
{"lineNum":"   14","line":"  @@last_fiber : Fiber? = nil"},
{"lineNum":"   15","line":"  @@stack_pool = [] of Void*"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"  @stack : Void*"},
{"lineNum":"   18","line":"  @resume_event : Event::Event?"},
{"lineNum":"   19","line":"  @stack_top = uninitialized Void*"},
{"lineNum":"   20","line":"  protected property stack_top : Void*"},
{"lineNum":"   21","line":"  protected property stack_bottom : Void*"},
{"lineNum":"   22","line":"  protected property next_fiber : Fiber?","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   23","line":"  protected property prev_fiber : Fiber?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   24","line":"  property name : String?"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"  def initialize(@name : String? = nil, &@proc : ->)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   27","line":"    @stack = Fiber.allocate_stack","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   28","line":"    @stack_bottom = @stack + STACK_SIZE","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   29","line":"    fiber_main = ->(f : Fiber) { f.run }"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    stack_ptr = @stack_bottom - sizeof(Void*)"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    # Align the stack pointer to 16 bytes"},
{"lineNum":"   34","line":"    stack_ptr = Pointer(Void*).new(stack_ptr.address & ~0x0f_u64)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    # @stack_top will be the stack pointer on the initial call to `resume`"},
{"lineNum":"   37","line":"    {% if flag?(:x86_64) %}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   38","line":"      # In x86-64, the context switch push/pop 7 registers"},
{"lineNum":"   39","line":"      @stack_top = (stack_ptr - 7).as(Void*)"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"      stack_ptr[0] = fiber_main.pointer # Initial `resume` will `ret` to this address"},
{"lineNum":"   42","line":"      stack_ptr[-1] = self.as(Void*)    # This will be `pop` into %rdi (first argument)"},
{"lineNum":"   43","line":"    {% elsif flag?(:i686) %}"},
{"lineNum":"   44","line":"      # In IA32, the context switch push/pops 4 registers."},
{"lineNum":"   45","line":"      # Add two more to store the argument of `fiber_main`"},
{"lineNum":"   46","line":"      @stack_top = (stack_ptr - 6).as(Void*)"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"      stack_ptr[0] = self.as(Void*)      # First argument passed on the stack"},
{"lineNum":"   49","line":"      stack_ptr[-1] = Pointer(Void).null # Empty space to keep the stack alignment (16 bytes)"},
{"lineNum":"   50","line":"      stack_ptr[-2] = fiber_main.pointer # Initial `resume` will `ret` to this address"},
{"lineNum":"   51","line":"    {% elsif flag?(:aarch64) %}"},
{"lineNum":"   52","line":"      # In ARMv8, the context switch push/pops 12 registers + 8 FPU registers."},
{"lineNum":"   53","line":"      # Add one more to store the argument of `fiber_main` (+ alignment)"},
{"lineNum":"   54","line":"      @stack_top = (stack_ptr - 22).as(Void*)"},
{"lineNum":"   55","line":"      stack_ptr[-2] = self.as(Void*)      # This will be `pop` into r0 (first argument)"},
{"lineNum":"   56","line":"      stack_ptr[-14] = fiber_main.pointer # Initial `resume` will `ret` to this address"},
{"lineNum":"   57","line":"    {% elsif flag?(:arm) %}"},
{"lineNum":"   58","line":"      # In ARMv6 / ARVMv7, the context switch push/pops 8 registers."},
{"lineNum":"   59","line":"      # Add one more to store the argument of `fiber_main`"},
{"lineNum":"   60","line":"      {% if flag?(:armhf) %}"},
{"lineNum":"   61","line":"        # Add 8 FPU registers."},
{"lineNum":"   62","line":"        @stack_top = (stack_ptr - (9 + 16)).as(Void*)"},
{"lineNum":"   63","line":"      {% else %}"},
{"lineNum":"   64","line":"        @stack_top = (stack_ptr - 9).as(Void*)"},
{"lineNum":"   65","line":"      {% end %}"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"      stack_ptr[0] = fiber_main.pointer # Initial `resume` will `ret` to this address"},
{"lineNum":"   68","line":"      stack_ptr[-9] = self.as(Void*)    # This will be `pop` into r0 (first argument)"},
{"lineNum":"   69","line":"    {% else %}"},
{"lineNum":"   70","line":"      {{ raise \"Unsupported platform, only x86_64 and i686 are supported.\" }}"},
{"lineNum":"   71","line":"    {% end %}"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    @prev_fiber = nil","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   74","line":"    if last_fiber = @@last_fiber","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   75","line":"      @prev_fiber = last_fiber","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   76","line":"      last_fiber.next_fiber = @@last_fiber = self","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   77","line":"    else"},
{"lineNum":"   78","line":"      @@first_fiber = @@last_fiber = self","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   79","line":"    end"},
{"lineNum":"   80","line":"  end"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"  def initialize","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   83","line":"    @proc = Proc(Void).new { }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   84","line":"    @stack = Pointer(Void).null","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   85","line":"    @stack_top = _fiber_get_stack_top","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   86","line":"    @stack_bottom = GC.stack_bottom","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   87","line":"    @name = \"main\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    @@first_fiber = @@last_fiber = self","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   90","line":"  end"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  protected def self.allocate_stack","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"    @@stack_pool.pop? || LibC.mmap(nil, Fiber::STACK_SIZE,","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"   94","line":"      LibC::PROT_READ | LibC::PROT_WRITE,"},
{"lineNum":"   95","line":"      LibC::MAP_PRIVATE | LibC::MAP_ANON,"},
{"lineNum":"   96","line":"      -1, 0"},
{"lineNum":"   97","line":"    ).tap do |pointer|"},
{"lineNum":"   98","line":"      raise Errno.new(\"Cannot allocate new fiber stack\") if pointer == LibC::MAP_FAILED","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   99","line":"      {% if flag?(:linux) %}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"        LibC.madvise(pointer, Fiber::STACK_SIZE, LibC::MADV_NOHUGEPAGE)"},
{"lineNum":"  101","line":"      {% end %}"},
{"lineNum":"  102","line":"      LibC.mprotect(pointer, 4096, LibC::PROT_NONE)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"    end"},
{"lineNum":"  104","line":"  end"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"  def self.stack_pool_collect"},
{"lineNum":"  107","line":"    return if @@stack_pool.size == 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"    free_count = @@stack_pool.size > 1 ? @@stack_pool.size / 2 : 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"    free_count.times do"},
{"lineNum":"  110","line":"      stack = @@stack_pool.pop"},
{"lineNum":"  111","line":"      LibC.munmap(stack, Fiber::STACK_SIZE)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"    end"},
{"lineNum":"  113","line":"  end"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"  def run","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"    @proc.call","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  117","line":"  rescue ex"},
{"lineNum":"  118","line":"    if name = @name","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  119","line":"      STDERR.puts \"Unhandled exception in spawn(name: #{name}):\"","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  120","line":"    else"},
{"lineNum":"  121","line":"      STDERR.puts \"Unhandled exception in spawn:\"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  122","line":"    end"},
{"lineNum":"  123","line":"    ex.inspect_with_backtrace STDERR","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  124","line":"    STDERR.flush"},
{"lineNum":"  125","line":"  ensure"},
{"lineNum":"  126","line":"    @@stack_pool << @stack","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    # Remove the current fiber from the linked list"},
{"lineNum":"  129","line":"    if prev_fiber = @prev_fiber","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  130","line":"      prev_fiber.next_fiber = @next_fiber"},
{"lineNum":"  131","line":"    else"},
{"lineNum":"  132","line":"      @@first_fiber = @next_fiber"},
{"lineNum":"  133","line":"    end"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    if next_fiber = @next_fiber","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  136","line":"      next_fiber.prev_fiber = @prev_fiber"},
{"lineNum":"  137","line":"    else"},
{"lineNum":"  138","line":"      @@last_fiber = @prev_fiber","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":"    end"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    # Delete the resume event if it was used by `yield` or `sleep`"},
{"lineNum":"  142","line":"    @resume_event.try &.free","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    Scheduler.reschedule","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  145","line":"  end"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  @[NoInline]"},
{"lineNum":"  148","line":"  @[Naked]"},
{"lineNum":"  149","line":"  protected def self.switch_stacks(current, to) : Nil","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"    {% if flag?(:x86_64) %}"},
{"lineNum":"  151","line":"      asm(\""},
{"lineNum":"  152","line":"        pushq %rdi"},
{"lineNum":"  153","line":"        pushq %rbx"},
{"lineNum":"  154","line":"        pushq %rbp"},
{"lineNum":"  155","line":"        pushq %r12"},
{"lineNum":"  156","line":"        pushq %r13"},
{"lineNum":"  157","line":"        pushq %r14"},
{"lineNum":"  158","line":"        pushq %r15"},
{"lineNum":"  159","line":"        movq %rsp, ($0)"},
{"lineNum":"  160","line":"        movq ($1), %rsp"},
{"lineNum":"  161","line":"        popq %r15"},
{"lineNum":"  162","line":"        popq %r14"},
{"lineNum":"  163","line":"        popq %r13"},
{"lineNum":"  164","line":"        popq %r12"},
{"lineNum":"  165","line":"        popq %rbp"},
{"lineNum":"  166","line":"        popq %rbx"},
{"lineNum":"  167","line":"        popq %rdi\""},
{"lineNum":"  168","line":"              :: \"r\"(current), \"r\"(to))"},
{"lineNum":"  169","line":"    {% elsif flag?(:i686) %}"},
{"lineNum":"  170","line":"      asm(\""},
{"lineNum":"  171","line":"        pushl %edi"},
{"lineNum":"  172","line":"        pushl %ebx"},
{"lineNum":"  173","line":"        pushl %ebp"},
{"lineNum":"  174","line":"        pushl %esi"},
{"lineNum":"  175","line":"        movl %esp, ($0)"},
{"lineNum":"  176","line":"        movl ($1), %esp"},
{"lineNum":"  177","line":"        popl %esi"},
{"lineNum":"  178","line":"        popl %ebp"},
{"lineNum":"  179","line":"        popl %ebx"},
{"lineNum":"  180","line":"        popl %edi\""},
{"lineNum":"  181","line":"              :: \"r\"(current), \"r\"(to))"},
{"lineNum":"  182","line":"    {% elsif flag?(:aarch64) %}"},
{"lineNum":"  183","line":"      # Adapted from https://github.com/ldc-developers/druntime/blob/ldc/src/core/threadasm.S"},
{"lineNum":"  184","line":"      #"},
{"lineNum":"  185","line":"      # preserve/restore AAPCS64 registers"},
{"lineNum":"  186","line":"      # x19-x28   5.1.1 64-bit callee saved"},
{"lineNum":"  187","line":"      # x29       fp, or possibly callee saved reg - depends on platform choice 5.2.3)"},
{"lineNum":"  188","line":"      # x30       lr"},
{"lineNum":"  189","line":"      # x0        self argument (initial call)"},
{"lineNum":"  190","line":"      # d8-d15    5.1.2 says callee only must save bottom 64-bits (the \"d\" regs)"},
{"lineNum":"  191","line":"      asm(\""},
{"lineNum":"  192","line":"        stp     d15, d14, [sp, #-22*8]!"},
{"lineNum":"  193","line":"        stp     d13, d12, [sp, #2*8]"},
{"lineNum":"  194","line":"        stp     d11, d10, [sp, #4*8]"},
{"lineNum":"  195","line":"        stp     d9,  d8,  [sp, #6*8]"},
{"lineNum":"  196","line":"        stp     x30, x29, [sp, #8*8]  // lr, fp"},
{"lineNum":"  197","line":"        stp     x28, x27, [sp, #10*8]"},
{"lineNum":"  198","line":"        stp     x26, x25, [sp, #12*8]"},
{"lineNum":"  199","line":"        stp     x24, x23, [sp, #14*8]"},
{"lineNum":"  200","line":"        stp     x22, x21, [sp, #16*8]"},
{"lineNum":"  201","line":"        stp     x20, x19, [sp, #18*8]"},
{"lineNum":"  202","line":"        stp     x0,  x1,  [sp, #20*8] // self, alignment"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        mov     x19, sp"},
{"lineNum":"  205","line":"        str     x19, [$0]"},
{"lineNum":"  206","line":"        mov     sp, $1"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"        ldp     x0,  x1,  [sp, #20*8] // self, alignment"},
{"lineNum":"  209","line":"        ldp     x20, x19, [sp, #18*8]"},
{"lineNum":"  210","line":"        ldp     x22, x21, [sp, #16*8]"},
{"lineNum":"  211","line":"        ldp     x24, x23, [sp, #14*8]"},
{"lineNum":"  212","line":"        ldp     x26, x25, [sp, #12*8]"},
{"lineNum":"  213","line":"        ldp     x28, x27, [sp, #10*8]"},
{"lineNum":"  214","line":"        ldp     x30, x29, [sp, #8*8]  // lr, fp"},
{"lineNum":"  215","line":"        ldp     d9,  d8,  [sp, #6*8]"},
{"lineNum":"  216","line":"        ldp     d11, d10, [sp, #4*8]"},
{"lineNum":"  217","line":"        ldp     d13, d12, [sp, #2*8]"},
{"lineNum":"  218","line":"        ldp     d15, d14, [sp], #22*8"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"        // avoid a stack corruption that will confuse the unwinder"},
{"lineNum":"  221","line":"        mov     x16, x30 // save lr"},
{"lineNum":"  222","line":"        mov     x30, #0  // reset lr"},
{"lineNum":"  223","line":"        br      x16      // jump to new pc value"},
{"lineNum":"  224","line":"        \""},
{"lineNum":"  225","line":"              :: \"r\"(current), \"r\"(to))"},
{"lineNum":"  226","line":"    {% elsif flag?(:armhf) %}"},
{"lineNum":"  227","line":"      # we eventually reset LR to zero to avoid the ARM unwinder to mistake the"},
{"lineNum":"  228","line":"      # context switch as a regular call."},
{"lineNum":"  229","line":"      asm(\""},
{"lineNum":"  230","line":"        .fpu vfp"},
{"lineNum":"  231","line":"        stmdb  sp!, {r0, r4-r11, lr}"},
{"lineNum":"  232","line":"        vstmdb sp!, {d8-d15}"},
{"lineNum":"  233","line":"        str    sp, [$0]"},
{"lineNum":"  234","line":"        ldr    sp, [$1]"},
{"lineNum":"  235","line":"        vldmia sp!, {d8-d15}"},
{"lineNum":"  236","line":"        ldmia  sp!, {r0, r4-r11, lr}"},
{"lineNum":"  237","line":"        mov    r1, lr"},
{"lineNum":"  238","line":"        mov    lr, #0"},
{"lineNum":"  239","line":"        mov    pc, r1"},
{"lineNum":"  240","line":"        \""},
{"lineNum":"  241","line":"              :: \"r\"(current), \"r\"(to))"},
{"lineNum":"  242","line":"    {% elsif flag?(:arm) %}"},
{"lineNum":"  243","line":"      # we eventually reset LR to zero to avoid the ARM unwinder to mistake the"},
{"lineNum":"  244","line":"      # context switch as a regular call."},
{"lineNum":"  245","line":"      asm(\""},
{"lineNum":"  246","line":"        stmdb  sp!, {r0, r4-r11, lr}"},
{"lineNum":"  247","line":"        str    sp, [$0]"},
{"lineNum":"  248","line":"        ldr    sp, [$1]"},
{"lineNum":"  249","line":"        ldmia  sp!, {r0, r4-r11, lr}"},
{"lineNum":"  250","line":"        mov    r1, lr"},
{"lineNum":"  251","line":"        mov    lr, #0"},
{"lineNum":"  252","line":"        mov    pc, r1"},
{"lineNum":"  253","line":"        \""},
{"lineNum":"  254","line":"              :: \"r\"(current), \"r\"(to))"},
{"lineNum":"  255","line":"    {% end %}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"  end"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"  def resume : Nil"},
{"lineNum":"  259","line":"    current, Thread.current.current_fiber = Thread.current.current_fiber, self","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  260","line":"    GC.stack_bottom = @stack_bottom","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":"    {% if flag?(:aarch64) %}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"      Fiber.switch_stacks(pointerof(current.@stack_top), @stack_top)"},
{"lineNum":"  263","line":"    {% else %}"},
{"lineNum":"  264","line":"      Fiber.switch_stacks(pointerof(current.@stack_top), pointerof(@stack_top))"},
{"lineNum":"  265","line":"    {% end %}"},
{"lineNum":"  266","line":"  end"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"  def sleep(time : Time::Span)"},
{"lineNum":"  269","line":"    event = @resume_event ||= Scheduler.create_resume_event(self)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  270","line":"    event.add(time)"},
{"lineNum":"  271","line":"    Scheduler.reschedule","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  272","line":"  end"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"  def sleep(time : Number)"},
{"lineNum":"  275","line":"    sleep(time.seconds)"},
{"lineNum":"  276","line":"  end"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"  def yield"},
{"lineNum":"  279","line":"    sleep(0)"},
{"lineNum":"  280","line":"  end"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"  def self.sleep(time)"},
{"lineNum":"  283","line":"    Fiber.current.sleep(time)"},
{"lineNum":"  284","line":"  end"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"  def self.yield"},
{"lineNum":"  287","line":"    Fiber.current.yield"},
{"lineNum":"  288","line":"  end"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"  def to_s(io)"},
{"lineNum":"  291","line":"    io << \"#<\" << self.class.name << \":0x\""},
{"lineNum":"  292","line":"    object_id.to_s(16, io)"},
{"lineNum":"  293","line":"    if name = @name"},
{"lineNum":"  294","line":"      io << \": \" << name"},
{"lineNum":"  295","line":"    end"},
{"lineNum":"  296","line":"    io << \">\""},
{"lineNum":"  297","line":"  end"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"  def inspect(io)"},
{"lineNum":"  300","line":"    to_s(io)"},
{"lineNum":"  301","line":"  end"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"  protected def push_gc_roots"},
{"lineNum":"  304","line":"    # Push the used section of the stack"},
{"lineNum":"  305","line":"    GC.push_stack @stack_top, @stack_bottom"},
{"lineNum":"  306","line":"  end"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"  @@root = new"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"  def self.root : self","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  311","line":"    @@root"},
{"lineNum":"  312","line":"  end"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"  Thread.current.current_fiber = root"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"  def self.current : self"},
{"lineNum":"  317","line":"    Thread.current.current_fiber","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  318","line":"  end"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"  # This will push all fibers stacks whenever the GC wants to collect some memory"},
{"lineNum":"  321","line":"  GC.before_collect do"},
{"lineNum":"  322","line":"    fiber = @@first_fiber"},
{"lineNum":"  323","line":"    while fiber"},
{"lineNum":"  324","line":"      fiber.push_gc_roots unless fiber == Thread.current.current_fiber"},
{"lineNum":"  325","line":"      fiber = fiber.next_fiber"},
{"lineNum":"  326","line":"    end"},
{"lineNum":"  327","line":"  end"},
{"lineNum":"  328","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 49, "covered" : 0,};
var merged_data = [];
