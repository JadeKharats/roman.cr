var data = {lines:[
{"lineNum":"    1","line":"require \"./libxml2\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"class XML::Error < Exception"},
{"lineNum":"    4","line":"  getter line_number : Int32"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"  def self.new(error : LibXML::Error*)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    7","line":"    new String.new(error.value.message).chomp, error.value.line","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    8","line":"  end"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"  def initialize(message, @line_number)","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":"   11","line":"    super(message)"},
{"lineNum":"   12","line":"  end"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"  # TODO: this logic isn\'t thread/fiber safe, but error checking is less needed than"},
{"lineNum":"   15","line":"  # the ability to parse HTML5 and malformed documents. In any case, fix this."},
{"lineNum":"   16","line":"  @@errors = [] of self"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"  LibXML.xmlSetStructuredErrorFunc nil, ->(ctx, error) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   19","line":"    @@errors << XML::Error.new(error)"},
{"lineNum":"   20","line":"  }"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"  LibXML.xmlSetGenericErrorFunc nil, ->(ctx, fmt) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   23","line":"    # TODO: use va_start and va_end to"},
{"lineNum":"   24","line":"    message = String.new(fmt).chomp"},
{"lineNum":"   25","line":"    error = XML::Error.new(message, 0)"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    {% if flag?(:arm) || flag?(:aarch64) %}"},
{"lineNum":"   28","line":"      # libxml2 is likely missing ARM unwind tables (.ARM.extab and .ARM.exidx"},
{"lineNum":"   29","line":"      # sections) which prevent raising from a libxml2 context."},
{"lineNum":"   30","line":"      @@errors << error"},
{"lineNum":"   31","line":"    {% else %}"},
{"lineNum":"   32","line":"      raise error"},
{"lineNum":"   33","line":"    {% end %}"},
{"lineNum":"   34","line":"  }"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"  # :nodoc:"},
{"lineNum":"   37","line":"  def self.set_errors(node)"},
{"lineNum":"   38","line":"    if errors = self.errors"},
{"lineNum":"   39","line":"      node.errors = errors"},
{"lineNum":"   40","line":"    end"},
{"lineNum":"   41","line":"  end"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"  def self.errors"},
{"lineNum":"   44","line":"    if @@errors.empty?"},
{"lineNum":"   45","line":"      nil"},
{"lineNum":"   46","line":"    else"},
{"lineNum":"   47","line":"      errors = @@errors.dup"},
{"lineNum":"   48","line":"      @@errors.clear"},
{"lineNum":"   49","line":"      errors"},
{"lineNum":"   50","line":"    end"},
{"lineNum":"   51","line":"  end"},
{"lineNum":"   52","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 5, "covered" : 0,};
var merged_data = [];
