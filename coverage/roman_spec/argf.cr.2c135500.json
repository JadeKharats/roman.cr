var data = {lines:[
{"lineNum":"    1","line":"# :nodoc:"},
{"lineNum":"    2","line":"class IO::ARGF < IO"},
{"lineNum":"    3","line":"  @path : String?"},
{"lineNum":"    4","line":"  @current_io : IO?"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"  def initialize(@argv : Array(String), @stdin : IO)"},
{"lineNum":"    7","line":"    @path = nil"},
{"lineNum":"    8","line":"    @current_io = nil"},
{"lineNum":"    9","line":"    @initialized = false"},
{"lineNum":"   10","line":"    @read_from_stdin = false"},
{"lineNum":"   11","line":"  end"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"  def read(slice : Bytes)"},
{"lineNum":"   14","line":"    count = slice.size"},
{"lineNum":"   15","line":"    first_initialize unless @initialized"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    if current_io = @current_io"},
{"lineNum":"   18","line":"      read_count = read_from_current_io(current_io, slice, count)"},
{"lineNum":"   19","line":"    elsif !@read_from_stdin && !@argv.empty?"},
{"lineNum":"   20","line":"      # If there\'s no current_io it means we read all of ARGV."},
{"lineNum":"   21","line":"      # It might be the case that the user put more strings into"},
{"lineNum":"   22","line":"      # ARGV, so in this case we need to read from that."},
{"lineNum":"   23","line":"      read_next_argv"},
{"lineNum":"   24","line":"      read_count = read slice[0, count]"},
{"lineNum":"   25","line":"    else"},
{"lineNum":"   26","line":"      read_count = 0"},
{"lineNum":"   27","line":"    end"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    read_count"},
{"lineNum":"   30","line":"  end"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"  # :nodoc:"},
{"lineNum":"   33","line":"  def peek"},
{"lineNum":"   34","line":"    first_initialize unless @initialized"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    if current_io = @current_io"},
{"lineNum":"   37","line":"      peek = current_io.peek"},
{"lineNum":"   38","line":"      if peek && peek.empty? # EOF"},
{"lineNum":"   39","line":"        peek_next"},
{"lineNum":"   40","line":"      else"},
{"lineNum":"   41","line":"        peek"},
{"lineNum":"   42","line":"      end"},
{"lineNum":"   43","line":"    else"},
{"lineNum":"   44","line":"      peek_next"},
{"lineNum":"   45","line":"    end"},
{"lineNum":"   46","line":"  end"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"  private def peek_next"},
{"lineNum":"   49","line":"    if !@read_from_stdin && !@argv.empty?"},
{"lineNum":"   50","line":"      read_next_argv"},
{"lineNum":"   51","line":"      self.peek"},
{"lineNum":"   52","line":"    else"},
{"lineNum":"   53","line":"      nil"},
{"lineNum":"   54","line":"    end"},
{"lineNum":"   55","line":"  end"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"  def write(slice : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"    raise IO::Error.new \"Can\'t write to ARGF\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"  end"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  def path"},
{"lineNum":"   62","line":"    @path || @argv.first? || \"-\""},
{"lineNum":"   63","line":"  end"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"  private def first_initialize"},
{"lineNum":"   66","line":"    # This is the moment where we decide"},
{"lineNum":"   67","line":"    # whether we are going to use STDIN or ARGV"},
{"lineNum":"   68","line":"    @initialized = true"},
{"lineNum":"   69","line":"    if @argv.empty?"},
{"lineNum":"   70","line":"      @read_from_stdin = true"},
{"lineNum":"   71","line":"      @current_io = @stdin"},
{"lineNum":"   72","line":"    else"},
{"lineNum":"   73","line":"      read_next_argv"},
{"lineNum":"   74","line":"    end"},
{"lineNum":"   75","line":"  end"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  private def read_from_current_io(current_io, slice, count)"},
{"lineNum":"   78","line":"    read_count = current_io.read slice[0, count]"},
{"lineNum":"   79","line":"    if read_count < count"},
{"lineNum":"   80","line":"      unless @read_from_stdin"},
{"lineNum":"   81","line":"        current_io.close"},
{"lineNum":"   82","line":"        if @argv.empty?"},
{"lineNum":"   83","line":"          @current_io = nil"},
{"lineNum":"   84","line":"        else"},
{"lineNum":"   85","line":"          read_next_argv"},
{"lineNum":"   86","line":"          slice += read_count"},
{"lineNum":"   87","line":"          count -= read_count"},
{"lineNum":"   88","line":"          read_count += read slice[0, count]"},
{"lineNum":"   89","line":"        end"},
{"lineNum":"   90","line":"      end"},
{"lineNum":"   91","line":"    end"},
{"lineNum":"   92","line":"    read_count"},
{"lineNum":"   93","line":"  end"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"  private def read_next_argv"},
{"lineNum":"   96","line":"    path = @path = @argv.shift"},
{"lineNum":"   97","line":"    @current_io = File.open(path)"},
{"lineNum":"   98","line":"  end"},
{"lineNum":"   99","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
