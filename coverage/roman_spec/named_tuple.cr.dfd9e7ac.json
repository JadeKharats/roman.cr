var data = {lines:[
{"lineNum":"    1","line":"# A named tuple is a fixed-size, immutable, stack-allocated mapping"},
{"lineNum":"    2","line":"# of a fixed set of keys to values."},
{"lineNum":"    3","line":"#"},
{"lineNum":"    4","line":"# You can think of a `NamedTuple` as an immutable `Hash` whose keys (which"},
{"lineNum":"    5","line":"# are of type `Symbol`), and the types for each key, are known at compile time."},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# A named tuple can be created with a named tuple literal:"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# ```"},
{"lineNum":"   10","line":"# language = {name: \"Crystal\", year: 2011} # NamedTuple(name: String, year: Int32)"},
{"lineNum":"   11","line":"#"},
{"lineNum":"   12","line":"# language[:name]  # => \"Crystal\""},
{"lineNum":"   13","line":"# language[:year]  # => 2011"},
{"lineNum":"   14","line":"# language[:other] # compile time error"},
{"lineNum":"   15","line":"# ```"},
{"lineNum":"   16","line":"#"},
{"lineNum":"   17","line":"# The compiler knows what types are in each key, so when indexing a named tuple"},
{"lineNum":"   18","line":"# with a symbol literal the compiler will return the value for that key and"},
{"lineNum":"   19","line":"# with the expected type, like in the above snippet. Indexing with a symbol"},
{"lineNum":"   20","line":"# literal for which there\'s no key will give a compile-time error."},
{"lineNum":"   21","line":"#"},
{"lineNum":"   22","line":"# Indexing with a symbol that is only known at runtime will return"},
{"lineNum":"   23","line":"# a value whose type is the union of all the types in the named tuple,"},
{"lineNum":"   24","line":"# and might raise `KeyError`."},
{"lineNum":"   25","line":"struct NamedTuple"},
{"lineNum":"   26","line":"  # Creates a named tuple that will contain the given arguments."},
{"lineNum":"   27","line":"  #"},
{"lineNum":"   28","line":"  # This method is useful in macros and generic code because with it you can"},
{"lineNum":"   29","line":"  # creates empty named tuples, something that you can\'t do with a tuple literal."},
{"lineNum":"   30","line":"  #"},
{"lineNum":"   31","line":"  # ```"},
{"lineNum":"   32","line":"  # NamedTuple.new(name: \"Crystal\", year: 2011) #=> {name: \"Crystal\", year: 2011}"},
{"lineNum":"   33","line":"  # NamedTuple.new # => {}"},
{"lineNum":"   34","line":"  # {}             # syntax error"},
{"lineNum":"   35","line":"  # ```"},
{"lineNum":"   36","line":"  def self.new(**options : **T)"},
{"lineNum":"   37","line":"    options"},
{"lineNum":"   38","line":"  end"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"  # Creates a named tuple from the given hash, with elements casted to the given types."},
{"lineNum":"   41","line":"  # Here the Int32 | String union is cast to Int32."},
{"lineNum":"   42","line":"  #"},
{"lineNum":"   43","line":"  # ```"},
{"lineNum":"   44","line":"  # num_or_str = 42.as(Int32 | String)"},
{"lineNum":"   45","line":"  # NamedTuple(name: String, val: Int32).from({\"name\" => \"number\", \"val\" => num_or_str}) # => {name: \"number\", val: 42}"},
{"lineNum":"   46","line":"  #"},
{"lineNum":"   47","line":"  # num_or_str = \"a string\".as(Int32 | String)"},
{"lineNum":"   48","line":"  # NamedTuple(name: String, val: Int32).from({\"name\" => \"number\", \"val\" => num_or_str}) # raises TypeCastError (cast from String to Int32 failed)"},
{"lineNum":"   49","line":"  # ```"},
{"lineNum":"   50","line":"  # See also: `#from`."},
{"lineNum":"   51","line":"  def self.from(hash : Hash) : self"},
{"lineNum":"   52","line":"    {% begin %}"},
{"lineNum":"   53","line":"    NamedTuple.new(**{{T}}).from(hash)"},
{"lineNum":"   54","line":"    {% end %}"},
{"lineNum":"   55","line":"  end"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"  # Expects to be called on a named tuple whose values are types, creates a tuple from the given hash,"},
{"lineNum":"   58","line":"  # with types casted appropriately. The hash keys must be either symbols or strings."},
{"lineNum":"   59","line":"  #"},
{"lineNum":"   60","line":"  # This allows you to easily pass a hash as individual named arguments to a method."},
{"lineNum":"   61","line":"  #"},
{"lineNum":"   62","line":"  # ```"},
{"lineNum":"   63","line":"  # require \"json\""},
{"lineNum":"   64","line":"  #"},
{"lineNum":"   65","line":"  # def speak_about(thing : String, n : Int64)"},
{"lineNum":"   66","line":"  #   \"I see #{n} #{thing}s\""},
{"lineNum":"   67","line":"  # end"},
{"lineNum":"   68","line":"  #"},
{"lineNum":"   69","line":"  # data = JSON.parse(%({\"thing\": \"world\", \"n\": 2})).as_h"},
{"lineNum":"   70","line":"  # speak_about(**{thing: String, n: Int64}.from(data)) # => \"I see 2 worlds\""},
{"lineNum":"   71","line":"  # ```"},
{"lineNum":"   72","line":"  def from(hash : Hash)"},
{"lineNum":"   73","line":"    if size != hash.size"},
{"lineNum":"   74","line":"      raise ArgumentError.new(\"Expected a hash with #{size} keys but one with #{hash.size} keys was given.\")"},
{"lineNum":"   75","line":"    end"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    {% begin %}"},
{"lineNum":"   78","line":"      NamedTuple.new("},
{"lineNum":"   79","line":"      {% for key, value in T %}"},
{"lineNum":"   80","line":"        {{key.stringify}}: self[{{key.symbolize}}].cast(hash.fetch({{key.symbolize}}) { hash[\"{{key}}\"] }),"},
{"lineNum":"   81","line":"      {% end %}"},
{"lineNum":"   82","line":"      )"},
{"lineNum":"   83","line":"    {% end %}"},
{"lineNum":"   84","line":"  end"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"  # Returns the value for the given *key*, if there\'s such key, otherwise raises `KeyError`."},
{"lineNum":"   87","line":"  #"},
{"lineNum":"   88","line":"  # ```"},
{"lineNum":"   89","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"   90","line":"  #"},
{"lineNum":"   91","line":"  # key = :name"},
{"lineNum":"   92","line":"  # tuple[key] # => \"Crystal\""},
{"lineNum":"   93","line":"  #"},
{"lineNum":"   94","line":"  # key = \"year\""},
{"lineNum":"   95","line":"  # tuple[key] # => 2011"},
{"lineNum":"   96","line":"  #"},
{"lineNum":"   97","line":"  # key = :other"},
{"lineNum":"   98","line":"  # tuple[key] # raises KeyError"},
{"lineNum":"   99","line":"  # ```"},
{"lineNum":"  100","line":"  def [](key : Symbol | String)"},
{"lineNum":"  101","line":"    fetch(key) { raise KeyError.new \"Missing named tuple key: #{key.inspect}\" }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  102","line":"  end"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"  # Returns the value for the given *key*, if there\'s such key, otherwise returns `nil`."},
{"lineNum":"  105","line":"  #"},
{"lineNum":"  106","line":"  # ```"},
{"lineNum":"  107","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  108","line":"  #"},
{"lineNum":"  109","line":"  # key = :name"},
{"lineNum":"  110","line":"  # tuple[key]? # => \"Crystal\""},
{"lineNum":"  111","line":"  #"},
{"lineNum":"  112","line":"  # key = \"year\""},
{"lineNum":"  113","line":"  # tuple[key] # => 2011"},
{"lineNum":"  114","line":"  #"},
{"lineNum":"  115","line":"  # key = :other"},
{"lineNum":"  116","line":"  # tuple[key]? # => nil"},
{"lineNum":"  117","line":"  # ```"},
{"lineNum":"  118","line":"  def []?(key : Symbol | String)"},
{"lineNum":"  119","line":"    fetch(key, nil)"},
{"lineNum":"  120","line":"  end"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  # Returns the value for the given *key*, if there\'s such key, otherwise returns *default_value*."},
{"lineNum":"  123","line":"  #"},
{"lineNum":"  124","line":"  # ```"},
{"lineNum":"  125","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  126","line":"  # tuple.fetch(:name, \"Unknown\") # => \"Crystal\""},
{"lineNum":"  127","line":"  # tuple.fetch(\"year\", 0)        # => 2011"},
{"lineNum":"  128","line":"  # tuple.fetch(:other, 0)        # => 0"},
{"lineNum":"  129","line":"  # ```"},
{"lineNum":"  130","line":"  def fetch(key : Symbol | String, default_value)"},
{"lineNum":"  131","line":"    fetch(key) { default_value }"},
{"lineNum":"  132","line":"  end"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  # Returns the value for the given *key*, if there\'s such key, otherwise the value returned by the block."},
{"lineNum":"  135","line":"  #"},
{"lineNum":"  136","line":"  # ```"},
{"lineNum":"  137","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  138","line":"  # tuple.fetch(:name) { \"Unknown\" } # => \"Crystal\""},
{"lineNum":"  139","line":"  # tuple.fetch(:other) { 0 }        # => 0"},
{"lineNum":"  140","line":"  # ```"},
{"lineNum":"  141","line":"  def fetch(key : Symbol, &block)"},
{"lineNum":"  142","line":"    {% for key in T %}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  143","line":"      return self[{{key.symbolize}}] if {{key.symbolize}} == key"},
{"lineNum":"  144","line":"    {% end %}"},
{"lineNum":"  145","line":"    yield"},
{"lineNum":"  146","line":"  end"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"  # Returns the value for the given *key*, if there\'s such key, otherwise the value returned by the block."},
{"lineNum":"  149","line":"  #"},
{"lineNum":"  150","line":"  # ```"},
{"lineNum":"  151","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  152","line":"  # tuple.fetch(\"name\") { \"Unknown\" } # => \"Crystal\""},
{"lineNum":"  153","line":"  # tuple.fetch(\"other\") { 0 }        # => 0"},
{"lineNum":"  154","line":"  # ```"},
{"lineNum":"  155","line":"  def fetch(key : String, &block)"},
{"lineNum":"  156","line":"    {% for key in T %}"},
{"lineNum":"  157","line":"      return self[{{key.symbolize}}] if {{key.stringify}} == key"},
{"lineNum":"  158","line":"    {% end %}"},
{"lineNum":"  159","line":"    yield"},
{"lineNum":"  160","line":"  end"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"  # Merges two named tuples into one, returning a new named tuple."},
{"lineNum":"  163","line":"  # If a key is defined in both tuples, the value and its type is used from *other*."},
{"lineNum":"  164","line":"  #"},
{"lineNum":"  165","line":"  # ```"},
{"lineNum":"  166","line":"  # a = {foo: \"Hello\", bar: \"Old\"}"},
{"lineNum":"  167","line":"  # b = {bar: \"New\", baz: \"Bye\"}"},
{"lineNum":"  168","line":"  # a.merge(b) # => {foo: \"Hello\", bar: \"New\", baz: \"Bye\"}"},
{"lineNum":"  169","line":"  # ```"},
{"lineNum":"  170","line":"  def merge(other : NamedTuple)"},
{"lineNum":"  171","line":"    merge(**other)"},
{"lineNum":"  172","line":"  end"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"  # ditto"},
{"lineNum":"  175","line":"  def merge(**other : **U) forall U"},
{"lineNum":"  176","line":"    {% begin %}"},
{"lineNum":"  177","line":"    {"},
{"lineNum":"  178","line":"      {% for k in T %} {% unless U.keys.includes?(k) %} {{k.stringify}}: self[{{k.symbolize}}],{% end %} {% end %}"},
{"lineNum":"  179","line":"      {% for k in U %} {{k.stringify}}: other[{{k.symbolize}}], {% end %}"},
{"lineNum":"  180","line":"    }"},
{"lineNum":"  181","line":"    {% end %}"},
{"lineNum":"  182","line":"  end"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"  # Returns a hash value based on this name tuple\'s size, keys and values."},
{"lineNum":"  185","line":"  #"},
{"lineNum":"  186","line":"  # See also: `Object#hash`."},
{"lineNum":"  187","line":"  # See `Object#hash(hasher)`"},
{"lineNum":"  188","line":"  def hash(hasher)"},
{"lineNum":"  189","line":"    {% for key in T.keys.sort %}"},
{"lineNum":"  190","line":"      hasher = {{key.symbolize}}.hash(hasher)"},
{"lineNum":"  191","line":"      hasher = self[{{key.symbolize}}].hash(hasher)"},
{"lineNum":"  192","line":"    {% end %}"},
{"lineNum":"  193","line":"    hasher"},
{"lineNum":"  194","line":"  end"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"  # Returns the types of this named tuple type."},
{"lineNum":"  197","line":"  #"},
{"lineNum":"  198","line":"  # ```"},
{"lineNum":"  199","line":"  # tuple = {a: 1, b: \"hello\", c: \'x\'}"},
{"lineNum":"  200","line":"  # tuple.class.types # => {a: Int32, b: String, c: Char}"},
{"lineNum":"  201","line":"  # ```"},
{"lineNum":"  202","line":"  def self.types"},
{"lineNum":"  203","line":"    NamedTuple.new(**{{T}})"},
{"lineNum":"  204","line":"  end"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"  # Same as `to_s`."},
{"lineNum":"  207","line":"  def inspect"},
{"lineNum":"  208","line":"    to_s"},
{"lineNum":"  209","line":"  end"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"  # Returns a `Tuple` of symbols with the keys in this named tuple."},
{"lineNum":"  212","line":"  #"},
{"lineNum":"  213","line":"  # ```"},
{"lineNum":"  214","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  215","line":"  # tuple.keys # => {:name, :year}"},
{"lineNum":"  216","line":"  # ```"},
{"lineNum":"  217","line":"  def keys"},
{"lineNum":"  218","line":"    {% begin %}"},
{"lineNum":"  219","line":"      Tuple.new("},
{"lineNum":"  220","line":"        {% for key in T %}"},
{"lineNum":"  221","line":"          {{key.symbolize}},"},
{"lineNum":"  222","line":"        {% end %}"},
{"lineNum":"  223","line":"      )"},
{"lineNum":"  224","line":"    {% end %}"},
{"lineNum":"  225","line":"  end"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"  protected def sorted_keys"},
{"lineNum":"  228","line":"    {% begin %}"},
{"lineNum":"  229","line":"      Tuple.new("},
{"lineNum":"  230","line":"        {% for key in T.keys.sort %}"},
{"lineNum":"  231","line":"          {{key.symbolize}},"},
{"lineNum":"  232","line":"        {% end %}"},
{"lineNum":"  233","line":"      )"},
{"lineNum":"  234","line":"    {% end %}"},
{"lineNum":"  235","line":"  end"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"  # Returns a `Tuple` with the values in this named tuple."},
{"lineNum":"  238","line":"  #"},
{"lineNum":"  239","line":"  # ```"},
{"lineNum":"  240","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  241","line":"  # tuple.values # => {\"Crystal\", 2011}"},
{"lineNum":"  242","line":"  # ```"},
{"lineNum":"  243","line":"  def values"},
{"lineNum":"  244","line":"    {% begin %}"},
{"lineNum":"  245","line":"      Tuple.new("},
{"lineNum":"  246","line":"        {% for key in T %}"},
{"lineNum":"  247","line":"          self[{{key.symbolize}}],"},
{"lineNum":"  248","line":"        {% end %}"},
{"lineNum":"  249","line":"      )"},
{"lineNum":"  250","line":"    {% end %}"},
{"lineNum":"  251","line":"  end"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"  # Returns `true` if this named tuple has the given *key*, `false` otherwise."},
{"lineNum":"  254","line":"  #"},
{"lineNum":"  255","line":"  # ```"},
{"lineNum":"  256","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  257","line":"  # tuple.has_key?(:name)  # => true"},
{"lineNum":"  258","line":"  # tuple.has_key?(:other) # => false"},
{"lineNum":"  259","line":"  # ```"},
{"lineNum":"  260","line":"  def has_key?(key : Symbol) : Bool"},
{"lineNum":"  261","line":"    {% for key in T %}"},
{"lineNum":"  262","line":"      return true if {{key.symbolize}} == key"},
{"lineNum":"  263","line":"    {% end %}"},
{"lineNum":"  264","line":"    false"},
{"lineNum":"  265","line":"  end"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"  # ditto"},
{"lineNum":"  268","line":"  def has_key?(key : String) : Bool"},
{"lineNum":"  269","line":"    {% for key in T %}"},
{"lineNum":"  270","line":"      return true if {{key.stringify}} == key"},
{"lineNum":"  271","line":"    {% end %}"},
{"lineNum":"  272","line":"    false"},
{"lineNum":"  273","line":"  end"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"  # Appends a string representation of this named tuple to the given `IO`."},
{"lineNum":"  276","line":"  #"},
{"lineNum":"  277","line":"  # ```"},
{"lineNum":"  278","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  279","line":"  # tuple.to_s # => %({name: \"Crystal\", year: 2011})"},
{"lineNum":"  280","line":"  # ```"},
{"lineNum":"  281","line":"  def to_s(io)"},
{"lineNum":"  282","line":"    io << \"{\""},
{"lineNum":"  283","line":"    {% for key, value, i in T %}"},
{"lineNum":"  284","line":"      {% if i > 0 %}"},
{"lineNum":"  285","line":"        io << \", \""},
{"lineNum":"  286","line":"      {% end %}"},
{"lineNum":"  287","line":"      key = {{key.stringify}}"},
{"lineNum":"  288","line":"      if Symbol.needs_quotes?(key)"},
{"lineNum":"  289","line":"        key.inspect(io)"},
{"lineNum":"  290","line":"      else"},
{"lineNum":"  291","line":"        io << key"},
{"lineNum":"  292","line":"      end"},
{"lineNum":"  293","line":"      io << \": \""},
{"lineNum":"  294","line":"      self[{{key.symbolize}}].inspect(io)"},
{"lineNum":"  295","line":"    {% end %}"},
{"lineNum":"  296","line":"    io << \"}\""},
{"lineNum":"  297","line":"  end"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"  def pretty_print(pp)"},
{"lineNum":"  300","line":"    pp.surround(\"{\", \"}\", left_break: nil, right_break: nil) do"},
{"lineNum":"  301","line":"      {% for key, value, i in T %}"},
{"lineNum":"  302","line":"        {% if i > 0 %}"},
{"lineNum":"  303","line":"          pp.comma"},
{"lineNum":"  304","line":"        {% end %}"},
{"lineNum":"  305","line":"        pp.group do"},
{"lineNum":"  306","line":"          key = {{key.stringify}}"},
{"lineNum":"  307","line":"          if Symbol.needs_quotes?(key)"},
{"lineNum":"  308","line":"            pp.text key.inspect"},
{"lineNum":"  309","line":"          else"},
{"lineNum":"  310","line":"            pp.text key"},
{"lineNum":"  311","line":"          end"},
{"lineNum":"  312","line":"          pp.text \": \""},
{"lineNum":"  313","line":"          pp.nest do"},
{"lineNum":"  314","line":"            pp.breakable \"\""},
{"lineNum":"  315","line":"            self[{{key.symbolize}}].pretty_print(pp)"},
{"lineNum":"  316","line":"          end"},
{"lineNum":"  317","line":"        end"},
{"lineNum":"  318","line":"      {% end %}"},
{"lineNum":"  319","line":"    end"},
{"lineNum":"  320","line":"  end"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"  # Yields each key and value in this named tuple."},
{"lineNum":"  323","line":"  #"},
{"lineNum":"  324","line":"  # ```"},
{"lineNum":"  325","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  326","line":"  # tuple.each do |key, value|"},
{"lineNum":"  327","line":"  #   puts \"#{key} = #{value}\""},
{"lineNum":"  328","line":"  # end"},
{"lineNum":"  329","line":"  # ```"},
{"lineNum":"  330","line":"  #"},
{"lineNum":"  331","line":"  # Output:"},
{"lineNum":"  332","line":"  #"},
{"lineNum":"  333","line":"  # ```text"},
{"lineNum":"  334","line":"  # name = Crystal"},
{"lineNum":"  335","line":"  # year = 2011"},
{"lineNum":"  336","line":"  # ```"},
{"lineNum":"  337","line":"  def each : Nil"},
{"lineNum":"  338","line":"    {% for key in T %}"},
{"lineNum":"  339","line":"      yield {{key.symbolize}}, self[{{key.symbolize}}]"},
{"lineNum":"  340","line":"    {% end %}"},
{"lineNum":"  341","line":"  end"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"  # Yields each key in this named tuple."},
{"lineNum":"  344","line":"  #"},
{"lineNum":"  345","line":"  # ```"},
{"lineNum":"  346","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  347","line":"  # tuple.each_key do |key|"},
{"lineNum":"  348","line":"  #   puts key"},
{"lineNum":"  349","line":"  # end"},
{"lineNum":"  350","line":"  # ```"},
{"lineNum":"  351","line":"  #"},
{"lineNum":"  352","line":"  # Output:"},
{"lineNum":"  353","line":"  #"},
{"lineNum":"  354","line":"  # ```text"},
{"lineNum":"  355","line":"  # name"},
{"lineNum":"  356","line":"  # year"},
{"lineNum":"  357","line":"  # ```"},
{"lineNum":"  358","line":"  def each_key : Nil"},
{"lineNum":"  359","line":"    {% for key in T %}"},
{"lineNum":"  360","line":"      yield {{key.symbolize}}"},
{"lineNum":"  361","line":"    {% end %}"},
{"lineNum":"  362","line":"  end"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"  # Yields each value in this named tuple."},
{"lineNum":"  365","line":"  #"},
{"lineNum":"  366","line":"  # ```"},
{"lineNum":"  367","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  368","line":"  # tuple.each_value do |value|"},
{"lineNum":"  369","line":"  #   puts value"},
{"lineNum":"  370","line":"  # end"},
{"lineNum":"  371","line":"  # ```"},
{"lineNum":"  372","line":"  #"},
{"lineNum":"  373","line":"  # Output:"},
{"lineNum":"  374","line":"  #"},
{"lineNum":"  375","line":"  # ```text"},
{"lineNum":"  376","line":"  # Crystal"},
{"lineNum":"  377","line":"  # 2011"},
{"lineNum":"  378","line":"  # ```"},
{"lineNum":"  379","line":"  def each_value : Nil"},
{"lineNum":"  380","line":"    {% for key in T %}"},
{"lineNum":"  381","line":"      yield self[{{key.symbolize}}]"},
{"lineNum":"  382","line":"    {% end %}"},
{"lineNum":"  383","line":"  end"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"  # Yields each key and value, together with an index starting at *offset*, in this named tuple."},
{"lineNum":"  386","line":"  #"},
{"lineNum":"  387","line":"  # ```"},
{"lineNum":"  388","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  389","line":"  # tuple.each_with_index do |key, value, i|"},
{"lineNum":"  390","line":"  #   puts \"#{i + 1}) #{key} = #{value}\""},
{"lineNum":"  391","line":"  # end"},
{"lineNum":"  392","line":"  # ```"},
{"lineNum":"  393","line":"  #"},
{"lineNum":"  394","line":"  # Output:"},
{"lineNum":"  395","line":"  #"},
{"lineNum":"  396","line":"  # ```text"},
{"lineNum":"  397","line":"  # 1) name = Crystal"},
{"lineNum":"  398","line":"  # 2) year = 2011"},
{"lineNum":"  399","line":"  # ```"},
{"lineNum":"  400","line":"  def each_with_index(offset = 0)"},
{"lineNum":"  401","line":"    i = offset"},
{"lineNum":"  402","line":"    each do |key, value|"},
{"lineNum":"  403","line":"      yield key, value, i"},
{"lineNum":"  404","line":"      i += 1"},
{"lineNum":"  405","line":"    end"},
{"lineNum":"  406","line":"  end"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"  # Returns an `Array` populated with the results of each iteration in the given block,"},
{"lineNum":"  409","line":"  # which is given each key and value in this named tuple."},
{"lineNum":"  410","line":"  #"},
{"lineNum":"  411","line":"  # ```"},
{"lineNum":"  412","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  413","line":"  # tuple.map { |k, v| \"#{k}: #{v}\" } # => [\"name: Crystal\", \"year: 2011\"]"},
{"lineNum":"  414","line":"  # ```"},
{"lineNum":"  415","line":"  def map"},
{"lineNum":"  416","line":"    array = Array(typeof(yield first_key_internal, first_value_internal)).new(size)"},
{"lineNum":"  417","line":"    each do |k, v|"},
{"lineNum":"  418","line":"      array.push yield k, v"},
{"lineNum":"  419","line":"    end"},
{"lineNum":"  420","line":"    array"},
{"lineNum":"  421","line":"  end"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"  # Returns a new `Array` of tuples populated with each key-value pair."},
{"lineNum":"  424","line":"  #"},
{"lineNum":"  425","line":"  # ```"},
{"lineNum":"  426","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  427","line":"  # tuple.to_a # => [{:name, \"Crystal\"}, {:year, 2011}]"},
{"lineNum":"  428","line":"  # ```"},
{"lineNum":"  429","line":"  def to_a"},
{"lineNum":"  430","line":"    ary = Array({typeof(first_key_internal), typeof(first_value_internal)}).new(size)"},
{"lineNum":"  431","line":"    each do |key, value|"},
{"lineNum":"  432","line":"      ary << {key.as(typeof(first_key_internal)), value.as(typeof(first_value_internal))}"},
{"lineNum":"  433","line":"    end"},
{"lineNum":"  434","line":"    ary"},
{"lineNum":"  435","line":"  end"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"  # Returns a `Hash` with the keys and values in this named tuple."},
{"lineNum":"  438","line":"  #"},
{"lineNum":"  439","line":"  # ```"},
{"lineNum":"  440","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  441","line":"  # tuple.to_h # => {:name => \"Crystal\", :year => 2011}"},
{"lineNum":"  442","line":"  # ```"},
{"lineNum":"  443","line":"  def to_h"},
{"lineNum":"  444","line":"    {% if T.size == 0 %}"},
{"lineNum":"  445","line":"      {% raise \"Can\'t convert an empty NamedTuple to a Hash\" %}"},
{"lineNum":"  446","line":"    {% else %}"},
{"lineNum":"  447","line":"      {"},
{"lineNum":"  448","line":"        {% for key in T %}"},
{"lineNum":"  449","line":"          {{key.symbolize}} => self[{{key.symbolize}}],"},
{"lineNum":"  450","line":"        {% end %}"},
{"lineNum":"  451","line":"      }"},
{"lineNum":"  452","line":"    {% end %}"},
{"lineNum":"  453","line":"  end"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"  # Returns the number of elements in this named tuple."},
{"lineNum":"  456","line":"  #"},
{"lineNum":"  457","line":"  # ```"},
{"lineNum":"  458","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  459","line":"  # tuple.size # => 2"},
{"lineNum":"  460","line":"  # ```"},
{"lineNum":"  461","line":"  def size"},
{"lineNum":"  462","line":"    {{T.size}}"},
{"lineNum":"  463","line":"  end"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"  # Returns `true` if this named tuple is empty."},
{"lineNum":"  466","line":"  #"},
{"lineNum":"  467","line":"  # ```"},
{"lineNum":"  468","line":"  # tuple = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  469","line":"  # tuple.empty? # => false"},
{"lineNum":"  470","line":"  # ```"},
{"lineNum":"  471","line":"  def empty?"},
{"lineNum":"  472","line":"    size == 0"},
{"lineNum":"  473","line":"  end"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"  # Returns `true` if this tuple has the same keys as *other*, and values"},
{"lineNum":"  476","line":"  # for each key are the same in `self` and *other*."},
{"lineNum":"  477","line":"  #"},
{"lineNum":"  478","line":"  # ```"},
{"lineNum":"  479","line":"  # tuple1 = {name: \"Crystal\", year: 2011}"},
{"lineNum":"  480","line":"  # tuple2 = {year: 2011, name: \"Crystal\"}"},
{"lineNum":"  481","line":"  # tuple3 = {name: \"Crystal\", year: 2012}"},
{"lineNum":"  482","line":"  # tuple4 = {name: \"Crystal\", year: 2011.0}"},
{"lineNum":"  483","line":"  #"},
{"lineNum":"  484","line":"  # tuple1 == tuple2 # => true"},
{"lineNum":"  485","line":"  # tuple1 == tuple3 # => false"},
{"lineNum":"  486","line":"  # tuple1 == tuple4 # => true"},
{"lineNum":"  487","line":"  # ```"},
{"lineNum":"  488","line":"  def ==(other : self)"},
{"lineNum":"  489","line":"    {% for key in T %}"},
{"lineNum":"  490","line":"      return false unless self[{{key.symbolize}}] == other[{{key.symbolize}}]"},
{"lineNum":"  491","line":"    {% end %}"},
{"lineNum":"  492","line":"    true"},
{"lineNum":"  493","line":"  end"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"  # ditto"},
{"lineNum":"  496","line":"  def ==(other : NamedTuple)"},
{"lineNum":"  497","line":"    return false unless sorted_keys == other.sorted_keys"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    {% for key in T %}"},
{"lineNum":"  500","line":"      return false unless self[{{key.symbolize}}] == other[{{key.symbolize}}]?"},
{"lineNum":"  501","line":"    {% end %}"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"    return true"},
{"lineNum":"  504","line":"  end"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"  # Returns a named tuple with the same keys but with cloned values, using the `clone` method."},
{"lineNum":"  507","line":"  def clone"},
{"lineNum":"  508","line":"    {% begin %}"},
{"lineNum":"  509","line":"      {"},
{"lineNum":"  510","line":"        {% for key in T %}"},
{"lineNum":"  511","line":"          {{key.stringify}}: self[{{key.symbolize}}].clone,"},
{"lineNum":"  512","line":"        {% end %}"},
{"lineNum":"  513","line":"      }"},
{"lineNum":"  514","line":"    {% end %}"},
{"lineNum":"  515","line":"  end"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"  private def first_key_internal"},
{"lineNum":"  518","line":"    i = 0"},
{"lineNum":"  519","line":"    keys[i]"},
{"lineNum":"  520","line":"  end"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"  private def first_value_internal"},
{"lineNum":"  523","line":"    i = 0"},
{"lineNum":"  524","line":"    values[i]"},
{"lineNum":"  525","line":"  end"},
{"lineNum":"  526","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
