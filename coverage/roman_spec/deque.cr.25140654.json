var data = {lines:[
{"lineNum":"    1","line":"# A Deque (\"[double-ended queue](https://en.wikipedia.org/wiki/Double-ended_queue)\") is a collection of objects of type"},
{"lineNum":"    2","line":"# T that behaves much like an Array."},
{"lineNum":"    3","line":"#"},
{"lineNum":"    4","line":"# Deque has a subset of Array\'s API. It performs better than an `Array` when there are frequent insertions or deletions"},
{"lineNum":"    5","line":"# of items near the beginning or the end."},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# The most typical use case of a Deque is a queue: use `push` to add items to the end of the queue and `shift` to get"},
{"lineNum":"    8","line":"# and remove the item at the beginning of the queue."},
{"lineNum":"    9","line":"#"},
{"lineNum":"   10","line":"# This Deque is implemented with a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array) used as a"},
{"lineNum":"   11","line":"# [circular buffer](https://en.wikipedia.org/wiki/Circular_buffer)."},
{"lineNum":"   12","line":"class Deque(T)"},
{"lineNum":"   13","line":"  include Indexable(T)"},
{"lineNum":"   14","line":"  include Comparable(Deque)"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"  # This Deque is based on a circular buffer. It works like a normal array, but when an item is removed from the left"},
{"lineNum":"   17","line":"  # side, instead of shifting all the items, only the start position is shifted. This can lead to configurations like:"},
{"lineNum":"   18","line":"  # [234---01] @start = 6, size = 5, @capacity = 8"},
{"lineNum":"   19","line":"  # (this Deque has 5 items, each equal to their index)"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"  @start = 0"},
{"lineNum":"   22","line":"  protected setter size"},
{"lineNum":"   23","line":"  protected getter buffer"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"  # Creates a new empty Deque"},
{"lineNum":"   26","line":"  def initialize","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   27","line":"    @size = 0"},
{"lineNum":"   28","line":"    @capacity = 0","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   29","line":"    @buffer = Pointer(T).null"},
{"lineNum":"   30","line":"  end"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"  # Creates a new empty `Deque` backed by a buffer that is initially `initial_capacity` big."},
{"lineNum":"   33","line":"  #"},
{"lineNum":"   34","line":"  # The `initial_capacity` is useful to avoid unnecessary reallocations of the internal buffer in case of growth. If you"},
{"lineNum":"   35","line":"  # have an estimate of the maximum number of elements a deque will hold, you should initialize it with that capacity"},
{"lineNum":"   36","line":"  # for improved execution performance."},
{"lineNum":"   37","line":"  #"},
{"lineNum":"   38","line":"  # ```"},
{"lineNum":"   39","line":"  # deq = Deque(Int32).new(5)"},
{"lineNum":"   40","line":"  # deq.size # => 0"},
{"lineNum":"   41","line":"  # ```"},
{"lineNum":"   42","line":"  def initialize(initial_capacity : Int)"},
{"lineNum":"   43","line":"    if initial_capacity < 0"},
{"lineNum":"   44","line":"      raise ArgumentError.new(\"Negative deque capacity: #{initial_capacity}\")"},
{"lineNum":"   45","line":"    end"},
{"lineNum":"   46","line":"    @size = 0"},
{"lineNum":"   47","line":"    @capacity = initial_capacity.to_i"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    if @capacity == 0"},
{"lineNum":"   50","line":"      @buffer = Pointer(T).null"},
{"lineNum":"   51","line":"    else"},
{"lineNum":"   52","line":"      @buffer = Pointer(T).malloc(@capacity)"},
{"lineNum":"   53","line":"    end"},
{"lineNum":"   54","line":"  end"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"  # Creates a new `Deque` of the given size filled with the same value in each position."},
{"lineNum":"   57","line":"  #"},
{"lineNum":"   58","line":"  # ```"},
{"lineNum":"   59","line":"  # Deque.new(3, \'a\') # => Deque{\'a\', \'a\', \'a\'}"},
{"lineNum":"   60","line":"  # ```"},
{"lineNum":"   61","line":"  def initialize(size : Int, value : T)"},
{"lineNum":"   62","line":"    if size < 0"},
{"lineNum":"   63","line":"      raise ArgumentError.new(\"Negative deque size: #{size}\")"},
{"lineNum":"   64","line":"    end"},
{"lineNum":"   65","line":"    @size = size.to_i"},
{"lineNum":"   66","line":"    @capacity = size.to_i"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    if @capacity == 0"},
{"lineNum":"   69","line":"      @buffer = Pointer(T).null"},
{"lineNum":"   70","line":"    else"},
{"lineNum":"   71","line":"      @buffer = Pointer(T).malloc(@capacity, value)"},
{"lineNum":"   72","line":"    end"},
{"lineNum":"   73","line":"  end"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"  # Creates a new `Deque` of the given size and invokes the block once for"},
{"lineNum":"   76","line":"  # each index of the deque, assigning the block\'s value in that index."},
{"lineNum":"   77","line":"  #"},
{"lineNum":"   78","line":"  # ```"},
{"lineNum":"   79","line":"  # Deque.new(3) { |i| (i + 1) ** 2 } # => Deque{1, 4, 9}"},
{"lineNum":"   80","line":"  # ```"},
{"lineNum":"   81","line":"  def self.new(size : Int, &block : Int32 -> T)"},
{"lineNum":"   82","line":"    if size < 0"},
{"lineNum":"   83","line":"      raise ArgumentError.new(\"Negative deque size: #{size}\")"},
{"lineNum":"   84","line":"    end"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    deque = Deque(T).new(size)"},
{"lineNum":"   87","line":"    deque.size = size"},
{"lineNum":"   88","line":"    size.to_i.times do |i|"},
{"lineNum":"   89","line":"      deque.buffer[i] = yield i"},
{"lineNum":"   90","line":"    end"},
{"lineNum":"   91","line":"    deque"},
{"lineNum":"   92","line":"  end"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  # Creates a new `Deque` that copies its items from an Array."},
{"lineNum":"   95","line":"  #"},
{"lineNum":"   96","line":"  # ```"},
{"lineNum":"   97","line":"  # Deque.new([1, 2, 3]) # => Deque{1, 2, 3}"},
{"lineNum":"   98","line":"  # ```"},
{"lineNum":"   99","line":"  def self.new(array : Array(T))"},
{"lineNum":"  100","line":"    Deque(T).new(array.size) { |i| array[i] }"},
{"lineNum":"  101","line":"  end"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"  # Returns `true` if it is passed a `Deque` and `equals?` returns `true`"},
{"lineNum":"  104","line":"  # for both deques, the caller and the argument.","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  105","line":"  #"},
{"lineNum":"  106","line":"  # ```"},
{"lineNum":"  107","line":"  # deq = Deque{2, 3}"},
{"lineNum":"  108","line":"  # deq.unshift 1"},
{"lineNum":"  109","line":"  # deq == Deque{1, 2, 3} # => true"},
{"lineNum":"  110","line":"  # deq == Deque{2, 3}    # => false"},
{"lineNum":"  111","line":"  # ```"},
{"lineNum":"  112","line":"  def ==(other : Deque)"},
{"lineNum":"  113","line":"    equals?(other) { |x, y| x == y }"},
{"lineNum":"  114","line":"  end"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"  # :nodoc:"},
{"lineNum":"  117","line":"  def ==(other)"},
{"lineNum":"  118","line":"    false"},
{"lineNum":"  119","line":"  end"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"  # Concatenation. Returns a new `Deque` built by concatenating"},
{"lineNum":"  122","line":"  # two deques together to create a third. The type of the new deque"},
{"lineNum":"  123","line":"  # is the union of the types of both the other deques."},
{"lineNum":"  124","line":"  def +(other : Deque(U)) forall U"},
{"lineNum":"  125","line":"    Deque(T | U).new.concat(self).concat(other)"},
{"lineNum":"  126","line":"  end"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"  # :nodoc:"},
{"lineNum":"  129","line":"  def +(other : Deque(T))"},
{"lineNum":"  130","line":"    dup.concat other"},
{"lineNum":"  131","line":"  end"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"  # Alias for `push`."},
{"lineNum":"  134","line":"  def <<(value : T)"},
{"lineNum":"  135","line":"    push(value)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  136","line":"  end"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"  # Sets the given value at the given *index*."},
{"lineNum":"  139","line":"  #"},
{"lineNum":"  140","line":"  # Raises `IndexError` if the deque had no previous value at the given *index*."},
{"lineNum":"  141","line":"  def []=(index : Int, value : T)"},
{"lineNum":"  142","line":"    index += @size if index < 0"},
{"lineNum":"  143","line":"    unless 0 <= index < @size"},
{"lineNum":"  144","line":"      raise IndexError.new"},
{"lineNum":"  145","line":"    end"},
{"lineNum":"  146","line":"    index += @start"},
{"lineNum":"  147","line":"    index -= @capacity if index >= @capacity"},
{"lineNum":"  148","line":"    @buffer[index] = value"},
{"lineNum":"  149","line":"  end"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"  def unsafe_at(index : Int)"},
{"lineNum":"  152","line":"    index += @start"},
{"lineNum":"  153","line":"    index -= @capacity if index >= @capacity"},
{"lineNum":"  154","line":"    @buffer[index]"},
{"lineNum":"  155","line":"  end"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"  # Removes all elements from `self`."},
{"lineNum":"  158","line":"  def clear"},
{"lineNum":"  159","line":"    halfs do |r|"},
{"lineNum":"  160","line":"      (@buffer + r.begin).clear(r.end - r.begin)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  161","line":"    end"},
{"lineNum":"  162","line":"    @size = 0"},
{"lineNum":"  163","line":"    @start = 0","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  164","line":"    self"},
{"lineNum":"  165","line":"  end"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"  # Returns a new `Deque` that has this deque\'s elements cloned."},
{"lineNum":"  168","line":"  # That is, it returns a deep copy of this deque."},
{"lineNum":"  169","line":"  #"},
{"lineNum":"  170","line":"  # Use `#dup` if you want a shallow copy."},
{"lineNum":"  171","line":"  def clone"},
{"lineNum":"  172","line":"    Deque(T).new(size) { |i| self[i].clone.as(T) }"},
{"lineNum":"  173","line":"  end"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"  # Appends the elements of *other* to `self`, and returns `self`."},
{"lineNum":"  176","line":"  def concat(other : Enumerable(T))"},
{"lineNum":"  177","line":"    other.each do |x|"},
{"lineNum":"  178","line":"      push x","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  179","line":"    end"},
{"lineNum":"  180","line":"    self"},
{"lineNum":"  181","line":"  end"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"  # Removes all items from `self` that are equal to *obj*."},
{"lineNum":"  184","line":"  #"},
{"lineNum":"  185","line":"  # ```"},
{"lineNum":"  186","line":"  # a = Deque{\"a\", \"b\", \"b\", \"b\", \"c\"}"},
{"lineNum":"  187","line":"  # a.delete(\"b\") # => true"},
{"lineNum":"  188","line":"  # a             # => Deque{\"a\", \"c\"}"},
{"lineNum":"  189","line":"  # ```"},
{"lineNum":"  190","line":"  def delete(obj)"},
{"lineNum":"  191","line":"    found = false"},
{"lineNum":"  192","line":"    i = 0"},
{"lineNum":"  193","line":"    while i < @size"},
{"lineNum":"  194","line":"      if self[i] == obj"},
{"lineNum":"  195","line":"        delete_at(i)"},
{"lineNum":"  196","line":"        found = true"},
{"lineNum":"  197","line":"      else"},
{"lineNum":"  198","line":"        i += 1"},
{"lineNum":"  199","line":"      end"},
{"lineNum":"  200","line":"    end"},
{"lineNum":"  201","line":"    found"},
{"lineNum":"  202","line":"  end"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"  # Delete the item that is present at the *index*. Items to the right"},
{"lineNum":"  205","line":"  # of this one will have their indices decremented."},
{"lineNum":"  206","line":"  # Raises `IndexError` if trying to delete an element outside the deque\'s range."},
{"lineNum":"  207","line":"  #"},
{"lineNum":"  208","line":"  # ```"},
{"lineNum":"  209","line":"  # a = Deque{1, 2, 3}"},
{"lineNum":"  210","line":"  # a.delete_at(1) # => 2"},
{"lineNum":"  211","line":"  # a              # => Deque{1, 3}"},
{"lineNum":"  212","line":"  # ```"},
{"lineNum":"  213","line":"  def delete_at(index : Int)"},
{"lineNum":"  214","line":"    if index < 0"},
{"lineNum":"  215","line":"      index += @size"},
{"lineNum":"  216","line":"    end"},
{"lineNum":"  217","line":"    unless 0 <= index < @size"},
{"lineNum":"  218","line":"      raise IndexError.new"},
{"lineNum":"  219","line":"    end"},
{"lineNum":"  220","line":"    return shift if index == 0"},
{"lineNum":"  221","line":"    return pop if index == @size - 1"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    rindex = @start + index"},
{"lineNum":"  224","line":"    rindex -= @capacity if rindex >= @capacity"},
{"lineNum":"  225","line":"    value = @buffer[rindex]"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    if index > @size / 2"},
{"lineNum":"  228","line":"      # Move following items to the left, starting with the first one"},
{"lineNum":"  229","line":"      # [56-01234] -> [6x-01235]"},
{"lineNum":"  230","line":"      dst = rindex"},
{"lineNum":"  231","line":"      finish = (@start + @size - 1) % @capacity"},
{"lineNum":"  232","line":"      loop do"},
{"lineNum":"  233","line":"        src = dst + 1"},
{"lineNum":"  234","line":"        src -= @capacity if src >= @capacity"},
{"lineNum":"  235","line":"        @buffer[dst] = @buffer[src]"},
{"lineNum":"  236","line":"        break if src == finish"},
{"lineNum":"  237","line":"        dst = src"},
{"lineNum":"  238","line":"      end"},
{"lineNum":"  239","line":"      (@buffer + finish).clear"},
{"lineNum":"  240","line":"    else"},
{"lineNum":"  241","line":"      # Move preceding items to the right, starting with the last one"},
{"lineNum":"  242","line":"      # [012345--] -> [x01345--]"},
{"lineNum":"  243","line":"      dst = rindex"},
{"lineNum":"  244","line":"      finish = @start"},
{"lineNum":"  245","line":"      @start += 1"},
{"lineNum":"  246","line":"      @start -= @capacity if @start >= @capacity"},
{"lineNum":"  247","line":"      loop do"},
{"lineNum":"  248","line":"        src = dst - 1"},
{"lineNum":"  249","line":"        src += @capacity if src < 0"},
{"lineNum":"  250","line":"        @buffer[dst] = @buffer[src]"},
{"lineNum":"  251","line":"        break if src == finish"},
{"lineNum":"  252","line":"        dst = src"},
{"lineNum":"  253","line":"      end"},
{"lineNum":"  254","line":"      (@buffer + finish).clear"},
{"lineNum":"  255","line":"    end"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    @size -= 1"},
{"lineNum":"  258","line":"    value"},
{"lineNum":"  259","line":"  end"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"  # Returns a new `Deque` that has exactly this deque\'s elements."},
{"lineNum":"  262","line":"  # That is, it returns a shallow copy of this deque."},
{"lineNum":"  263","line":"  def dup"},
{"lineNum":"  264","line":"    Deque(T).new(size) { |i| self[i].as(T) }"},
{"lineNum":"  265","line":"  end"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"  # Yields each item in this deque, from first to last."},
{"lineNum":"  268","line":"  #"},
{"lineNum":"  269","line":"  # Do not modify the deque while using this variant of `each`!"},
{"lineNum":"  270","line":"  def each : Nil"},
{"lineNum":"  271","line":"    halfs do |r|"},
{"lineNum":"  272","line":"      r.each do |i|"},
{"lineNum":"  273","line":"        yield @buffer[i]"},
{"lineNum":"  274","line":"      end"},
{"lineNum":"  275","line":"    end"},
{"lineNum":"  276","line":"  end"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"  # Insert a new item before the item at *index*. Items to the right"},
{"lineNum":"  279","line":"  # of this one will have their indices incremented."},
{"lineNum":"  280","line":"  #"},
{"lineNum":"  281","line":"  # ```"},
{"lineNum":"  282","line":"  # a = Deque{0, 1, 2}"},
{"lineNum":"  283","line":"  # a.insert(1, 7) # => Deque{0, 7, 1, 2}"},
{"lineNum":"  284","line":"  # ```"},
{"lineNum":"  285","line":"  def insert(index : Int, value : T)"},
{"lineNum":"  286","line":"    if index < 0"},
{"lineNum":"  287","line":"      index += @size + 1"},
{"lineNum":"  288","line":"    end"},
{"lineNum":"  289","line":"    unless 0 <= index <= @size"},
{"lineNum":"  290","line":"      raise IndexError.new"},
{"lineNum":"  291","line":"    end"},
{"lineNum":"  292","line":"    return unshift(value) if index == 0"},
{"lineNum":"  293","line":"    return push(value) if index == @size"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    increase_capacity if @size >= @capacity"},
{"lineNum":"  296","line":"    rindex = @start + index"},
{"lineNum":"  297","line":"    rindex -= @capacity if rindex >= @capacity"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    if index > @size / 2"},
{"lineNum":"  300","line":"      # Move following items to the right, starting with the last one"},
{"lineNum":"  301","line":"      # [56-01234] -> [4560123^]"},
{"lineNum":"  302","line":"      dst = @start + @size"},
{"lineNum":"  303","line":"      dst -= @capacity if dst >= @capacity"},
{"lineNum":"  304","line":"      loop do"},
{"lineNum":"  305","line":"        src = dst - 1"},
{"lineNum":"  306","line":"        src += @capacity if src < 0"},
{"lineNum":"  307","line":"        @buffer[dst] = @buffer[src]"},
{"lineNum":"  308","line":"        break if src == rindex"},
{"lineNum":"  309","line":"        dst = src"},
{"lineNum":"  310","line":"      end"},
{"lineNum":"  311","line":"    else"},
{"lineNum":"  312","line":"      # Move preceding items to the left, starting with the first one"},
{"lineNum":"  313","line":"      # [01234---] -> [1^234--0]"},
{"lineNum":"  314","line":"      @start -= 1"},
{"lineNum":"  315","line":"      @start += @capacity if @start < 0"},
{"lineNum":"  316","line":"      rindex -= 1"},
{"lineNum":"  317","line":"      rindex += @capacity if rindex < 0"},
{"lineNum":"  318","line":"      dst = @start"},
{"lineNum":"  319","line":"      loop do"},
{"lineNum":"  320","line":"        src = dst + 1"},
{"lineNum":"  321","line":"        src -= @capacity if src >= @capacity"},
{"lineNum":"  322","line":"        @buffer[dst] = @buffer[src]"},
{"lineNum":"  323","line":"        break if src == rindex"},
{"lineNum":"  324","line":"        dst = src"},
{"lineNum":"  325","line":"      end"},
{"lineNum":"  326","line":"    end"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"    @size += 1"},
{"lineNum":"  329","line":"    @buffer[rindex] = value"},
{"lineNum":"  330","line":"    self"},
{"lineNum":"  331","line":"  end"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"  def inspect(io : IO)"},
{"lineNum":"  334","line":"    executed = exec_recursive(:inspect) do"},
{"lineNum":"  335","line":"      io << \"Deque{\""},
{"lineNum":"  336","line":"      join \", \", io, &.inspect(io)"},
{"lineNum":"  337","line":"      io << \"}\""},
{"lineNum":"  338","line":"    end"},
{"lineNum":"  339","line":"    io << \"Deque{...}\" unless executed"},
{"lineNum":"  340","line":"  end"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"  def pretty_print(pp)"},
{"lineNum":"  343","line":"    executed = exec_recursive(:inspect) do"},
{"lineNum":"  344","line":"      pp.list(\"Deque{\", self, \"}\")"},
{"lineNum":"  345","line":"    end"},
{"lineNum":"  346","line":"    pp.text \"Deque{...}\" unless executed"},
{"lineNum":"  347","line":"  end"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"  # Returns the number of elements in the deque."},
{"lineNum":"  350","line":"  #"},
{"lineNum":"  351","line":"  # ```"},
{"lineNum":"  352","line":"  # Deque{:foo, :bar}.size # => 2"},
{"lineNum":"  353","line":"  # ```"},
{"lineNum":"  354","line":"  def size"},
{"lineNum":"  355","line":"    @size"},
{"lineNum":"  356","line":"  end"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"  # Removes and returns the last item. Raises `IndexError` if empty."},
{"lineNum":"  359","line":"  #"},
{"lineNum":"  360","line":"  # ```"},
{"lineNum":"  361","line":"  # a = Deque{1, 2, 3}"},
{"lineNum":"  362","line":"  # a.pop # => 3"},
{"lineNum":"  363","line":"  # a     # => Deque{1, 2}"},
{"lineNum":"  364","line":"  # ```"},
{"lineNum":"  365","line":"  def pop"},
{"lineNum":"  366","line":"    pop { raise IndexError.new }"},
{"lineNum":"  367","line":"  end"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"  # Removes and returns the last item, if not empty, otherwise executes"},
{"lineNum":"  370","line":"  # the given block and returns its value."},
{"lineNum":"  371","line":"  def pop"},
{"lineNum":"  372","line":"    if @size == 0"},
{"lineNum":"  373","line":"      yield"},
{"lineNum":"  374","line":"    else"},
{"lineNum":"  375","line":"      @size -= 1"},
{"lineNum":"  376","line":"      index = @start + @size"},
{"lineNum":"  377","line":"      index -= @capacity if index >= @capacity"},
{"lineNum":"  378","line":"      value = @buffer[index]"},
{"lineNum":"  379","line":"      (@buffer + index).clear"},
{"lineNum":"  380","line":"      value"},
{"lineNum":"  381","line":"    end"},
{"lineNum":"  382","line":"  end"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"  # Removes and returns the last item, if not empty, otherwise `nil`."},
{"lineNum":"  385","line":"  def pop?"},
{"lineNum":"  386","line":"    pop { nil }"},
{"lineNum":"  387","line":"  end"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"  # Removes the last *n* (at most) items in the deque."},
{"lineNum":"  390","line":"  def pop(n : Int)"},
{"lineNum":"  391","line":"    if n < 0"},
{"lineNum":"  392","line":"      raise ArgumentError.new(\"Can\'t pop negative count\")"},
{"lineNum":"  393","line":"    end"},
{"lineNum":"  394","line":"    n = Math.min(n, @size)"},
{"lineNum":"  395","line":"    n.times { pop }"},
{"lineNum":"  396","line":"    nil"},
{"lineNum":"  397","line":"  end"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"  # Adds an item to the end of the deque."},
{"lineNum":"  400","line":"  #"},
{"lineNum":"  401","line":"  # ```"},
{"lineNum":"  402","line":"  # a = Deque{1, 2}"},
{"lineNum":"  403","line":"  # a.push 3 # => Deque{1, 2, 3}"},
{"lineNum":"  404","line":"  # ```"},
{"lineNum":"  405","line":"  def push(value : T)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":"    increase_capacity if @size >= @capacity","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  407","line":"    index = @start + @size"},
{"lineNum":"  408","line":"    index -= @capacity if index >= @capacity","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  409","line":"    @buffer[index] = value"},
{"lineNum":"  410","line":"    @size += 1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  411","line":"    self"},
{"lineNum":"  412","line":"  end"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"  # Rotates this deque in place so that the element at *n* becomes first."},
{"lineNum":"  415","line":"  #"},
{"lineNum":"  416","line":"  # * For positive *n*, equivalent to `n.times { push(shift) }`."},
{"lineNum":"  417","line":"  # * For negative *n*, equivalent to `(-n).times { unshift(pop) }`."},
{"lineNum":"  418","line":"  def rotate!(n : Int = 1)"},
{"lineNum":"  419","line":"    if @size == @capacity"},
{"lineNum":"  420","line":"      @start = (@start + n) % @capacity"},
{"lineNum":"  421","line":"    else"},
{"lineNum":"  422","line":"      # Turn *n* into an equivalent index in range -size/2 .. size/2"},
{"lineNum":"  423","line":"      half = @size / 2"},
{"lineNum":"  424","line":"      if n.abs >= half"},
{"lineNum":"  425","line":"        n = (n + half) % @size - half"},
{"lineNum":"  426","line":"      end"},
{"lineNum":"  427","line":"      while n > 0"},
{"lineNum":"  428","line":"        push(shift)"},
{"lineNum":"  429","line":"        n -= 1"},
{"lineNum":"  430","line":"      end"},
{"lineNum":"  431","line":"      while n < 0"},
{"lineNum":"  432","line":"        n += 1"},
{"lineNum":"  433","line":"        unshift(pop)"},
{"lineNum":"  434","line":"      end"},
{"lineNum":"  435","line":"    end"},
{"lineNum":"  436","line":"  end"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"  # Removes and returns the first item. Raises `IndexError` if empty."},
{"lineNum":"  439","line":"  #"},
{"lineNum":"  440","line":"  # ```"},
{"lineNum":"  441","line":"  # a = Deque{1, 2, 3}"},
{"lineNum":"  442","line":"  # a.shift # => 1"},
{"lineNum":"  443","line":"  # a       # => Deque{2, 3}"},
{"lineNum":"  444","line":"  # ```"},
{"lineNum":"  445","line":"  def shift"},
{"lineNum":"  446","line":"    shift { raise IndexError.new }"},
{"lineNum":"  447","line":"  end"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"  # Removes and returns the first item, if not empty, otherwise executes"},
{"lineNum":"  450","line":"  # the given block and returns its value."},
{"lineNum":"  451","line":"  def shift"},
{"lineNum":"  452","line":"    if @size == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  453","line":"      yield"},
{"lineNum":"  454","line":"    else"},
{"lineNum":"  455","line":"      value = @buffer[@start]"},
{"lineNum":"  456","line":"      (@buffer + @start).clear"},
{"lineNum":"  457","line":"      @size -= 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  458","line":"      @start += 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  459","line":"      @start -= @capacity if @start >= @capacity","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  460","line":"      value"},
{"lineNum":"  461","line":"    end"},
{"lineNum":"  462","line":"  end"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"  # Removes and returns the first item, if not empty, otherwise `nil`."},
{"lineNum":"  465","line":"  def shift?"},
{"lineNum":"  466","line":"    shift { nil }"},
{"lineNum":"  467","line":"  end"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"  # Removes the first *n* (at most) items in the deque."},
{"lineNum":"  470","line":"  def shift(n : Int)"},
{"lineNum":"  471","line":"    if n < 0"},
{"lineNum":"  472","line":"      raise ArgumentError.new(\"Can\'t shift negative count\")"},
{"lineNum":"  473","line":"    end"},
{"lineNum":"  474","line":"    n = Math.min(n, @size)"},
{"lineNum":"  475","line":"    n.times { shift }"},
{"lineNum":"  476","line":"    nil"},
{"lineNum":"  477","line":"  end"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"  # Swaps the items at the indices *i* and *j*."},
{"lineNum":"  480","line":"  def swap(i, j)"},
{"lineNum":"  481","line":"    self[i], self[j] = self[j], self[i]"},
{"lineNum":"  482","line":"    self"},
{"lineNum":"  483","line":"  end"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"  # Returns an `Array` (shallow copy) that contains all the items of this deque."},
{"lineNum":"  486","line":"  def to_a"},
{"lineNum":"  487","line":"    arr = Array(T).new(@size)"},
{"lineNum":"  488","line":"    each do |x|"},
{"lineNum":"  489","line":"      arr << x"},
{"lineNum":"  490","line":"    end"},
{"lineNum":"  491","line":"    arr"},
{"lineNum":"  492","line":"  end"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"  def to_s(io : IO)"},
{"lineNum":"  495","line":"    inspect(io)"},
{"lineNum":"  496","line":"  end"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"  # Adds an item to the beginning of the deque."},
{"lineNum":"  499","line":"  #"},
{"lineNum":"  500","line":"  # ```"},
{"lineNum":"  501","line":"  # a = Deque{1, 2}"},
{"lineNum":"  502","line":"  # a.unshift 0 # => Deque{0, 1, 2}"},
{"lineNum":"  503","line":"  # ```"},
{"lineNum":"  504","line":"  def unshift(value : T)"},
{"lineNum":"  505","line":"    increase_capacity if @size >= @capacity"},
{"lineNum":"  506","line":"    @start -= 1"},
{"lineNum":"  507","line":"    @start += @capacity if @start < 0"},
{"lineNum":"  508","line":"    @buffer[@start] = value"},
{"lineNum":"  509","line":"    @size += 1"},
{"lineNum":"  510","line":"    self"},
{"lineNum":"  511","line":"  end"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"  private def halfs"},
{"lineNum":"  514","line":"    # For [----] yields nothing"},
{"lineNum":"  515","line":"    # For contiguous [-012] yields 1...4"},
{"lineNum":"  516","line":"    # For separated [234---01] yields 6...8, 0...3"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"    return if empty?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  519","line":"    a = @start","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  520","line":"    b = @start + size"},
{"lineNum":"  521","line":"    b -= @capacity if b > @capacity","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  522","line":"    if a < b","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  523","line":"      yield a...b"},
{"lineNum":"  524","line":"    else"},
{"lineNum":"  525","line":"      yield a...@capacity"},
{"lineNum":"  526","line":"      yield 0...b","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  527","line":"    end"},
{"lineNum":"  528","line":"  end"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"  private def increase_capacity"},
{"lineNum":"  531","line":"    unless @buffer","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  532","line":"      @capacity = 4","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  533","line":"      @buffer = Pointer(T).malloc(@capacity)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  534","line":"      return"},
{"lineNum":"  535","line":"    end"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"    old_capacity = @capacity","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  538","line":"    @capacity *= 2","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  539","line":"    @buffer = @buffer.realloc(@capacity)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"    finish = @start + @size"},
{"lineNum":"  542","line":"    if finish > old_capacity","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  543","line":"      # If the deque is separated into two parts, we get something like [2301----] after resize, so additional action is"},
{"lineNum":"  544","line":"      # needed, to turn it into [23----01] or [--0123--]."},
{"lineNum":"  545","line":"      # To do the moving we can use `copy_from` because the old and new locations will never overlap (assuming we\'re"},
{"lineNum":"  546","line":"      # multiplying the capacity by 2 or more). Due to the same assumption, we can clear all of the old locations."},
{"lineNum":"  547","line":"      finish -= old_capacity"},
{"lineNum":"  548","line":"      if old_capacity - @start >= @start","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  549","line":"        # [3012----] -> [-0123---]"},
{"lineNum":"  550","line":"        (@buffer + old_capacity).copy_from(@buffer, finish)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  551","line":"        @buffer.clear(finish)"},
{"lineNum":"  552","line":"      else"},
{"lineNum":"  553","line":"        # [1230----] -> [123----0]"},
{"lineNum":"  554","line":"        to_move = old_capacity - @start","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  555","line":"        new_start = @capacity - to_move"},
{"lineNum":"  556","line":"        (@buffer + new_start).copy_from(@buffer + @start, to_move)"},
{"lineNum":"  557","line":"        (@buffer + @start).clear(to_move)"},
{"lineNum":"  558","line":"        @start = new_start","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  559","line":"      end"},
{"lineNum":"  560","line":"    end"},
{"lineNum":"  561","line":"  end"},
{"lineNum":"  562","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 31, "covered" : 0,};
var merged_data = [];
