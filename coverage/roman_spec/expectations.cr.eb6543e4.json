var data = {lines:[
{"lineNum":"    1","line":"module Spec"},
{"lineNum":"    2","line":"  # :nodoc:"},
{"lineNum":"    3","line":"  struct EqualExpectation(T)"},
{"lineNum":"    4","line":"    def initialize(@expected_value : T)"},
{"lineNum":"    5","line":"    end"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"    def match(actual_value)"},
{"lineNum":"    8","line":"      actual_value == @expected_value"},
{"lineNum":"    9","line":"    end"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"    def failure_message(actual_value)"},
{"lineNum":"   12","line":"      expected = @expected_value.inspect"},
{"lineNum":"   13","line":"      got = actual_value.inspect"},
{"lineNum":"   14","line":"      if expected == got","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   15","line":"        expected += \" : #{@expected_value.class}\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   16","line":"        got += \" : #{actual_value.class}\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   17","line":"      end"},
{"lineNum":"   18","line":"      \"Expected: #{expected}\\n     got: #{got}\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   19","line":"    end"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"    def negative_failure_message(actual_value)"},
{"lineNum":"   22","line":"      \"Expected: actual_value != #{@expected_value.inspect}\\n     got: #{actual_value.inspect}\""},
{"lineNum":"   23","line":"    end"},
{"lineNum":"   24","line":"  end"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"  # :nodoc:"},
{"lineNum":"   27","line":"  struct BeExpectation(T)"},
{"lineNum":"   28","line":"    def initialize(@expected_value : T)"},
{"lineNum":"   29","line":"    end"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    def match(actual_value)"},
{"lineNum":"   32","line":"      actual_value.same? @expected_value"},
{"lineNum":"   33","line":"    end"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    def failure_message(actual_value)"},
{"lineNum":"   36","line":"      \"Expected: #{@expected_value.inspect} (object_id: #{@expected_value.object_id})\\n     got: #{actual_value.inspect} (object_id: #{actual_value.object_id})\""},
{"lineNum":"   37","line":"    end"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    def negative_failure_message(actual_value)"},
{"lineNum":"   40","line":"      \"Expected: value.same? #{@expected_value.inspect} (object_id: #{@expected_value.object_id})\\n     got: #{actual_value.inspect} (object_id: #{actual_value.object_id})\""},
{"lineNum":"   41","line":"    end"},
{"lineNum":"   42","line":"  end"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"  # :nodoc:"},
{"lineNum":"   45","line":"  struct BeTruthyExpectation"},
{"lineNum":"   46","line":"    def match(actual_value)"},
{"lineNum":"   47","line":"      !!actual_value"},
{"lineNum":"   48","line":"    end"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    def failure_message(actual_value)"},
{"lineNum":"   51","line":"      \"Expected: #{actual_value.inspect} to be truthy\""},
{"lineNum":"   52","line":"    end"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    def negative_failure_message(actual_value)"},
{"lineNum":"   55","line":"      \"Expected: #{actual_value.inspect} not to be truthy\""},
{"lineNum":"   56","line":"    end"},
{"lineNum":"   57","line":"  end"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"  # :nodoc:"},
{"lineNum":"   60","line":"  struct BeFalseyExpectation"},
{"lineNum":"   61","line":"    def match(actual_value)"},
{"lineNum":"   62","line":"      !actual_value"},
{"lineNum":"   63","line":"    end"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    def failure_message(actual_value)"},
{"lineNum":"   66","line":"      \"Expected: #{actual_value.inspect} to be falsey\""},
{"lineNum":"   67","line":"    end"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    def negative_failure_message(actual_value)"},
{"lineNum":"   70","line":"      \"Expected: #{actual_value.inspect} not to be falsey\""},
{"lineNum":"   71","line":"    end"},
{"lineNum":"   72","line":"  end"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"  # :nodoc:"},
{"lineNum":"   75","line":"  struct BeNilExpectation"},
{"lineNum":"   76","line":"    def match(actual_value)"},
{"lineNum":"   77","line":"      actual_value.nil?"},
{"lineNum":"   78","line":"    end"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    def failure_message(actual_value)"},
{"lineNum":"   81","line":"      \"Expected: #{actual_value.inspect} to be nil\""},
{"lineNum":"   82","line":"    end"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    def negative_failure_message(actual_value)"},
{"lineNum":"   85","line":"      \"Expected: #{actual_value.inspect} not to be nil\""},
{"lineNum":"   86","line":"    end"},
{"lineNum":"   87","line":"  end"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"  # :nodoc:"},
{"lineNum":"   90","line":"  struct CloseExpectation(T, D)"},
{"lineNum":"   91","line":"    def initialize(@expected_value : T, @delta : D)"},
{"lineNum":"   92","line":"    end"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    def match(actual_value)"},
{"lineNum":"   95","line":"      (actual_value - @expected_value).abs <= @delta"},
{"lineNum":"   96","line":"    end"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    def failure_message(actual_value)"},
{"lineNum":"   99","line":"      \"Expected #{actual_value.inspect} to be within #{@delta} of #{@expected_value}\""},
{"lineNum":"  100","line":"    end"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    def negative_failure_message(actual_value)"},
{"lineNum":"  103","line":"      \"Expected #{actual_value.inspect} not to be within #{@delta} of #{@expected_value}\""},
{"lineNum":"  104","line":"    end"},
{"lineNum":"  105","line":"  end"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"  # :nodoc:"},
{"lineNum":"  108","line":"  struct BeAExpectation(T)"},
{"lineNum":"  109","line":"    def match(actual_value)"},
{"lineNum":"  110","line":"      actual_value.is_a?(T)"},
{"lineNum":"  111","line":"    end"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    def failure_message(actual_value)"},
{"lineNum":"  114","line":"      \"Expected #{actual_value.inspect} (#{actual_value.class}) to be a #{T}\""},
{"lineNum":"  115","line":"    end"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    def negative_failure_message(actual_value)"},
{"lineNum":"  118","line":"      \"Expected #{actual_value.inspect} (#{actual_value.class}) not to be a #{T}\""},
{"lineNum":"  119","line":"    end"},
{"lineNum":"  120","line":"  end"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  # :nodoc:"},
{"lineNum":"  123","line":"  struct Be(T)"},
{"lineNum":"  124","line":"    def self.<(other)"},
{"lineNum":"  125","line":"      Be.new(other, :\"<\")"},
{"lineNum":"  126","line":"    end"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    def self.<=(other)"},
{"lineNum":"  129","line":"      Be.new(other, :\"<=\")"},
{"lineNum":"  130","line":"    end"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    def self.>(other)"},
{"lineNum":"  133","line":"      Be.new(other, :\">\")"},
{"lineNum":"  134","line":"    end"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    def self.>=(other)"},
{"lineNum":"  137","line":"      Be.new(other, :\">=\")"},
{"lineNum":"  138","line":"    end"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    def initialize(@expected_value : T, @op : Symbol)"},
{"lineNum":"  141","line":"    end"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    def match(actual_value)"},
{"lineNum":"  144","line":"      case @op"},
{"lineNum":"  145","line":"      when :\"<\""},
{"lineNum":"  146","line":"        actual_value < @expected_value"},
{"lineNum":"  147","line":"      when :\"<=\""},
{"lineNum":"  148","line":"        actual_value <= @expected_value"},
{"lineNum":"  149","line":"      when :\">\""},
{"lineNum":"  150","line":"        actual_value > @expected_value"},
{"lineNum":"  151","line":"      when :\">=\""},
{"lineNum":"  152","line":"        actual_value >= @expected_value"},
{"lineNum":"  153","line":"      else"},
{"lineNum":"  154","line":"        false"},
{"lineNum":"  155","line":"      end"},
{"lineNum":"  156","line":"    end"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    def failure_message(actual_value)"},
{"lineNum":"  159","line":"      \"Expected #{actual_value.inspect} to be #{@op} #{@expected_value}\""},
{"lineNum":"  160","line":"    end"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    def negative_failure_message(actual_value)"},
{"lineNum":"  163","line":"      \"Expected #{actual_value.inspect} not to be #{@op} #{@expected_value}\""},
{"lineNum":"  164","line":"    end"},
{"lineNum":"  165","line":"  end"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"  # :nodoc:"},
{"lineNum":"  168","line":"  struct MatchExpectation(T)"},
{"lineNum":"  169","line":"    def initialize(@expected_value : T)"},
{"lineNum":"  170","line":"    end"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    def match(actual_value)"},
{"lineNum":"  173","line":"      actual_value =~ @expected_value"},
{"lineNum":"  174","line":"    end"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    def failure_message(actual_value)"},
{"lineNum":"  177","line":"      \"Expected: #{actual_value.inspect}\\nto match: #{@expected_value.inspect}\""},
{"lineNum":"  178","line":"    end"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    def negative_failure_message(actual_value)"},
{"lineNum":"  181","line":"      \"Expected: value #{actual_value.inspect}\\n to not match: #{@expected_value.inspect}\""},
{"lineNum":"  182","line":"    end"},
{"lineNum":"  183","line":"  end"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"  # :nodoc:"},
{"lineNum":"  186","line":"  struct ContainExpectation(T)"},
{"lineNum":"  187","line":"    def initialize(@expected_value : T)"},
{"lineNum":"  188","line":"    end"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    def match(actual_value)"},
{"lineNum":"  191","line":"      actual_value.includes?(@expected_value)"},
{"lineNum":"  192","line":"    end"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    def failure_message(actual_value)"},
{"lineNum":"  195","line":"      \"Expected:   #{actual_value.inspect}\\nto include: #{@expected_value.inspect}\""},
{"lineNum":"  196","line":"    end"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    def negative_failure_message(actual_value)"},
{"lineNum":"  199","line":"      \"Expected: value #{actual_value.inspect}\\nto not include: #{@expected_value.inspect}\""},
{"lineNum":"  200","line":"    end"},
{"lineNum":"  201","line":"  end"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"  # This module defines a number of methods to create expectations, which are"},
{"lineNum":"  204","line":"  # automatically included into the top level namespace."},
{"lineNum":"  205","line":"  #"},
{"lineNum":"  206","line":"  # Expectations are used by `Spec::ObjectExtensions#should` and `Spec::ObjectExtensions#should_not`."},
{"lineNum":"  207","line":"  module Expectations"},
{"lineNum":"  208","line":"    # Creates an `Expectation` that passes if actual equals *value* (`==`)."},
{"lineNum":"  209","line":"    def eq(value)"},
{"lineNum":"  210","line":"      Spec::EqualExpectation.new value"},
{"lineNum":"  211","line":"    end"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    # Creates an `Expectation` that passes if actual and *value* are identical (`.same?`)."},
{"lineNum":"  214","line":"    def be(value)"},
{"lineNum":"  215","line":"      Spec::BeExpectation.new value"},
{"lineNum":"  216","line":"    end"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    # Creates an `Expectation` that passes if actual is true (`== true`)."},
{"lineNum":"  219","line":"    def be_true"},
{"lineNum":"  220","line":"      eq true"},
{"lineNum":"  221","line":"    end"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    # Creates an `Expectation` that passes if actual is false (`== false`)."},
{"lineNum":"  224","line":"    def be_false"},
{"lineNum":"  225","line":"      eq false"},
{"lineNum":"  226","line":"    end"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"    # Creates an `Expectation` that passes if actual is truthy (neither `nil` nor `false`)."},
{"lineNum":"  229","line":"    def be_truthy"},
{"lineNum":"  230","line":"      Spec::BeTruthyExpectation.new"},
{"lineNum":"  231","line":"    end"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    # Creates an `Expectation` that passes if actual is falsy (`nil` or `false`)."},
{"lineNum":"  234","line":"    def be_falsey"},
{"lineNum":"  235","line":"      Spec::BeFalseyExpectation.new"},
{"lineNum":"  236","line":"    end"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    # Creates an `Expectation` that passes if actual is nil (`== nil`)."},
{"lineNum":"  239","line":"    def be_nil"},
{"lineNum":"  240","line":"      Spec::BeNilExpectation.new"},
{"lineNum":"  241","line":"    end"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    # Creates an `Expectation` that passes if actual is within *delta* of *expected*."},
{"lineNum":"  244","line":"    def be_close(expected, delta)"},
{"lineNum":"  245","line":"      Spec::CloseExpectation.new(expected, delta)"},
{"lineNum":"  246","line":"    end"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    # Returns a factory to create a comparison `Expectation` that:"},
{"lineNum":"  249","line":"    #"},
{"lineNum":"  250","line":"    # * passes if actual is lesser than *value*: `be < value`"},
{"lineNum":"  251","line":"    # * passes if actual is lesser than or equal *value*: `be <= value`"},
{"lineNum":"  252","line":"    # * passes if actual is greater than *value*: `be > value`"},
{"lineNum":"  253","line":"    # * passes if actual is greater than or equal *value*: `be >= value`"},
{"lineNum":"  254","line":"    def be"},
{"lineNum":"  255","line":"      Spec::Be"},
{"lineNum":"  256","line":"    end"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    # Creates an `Expectation` that passes if actual matches *value* (`=~`)."},
{"lineNum":"  259","line":"    def match(value)"},
{"lineNum":"  260","line":"      Spec::MatchExpectation.new(value)"},
{"lineNum":"  261","line":"    end"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"    # Creates an `Expectation` that  passes if actual includes *expected* (`.includes?`)."},
{"lineNum":"  264","line":"    # Works on collections and `String`."},
{"lineNum":"  265","line":"    def contain(expected)"},
{"lineNum":"  266","line":"      Spec::ContainExpectation.new(expected)"},
{"lineNum":"  267","line":"    end"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"    # Creates an `Expectation` that passes if actual is of type *type* (`is_a?`)."},
{"lineNum":"  270","line":"    macro be_a(type)"},
{"lineNum":"  271","line":"      Spec::BeAExpectation({{type}}).new"},
{"lineNum":"  272","line":"    end"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    # Runs the block and passes if it raises an exception of type *klass*."},
{"lineNum":"  275","line":"    #"},
{"lineNum":"  276","line":"    # It returns the rescued exception."},
{"lineNum":"  277","line":"    macro expect_raises(klass)"},
{"lineNum":"  278","line":"      expect_raises({{klass}}, nil) do"},
{"lineNum":"  279","line":"        {{yield}}"},
{"lineNum":"  280","line":"      end"},
{"lineNum":"  281","line":"    end"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    # Runs the block and passes if it raises an exception of type *klass* and the error message matches."},
{"lineNum":"  284","line":"    #"},
{"lineNum":"  285","line":"    # If *message* is a string, it matches if the exception\'s error message contains that string."},
{"lineNum":"  286","line":"    # If *message* is a regular expression, it is used to match the error message."},
{"lineNum":"  287","line":"    #"},
{"lineNum":"  288","line":"    # It returns the rescued exception."},
{"lineNum":"  289","line":"    macro expect_raises(klass, message, file = __FILE__, line = __LINE__)"},
{"lineNum":"  290","line":"      %failed = false"},
{"lineNum":"  291","line":"      begin"},
{"lineNum":"  292","line":"        {{yield}}"},
{"lineNum":"  293","line":"        %failed = true"},
{"lineNum":"  294","line":"        fail \"Expected {{klass.id}} but nothing was raised\", {{file}}, {{line}}"},
{"lineNum":"  295","line":"      rescue %ex : {{klass.id}}"},
{"lineNum":"  296","line":"        # We usually bubble Spec::AssertaionFailed, unless this is the expected exception"},
{"lineNum":"  297","line":"        if %ex.class == Spec::AssertionFailed && {{klass}} != Spec::AssertionFailed"},
{"lineNum":"  298","line":"          raise %ex"},
{"lineNum":"  299","line":"        end"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"        %msg = {{message}}"},
{"lineNum":"  302","line":"        %ex_to_s = %ex.to_s"},
{"lineNum":"  303","line":"        case %msg"},
{"lineNum":"  304","line":"        when Regex"},
{"lineNum":"  305","line":"          unless (%ex_to_s =~ %msg)"},
{"lineNum":"  306","line":"            backtrace = %ex.backtrace.map { |f| \"  # #{f}\" }.join \"\\n\""},
{"lineNum":"  307","line":"            fail \"Expected {{klass.id}} with message matching #{ %msg.inspect }, got #<#{ %ex.class }: #{ %ex_to_s }> with backtrace:\\n#{backtrace}\", {{file}}, {{line}}"},
{"lineNum":"  308","line":"          end"},
{"lineNum":"  309","line":"        when String"},
{"lineNum":"  310","line":"          unless %ex_to_s.includes?(%msg)"},
{"lineNum":"  311","line":"            backtrace = %ex.backtrace.map { |f| \"  # #{f}\" }.join \"\\n\""},
{"lineNum":"  312","line":"            fail \"Expected {{klass.id}} with #{ %msg.inspect }, got #<#{ %ex.class }: #{ %ex_to_s }> with backtrace:\\n#{backtrace}\", {{file}}, {{line}}"},
{"lineNum":"  313","line":"          end"},
{"lineNum":"  314","line":"        end"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"        %ex"},
{"lineNum":"  317","line":"      rescue %ex"},
{"lineNum":"  318","line":"        if %failed"},
{"lineNum":"  319","line":"          raise %ex"},
{"lineNum":"  320","line":"        else"},
{"lineNum":"  321","line":"          %ex_to_s = %ex.to_s"},
{"lineNum":"  322","line":"          backtrace = %ex.backtrace.map { |f| \"  # #{f}\" }.join \"\\n\""},
{"lineNum":"  323","line":"          fail \"Expected {{klass.id}}, got #<#{ %ex.class }: #{ %ex_to_s }> with backtrace:\\n#{backtrace}\", {{file}}, {{line}}"},
{"lineNum":"  324","line":"        end"},
{"lineNum":"  325","line":"      end"},
{"lineNum":"  326","line":"    end"},
{"lineNum":"  327","line":"  end"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"  module ObjectExtensions"},
{"lineNum":"  330","line":"    # Validates an expectation and fails the example if it does not match."},
{"lineNum":"  331","line":"    #"},
{"lineNum":"  332","line":"    # See `Spec::Expecations` for available expectations."},
{"lineNum":"  333","line":"    def should(expectation, file = __FILE__, line = __LINE__)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  334","line":"      unless expectation.match self"},
{"lineNum":"  335","line":"        fail(expectation.failure_message(self), file, line)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"      end"},
{"lineNum":"  337","line":"    end"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"    # Validates an expectation and fails the example if it matches."},
{"lineNum":"  340","line":"    #"},
{"lineNum":"  341","line":"    # See `Spec::Expecations` for available expectations."},
{"lineNum":"  342","line":"    def should_not(expectation, file = __FILE__, line = __LINE__)"},
{"lineNum":"  343","line":"      if expectation.match self"},
{"lineNum":"  344","line":"        fail(expectation.negative_failure_message(self), file, line)"},
{"lineNum":"  345","line":"      end"},
{"lineNum":"  346","line":"    end"},
{"lineNum":"  347","line":"  end"},
{"lineNum":"  348","line":"end"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"include Spec::Expectations"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"class Object"},
{"lineNum":"  353","line":"  include Spec::ObjectExtensions"},
{"lineNum":"  354","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
