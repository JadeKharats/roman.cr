var data = {lines:[
{"lineNum":"    1","line":"require \"crystal/hasher\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# A `Hash` represents a mapping of keys to values."},
{"lineNum":"    4","line":"#"},
{"lineNum":"    5","line":"# See the [official docs](http://crystal-lang.org/docs/syntax_and_semantics/literals/hash.html) for the basics."},
{"lineNum":"    6","line":"class Hash(K, V)"},
{"lineNum":"    7","line":"  include Enumerable({K, V})"},
{"lineNum":"    8","line":"  include Iterable({K, V})"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"  getter size : Int32"},
{"lineNum":"   11","line":"  @buckets_size : Int32"},
{"lineNum":"   12","line":"  @first : Entry(K, V)?"},
{"lineNum":"   13","line":"  @last : Entry(K, V)?"},
{"lineNum":"   14","line":"  @block : (self, K -> V)?"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"  def initialize(block : (Hash(K, V), K -> V)? = nil, initial_capacity = nil)"},
{"lineNum":"   17","line":"    initial_capacity ||= 11"},
{"lineNum":"   18","line":"    initial_capacity = 11 if initial_capacity < 11"},
{"lineNum":"   19","line":"    initial_capacity = initial_capacity.to_i"},
{"lineNum":"   20","line":"    @buckets = Pointer(Entry(K, V)?).malloc(initial_capacity)","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   21","line":"    @buckets_size = initial_capacity"},
{"lineNum":"   22","line":"    @size = 0","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   23","line":"    @block = block","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   24","line":"  end"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"  def self.new(initial_capacity = nil, &block : (Hash(K, V), K -> V))"},
{"lineNum":"   27","line":"    new block, initial_capacity: initial_capacity"},
{"lineNum":"   28","line":"  end"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"  def self.new(default_value : V, initial_capacity = nil)"},
{"lineNum":"   31","line":"    new(initial_capacity: initial_capacity) { default_value }"},
{"lineNum":"   32","line":"  end"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"  # Sets the value of *key* to the given *value*."},
{"lineNum":"   35","line":"  #"},
{"lineNum":"   36","line":"  # ```"},
{"lineNum":"   37","line":"  # h = {} of String => String"},
{"lineNum":"   38","line":"  # h[\"foo\"] = \"bar\""},
{"lineNum":"   39","line":"  # h[\"foo\"] # => \"bar\""},
{"lineNum":"   40","line":"  # ```"},
{"lineNum":"   41","line":"  def []=(key : K, value : V)"},
{"lineNum":"   42","line":"    rehash if @size > 5 * @buckets_size","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    index = bucket_index key"},
{"lineNum":"   45","line":"    entry = insert_in_bucket index, key, value"},
{"lineNum":"   46","line":"    return value unless entry","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    @size += 1","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    if last = @last","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   51","line":"      last.fore = entry"},
{"lineNum":"   52","line":"      entry.back = last"},
{"lineNum":"   53","line":"    end"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    @last = entry","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   56","line":"    @first = entry unless @first","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   57","line":"    value"},
{"lineNum":"   58","line":"  end"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"  # See also: `Hash#fetch`."},
{"lineNum":"   61","line":"  def [](key)"},
{"lineNum":"   62","line":"    fetch(key)"},
{"lineNum":"   63","line":"  end"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"  # Returns the value for the key given by *key*."},
{"lineNum":"   66","line":"  # If not found, returns `nil`. This ignores the default value set by `Hash.new`."},
{"lineNum":"   67","line":"  #"},
{"lineNum":"   68","line":"  # ```"},
{"lineNum":"   69","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"   70","line":"  # h[\"foo\"]? # => \"bar\""},
{"lineNum":"   71","line":"  # h[\"bar\"]? # => nil"},
{"lineNum":"   72","line":"  #"},
{"lineNum":"   73","line":"  # h = Hash(String, String).new(\"bar\")"},
{"lineNum":"   74","line":"  # h[\"foo\"]? # => nil"},
{"lineNum":"   75","line":"  # ```"},
{"lineNum":"   76","line":"  def []?(key)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   77","line":"    fetch(key, nil)"},
{"lineNum":"   78","line":"  end"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  # Returns `true` when key given by *key* exists, otherwise `false`."},
{"lineNum":"   81","line":"  #"},
{"lineNum":"   82","line":"  # ```"},
{"lineNum":"   83","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"   84","line":"  # h.has_key?(\"foo\") # => true"},
{"lineNum":"   85","line":"  # h.has_key?(\"bar\") # => false"},
{"lineNum":"   86","line":"  # ```"},
{"lineNum":"   87","line":"  def has_key?(key)"},
{"lineNum":"   88","line":"    !!find_entry(key)"},
{"lineNum":"   89","line":"  end"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"  # Returns `true` when value given by *value* exists, otherwise `false`."},
{"lineNum":"   92","line":"  #"},
{"lineNum":"   93","line":"  # ```"},
{"lineNum":"   94","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"   95","line":"  # h.has_value?(\"foo\") # => false"},
{"lineNum":"   96","line":"  # h.has_value?(\"bar\") # => true"},
{"lineNum":"   97","line":"  # ```"},
{"lineNum":"   98","line":"  def has_value?(val)"},
{"lineNum":"   99","line":"    each_value do |value|"},
{"lineNum":"  100","line":"      return true if value == val"},
{"lineNum":"  101","line":"    end"},
{"lineNum":"  102","line":"    false"},
{"lineNum":"  103","line":"  end"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"  # Returns the value for the key given by *key*."},
{"lineNum":"  106","line":"  # If not found, returns the default value given by `Hash.new`, otherwise raises `KeyError`."},
{"lineNum":"  107","line":"  #"},
{"lineNum":"  108","line":"  # ```"},
{"lineNum":"  109","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"  110","line":"  # h[\"foo\"] # => \"bar\""},
{"lineNum":"  111","line":"  #"},
{"lineNum":"  112","line":"  # h = Hash(String, String).new(\"bar\")"},
{"lineNum":"  113","line":"  # h[\"foo\"] # => \"bar\""},
{"lineNum":"  114","line":"  #"},
{"lineNum":"  115","line":"  # h = Hash(String, String).new { \"bar\" }"},
{"lineNum":"  116","line":"  # h[\"foo\"] # => \"bar\""},
{"lineNum":"  117","line":"  #"},
{"lineNum":"  118","line":"  # h = Hash(String, String).new"},
{"lineNum":"  119","line":"  # h[\"foo\"] # raises KeyError"},
{"lineNum":"  120","line":"  # ```"},
{"lineNum":"  121","line":"  def fetch(key)"},
{"lineNum":"  122","line":"    fetch(key) do"},
{"lineNum":"  123","line":"      if (block = @block) && key.is_a?(K)"},
{"lineNum":"  124","line":"        block.call(self, key.as(K))"},
{"lineNum":"  125","line":"      else"},
{"lineNum":"  126","line":"        raise KeyError.new \"Missing hash key: #{key.inspect}\""},
{"lineNum":"  127","line":"      end"},
{"lineNum":"  128","line":"    end"},
{"lineNum":"  129","line":"  end"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"  # Returns the value for the key given by *key*, or when not found the value given by *default*."},
{"lineNum":"  132","line":"  # This ignores the default value set by `Hash.new`."},
{"lineNum":"  133","line":"  #"},
{"lineNum":"  134","line":"  # ```"},
{"lineNum":"  135","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"  136","line":"  # h.fetch(\"foo\", \"foo\") # => \"bar\""},
{"lineNum":"  137","line":"  # h.fetch(\"bar\", \"foo\") # => \"foo\""},
{"lineNum":"  138","line":"  # ```"},
{"lineNum":"  139","line":"  def fetch(key, default)"},
{"lineNum":"  140","line":"    fetch(key) { default }"},
{"lineNum":"  141","line":"  end"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"  # Returns the value for the key given by *key*, or when not found calls the given block with the key."},
{"lineNum":"  144","line":"  #"},
{"lineNum":"  145","line":"  # ```"},
{"lineNum":"  146","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"  147","line":"  # h.fetch(\"foo\") { |key| key.upcase } # => \"bar\""},
{"lineNum":"  148","line":"  # h.fetch(\"bar\") { |key| key.upcase } # => \"BAR\""},
{"lineNum":"  149","line":"  # ```"},
{"lineNum":"  150","line":"  def fetch(key)"},
{"lineNum":"  151","line":"    entry = find_entry(key)"},
{"lineNum":"  152","line":"    entry ? entry.value : yield key","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  153","line":"  end"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  # Returns a tuple populated with the elements at the given *indexes*."},
{"lineNum":"  156","line":"  # Raises if any index is invalid."},
{"lineNum":"  157","line":"  #"},
{"lineNum":"  158","line":"  # ```"},
{"lineNum":"  159","line":"  # {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.values_at(\"a\", \"c\") # => {1, 3}"},
{"lineNum":"  160","line":"  # ```"},
{"lineNum":"  161","line":"  def values_at(*indexes : K)"},
{"lineNum":"  162","line":"    indexes.map { |index| self[index] }"},
{"lineNum":"  163","line":"  end"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"  # Returns the first key with the given *value*, else raises `KeyError`."},
{"lineNum":"  166","line":"  #"},
{"lineNum":"  167","line":"  # ```"},
{"lineNum":"  168","line":"  # hash = {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  169","line":"  # hash.key(\"bar\")    # => \"foo\""},
{"lineNum":"  170","line":"  # hash.key(\"qux\")    # => \"baz\""},
{"lineNum":"  171","line":"  # hash.key(\"foobar\") # raises KeyError (Missing hash key for value: foobar)"},
{"lineNum":"  172","line":"  # ```"},
{"lineNum":"  173","line":"  def key(value)"},
{"lineNum":"  174","line":"    key(value) { raise KeyError.new \"Missing hash key for value: #{value}\" }"},
{"lineNum":"  175","line":"  end"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"  # Returns the first key with the given *value*, else `nil`."},
{"lineNum":"  178","line":"  #"},
{"lineNum":"  179","line":"  # ```"},
{"lineNum":"  180","line":"  # hash = {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  181","line":"  # hash.key?(\"bar\")    # => \"foo\""},
{"lineNum":"  182","line":"  # hash.key?(\"qux\")    # => \"baz\""},
{"lineNum":"  183","line":"  # hash.key?(\"foobar\") # => nil","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  184","line":"  # ```"},
{"lineNum":"  185","line":"  def key?(value)"},
{"lineNum":"  186","line":"    key(value) { nil }"},
{"lineNum":"  187","line":"  end"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  # Returns the first key with the given *value*, else yields *value* with the given block."},
{"lineNum":"  190","line":"  #"},
{"lineNum":"  191","line":"  # ```"},
{"lineNum":"  192","line":"  # hash = {\"foo\" => \"bar\"}"},
{"lineNum":"  193","line":"  # hash.key(\"bar\") { |value| value.upcase } # => \"foo\""},
{"lineNum":"  194","line":"  # hash.key(\"qux\") { |value| value.upcase } # => \"QUX\""},
{"lineNum":"  195","line":"  # ```"},
{"lineNum":"  196","line":"  def key(value)"},
{"lineNum":"  197","line":"    each do |k, v|"},
{"lineNum":"  198","line":"      return k if v == value"},
{"lineNum":"  199","line":"    end"},
{"lineNum":"  200","line":"    yield value"},
{"lineNum":"  201","line":"  end"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"  # Deletes the key-value pair and returns the value, otherwise returns `nil`."},
{"lineNum":"  204","line":"  #"},
{"lineNum":"  205","line":"  # ```"},
{"lineNum":"  206","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"  207","line":"  # h.delete(\"foo\")     # => \"bar\""},
{"lineNum":"  208","line":"  # h.fetch(\"foo\", nil) # => nil"},
{"lineNum":"  209","line":"  # ```"},
{"lineNum":"  210","line":"  def delete(key)"},
{"lineNum":"  211","line":"    delete(key) { nil }"},
{"lineNum":"  212","line":"  end"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"  # Deletes the key-value pair and returns the value, else yields *key* with given block."},
{"lineNum":"  215","line":"  #"},
{"lineNum":"  216","line":"  # ```"},
{"lineNum":"  217","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"  218","line":"  # h.delete(\"foo\") { |key| \"#{key} not found\" } # => \"bar\""},
{"lineNum":"  219","line":"  # h.fetch(\"foo\", nil)                          # => nil"},
{"lineNum":"  220","line":"  # h.delete(\"baz\") { |key| \"#{key} not found\" } # => \"baz not found\""},
{"lineNum":"  221","line":"  # ```"},
{"lineNum":"  222","line":"  def delete(key)"},
{"lineNum":"  223","line":"    index = bucket_index(key)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  224","line":"    entry = @buckets[index]"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    previous_entry = nil"},
{"lineNum":"  227","line":"    while entry","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  228","line":"      if entry.key == key","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  229","line":"        back_entry = entry.back","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  230","line":"        fore_entry = entry.fore"},
{"lineNum":"  231","line":"        if fore_entry","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  232","line":"          if back_entry","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  233","line":"            back_entry.fore = fore_entry"},
{"lineNum":"  234","line":"            fore_entry.back = back_entry"},
{"lineNum":"  235","line":"          else"},
{"lineNum":"  236","line":"            @first = fore_entry","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  237","line":"            fore_entry.back = nil"},
{"lineNum":"  238","line":"          end"},
{"lineNum":"  239","line":"        else"},
{"lineNum":"  240","line":"          if back_entry","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  241","line":"            back_entry.fore = nil"},
{"lineNum":"  242","line":"            @last = back_entry"},
{"lineNum":"  243","line":"          else"},
{"lineNum":"  244","line":"            @first = nil","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  245","line":"            @last = nil"},
{"lineNum":"  246","line":"          end"},
{"lineNum":"  247","line":"        end"},
{"lineNum":"  248","line":"        if previous_entry","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  249","line":"          previous_entry.next = entry.next"},
{"lineNum":"  250","line":"        else"},
{"lineNum":"  251","line":"          @buckets[index] = entry.next"},
{"lineNum":"  252","line":"        end"},
{"lineNum":"  253","line":"        @size -= 1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":"        return entry.value"},
{"lineNum":"  255","line":"      end"},
{"lineNum":"  256","line":"      previous_entry = entry"},
{"lineNum":"  257","line":"      entry = entry.next"},
{"lineNum":"  258","line":"    end"},
{"lineNum":"  259","line":"    yield key"},
{"lineNum":"  260","line":"  end"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"  # Deletes each key-value pair for which the given block returns `true`."},
{"lineNum":"  263","line":"  #"},
{"lineNum":"  264","line":"  # ```"},
{"lineNum":"  265","line":"  # h = {\"foo\" => \"bar\", \"fob\" => \"baz\", \"bar\" => \"qux\"}"},
{"lineNum":"  266","line":"  # h.delete_if { |key, value| key.starts_with?(\"fo\") }"},
{"lineNum":"  267","line":"  # h # => { \"bar\" => \"qux\" }"},
{"lineNum":"  268","line":"  # ```"},
{"lineNum":"  269","line":"  def delete_if"},
{"lineNum":"  270","line":"    keys_to_delete = [] of K"},
{"lineNum":"  271","line":"    each do |key, value|"},
{"lineNum":"  272","line":"      keys_to_delete << key if yield(key, value)"},
{"lineNum":"  273","line":"    end"},
{"lineNum":"  274","line":"    keys_to_delete.each do |key|"},
{"lineNum":"  275","line":"      delete(key)"},
{"lineNum":"  276","line":"    end"},
{"lineNum":"  277","line":"    self"},
{"lineNum":"  278","line":"  end"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"  # Returns `true` when hash contains no key-value pairs."},
{"lineNum":"  281","line":"  #"},
{"lineNum":"  282","line":"  # ```"},
{"lineNum":"  283","line":"  # h = Hash(String, String).new"},
{"lineNum":"  284","line":"  # h.empty? # => true"},
{"lineNum":"  285","line":"  #"},
{"lineNum":"  286","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"  287","line":"  # h.empty? # => false"},
{"lineNum":"  288","line":"  # ```"},
{"lineNum":"  289","line":"  def empty?","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  290","line":"    @size == 0"},
{"lineNum":"  291","line":"  end"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"  # Calls the given block for each key-value pair and passes in the key and the value."},
{"lineNum":"  294","line":"  #"},
{"lineNum":"  295","line":"  # ```"},
{"lineNum":"  296","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"  297","line":"  #"},
{"lineNum":"  298","line":"  # h.each do |key, value|"},
{"lineNum":"  299","line":"  #   key   # => \"foo\""},
{"lineNum":"  300","line":"  #   value # => \"bar\""},
{"lineNum":"  301","line":"  # end"},
{"lineNum":"  302","line":"  #"},
{"lineNum":"  303","line":"  # h.each do |key_and_value|"},
{"lineNum":"  304","line":"  #   key_and_value # => {\"foo\", \"bar\"}"},
{"lineNum":"  305","line":"  # end"},
{"lineNum":"  306","line":"  # ```"},
{"lineNum":"  307","line":"  def each : Nil"},
{"lineNum":"  308","line":"    current = @first"},
{"lineNum":"  309","line":"    while current"},
{"lineNum":"  310","line":"      yield({current.key, current.value})"},
{"lineNum":"  311","line":"      current = current.fore"},
{"lineNum":"  312","line":"    end"},
{"lineNum":"  313","line":"  end"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"  # Returns an iterator over the hash entries."},
{"lineNum":"  316","line":"  # Which behaves like an `Iterator` returning a `Tuple` consisting of the key and value types."},
{"lineNum":"  317","line":"  #"},
{"lineNum":"  318","line":"  # ```"},
{"lineNum":"  319","line":"  # hsh = {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  320","line":"  # iterator = hsh.each"},
{"lineNum":"  321","line":"  #"},
{"lineNum":"  322","line":"  # iterator.next # => {\"foo\", \"bar\"}"},
{"lineNum":"  323","line":"  # iterator.next # => {\"baz\", \"qux\"}"},
{"lineNum":"  324","line":"  # ```"},
{"lineNum":"  325","line":"  def each"},
{"lineNum":"  326","line":"    EntryIterator(K, V).new(self, @first)"},
{"lineNum":"  327","line":"  end"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"  # Calls the given block for each key-value pair and passes in the key."},
{"lineNum":"  330","line":"  #"},
{"lineNum":"  331","line":"  # ```"},
{"lineNum":"  332","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"  333","line":"  # h.each_key do |key|"},
{"lineNum":"  334","line":"  #   key # => \"foo\"","class":"lineNoCov","hits":"0","possible_hits":"18",},
{"lineNum":"  335","line":"  # end"},
{"lineNum":"  336","line":"  # ```"},
{"lineNum":"  337","line":"  def each_key"},
{"lineNum":"  338","line":"    each do |key, value|"},
{"lineNum":"  339","line":"      yield key"},
{"lineNum":"  340","line":"    end"},
{"lineNum":"  341","line":"  end"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"  # Returns an iterator over the hash keys."},
{"lineNum":"  344","line":"  # Which behaves like an `Iterator` consisting of the key\'s types."},
{"lineNum":"  345","line":"  #"},
{"lineNum":"  346","line":"  # ```"},
{"lineNum":"  347","line":"  # hsh = {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  348","line":"  # iterator = hsh.each_key"},
{"lineNum":"  349","line":"  #"},
{"lineNum":"  350","line":"  # key = iterator.next"},
{"lineNum":"  351","line":"  # key # => \"foo\""},
{"lineNum":"  352","line":"  #"},
{"lineNum":"  353","line":"  # key = iterator.next"},
{"lineNum":"  354","line":"  # key # => \"baz\""},
{"lineNum":"  355","line":"  # ```"},
{"lineNum":"  356","line":"  def each_key"},
{"lineNum":"  357","line":"    KeyIterator(K, V).new(self, @first)"},
{"lineNum":"  358","line":"  end"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"  # Calls the given block for each key-value pair and passes in the value."},
{"lineNum":"  361","line":"  #"},
{"lineNum":"  362","line":"  # ```"},
{"lineNum":"  363","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"  364","line":"  # h.each_value do |value|"},
{"lineNum":"  365","line":"  #   value # => \"bar\""},
{"lineNum":"  366","line":"  # end"},
{"lineNum":"  367","line":"  # ```"},
{"lineNum":"  368","line":"  def each_value"},
{"lineNum":"  369","line":"    each do |key, value|"},
{"lineNum":"  370","line":"      yield value"},
{"lineNum":"  371","line":"    end"},
{"lineNum":"  372","line":"  end"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"  # Returns an iterator over the hash values."},
{"lineNum":"  375","line":"  # Which behaves like an `Iterator` consisting of the value\'s types."},
{"lineNum":"  376","line":"  #"},
{"lineNum":"  377","line":"  # ```"},
{"lineNum":"  378","line":"  # hsh = {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  379","line":"  # iterator = hsh.each_value"},
{"lineNum":"  380","line":"  #"},
{"lineNum":"  381","line":"  # value = iterator.next"},
{"lineNum":"  382","line":"  # value # => \"bar\""},
{"lineNum":"  383","line":"  #"},
{"lineNum":"  384","line":"  # value = iterator.next"},
{"lineNum":"  385","line":"  # value # => \"qux\""},
{"lineNum":"  386","line":"  # ```"},
{"lineNum":"  387","line":"  def each_value"},
{"lineNum":"  388","line":"    ValueIterator(K, V).new(self, @first)"},
{"lineNum":"  389","line":"  end"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"  # Returns a new `Array` with all the keys."},
{"lineNum":"  392","line":"  #"},
{"lineNum":"  393","line":"  # ```"},
{"lineNum":"  394","line":"  # h = {\"foo\" => \"bar\", \"baz\" => \"bar\"}"},
{"lineNum":"  395","line":"  # h.keys # => [\"foo\", \"baz\"]"},
{"lineNum":"  396","line":"  # ```"},
{"lineNum":"  397","line":"  def keys"},
{"lineNum":"  398","line":"    keys = Array(K).new(@size)"},
{"lineNum":"  399","line":"    each_key { |key| keys << key }"},
{"lineNum":"  400","line":"    keys"},
{"lineNum":"  401","line":"  end"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"  # Returns only the values as an `Array`."},
{"lineNum":"  404","line":"  #"},
{"lineNum":"  405","line":"  # ```"},
{"lineNum":"  406","line":"  # h = {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  407","line":"  # h.values # => [\"bar\", \"qux\"]"},
{"lineNum":"  408","line":"  # ```"},
{"lineNum":"  409","line":"  def values"},
{"lineNum":"  410","line":"    values = Array(V).new(@size)"},
{"lineNum":"  411","line":"    each_value { |value| values << value }"},
{"lineNum":"  412","line":"    values"},
{"lineNum":"  413","line":"  end"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"  # Returns the index of the given key, or `nil` when not found."},
{"lineNum":"  416","line":"  # The keys are ordered based on when they were inserted."},
{"lineNum":"  417","line":"  #"},
{"lineNum":"  418","line":"  # ```"},
{"lineNum":"  419","line":"  # h = {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  420","line":"  # h.key_index(\"foo\") # => 0"},
{"lineNum":"  421","line":"  # h.key_index(\"qux\") # => nil"},
{"lineNum":"  422","line":"  # ```"},
{"lineNum":"  423","line":"  def key_index(key)"},
{"lineNum":"  424","line":"    each_with_index do |(my_key, my_value), index|"},
{"lineNum":"  425","line":"      return index if key == my_key"},
{"lineNum":"  426","line":"    end"},
{"lineNum":"  427","line":"    nil"},
{"lineNum":"  428","line":"  end"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"  # Returns a new `Hash` with the keys and values of this hash and *other* combined."},
{"lineNum":"  431","line":"  # A value in *other* takes precedence over the one in this hash."},
{"lineNum":"  432","line":"  #"},
{"lineNum":"  433","line":"  # ```"},
{"lineNum":"  434","line":"  # hash = {\"foo\" => \"bar\"}"},
{"lineNum":"  435","line":"  # hash.merge({\"baz\" => \"qux\"})"},
{"lineNum":"  436","line":"  # # => {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  437","line":"  # hash"},
{"lineNum":"  438","line":"  # # => {\"foo\" => \"bar\"}"},
{"lineNum":"  439","line":"  # ```"},
{"lineNum":"  440","line":"  def merge(other : Hash(L, W)) forall L, W"},
{"lineNum":"  441","line":"    hash = Hash(K | L, V | W).new"},
{"lineNum":"  442","line":"    hash.merge! self"},
{"lineNum":"  443","line":"    hash.merge! other"},
{"lineNum":"  444","line":"    hash"},
{"lineNum":"  445","line":"  end"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"  def merge(other : Hash(L, W), &block : K, V, W -> V | W) forall L, W"},
{"lineNum":"  448","line":"    hash = Hash(K | L, V | W).new"},
{"lineNum":"  449","line":"    hash.merge! self"},
{"lineNum":"  450","line":"    hash.merge!(other) { |k, v1, v2| yield k, v1, v2 }"},
{"lineNum":"  451","line":"    hash"},
{"lineNum":"  452","line":"  end"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"  # Similar to `#merge`, but the receiver is modified."},
{"lineNum":"  455","line":"  #"},
{"lineNum":"  456","line":"  # ```"},
{"lineNum":"  457","line":"  # hash = {\"foo\" => \"bar\"}"},
{"lineNum":"  458","line":"  # hash.merge!({\"baz\" => \"qux\"})"},
{"lineNum":"  459","line":"  # hash # => {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  460","line":"  # ```"},
{"lineNum":"  461","line":"  def merge!(other : Hash)"},
{"lineNum":"  462","line":"    other.each do |k, v|"},
{"lineNum":"  463","line":"      self[k] = v"},
{"lineNum":"  464","line":"    end"},
{"lineNum":"  465","line":"    self"},
{"lineNum":"  466","line":"  end"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"  def merge!(other : Hash, &block)"},
{"lineNum":"  469","line":"    other.each do |k, v|"},
{"lineNum":"  470","line":"      if self.has_key?(k)"},
{"lineNum":"  471","line":"        self[k] = yield k, self[k], v"},
{"lineNum":"  472","line":"      else"},
{"lineNum":"  473","line":"        self[k] = v"},
{"lineNum":"  474","line":"      end"},
{"lineNum":"  475","line":"    end"},
{"lineNum":"  476","line":"    self"},
{"lineNum":"  477","line":"  end"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"  # Returns a new hash consisting of entries for which the block returns `true`."},
{"lineNum":"  480","line":"  # ```"},
{"lineNum":"  481","line":"  # h = {\"a\" => 100, \"b\" => 200, \"c\" => 300}"},
{"lineNum":"  482","line":"  # h.select { |k, v| k > \"a\" } # => {\"b\" => 200, \"c\" => 300}"},
{"lineNum":"  483","line":"  # h.select { |k, v| v < 200 } # => {\"a\" => 100}"},
{"lineNum":"  484","line":"  # ```"},
{"lineNum":"  485","line":"  def select(&block : K, V -> _)"},
{"lineNum":"  486","line":"    reject { |k, v| !yield(k, v) }"},
{"lineNum":"  487","line":"  end"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"  # Equivalent to `Hash#select` but makes modification on the current object rather that returning a new one. Returns `nil` if no changes were made"},
{"lineNum":"  490","line":"  def select!(&block : K, V -> _)"},
{"lineNum":"  491","line":"    reject! { |k, v| !yield(k, v) }"},
{"lineNum":"  492","line":"  end"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"  # Returns a new hash consisting of entries for which the block returns `false`."},
{"lineNum":"  495","line":"  # ```"},
{"lineNum":"  496","line":"  # h = {\"a\" => 100, \"b\" => 200, \"c\" => 300}"},
{"lineNum":"  497","line":"  # h.reject { |k, v| k > \"a\" } # => {\"a\" => 100}"},
{"lineNum":"  498","line":"  # h.reject { |k, v| v < 200 } # => {\"b\" => 200, \"c\" => 300}"},
{"lineNum":"  499","line":"  # ```"},
{"lineNum":"  500","line":"  def reject(&block : K, V -> _)"},
{"lineNum":"  501","line":"    each_with_object({} of K => V) do |(k, v), memo|"},
{"lineNum":"  502","line":"      memo[k] = v unless yield k, v"},
{"lineNum":"  503","line":"    end"},
{"lineNum":"  504","line":"  end"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"  # Equivalent to `Hash#reject`, but makes modification on the current object rather that returning a new one. Returns `nil` if no changes were made."},
{"lineNum":"  507","line":"  def reject!(&block : K, V -> _)"},
{"lineNum":"  508","line":"    num_entries = size"},
{"lineNum":"  509","line":"    each do |key, value|"},
{"lineNum":"  510","line":"      delete(key) if yield(key, value)"},
{"lineNum":"  511","line":"    end"},
{"lineNum":"  512","line":"    num_entries == size ? nil : self"},
{"lineNum":"  513","line":"  end"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"  # Returns a new `Hash` without the given keys."},
{"lineNum":"  516","line":"  #"},
{"lineNum":"  517","line":"  # ```"},
{"lineNum":"  518","line":"  # {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.reject(\"a\", \"c\") # => {\"b\" => 2, \"d\" => 4}"},
{"lineNum":"  519","line":"  # ```"},
{"lineNum":"  520","line":"  def reject(*keys)"},
{"lineNum":"  521","line":"    hash = self.dup"},
{"lineNum":"  522","line":"    hash.reject!(*keys)"},
{"lineNum":"  523","line":"  end"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"  # Removes a list of keys out of hash."},
{"lineNum":"  526","line":"  #"},
{"lineNum":"  527","line":"  # ```"},
{"lineNum":"  528","line":"  # h = {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.reject!(\"a\", \"c\")"},
{"lineNum":"  529","line":"  # h # => {\"b\" => 2, \"d\" => 4}"},
{"lineNum":"  530","line":"  # ```"},
{"lineNum":"  531","line":"  def reject!(keys : Array | Tuple)"},
{"lineNum":"  532","line":"    keys.each { |k| delete(k) }"},
{"lineNum":"  533","line":"    self"},
{"lineNum":"  534","line":"  end"},
{"lineNum":"  535","line":""},
{"lineNum":"  536","line":"  def reject!(*keys)"},
{"lineNum":"  537","line":"    reject!(keys)"},
{"lineNum":"  538","line":"  end"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"  # Returns a new `Hash` with the given keys."},
{"lineNum":"  541","line":"  #"},
{"lineNum":"  542","line":"  # ```"},
{"lineNum":"  543","line":"  # {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.select(\"a\", \"c\") # => {\"a\" => 1, \"c\" => 3}"},
{"lineNum":"  544","line":"  # ```"},
{"lineNum":"  545","line":"  def select(keys : Array | Tuple)"},
{"lineNum":"  546","line":"    hash = {} of K => V"},
{"lineNum":"  547","line":"    keys.each { |k| hash[k] = self[k] if has_key?(k) }"},
{"lineNum":"  548","line":"    hash"},
{"lineNum":"  549","line":"  end"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"  def select(*keys)"},
{"lineNum":"  552","line":"    self.select(keys)"},
{"lineNum":"  553","line":"  end"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"  # Removes every element except the given ones."},
{"lineNum":"  556","line":"  #"},
{"lineNum":"  557","line":"  # ```"},
{"lineNum":"  558","line":"  # h = {\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4}.select!(\"a\", \"c\")"},
{"lineNum":"  559","line":"  # h # => {\"a\" => 1, \"c\" => 3}"},
{"lineNum":"  560","line":"  # ```"},
{"lineNum":"  561","line":"  def select!(keys : Array | Tuple)"},
{"lineNum":"  562","line":"    each { |k, v| delete(k) unless keys.includes?(k) }"},
{"lineNum":"  563","line":"    self"},
{"lineNum":"  564","line":"  end"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"  def select!(*keys)"},
{"lineNum":"  567","line":"    select!(keys)"},
{"lineNum":"  568","line":"  end"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"  # Returns new `Hash` without `nil` values."},
{"lineNum":"  571","line":"  #"},
{"lineNum":"  572","line":"  # ```"},
{"lineNum":"  573","line":"  # hash = {\"hello\" => \"world\", \"foo\" => nil}"},
{"lineNum":"  574","line":"  # hash.compact # => {\"hello\" => \"world\"}"},
{"lineNum":"  575","line":"  # ```"},
{"lineNum":"  576","line":"  def compact"},
{"lineNum":"  577","line":"    each_with_object({} of K => typeof(self.first_value.not_nil!)) do |(key, value), memo|"},
{"lineNum":"  578","line":"      memo[key] = value unless value.nil?"},
{"lineNum":"  579","line":"    end"},
{"lineNum":"  580","line":"  end"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"  # Removes all `nil` value from `self`. Returns `nil` if no changes were made."},
{"lineNum":"  583","line":"  #"},
{"lineNum":"  584","line":"  # ```"},
{"lineNum":"  585","line":"  # hash = {\"hello\" => \"world\", \"foo\" => nil}"},
{"lineNum":"  586","line":"  # hash.compact! # => {\"hello\" => \"world\"}"},
{"lineNum":"  587","line":"  # hash.compact! # => nil"},
{"lineNum":"  588","line":"  # ```"},
{"lineNum":"  589","line":"  def compact!"},
{"lineNum":"  590","line":"    reject! { |key, value| value.nil? }"},
{"lineNum":"  591","line":"  end"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"  # Zips two arrays into a `Hash`, taking keys from *ary1* and values from *ary2*."},
{"lineNum":"  594","line":"  #"},
{"lineNum":"  595","line":"  # ```"},
{"lineNum":"  596","line":"  # Hash.zip([\"key1\", \"key2\", \"key3\"], [\"value1\", \"value2\", \"value3\"])"},
{"lineNum":"  597","line":"  # # => {\"key1\" => \"value1\", \"key2\" => \"value2\", \"key3\" => \"value3\"}"},
{"lineNum":"  598","line":"  # ```"},
{"lineNum":"  599","line":"  def self.zip(ary1 : Array(K), ary2 : Array(V))"},
{"lineNum":"  600","line":"    hash = {} of K => V"},
{"lineNum":"  601","line":"    ary1.each_with_index do |key, i|"},
{"lineNum":"  602","line":"      hash[key] = ary2[i]"},
{"lineNum":"  603","line":"    end"},
{"lineNum":"  604","line":"    hash"},
{"lineNum":"  605","line":"  end"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"  # Returns the first key in the hash."},
{"lineNum":"  608","line":"  def first_key"},
{"lineNum":"  609","line":"    @first.not_nil!.key"},
{"lineNum":"  610","line":"  end"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"  # Returns the first key if it exists, or returns `nil`."},
{"lineNum":"  613","line":"  #"},
{"lineNum":"  614","line":"  # ```"},
{"lineNum":"  615","line":"  # hash = {\"foo\" => \"bar\"}"},
{"lineNum":"  616","line":"  # hash.first_key? # => \"foo\""},
{"lineNum":"  617","line":"  # hash.clear"},
{"lineNum":"  618","line":"  # hash.first_key? # => nil"},
{"lineNum":"  619","line":"  # ```"},
{"lineNum":"  620","line":"  def first_key?"},
{"lineNum":"  621","line":"    @first.try &.key"},
{"lineNum":"  622","line":"  end"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"  # Returns the first value in the hash."},
{"lineNum":"  625","line":"  def first_value"},
{"lineNum":"  626","line":"    @first.not_nil!.value"},
{"lineNum":"  627","line":"  end"},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"  # Similar to `#first_key?`, but returns its value."},
{"lineNum":"  630","line":"  def first_value?"},
{"lineNum":"  631","line":"    @first.try &.value"},
{"lineNum":"  632","line":"  end"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"  # Deletes and returns the first key-value pair in the hash,"},
{"lineNum":"  635","line":"  # or raises `IndexError` if the hash is empty."},
{"lineNum":"  636","line":"  #"},
{"lineNum":"  637","line":"  # ```"},
{"lineNum":"  638","line":"  # hash = {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  639","line":"  # hash.shift # => {\"foo\", \"bar\"}"},
{"lineNum":"  640","line":"  # hash       # => {\"baz\" => \"qux\"}"},
{"lineNum":"  641","line":"  #"},
{"lineNum":"  642","line":"  # hash = {} of String => String"},
{"lineNum":"  643","line":"  # hash.shift # raises IndexError"},
{"lineNum":"  644","line":"  # ```"},
{"lineNum":"  645","line":"  def shift"},
{"lineNum":"  646","line":"    shift { raise IndexError.new }"},
{"lineNum":"  647","line":"  end"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"  # Same as `#shift`, but returns `nil` if the hash is empty."},
{"lineNum":"  650","line":"  #"},
{"lineNum":"  651","line":"  # ```"},
{"lineNum":"  652","line":"  # hash = {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  653","line":"  # hash.shift? # => {\"foo\", \"bar\"}"},
{"lineNum":"  654","line":"  # hash        # => {\"baz\" => \"qux\"}"},
{"lineNum":"  655","line":"  #"},
{"lineNum":"  656","line":"  # hash = {} of String => String"},
{"lineNum":"  657","line":"  # hash.shift? # => nil"},
{"lineNum":"  658","line":"  # ```"},
{"lineNum":"  659","line":"  def shift?"},
{"lineNum":"  660","line":"    shift { nil }"},
{"lineNum":"  661","line":"  end"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"  # Deletes and returns the first key-value pair in the hash."},
{"lineNum":"  664","line":"  # Yields to the given block if the hash is empty."},
{"lineNum":"  665","line":"  #"},
{"lineNum":"  666","line":"  # ```"},
{"lineNum":"  667","line":"  # hash = {\"foo\" => \"bar\", \"baz\" => \"qux\"}"},
{"lineNum":"  668","line":"  # hash.shift { true } # => {\"foo\", \"bar\"}"},
{"lineNum":"  669","line":"  # hash                # => {\"baz\" => \"qux\"}"},
{"lineNum":"  670","line":"  #"},
{"lineNum":"  671","line":"  # hash = {} of String => String"},
{"lineNum":"  672","line":"  # hash.shift { true } # => true"},
{"lineNum":"  673","line":"  # hash                # => {}"},
{"lineNum":"  674","line":"  # ```"},
{"lineNum":"  675","line":"  def shift"},
{"lineNum":"  676","line":"    first = @first"},
{"lineNum":"  677","line":"    if first"},
{"lineNum":"  678","line":"      delete first.key"},
{"lineNum":"  679","line":"      {first.key, first.value}"},
{"lineNum":"  680","line":"    else"},
{"lineNum":"  681","line":"      yield"},
{"lineNum":"  682","line":"    end"},
{"lineNum":"  683","line":"  end"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"  # Empties a `Hash` and returns it."},
{"lineNum":"  686","line":"  #"},
{"lineNum":"  687","line":"  # ```"},
{"lineNum":"  688","line":"  # hash = {\"foo\" => \"bar\"}"},
{"lineNum":"  689","line":"  # hash.clear # => {}"},
{"lineNum":"  690","line":"  # ```"},
{"lineNum":"  691","line":"  def clear"},
{"lineNum":"  692","line":"    @buckets_size.times do |i|"},
{"lineNum":"  693","line":"      @buckets[i] = nil"},
{"lineNum":"  694","line":"    end"},
{"lineNum":"  695","line":"    @size = 0"},
{"lineNum":"  696","line":"    @first = nil"},
{"lineNum":"  697","line":"    @last = nil"},
{"lineNum":"  698","line":"    self"},
{"lineNum":"  699","line":"  end"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"  # Compares with *other*. Returns `true` if all key-value pairs are the same."},
{"lineNum":"  702","line":"  def ==(other : Hash)"},
{"lineNum":"  703","line":"    return false unless size == other.size"},
{"lineNum":"  704","line":"    each do |key, value|"},
{"lineNum":"  705","line":"      entry = other.find_entry(key)"},
{"lineNum":"  706","line":"      return false unless entry && entry.value == value"},
{"lineNum":"  707","line":"    end"},
{"lineNum":"  708","line":"    true"},
{"lineNum":"  709","line":"  end"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"  # See `Object#hash(hasher)`"},
{"lineNum":"  712","line":"  def hash(hasher)"},
{"lineNum":"  713","line":"    # The hash value must be the same regardless of the"},
{"lineNum":"  714","line":"    # order of the keys."},
{"lineNum":"  715","line":"    result = hasher.result"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"    each do |key, value|"},
{"lineNum":"  718","line":"      copy = hasher"},
{"lineNum":"  719","line":"      copy = key.hash(copy)"},
{"lineNum":"  720","line":"      copy = value.hash(copy)"},
{"lineNum":"  721","line":"      result += copy.result"},
{"lineNum":"  722","line":"    end"},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"    result.hash(hasher)"},
{"lineNum":"  725","line":"  end"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"  # Duplicates a `Hash`."},
{"lineNum":"  728","line":"  #"},
{"lineNum":"  729","line":"  # ```"},
{"lineNum":"  730","line":"  # hash_a = {\"foo\" => \"bar\"}"},
{"lineNum":"  731","line":"  # hash_b = hash_a.dup"},
{"lineNum":"  732","line":"  # hash_b.merge!({\"baz\" => \"qux\"})"},
{"lineNum":"  733","line":"  # hash_a # => {\"foo\" => \"bar\"}"},
{"lineNum":"  734","line":"  # ```"},
{"lineNum":"  735","line":"  def dup"},
{"lineNum":"  736","line":"    hash = Hash(K, V).new(initial_capacity: @buckets_size)"},
{"lineNum":"  737","line":"    each do |key, value|"},
{"lineNum":"  738","line":"      hash[key] = value"},
{"lineNum":"  739","line":"    end"},
{"lineNum":"  740","line":"    hash"},
{"lineNum":"  741","line":"  end"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"  # Similar to `#dup`, but duplicates the values as well."},
{"lineNum":"  744","line":"  #"},
{"lineNum":"  745","line":"  # ```"},
{"lineNum":"  746","line":"  # hash_a = {\"foobar\" => {\"foo\" => \"bar\"}}"},
{"lineNum":"  747","line":"  # hash_b = hash_a.clone"},
{"lineNum":"  748","line":"  # hash_b[\"foobar\"][\"foo\"] = \"baz\""},
{"lineNum":"  749","line":"  # hash_a # => {\"foobar\" => {\"foo\" => \"bar\"}}"},
{"lineNum":"  750","line":"  # ```"},
{"lineNum":"  751","line":"  def clone"},
{"lineNum":"  752","line":"    hash = Hash(K, V).new(initial_capacity: @buckets_size)"},
{"lineNum":"  753","line":"    each do |key, value|"},
{"lineNum":"  754","line":"      hash[key] = value.clone"},
{"lineNum":"  755","line":"    end"},
{"lineNum":"  756","line":"    hash"},
{"lineNum":"  757","line":"  end"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"  def inspect(io : IO)"},
{"lineNum":"  760","line":"    to_s(io)"},
{"lineNum":"  761","line":"  end"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"  # Converts to a `String`."},
{"lineNum":"  764","line":"  #"},
{"lineNum":"  765","line":"  # ```"},
{"lineNum":"  766","line":"  # h = {\"foo\" => \"bar\"}"},
{"lineNum":"  767","line":"  # h.to_s       # => \"{\\\"foo\\\" => \\\"bar\\\"}\""},
{"lineNum":"  768","line":"  # h.to_s.class # => String"},
{"lineNum":"  769","line":"  # ```"},
{"lineNum":"  770","line":"  def to_s(io : IO)"},
{"lineNum":"  771","line":"    executed = exec_recursive(:to_s) do"},
{"lineNum":"  772","line":"      io << \"{\""},
{"lineNum":"  773","line":"      found_one = false"},
{"lineNum":"  774","line":"      each do |key, value|"},
{"lineNum":"  775","line":"        io << \", \" if found_one"},
{"lineNum":"  776","line":"        key.inspect(io)"},
{"lineNum":"  777","line":"        io << \" => \""},
{"lineNum":"  778","line":"        value.inspect(io)"},
{"lineNum":"  779","line":"        found_one = true"},
{"lineNum":"  780","line":"      end"},
{"lineNum":"  781","line":"      io << \"}\""},
{"lineNum":"  782","line":"    end"},
{"lineNum":"  783","line":"    io << \"{...}\" unless executed"},
{"lineNum":"  784","line":"  end"},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"  def pretty_print(pp) : Nil"},
{"lineNum":"  787","line":"    executed = exec_recursive(:pretty_print) do"},
{"lineNum":"  788","line":"      pp.list(\"{\", self, \"}\") do |key, value|"},
{"lineNum":"  789","line":"        pp.group do"},
{"lineNum":"  790","line":"          key.pretty_print(pp)"},
{"lineNum":"  791","line":"          pp.text \" =>\""},
{"lineNum":"  792","line":"          pp.nest do"},
{"lineNum":"  793","line":"            pp.breakable"},
{"lineNum":"  794","line":"            value.pretty_print(pp)"},
{"lineNum":"  795","line":"          end"},
{"lineNum":"  796","line":"        end"},
{"lineNum":"  797","line":"      end"},
{"lineNum":"  798","line":"    end"},
{"lineNum":"  799","line":"    pp.text \"{...}\" unless executed"},
{"lineNum":"  800","line":"  end"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"  # Returns `self`."},
{"lineNum":"  803","line":"  def to_h"},
{"lineNum":"  804","line":"    self"},
{"lineNum":"  805","line":"  end"},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"  def rehash"},
{"lineNum":"  808","line":"    new_size = calculate_new_size(@size)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  809","line":"    @buckets = @buckets.realloc(new_size)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  810","line":"    new_size.times { |i| @buckets[i] = nil }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  811","line":"    @buckets_size = new_size","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  812","line":"    entry = @last"},
{"lineNum":"  813","line":"    while entry","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  814","line":"      index = bucket_index entry.key","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  815","line":"      entry.next = @buckets[index]","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  816","line":"      @buckets[index] = entry"},
{"lineNum":"  817","line":"      entry = entry.back"},
{"lineNum":"  818","line":"    end"},
{"lineNum":"  819","line":"  end"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"  # Inverts keys and values. If there are duplicated values, the last key becomes the new value."},
{"lineNum":"  822","line":"  #"},
{"lineNum":"  823","line":"  # ```"},
{"lineNum":"  824","line":"  # {\"foo\" => \"bar\"}.invert                 # => {\"bar\" => \"foo\"}"},
{"lineNum":"  825","line":"  # {\"foo\" => \"bar\", \"baz\" => \"bar\"}.invert # => {\"bar\" => \"baz\"}"},
{"lineNum":"  826","line":"  # ```"},
{"lineNum":"  827","line":"  def invert"},
{"lineNum":"  828","line":"    hash = Hash(V, K).new(initial_capacity: @buckets_size)"},
{"lineNum":"  829","line":"    self.each do |k, v|"},
{"lineNum":"  830","line":"      hash[v] = k"},
{"lineNum":"  831","line":"    end"},
{"lineNum":"  832","line":"    hash"},
{"lineNum":"  833","line":"  end"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"  protected def find_entry(key)"},
{"lineNum":"  836","line":"    return nil if empty?"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"    index = bucket_index key","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  839","line":"    entry = @buckets[index]"},
{"lineNum":"  840","line":"    find_entry_in_bucket entry, key"},
{"lineNum":"  841","line":"  end"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"  private def insert_in_bucket(index, key, value)"},
{"lineNum":"  844","line":"    entry = @buckets[index]"},
{"lineNum":"  845","line":"    if entry","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  846","line":"      while entry"},
{"lineNum":"  847","line":"        if entry.key == key","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  848","line":"          entry.value = value"},
{"lineNum":"  849","line":"          return nil"},
{"lineNum":"  850","line":"        end"},
{"lineNum":"  851","line":"        if entry.next","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  852","line":"          entry = entry.next"},
{"lineNum":"  853","line":"        else"},
{"lineNum":"  854","line":"          return entry.next = Entry(K, V).new(key, value)"},
{"lineNum":"  855","line":"        end"},
{"lineNum":"  856","line":"      end"},
{"lineNum":"  857","line":"    else"},
{"lineNum":"  858","line":"      return @buckets[index] = Entry(K, V).new(key, value)"},
{"lineNum":"  859","line":"    end"},
{"lineNum":"  860","line":"  end"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"  private def find_entry_in_bucket(entry, key)"},
{"lineNum":"  863","line":"    while entry","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  864","line":"      if entry.key == key","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  865","line":"        return entry"},
{"lineNum":"  866","line":"      end"},
{"lineNum":"  867","line":"      entry = entry.next"},
{"lineNum":"  868","line":"    end"},
{"lineNum":"  869","line":"    nil"},
{"lineNum":"  870","line":"  end"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"  private def bucket_index(key)"},
{"lineNum":"  873","line":"    key.hash.remainder(@buckets_size).to_i","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  874","line":"  end"},
{"lineNum":"  875","line":""},
{"lineNum":"  876","line":"  private def calculate_new_size(size)"},
{"lineNum":"  877","line":"    new_size = 8","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  878","line":"    HASH_PRIMES.each do |hash_size|"},
{"lineNum":"  879","line":"      return hash_size if new_size > size","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  880","line":"      new_size <<= 1"},
{"lineNum":"  881","line":"    end"},
{"lineNum":"  882","line":"    raise \"Hash table too big\"","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  883","line":"  end"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"  private class Entry(K, V)"},
{"lineNum":"  886","line":"    getter key : K"},
{"lineNum":"  887","line":"    property value : V","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"    # Next in the linked list of each bucket"},
{"lineNum":"  890","line":"    property next : self?","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"    # Next in the ordered sense of hash"},
{"lineNum":"  893","line":"    property fore : self?","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"    # Previous in the ordered sense of hash"},
{"lineNum":"  896","line":"    property back : self?","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"    def initialize(@key : K, @value : V)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  899","line":"    end"},
{"lineNum":"  900","line":"  end"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"  private module BaseIterator"},
{"lineNum":"  903","line":"    def initialize(@hash, @current)"},
{"lineNum":"  904","line":"    end"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"    def base_next"},
{"lineNum":"  907","line":"      if current = @current"},
{"lineNum":"  908","line":"        value = yield current"},
{"lineNum":"  909","line":"        @current = current.fore"},
{"lineNum":"  910","line":"        value"},
{"lineNum":"  911","line":"      else"},
{"lineNum":"  912","line":"        stop"},
{"lineNum":"  913","line":"      end"},
{"lineNum":"  914","line":"    end"},
{"lineNum":"  915","line":""},
{"lineNum":"  916","line":"    def rewind"},
{"lineNum":"  917","line":"      @current = @hash.@first"},
{"lineNum":"  918","line":"    end"},
{"lineNum":"  919","line":"  end"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":"  private class EntryIterator(K, V)"},
{"lineNum":"  922","line":"    include BaseIterator"},
{"lineNum":"  923","line":"    include Iterator({K, V})"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"    @hash : Hash(K, V)"},
{"lineNum":"  926","line":"    @current : Entry(K, V)?"},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"    def next"},
{"lineNum":"  929","line":"      base_next { |entry| {entry.key, entry.value} }"},
{"lineNum":"  930","line":"    end"},
{"lineNum":"  931","line":"  end"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"  private class KeyIterator(K, V)"},
{"lineNum":"  934","line":"    include BaseIterator"},
{"lineNum":"  935","line":"    include Iterator(K)"},
{"lineNum":"  936","line":""},
{"lineNum":"  937","line":"    @hash : Hash(K, V)"},
{"lineNum":"  938","line":"    @current : Entry(K, V)?"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"    def next"},
{"lineNum":"  941","line":"      base_next &.key"},
{"lineNum":"  942","line":"    end"},
{"lineNum":"  943","line":"  end"},
{"lineNum":"  944","line":""},
{"lineNum":"  945","line":"  private class ValueIterator(K, V)"},
{"lineNum":"  946","line":"    include BaseIterator"},
{"lineNum":"  947","line":"    include Iterator(V)"},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"    @hash : Hash(K, V)"},
{"lineNum":"  950","line":"    @current : Entry(K, V)?"},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"    def next"},
{"lineNum":"  953","line":"      base_next &.value"},
{"lineNum":"  954","line":"    end"},
{"lineNum":"  955","line":"  end"},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"  # :nodoc:"},
{"lineNum":"  958","line":"  HASH_PRIMES = ["},
{"lineNum":"  959","line":"    8 + 3,"},
{"lineNum":"  960","line":"    16 + 3,"},
{"lineNum":"  961","line":"    32 + 5,"},
{"lineNum":"  962","line":"    64 + 3,"},
{"lineNum":"  963","line":"    128 + 3,"},
{"lineNum":"  964","line":"    256 + 27,"},
{"lineNum":"  965","line":"    512 + 9,"},
{"lineNum":"  966","line":"    1024 + 9,"},
{"lineNum":"  967","line":"    2048 + 5,"},
{"lineNum":"  968","line":"    4096 + 3,"},
{"lineNum":"  969","line":"    8192 + 27,"},
{"lineNum":"  970","line":"    16384 + 43,"},
{"lineNum":"  971","line":"    32768 + 3,"},
{"lineNum":"  972","line":"    65536 + 45,"},
{"lineNum":"  973","line":"    131072 + 29,"},
{"lineNum":"  974","line":"    262144 + 3,"},
{"lineNum":"  975","line":"    524288 + 21,"},
{"lineNum":"  976","line":"    1048576 + 7,"},
{"lineNum":"  977","line":"    2097152 + 17,"},
{"lineNum":"  978","line":"    4194304 + 15,"},
{"lineNum":"  979","line":"    8388608 + 9,"},
{"lineNum":"  980","line":"    16777216 + 43,"},
{"lineNum":"  981","line":"    33554432 + 35,"},
{"lineNum":"  982","line":"    67108864 + 15,"},
{"lineNum":"  983","line":"    134217728 + 29,"},
{"lineNum":"  984","line":"    268435456 + 3,"},
{"lineNum":"  985","line":"    536870912 + 11,"},
{"lineNum":"  986","line":"    1073741824 + 85,"},
{"lineNum":"  987","line":"    0,"},
{"lineNum":"  988","line":"  ]"},
{"lineNum":"  989","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 47, "covered" : 0,};
var merged_data = [];
