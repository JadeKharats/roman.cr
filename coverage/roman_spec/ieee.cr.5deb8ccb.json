var data = {lines:[
{"lineNum":"    1","line":"# IEEE is ported from the C++ \"double-conversions\" library."},
{"lineNum":"    2","line":"# The following is their license:"},
{"lineNum":"    3","line":"#   Copyright 2012 the V8 project authors. All rights reserved."},
{"lineNum":"    4","line":"#   Redistribution and use in source and binary forms, with or without"},
{"lineNum":"    5","line":"#   modification, are permitted provided that the following conditions are"},
{"lineNum":"    6","line":"#   met:"},
{"lineNum":"    7","line":"#"},
{"lineNum":"    8","line":"#       * Redistributions of source code must retain the above copyright"},
{"lineNum":"    9","line":"#         notice, this list of conditions and the following disclaimer."},
{"lineNum":"   10","line":"#       * Redistributions in binary form must reproduce the above"},
{"lineNum":"   11","line":"#         copyright notice, this list of conditions and the following"},
{"lineNum":"   12","line":"#         disclaimer in the documentation and/or other materials provided"},
{"lineNum":"   13","line":"#         with the distribution."},
{"lineNum":"   14","line":"#       * Neither the name of Google Inc. nor the names of its"},
{"lineNum":"   15","line":"#         contributors may be used to endorse or promote products derived"},
{"lineNum":"   16","line":"#         from this software without specific prior written permission."},
{"lineNum":"   17","line":"#"},
{"lineNum":"   18","line":"#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS"},
{"lineNum":"   19","line":"#   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT"},
{"lineNum":"   20","line":"#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR"},
{"lineNum":"   21","line":"#   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT"},
{"lineNum":"   22","line":"#   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"},
{"lineNum":"   23","line":"#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"},
{"lineNum":"   24","line":"#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,"},
{"lineNum":"   25","line":"#   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY"},
{"lineNum":"   26","line":"#   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"},
{"lineNum":"   27","line":"#   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE"},
{"lineNum":"   28","line":"#   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"module Float::Printer::IEEE"},
{"lineNum":"   31","line":"  extend self"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"  EXPONENT_MASK_64             = 0x7FF0000000000000_u64"},
{"lineNum":"   34","line":"  SIGNIFICAND_MASK_64          = 0x000FFFFFFFFFFFFF_u64"},
{"lineNum":"   35","line":"  HIDDEN_BIT_64                = 0x0010000000000000_u64"},
{"lineNum":"   36","line":"  PHYSICAL_SIGNIFICAND_SIZE_64 =                     52 # Excludes the hidden bit"},
{"lineNum":"   37","line":"  SIGNIFICAND_SIZE_64          =                     53"},
{"lineNum":"   38","line":"  EXPONENT_BIAS_64             = 0x3FF + PHYSICAL_SIGNIFICAND_SIZE_64"},
{"lineNum":"   39","line":"  DENORMAL_EXPONENT_64         = -EXPONENT_BIAS_64 + 1"},
{"lineNum":"   40","line":"  SIGN_MASK_64                 = 0x8000000000000000_u64"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"  EXPONENT_MASK_32             = 0x7F800000_u32"},
{"lineNum":"   43","line":"  SIGNIFICAND_MASK_32          = 0x007FFFFF_u32"},
{"lineNum":"   44","line":"  HIDDEN_BIT_32                = 0x00800000_u32"},
{"lineNum":"   45","line":"  PHYSICAL_SIGNIFICAND_SIZE_32 =             23 # Excludes the hidden bit"},
{"lineNum":"   46","line":"  SIGNIFICAND_SIZE_32          =             24"},
{"lineNum":"   47","line":"  EXPONENT_BIAS_32             = 0x7F + PHYSICAL_SIGNIFICAND_SIZE_32"},
{"lineNum":"   48","line":"  DENORMAL_EXPONENT_32         = -EXPONENT_BIAS_32 + 1"},
{"lineNum":"   49","line":"  SIGN_MASK_32                 = 0x80000000_u32"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"  def to_uint(v : Float64)"},
{"lineNum":"   52","line":"    v.unsafe_as(UInt64)"},
{"lineNum":"   53","line":"  end"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"  def to_uint(v : Float32)"},
{"lineNum":"   56","line":"    v.unsafe_as(UInt32)"},
{"lineNum":"   57","line":"  end"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"  def sign(d64 : UInt64)"},
{"lineNum":"   60","line":"    (d64 & SIGN_MASK_64) == 0 ? 1 : -1"},
{"lineNum":"   61","line":"  end"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  def sign(d32 : UInt32)"},
{"lineNum":"   64","line":"    (d32 & SIGN_MASK_32) == 0 ? 1 : -1"},
{"lineNum":"   65","line":"  end"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"  def special?(d64 : UInt64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"    (d64 & EXPONENT_MASK_64) == EXPONENT_MASK_64"},
{"lineNum":"   69","line":"  end"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"  def special?(d32 : UInt32)"},
{"lineNum":"   72","line":"    (d32 & EXPONENT_MASK_32) == EXPONENT_MASK_32"},
{"lineNum":"   73","line":"  end"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"  def inf?(d64 : UInt64)"},
{"lineNum":"   76","line":"    special?(d64) && (d64 & SIGNIFICAND_MASK_64 == 0)"},
{"lineNum":"   77","line":"  end"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"  def inf?(d32 : UInt32)"},
{"lineNum":"   80","line":"    special?(d32) && (d32 & SIGNIFICAND_MASK_32 == 0)"},
{"lineNum":"   81","line":"  end"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"  def nan?(d64 : UInt64)"},
{"lineNum":"   84","line":"    special?(d64) && (d64 & SIGNIFICAND_MASK_64 != 0)"},
{"lineNum":"   85","line":"  end"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"  def nan?(d32 : UInt32)"},
{"lineNum":"   88","line":"    special?(d32) && (d32 & SIGNIFICAND_MASK_32 != 0)"},
{"lineNum":"   89","line":"  end"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"  # Computes the two boundaries of *v*."},
{"lineNum":"   92","line":"  # The bigger boundary (m_plus) is normalized. The lower boundary has the same"},
{"lineNum":"   93","line":"  # exponent as m_plus."},
{"lineNum":"   94","line":"  # Precondition: the value encoded by this Flaot must be greater than 0."},
{"lineNum":"   95","line":"  def normalized_boundaries(v : Float64)"},
{"lineNum":"   96","line":"    _invariant v > 0"},
{"lineNum":"   97","line":"    w = DiyFP.from_f(v)"},
{"lineNum":"   98","line":"    m_plus = DiyFP.new((w.frac << 1) + 1, w.exp - 1).normalize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    d64 = to_uint(v)"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    # The boundary is closer if the significand is of the form f == 2^p-1 then"},
{"lineNum":"  103","line":"    # the lower boundary is closer."},
{"lineNum":"  104","line":"    # Think of v = 1000e10 and v- = 9999e9."},
{"lineNum":"  105","line":"    # Then the boundary (== (v - v-)/2) is not just at a distance of 1e9 but"},
{"lineNum":"  106","line":"    # at a distance of 1e8."},
{"lineNum":"  107","line":"    # The only exception is for the smallest normal: the largest denormal is"},
{"lineNum":"  108","line":"    # at the same distance as its successor."},
{"lineNum":"  109","line":"    # Note: denormals have the same exponent as the smallest normals."},
{"lineNum":"  110","line":"    physical_significand_is_zero = (d64 & SIGNIFICAND_MASK_64) == 0"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    lower_bound_closer = physical_significand_is_zero && (exponent(d64) != DENORMAL_EXPONENT_64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"    calcualted_exp = exponent(d64)"},
{"lineNum":"  114","line":"    calc_denormal = denormal?(d64)"},
{"lineNum":"  115","line":"    f, e = if lower_bound_closer","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"             {(w.frac << 2) - 1, w.exp - 2}"},
{"lineNum":"  117","line":"           else"},
{"lineNum":"  118","line":"             {(w.frac << 1) - 1, w.exp - 1}"},
{"lineNum":"  119","line":"           end"},
{"lineNum":"  120","line":"    m_minus = DiyFP.new(f << (e - m_plus.exp), m_plus.exp)"},
{"lineNum":"  121","line":"    return {minus: m_minus, plus: m_plus}"},
{"lineNum":"  122","line":"  end"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  def normalized_boundaries(v : Float32)"},
{"lineNum":"  125","line":"    _invariant v > 0"},
{"lineNum":"  126","line":"    w = DiyFP.from_f(v)"},
{"lineNum":"  127","line":"    m_plus = DiyFP.new((w.frac << 1) + 1, w.exp - 1).normalize"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    d32 = to_uint(v)"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    physical_significand_is_zero = (d32 & SIGNIFICAND_MASK_32) == 0"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    lower_bound_closer = physical_significand_is_zero && (exponent(d32) != DENORMAL_EXPONENT_32)"},
{"lineNum":"  134","line":"    calcualted_exp = exponent(d32)"},
{"lineNum":"  135","line":"    calc_denormal = denormal?(d32)"},
{"lineNum":"  136","line":"    f, e = if lower_bound_closer"},
{"lineNum":"  137","line":"             {(w.frac << 2) - 1, w.exp - 2}"},
{"lineNum":"  138","line":"           else"},
{"lineNum":"  139","line":"             {(w.frac << 1) - 1, w.exp - 1}"},
{"lineNum":"  140","line":"           end"},
{"lineNum":"  141","line":"    m_minus = DiyFP.new(f << (e - m_plus.exp), m_plus.exp)"},
{"lineNum":"  142","line":"    return {minus: m_minus, plus: m_plus}"},
{"lineNum":"  143","line":"  end"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"  def frac_and_exp(v : Float64)"},
{"lineNum":"  146","line":"    d64 = to_uint(v)"},
{"lineNum":"  147","line":"    _invariant (d64 & EXPONENT_MASK_64) != EXPONENT_MASK_64"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    if (d64 & EXPONENT_MASK_64) == 0 # denormal float","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  150","line":"      frac = d64 & SIGNIFICAND_MASK_64"},
{"lineNum":"  151","line":"      exp = 1 - EXPONENT_BIAS_64","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  152","line":"    else"},
{"lineNum":"  153","line":"      frac = (d64 & SIGNIFICAND_MASK_64) + HIDDEN_BIT_64"},
{"lineNum":"  154","line":"      exp = (((d64 & EXPONENT_MASK_64) >> PHYSICAL_SIGNIFICAND_SIZE_64) - EXPONENT_BIAS_64).to_i","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  155","line":"    end"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"    {frac, exp}"},
{"lineNum":"  158","line":"  end"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  def frac_and_exp(v : Float32)"},
{"lineNum":"  161","line":"    d32 = to_uint(v)"},
{"lineNum":"  162","line":"    _invariant (d32 & EXPONENT_MASK_32) != EXPONENT_MASK_32"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"    if (d32 & EXPONENT_MASK_32) == 0 # denormal float"},
{"lineNum":"  165","line":"      frac = d32 & SIGNIFICAND_MASK_32"},
{"lineNum":"  166","line":"      exp = 1 - EXPONENT_BIAS_32"},
{"lineNum":"  167","line":"    else"},
{"lineNum":"  168","line":"      frac = (d32 & SIGNIFICAND_MASK_32) + HIDDEN_BIT_32"},
{"lineNum":"  169","line":"      exp = (((d32 & EXPONENT_MASK_32) >> PHYSICAL_SIGNIFICAND_SIZE_32) - EXPONENT_BIAS_32).to_i"},
{"lineNum":"  170","line":"    end"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    {frac.to_u64, exp}"},
{"lineNum":"  173","line":"  end"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"  private def denormal?(d64 : UInt64) : Bool"},
{"lineNum":"  176","line":"    (d64 & EXPONENT_MASK_64) == 0"},
{"lineNum":"  177","line":"  end"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"  private def denormal?(d32 : UInt32) : Bool"},
{"lineNum":"  180","line":"    (d32 & EXPONENT_MASK_32) == 0"},
{"lineNum":"  181","line":"  end"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"  private def exponent(d64 : UInt64)"},
{"lineNum":"  184","line":"    return DENORMAL_EXPONENT_64 if denormal?(d64)"},
{"lineNum":"  185","line":"    baised_e = ((d64 & EXPONENT_MASK_64) >> PHYSICAL_SIGNIFICAND_SIZE_64).to_i"},
{"lineNum":"  186","line":"    baised_e - EXPONENT_BIAS_64"},
{"lineNum":"  187","line":"  end"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  private def exponent(d32 : UInt32)"},
{"lineNum":"  190","line":"    return DENORMAL_EXPONENT_32 if denormal?(d32)"},
{"lineNum":"  191","line":"    baised_e = ((d32 & EXPONENT_MASK_32) >> PHYSICAL_SIGNIFICAND_SIZE_32).to_i"},
{"lineNum":"  192","line":"    baised_e - EXPONENT_BIAS_32"},
{"lineNum":"  193","line":"  end"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"  private macro _invariant(exp, file = __FILE__, line = __LINE__)"},
{"lineNum":"  196","line":"    {% if !flag?(:release) %}"},
{"lineNum":"  197","line":"      unless {{exp}}"},
{"lineNum":"  198","line":"        raise \"Assertion Failed #{{{file}}}:#{{{line}}}\""},
{"lineNum":"  199","line":"      end"},
{"lineNum":"  200","line":"    {% end %}"},
{"lineNum":"  201","line":"  end"},
{"lineNum":"  202","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
