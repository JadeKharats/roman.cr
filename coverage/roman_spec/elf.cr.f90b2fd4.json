var data = {lines:[
{"lineNum":"    1","line":"module Debug","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    2","line":"  # ELF reader."},
{"lineNum":"    3","line":"  #"},
{"lineNum":"    4","line":"  # Documentation:"},
{"lineNum":"    5","line":"  # - <http://www.sco.com/developers/gabi/latest/contents.html>"},
{"lineNum":"    6","line":"  struct ELF"},
{"lineNum":"    7","line":"    MAGIC = UInt8.slice(0x7f, \'E\'.ord, \'L\'.ord, \'F\'.ord)"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"    enum Klass : UInt8"},
{"lineNum":"   10","line":"      ELF32 = 1"},
{"lineNum":"   11","line":"      ELF64 = 2"},
{"lineNum":"   12","line":"    end"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    enum OSABI : UInt8"},
{"lineNum":"   15","line":"      SYSTEM_V = 0x00"},
{"lineNum":"   16","line":"      HP_UX    = 0x01"},
{"lineNum":"   17","line":"      NETBSD   = 0x02"},
{"lineNum":"   18","line":"      LINUX    = 0x03"},
{"lineNum":"   19","line":"      SOLARIS  = 0x06"},
{"lineNum":"   20","line":"      AIX      = 0x07"},
{"lineNum":"   21","line":"      IRIX     = 0x08"},
{"lineNum":"   22","line":"      FREEBSD  = 0x09"},
{"lineNum":"   23","line":"      OPENBSD  = 0x0C"},
{"lineNum":"   24","line":"      OPENVMS  = 0x0D"},
{"lineNum":"   25","line":"      NSK_OS   = 0x0E"},
{"lineNum":"   26","line":"      AROS     = 0x0F"},
{"lineNum":"   27","line":"      FENIS_OS = 0x10"},
{"lineNum":"   28","line":"      CLOUDABI = 0x11"},
{"lineNum":"   29","line":"      SORTIX   = 0x53"},
{"lineNum":"   30","line":"    end"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    enum Type : UInt16"},
{"lineNum":"   33","line":"      REL  = 1"},
{"lineNum":"   34","line":"      EXEC = 2"},
{"lineNum":"   35","line":"      DYN  = 3"},
{"lineNum":"   36","line":"      CORE = 4"},
{"lineNum":"   37","line":"    end"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    enum Machine : UInt16"},
{"lineNum":"   40","line":"      UNKNOWN = 0x00"},
{"lineNum":"   41","line":"      SPARC   = 0x02"},
{"lineNum":"   42","line":"      X86     = 0x03"},
{"lineNum":"   43","line":"      MIPS    = 0x08"},
{"lineNum":"   44","line":"      POWERPC = 0x14"},
{"lineNum":"   45","line":"      ARM     = 0x28"},
{"lineNum":"   46","line":"      SUPERH  = 0x2A"},
{"lineNum":"   47","line":"      IA_64   = 0x32"},
{"lineNum":"   48","line":"      X86_64  = 0x3E"},
{"lineNum":"   49","line":"      AARCH64 = 0xB7"},
{"lineNum":"   50","line":"    end"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    enum Endianness"},
{"lineNum":"   53","line":"      Little = 1"},
{"lineNum":"   54","line":"      Big    = 2"},
{"lineNum":"   55","line":"    end"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    struct Ident"},
{"lineNum":"   58","line":"      property klass : Klass"},
{"lineNum":"   59","line":"      property data : Endianness"},
{"lineNum":"   60","line":"      property version : UInt8"},
{"lineNum":"   61","line":"      property osabi : OSABI"},
{"lineNum":"   62","line":"      property abiversion : UInt8"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"      def initialize(@klass, @data, @version, @osabi, @abiversion)"},
{"lineNum":"   65","line":"      end"},
{"lineNum":"   66","line":"    end"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    struct SectionHeader"},
{"lineNum":"   69","line":"      enum Type : UInt32"},
{"lineNum":"   70","line":"        NULL          =  0"},
{"lineNum":"   71","line":"        PROGBITS      =  1"},
{"lineNum":"   72","line":"        SYMTAB        =  2"},
{"lineNum":"   73","line":"        STRTAB        =  3"},
{"lineNum":"   74","line":"        RELA          =  4"},
{"lineNum":"   75","line":"        HASH          =  5"},
{"lineNum":"   76","line":"        DYNAMIC       =  6"},
{"lineNum":"   77","line":"        NOTE          =  7"},
{"lineNum":"   78","line":"        NOBITS        =  8"},
{"lineNum":"   79","line":"        REL           =  9"},
{"lineNum":"   80","line":"        SHLIB         = 10"},
{"lineNum":"   81","line":"        DYNSYM        = 11"},
{"lineNum":"   82","line":"        INIT_ARRAY    = 14"},
{"lineNum":"   83","line":"        FINI_ARRAY    = 15"},
{"lineNum":"   84","line":"        PREINIT_ARRAY = 16"},
{"lineNum":"   85","line":"        GROUP         = 17"},
{"lineNum":"   86","line":"        SYMTAB_SHNDX  = 18"},
{"lineNum":"   87","line":"      end"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"      @[Flags]"},
{"lineNum":"   90","line":"      enum Flags : UInt64"},
{"lineNum":"   91","line":"        WRITE            =        0x1"},
{"lineNum":"   92","line":"        ALLOC            =        0x2"},
{"lineNum":"   93","line":"        EXECINSTR        =        0x4"},
{"lineNum":"   94","line":"        MERGE            =       0x10"},
{"lineNum":"   95","line":"        STRINGS          =       0x20"},
{"lineNum":"   96","line":"        INFO_LINK        =       0x40","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   97","line":"        LINK_ORDER       =       0x80"},
{"lineNum":"   98","line":"        OS_NONCONFORMING =      0x100"},
{"lineNum":"   99","line":"        GROUP            =      0x200","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  100","line":"        TLS              =      0x400"},
{"lineNum":"  101","line":"        COMPRESSED       =      0x800"},
{"lineNum":"  102","line":"        MASKOS           = 0x0ff00000"},
{"lineNum":"  103","line":"        MASKPROC         = 0xf0000000"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"        def short"},
{"lineNum":"  106","line":"          String.build do |str|"},
{"lineNum":"  107","line":"            str << \"W\" if write?"},
{"lineNum":"  108","line":"            str << \"A\" if alloc?"},
{"lineNum":"  109","line":"            str << \"X\" if execinstr?"},
{"lineNum":"  110","line":"            str << \"M\" if merge?"},
{"lineNum":"  111","line":"            str << \"S\" if strings?"},
{"lineNum":"  112","line":"            str << \"T\" if tls?"},
{"lineNum":"  113","line":"          end"},
{"lineNum":"  114","line":"        end"},
{"lineNum":"  115","line":"      end"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"      property! name : UInt32","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  118","line":"      property! type : Type","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"      property! flags : Flags"},
{"lineNum":"  120","line":"      property! addr : UInt32 | UInt64","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  121","line":"      property! offset : UInt32 | UInt64","class":"lineNoCov","hits":"0","possible_hits":"17",},
{"lineNum":"  122","line":"      property! size : UInt32 | UInt64","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  123","line":"      property! link : UInt32","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"      property! info : UInt32","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"      property! addralign : UInt32 | UInt64"},
{"lineNum":"  126","line":"      property! entsize : UInt32 | UInt64"},
{"lineNum":"  127","line":"    end"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    class Error < Exception"},
{"lineNum":"  130","line":"    end","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    getter! ident : Ident","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  133","line":"    property! type : Type"},
{"lineNum":"  134","line":"    property! machine : Machine"},
{"lineNum":"  135","line":"    property! version : UInt32"},
{"lineNum":"  136","line":"    property! entry : UInt32 | UInt64"},
{"lineNum":"  137","line":"    property! phoff : UInt32 | UInt64"},
{"lineNum":"  138","line":"    property! shoff : UInt32 | UInt64","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"    property! flags : UInt32"},
{"lineNum":"  140","line":"    property! ehsize : UInt16"},
{"lineNum":"  141","line":"    property! phentsize : UInt16"},
{"lineNum":"  142","line":"    property! phnum : UInt16"},
{"lineNum":"  143","line":"    property! shentsize : UInt16","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"    property! shnum : UInt16","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  145","line":"    property! shstrndx : UInt16","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    def self.open(path)"},
{"lineNum":"  148","line":"      File.open(path, \"r\") do |file|"},
{"lineNum":"  149","line":"        yield new(file)"},
{"lineNum":"  150","line":"      end"},
{"lineNum":"  151","line":"    end"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    def initialize(@io : IO::FileDescriptor)","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  154","line":"      read_magic"},
{"lineNum":"  155","line":"      read_ident"},
{"lineNum":"  156","line":"      read_header"},
{"lineNum":"  157","line":"    end"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    private def read_magic"},
{"lineNum":"  160","line":"      @io.read(magic = Bytes.new(4))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"      raise Error.new(\"Invalid magic number\") unless magic == MAGIC","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  162","line":"    end"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"    private def read_ident","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"      ei_class = Klass.new(@io.read_byte.not_nil!)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  166","line":"      ei_data = Endianness.from_value(@io.read_byte.not_nil!)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"      ei_version = @io.read_byte.not_nil!","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  169","line":"      raise Error.new(\"Unsupported version number\") unless ei_version == 1","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"      ei_osabi = OSABI.from_value(@io.read_byte)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"      ei_abiversion = @io.read_byte.not_nil!","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"      # padding (unused)"},
{"lineNum":"  175","line":"      @io.skip(7)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"      @ident = Ident.new(ei_class, ei_data, ei_version, ei_osabi, ei_abiversion)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"    end"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    # Parses and returns an Array of `SectionHeader`."},
{"lineNum":"  181","line":"    def section_headers","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"      @sections ||= Array(SectionHeader).new(shnum.to_i) do |i|","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  183","line":"        @io.seek(shoff + i * shentsize)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        sh = SectionHeader.new"},
{"lineNum":"  186","line":"        sh.name = read_word"},
{"lineNum":"  187","line":"        sh.type = SectionHeader::Type.new(read_word)"},
{"lineNum":"  188","line":"        sh.flags = SectionHeader::Flags.new(read_ulong.to_u64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"        sh.addr = read_ulong","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"        sh.offset = read_ulong","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":"        sh.size = read_ulong","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"        sh.link = read_word"},
{"lineNum":"  193","line":"        sh.info = read_word"},
{"lineNum":"  194","line":"        sh.addralign = read_ulong","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"        sh.entsize = read_ulong","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"        sh"},
{"lineNum":"  197","line":"      end"},
{"lineNum":"  198","line":"    end"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    # Returns the name of a section, using the `SectionHeader#name` index."},
{"lineNum":"  201","line":"    def sh_name(index)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"      sh = section_headers[shstrndx]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  203","line":"      @io.seek(sh.offset + index) do","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  204","line":"        @io.gets(\'\\0\').to_s.chomp(\'\\0\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":"      end"},
{"lineNum":"  206","line":"    end"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    # Searches for a section then yield the `SectionHeader` and the IO object"},
{"lineNum":"  209","line":"    # ready for parsing if the section was found. Returns the valure returned by"},
{"lineNum":"  210","line":"    # the block or nil if the section wasn\'t found."},
{"lineNum":"  211","line":"    def read_section?(name : String)"},
{"lineNum":"  212","line":"      if sh = section_headers.find { |sh| sh_name(sh.name) == name }"},
{"lineNum":"  213","line":"        @io.seek(sh.offset) do"},
{"lineNum":"  214","line":"          yield sh, @io"},
{"lineNum":"  215","line":"        end"},
{"lineNum":"  216","line":"      end"},
{"lineNum":"  217","line":"    end"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    private def endianness"},
{"lineNum":"  220","line":"      ident.data == Endianness::Little ? IO::ByteFormat::LittleEndian : IO::ByteFormat::BigEndian","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  221","line":"    end"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    private def read_word","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  224","line":"      @io.read_bytes(UInt32, endianness)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  225","line":"    end"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    private def read_ulong","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  228","line":"      case ident.klass"},
{"lineNum":"  229","line":"      when Klass::ELF32 then @io.read_bytes(UInt32, endianness)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  230","line":"      when Klass::ELF64 then @io.read_bytes(UInt64, endianness)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":"      else                   raise Error.new(\"Unsupported\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"      end"},
{"lineNum":"  233","line":"    end"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    private def read_header"},
{"lineNum":"  236","line":"      @type = Type.new(@io.read_bytes(UInt16, endianness).not_nil!)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  237","line":"      @machine = Machine.new(@io.read_bytes(UInt16, endianness).not_nil!)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"      @version = @io.read_bytes(UInt32, endianness).not_nil!","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"      raise Error.new(\"Unsupported version number\") unless version == 1","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"      @entry = read_ulong","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"      @phoff = read_ulong","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"      @shoff = read_ulong","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"      @flags = @io.read_bytes(UInt32, endianness)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"      @ehsize = @io.read_bytes(UInt16, endianness)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  249","line":"      case ident.klass"},
{"lineNum":"  250","line":"      when Klass::ELF32","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"        raise Error.new(\"Header should be 52 bytes for ELF32\") unless ehsize == 52","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  252","line":"      when Klass::ELF64"},
{"lineNum":"  253","line":"        raise Error.new(\"Header should be 64 bytes for ELF64\") unless ehsize == 64","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  254","line":"      end"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"      @phentsize = @io.read_bytes(UInt16, endianness)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  257","line":"      @phnum = @io.read_bytes(UInt16, endianness)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"      @shentsize = @io.read_bytes(UInt16, endianness)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  260","line":"      @shnum = @io.read_bytes(UInt16, endianness)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  261","line":"      @shstrndx = @io.read_bytes(UInt16, endianness)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"    end"},
{"lineNum":"  263","line":"  end"},
{"lineNum":"  264","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 65, "covered" : 0,};
var merged_data = [];
