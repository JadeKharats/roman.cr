var data = {lines:[
{"lineNum":"    1","line":"# An `IO` that reads and writes from a buffer in memory."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# The internal buffer can be resizeable and/or writeable depending"},
{"lineNum":"    4","line":"# on how an `IO::Memory` is constructed."},
{"lineNum":"    5","line":"class IO::Memory < IO"},
{"lineNum":"    6","line":"  # Returns the internal buffer as a `Pointer(UInt8)`."},
{"lineNum":"    7","line":"  getter buffer : Pointer(UInt8)"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"  # Same as `size`."},
{"lineNum":"   10","line":"  getter bytesize : Int32"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"  @capacity : Int32"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"  # Creates an empty, resizeable and writeable `IO::Memory` with the given"},
{"lineNum":"   15","line":"  # initialize capactiy for the internal buffer."},
{"lineNum":"   16","line":"  #"},
{"lineNum":"   17","line":"  # ```"},
{"lineNum":"   18","line":"  # io = IO::Memory.new"},
{"lineNum":"   19","line":"  # slice = Bytes.new(1)"},
{"lineNum":"   20","line":"  # io.pos         # => 0"},
{"lineNum":"   21","line":"  # io.read(slice) # => 0"},
{"lineNum":"   22","line":"  # slice          # => Bytes[0]"},
{"lineNum":"   23","line":"  # ```"},
{"lineNum":"   24","line":"  def initialize(capacity : Int = 64)"},
{"lineNum":"   25","line":"    String.check_capacity_in_bounds(capacity)"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    @buffer = GC.malloc_atomic(capacity.to_u32).as(UInt8*)"},
{"lineNum":"   28","line":"    @bytesize = 0"},
{"lineNum":"   29","line":"    @capacity = capacity.to_i"},
{"lineNum":"   30","line":"    @pos = 0"},
{"lineNum":"   31","line":"    @closed = false"},
{"lineNum":"   32","line":"    @resizeable = true"},
{"lineNum":"   33","line":"    @writeable = true"},
{"lineNum":"   34","line":"  end"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"  # Creates an `IO::Memory` that will read, and optionally write, from/to"},
{"lineNum":"   37","line":"  # the given slice. The created `IO::Memory` is non-resizeable."},
{"lineNum":"   38","line":"  #"},
{"lineNum":"   39","line":"  # The IO starts at position zero for reading."},
{"lineNum":"   40","line":"  #"},
{"lineNum":"   41","line":"  # ```"},
{"lineNum":"   42","line":"  # slice = Slice.new(6) { |i| (\'a\'.ord + i).to_u8 }"},
{"lineNum":"   43","line":"  # io = IO::Memory.new slice, writeable: false"},
{"lineNum":"   44","line":"  # io.pos            # => 0"},
{"lineNum":"   45","line":"  # io.read(slice)    # => 6"},
{"lineNum":"   46","line":"  # String.new(slice) # => \"abcdef\""},
{"lineNum":"   47","line":"  # ```"},
{"lineNum":"   48","line":"  def initialize(slice : Bytes, writeable = true)"},
{"lineNum":"   49","line":"    @buffer = slice.to_unsafe"},
{"lineNum":"   50","line":"    @bytesize = @capacity = slice.size.to_i"},
{"lineNum":"   51","line":"    @pos = 0"},
{"lineNum":"   52","line":"    @closed = false"},
{"lineNum":"   53","line":"    @resizeable = false"},
{"lineNum":"   54","line":"    @writeable = writeable"},
{"lineNum":"   55","line":"  end"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"  # Creates an `IO::Memory` whose contents are the exact contents of *string*."},
{"lineNum":"   58","line":"  # The created `IO::Memory` is non-resizeable and non-writeable."},
{"lineNum":"   59","line":"  #"},
{"lineNum":"   60","line":"  # The `IO` starts at position zero for reading."},
{"lineNum":"   61","line":"  #"},
{"lineNum":"   62","line":"  # ```"},
{"lineNum":"   63","line":"  # io = IO::Memory.new \"hello\""},
{"lineNum":"   64","line":"  # io.pos        # => 0"},
{"lineNum":"   65","line":"  # io.gets(2)    # => \"he\""},
{"lineNum":"   66","line":"  # io.print \"hi\" # raises IO::Error"},
{"lineNum":"   67","line":"  # ```"},
{"lineNum":"   68","line":"  def self.new(string : String)"},
{"lineNum":"   69","line":"    new string.to_slice, writeable: false"},
{"lineNum":"   70","line":"  end"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"  # See `IO#read(slice)`."},
{"lineNum":"   73","line":"  def read(slice : Bytes)"},
{"lineNum":"   74","line":"    check_open"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    count = slice.size"},
{"lineNum":"   77","line":"    count = Math.min(count, @bytesize - @pos)"},
{"lineNum":"   78","line":"    slice.copy_from(@buffer + @pos, count)"},
{"lineNum":"   79","line":"    @pos += count"},
{"lineNum":"   80","line":"    count"},
{"lineNum":"   81","line":"  end"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"  # See `IO#write(slice)`. Raises if this `IO::Memory` is non-writeable,"},
{"lineNum":"   84","line":"  # or if it\'s non-resizeable and a resize is needed."},
{"lineNum":"   85","line":"  def write(slice : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"    check_writeable"},
{"lineNum":"   87","line":"    check_open"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    count = slice.size"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    return if count == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    new_bytesize = @pos + count"},
{"lineNum":"   94","line":"    if new_bytesize > @capacity","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"      check_resizeable"},
{"lineNum":"   96","line":"      resize_to_capacity(Math.pw2ceil(new_bytesize))"},
{"lineNum":"   97","line":"    end"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    slice.copy_to(@buffer + @pos, count)"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    if @pos > @bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"      (@buffer + @bytesize).clear(@pos - @bytesize)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"    end"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    @pos += count","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"    @bytesize = @pos if @pos > @bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    nil"},
{"lineNum":"  109","line":"  end"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"  # See `IO#write_byte`. Raises if this `IO::Memory` is non-writeable,"},
{"lineNum":"  112","line":"  # or if it\'s non-resizeable and a resize is needed."},
{"lineNum":"  113","line":"  def write_byte(byte : UInt8)"},
{"lineNum":"  114","line":"    check_writeable"},
{"lineNum":"  115","line":"    check_open","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    new_bytesize = @pos + 1"},
{"lineNum":"  118","line":"    if new_bytesize > @capacity","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"      check_resizeable"},
{"lineNum":"  120","line":"      resize_to_capacity(Math.pw2ceil(new_bytesize))"},
{"lineNum":"  121","line":"    end"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    (@buffer + @pos).value = byte","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    if @pos > @bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"      (@buffer + @bytesize).clear(@pos - @bytesize)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"    end"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    @pos += 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"    @bytesize = @pos if @pos > @bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    nil"},
{"lineNum":"  133","line":"  end"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"  # :nodoc:"},
{"lineNum":"  136","line":"  def gets(delimiter : Char, limit : Int32, chomp = false)"},
{"lineNum":"  137","line":"    return super if @encoding || delimiter.ord >= 128"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    check_open"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    raise ArgumentError.new \"Negative limit\" if limit < 0"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    index = (@buffer + @pos).to_slice(@bytesize - @pos).index(delimiter.ord)"},
{"lineNum":"  144","line":"    if index"},
{"lineNum":"  145","line":"      if index >= limit"},
{"lineNum":"  146","line":"        index = limit"},
{"lineNum":"  147","line":"      else"},
{"lineNum":"  148","line":"        index += 1"},
{"lineNum":"  149","line":"      end"},
{"lineNum":"  150","line":"    else"},
{"lineNum":"  151","line":"      index = @bytesize - @pos"},
{"lineNum":"  152","line":"      return nil if index == 0"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"      if index >= limit"},
{"lineNum":"  155","line":"        index = limit"},
{"lineNum":"  156","line":"      end"},
{"lineNum":"  157","line":"    end"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    advance = index"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    if chomp && index > 0 && (@buffer + @pos + index - 1).value === delimiter"},
{"lineNum":"  162","line":"      index -= 1"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"      if delimiter == \'\\n\' && index > 0 && (@buffer + @pos + index - 1).value === \'\\r\'"},
{"lineNum":"  165","line":"        index -= 1"},
{"lineNum":"  166","line":"      end"},
{"lineNum":"  167","line":"    end"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    string = String.new(@buffer + @pos, index)"},
{"lineNum":"  170","line":"    @pos += advance"},
{"lineNum":"  171","line":"    string"},
{"lineNum":"  172","line":"  end"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"  # :nodoc:"},
{"lineNum":"  175","line":"  def read_byte"},
{"lineNum":"  176","line":"    check_open"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    pos = Math.min(@pos, @bytesize)"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    if pos == @bytesize"},
{"lineNum":"  181","line":"      nil"},
{"lineNum":"  182","line":"    else"},
{"lineNum":"  183","line":"      byte = @buffer[@pos]"},
{"lineNum":"  184","line":"      @pos += 1"},
{"lineNum":"  185","line":"      byte"},
{"lineNum":"  186","line":"    end"},
{"lineNum":"  187","line":"  end"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  # :nodoc:"},
{"lineNum":"  190","line":"  def peek"},
{"lineNum":"  191","line":"    check_open"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    Slice.new(@buffer + @pos, @bytesize - @pos)"},
{"lineNum":"  194","line":"  end"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"  # :nodoc:"},
{"lineNum":"  197","line":"  def skip(bytes_count)"},
{"lineNum":"  198","line":"    check_open"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    available = @bytesize - @pos"},
{"lineNum":"  201","line":"    if available >= bytes_count"},
{"lineNum":"  202","line":"      @pos += bytes_count"},
{"lineNum":"  203","line":"    else"},
{"lineNum":"  204","line":"      raise IO::EOFError.new"},
{"lineNum":"  205","line":"    end"},
{"lineNum":"  206","line":"  end"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"  # :nodoc:"},
{"lineNum":"  209","line":"  def skip_to_end"},
{"lineNum":"  210","line":"    check_open"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"    @pos = @bytesize"},
{"lineNum":"  213","line":"  end"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"  # :nodoc:"},
{"lineNum":"  216","line":"  def gets_to_end"},
{"lineNum":"  217","line":"    return super if @encoding"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    check_open"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    pos = Math.min(@pos, @bytesize)"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    if pos == @bytesize"},
{"lineNum":"  224","line":"      \"\""},
{"lineNum":"  225","line":"    else"},
{"lineNum":"  226","line":"      String.new(@buffer + @pos, @bytesize - @pos).tap do"},
{"lineNum":"  227","line":"        @pos = @bytesize"},
{"lineNum":"  228","line":"      end"},
{"lineNum":"  229","line":"    end"},
{"lineNum":"  230","line":"  end"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"  # Clears the internal buffer and resets the position to zero."},
{"lineNum":"  233","line":"  # Raises if this `IO::Memory` is non-resizeable."},
{"lineNum":"  234","line":"  #"},
{"lineNum":"  235","line":"  # ```"},
{"lineNum":"  236","line":"  # io = IO::Memory.new"},
{"lineNum":"  237","line":"  # io << \"abc\""},
{"lineNum":"  238","line":"  # io.rewind"},
{"lineNum":"  239","line":"  # io.gets(1) # => \"a\""},
{"lineNum":"  240","line":"  # io.clear"},
{"lineNum":"  241","line":"  # io.pos         # => 0"},
{"lineNum":"  242","line":"  # io.gets_to_end # => \"\""},
{"lineNum":"  243","line":"  #"},
{"lineNum":"  244","line":"  # io = IO::Memory.new \"hello\""},
{"lineNum":"  245","line":"  # io.clear # raises IO::Error"},
{"lineNum":"  246","line":"  # ```"},
{"lineNum":"  247","line":"  def clear"},
{"lineNum":"  248","line":"    check_open"},
{"lineNum":"  249","line":"    check_resizeable"},
{"lineNum":"  250","line":"    @bytesize = 0"},
{"lineNum":"  251","line":"    @pos = 0"},
{"lineNum":"  252","line":"  end"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"  # Returns `true` if this `IO::Memory` has no contents."},
{"lineNum":"  255","line":"  #"},
{"lineNum":"  256","line":"  # ```"},
{"lineNum":"  257","line":"  # io = IO::Memory.new"},
{"lineNum":"  258","line":"  # io.empty? # => true"},
{"lineNum":"  259","line":"  # io.print \"hello\""},
{"lineNum":"  260","line":"  # io.empty? # => false"},
{"lineNum":"  261","line":"  # ```"},
{"lineNum":"  262","line":"  def empty?"},
{"lineNum":"  263","line":"    @bytesize == 0"},
{"lineNum":"  264","line":"  end"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"  # Rewinds this `IO` to the initial position (zero)."},
{"lineNum":"  267","line":"  #"},
{"lineNum":"  268","line":"  # ```"},
{"lineNum":"  269","line":"  # io = IO::Memory.new \"hello\""},
{"lineNum":"  270","line":"  # io.gets(2) # => \"he\""},
{"lineNum":"  271","line":"  # io.rewind"},
{"lineNum":"  272","line":"  # io.gets(2) # => \"he\""},
{"lineNum":"  273","line":"  # ```"},
{"lineNum":"  274","line":"  def rewind"},
{"lineNum":"  275","line":"    @pos = 0"},
{"lineNum":"  276","line":"    self"},
{"lineNum":"  277","line":"  end"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"  # Returns the total number of bytes in this `IO`."},
{"lineNum":"  280","line":"  #"},
{"lineNum":"  281","line":"  # ```"},
{"lineNum":"  282","line":"  # io = IO::Memory.new \"hello\""},
{"lineNum":"  283","line":"  # io.size # => 5"},
{"lineNum":"  284","line":"  # ```"},
{"lineNum":"  285","line":"  def size"},
{"lineNum":"  286","line":"    @bytesize"},
{"lineNum":"  287","line":"  end"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"  # Seeks to a given *offset* (in bytes) according to the *whence* argument."},
{"lineNum":"  290","line":"  #"},
{"lineNum":"  291","line":"  # ```"},
{"lineNum":"  292","line":"  # io = IO::Memory.new(\"abcdef\")"},
{"lineNum":"  293","line":"  # io.gets(3) # => \"abc\""},
{"lineNum":"  294","line":"  # io.seek(1, IO::Seek::Set)"},
{"lineNum":"  295","line":"  # io.gets(2) # => \"bc\""},
{"lineNum":"  296","line":"  # io.seek(-1, IO::Seek::Current)"},
{"lineNum":"  297","line":"  # io.gets(1) # => \"c\""},
{"lineNum":"  298","line":"  # ```"},
{"lineNum":"  299","line":"  def seek(offset, whence : Seek = Seek::Set)"},
{"lineNum":"  300","line":"    check_open"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"    case whence"},
{"lineNum":"  303","line":"    when Seek::Set"},
{"lineNum":"  304","line":"      # Nothing"},
{"lineNum":"  305","line":"    when Seek::Current"},
{"lineNum":"  306","line":"      offset += @pos"},
{"lineNum":"  307","line":"    when Seek::End"},
{"lineNum":"  308","line":"      offset += @bytesize"},
{"lineNum":"  309","line":"    end"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    self.pos = offset"},
{"lineNum":"  312","line":"  end"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"  # Returns the current position (in bytes) of this `IO`."},
{"lineNum":"  315","line":"  #"},
{"lineNum":"  316","line":"  # ```"},
{"lineNum":"  317","line":"  # io = IO::Memory.new \"hello\""},
{"lineNum":"  318","line":"  # io.pos     # => 0"},
{"lineNum":"  319","line":"  # io.gets(2) # => \"he\""},
{"lineNum":"  320","line":"  # io.pos     # => 2"},
{"lineNum":"  321","line":"  # ```"},
{"lineNum":"  322","line":"  def pos"},
{"lineNum":"  323","line":"    @pos"},
{"lineNum":"  324","line":"  end"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"  # Sets the current position (in bytes) of this `IO`."},
{"lineNum":"  327","line":"  #"},
{"lineNum":"  328","line":"  # ```"},
{"lineNum":"  329","line":"  # io = IO::Memory.new \"hello\""},
{"lineNum":"  330","line":"  # io.pos = 3"},
{"lineNum":"  331","line":"  # io.gets # => \"lo\""},
{"lineNum":"  332","line":"  # ```"},
{"lineNum":"  333","line":"  def pos=(value)"},
{"lineNum":"  334","line":"    raise ArgumentError.new(\"Negative pos\") if value < 0"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    @pos = value.to_i"},
{"lineNum":"  337","line":"  end"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"  # Yields an `IO::Memory` to read a section of this `IO`\'s buffer."},
{"lineNum":"  340","line":"  #"},
{"lineNum":"  341","line":"  # During the block duration `self` becomes read-only,"},
{"lineNum":"  342","line":"  # so multiple concurrent open are allowed."},
{"lineNum":"  343","line":"  def read_at(offset, bytesize)"},
{"lineNum":"  344","line":"    unless 0 <= offset <= @bytesize"},
{"lineNum":"  345","line":"      raise ArgumentError.new(\"Offset out of bounds\")"},
{"lineNum":"  346","line":"    end"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"    if bytesize < 0"},
{"lineNum":"  349","line":"      raise ArgumentError.new(\"Negative bytesize\")"},
{"lineNum":"  350","line":"    end"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    unless 0 <= offset + bytesize <= @bytesize"},
{"lineNum":"  353","line":"      raise ArgumentError.new(\"Bytesize out of bounds\")"},
{"lineNum":"  354","line":"    end"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"    old_writeable = @writeable"},
{"lineNum":"  357","line":"    old_resizeable = @resizeable"},
{"lineNum":"  358","line":"    io = IO::Memory.new(to_slice[offset, bytesize], writeable: false)"},
{"lineNum":"  359","line":"    begin"},
{"lineNum":"  360","line":"      @writeable = false"},
{"lineNum":"  361","line":"      @resizeable = false"},
{"lineNum":"  362","line":"      yield io"},
{"lineNum":"  363","line":"    ensure"},
{"lineNum":"  364","line":"      io.close"},
{"lineNum":"  365","line":"      @writeable = old_writeable"},
{"lineNum":"  366","line":"      @resizeable = old_resizeable"},
{"lineNum":"  367","line":"    end"},
{"lineNum":"  368","line":"  end"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"  # Closes this `IO`. Further operations on this `IO` will raise an `IO::Error`."},
{"lineNum":"  371","line":"  #"},
{"lineNum":"  372","line":"  # ```"},
{"lineNum":"  373","line":"  # io = IO::Memory.new \"hello\""},
{"lineNum":"  374","line":"  # io.close"},
{"lineNum":"  375","line":"  # io.gets_to_end # raises IO::Error (closed stream)"},
{"lineNum":"  376","line":"  # ```"},
{"lineNum":"  377","line":"  def close"},
{"lineNum":"  378","line":"    @closed = true","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  379","line":"  end"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"  # Determines if this `IO` is closed."},
{"lineNum":"  382","line":"  #"},
{"lineNum":"  383","line":"  # ```"},
{"lineNum":"  384","line":"  # io = IO::Memory.new \"hello\""},
{"lineNum":"  385","line":"  # io.closed? # => false"},
{"lineNum":"  386","line":"  # io.close"},
{"lineNum":"  387","line":"  # io.closed? # => true"},
{"lineNum":"  388","line":"  # ```"},
{"lineNum":"  389","line":"  def closed?"},
{"lineNum":"  390","line":"    @closed"},
{"lineNum":"  391","line":"  end"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"  # Returns a new `String` that contains the contents of the internal buffer."},
{"lineNum":"  394","line":"  #"},
{"lineNum":"  395","line":"  # ```"},
{"lineNum":"  396","line":"  # io = IO::Memory.new"},
{"lineNum":"  397","line":"  # io.print 1, 2, 3"},
{"lineNum":"  398","line":"  # io.to_s # => \"123\""},
{"lineNum":"  399","line":"  # ```"},
{"lineNum":"  400","line":"  def to_s"},
{"lineNum":"  401","line":"    String.new @buffer, @bytesize"},
{"lineNum":"  402","line":"  end"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"  # Returns the underlying bytes."},
{"lineNum":"  405","line":"  #"},
{"lineNum":"  406","line":"  # ```"},
{"lineNum":"  407","line":"  # io = IO::Memory.new"},
{"lineNum":"  408","line":"  # io.print \"hello\""},
{"lineNum":"  409","line":"  #"},
{"lineNum":"  410","line":"  # io.to_slice # => Bytes[104, 101, 108, 108, 111]"},
{"lineNum":"  411","line":"  # ```"},
{"lineNum":"  412","line":"  def to_slice : Bytes"},
{"lineNum":"  413","line":"    Slice.new(@buffer, @bytesize, read_only: !@writeable)"},
{"lineNum":"  414","line":"  end"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"  # Appends this internal buffer to the given `IO`."},
{"lineNum":"  417","line":"  def to_s(io)"},
{"lineNum":"  418","line":"    io.write(to_slice)"},
{"lineNum":"  419","line":"  end"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"  private def check_writeable"},
{"lineNum":"  422","line":"    unless @writeable","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  423","line":"      raise IO::Error.new \"Read-only stream\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  424","line":"    end"},
{"lineNum":"  425","line":"  end"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"  private def check_resizeable"},
{"lineNum":"  428","line":"    unless @resizeable","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  429","line":"      raise IO::Error.new \"Non-resizeable stream\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  430","line":"    end"},
{"lineNum":"  431","line":"  end"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"  private def check_needs_resize"},
{"lineNum":"  434","line":"    resize_to_capacity(@capacity * 2) if @bytesize == @capacity"},
{"lineNum":"  435","line":"  end"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"  private def resize_to_capacity(capacity)"},
{"lineNum":"  438","line":"    @capacity = capacity","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  439","line":"    @buffer = @buffer.realloc(@capacity)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  440","line":"  end"},
{"lineNum":"  441","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 21, "covered" : 0,};
var merged_data = [];
