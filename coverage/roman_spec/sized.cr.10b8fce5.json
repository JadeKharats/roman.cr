var data = {lines:[
{"lineNum":"    1","line":"# An `IO` that wraps another `IO`, setting a limit for the number of bytes that can be read."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# ```"},
{"lineNum":"    4","line":"# io = IO::Memory.new \"abcde\""},
{"lineNum":"    5","line":"# sized = IO::Sized.new(io, read_size: 3)"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# sized.gets_to_end # => \"abc\""},
{"lineNum":"    8","line":"# sized.gets_to_end # => \"\""},
{"lineNum":"    9","line":"# io.gets_to_end    # => \"de\""},
{"lineNum":"   10","line":"# ```"},
{"lineNum":"   11","line":"class IO::Sized < IO"},
{"lineNum":"   12","line":"  # If `#sync_close?` is `true`, closing this `IO` will close the underlying `IO`."},
{"lineNum":"   13","line":"  property? sync_close : Bool"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"  # The number of remaining bytes to be read."},
{"lineNum":"   16","line":"  getter read_remaining : UInt64"},
{"lineNum":"   17","line":"  getter? closed : Bool"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"  # Creates a new `IO::Sized` which wraps *io*, and can read a maximum of"},
{"lineNum":"   20","line":"  # *read_size* bytes. If *sync_close* is set, calling `#close` calls"},
{"lineNum":"   21","line":"  # `#close` on the underlying `IO`."},
{"lineNum":"   22","line":"  def initialize(@io : IO, read_size : Int, @sync_close = false)"},
{"lineNum":"   23","line":"    raise ArgumentError.new \"Negative read_size\" if read_size < 0"},
{"lineNum":"   24","line":"    @closed = false"},
{"lineNum":"   25","line":"    @read_remaining = read_size.to_u64"},
{"lineNum":"   26","line":"  end"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"  def read(slice : Bytes)"},
{"lineNum":"   29","line":"    check_open"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    count = {slice.size.to_u64, @read_remaining}.min"},
{"lineNum":"   32","line":"    bytes_read = @io.read slice[0, count]"},
{"lineNum":"   33","line":"    @read_remaining -= bytes_read"},
{"lineNum":"   34","line":"    bytes_read"},
{"lineNum":"   35","line":"  end"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"  def read_byte"},
{"lineNum":"   38","line":"    check_open"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    if @read_remaining > 0"},
{"lineNum":"   41","line":"      byte = @io.read_byte"},
{"lineNum":"   42","line":"      @read_remaining -= 1 if byte"},
{"lineNum":"   43","line":"      byte"},
{"lineNum":"   44","line":"    else"},
{"lineNum":"   45","line":"      nil"},
{"lineNum":"   46","line":"    end"},
{"lineNum":"   47","line":"  end"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"  def peek"},
{"lineNum":"   50","line":"    check_open"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    return Bytes.empty if @read_remaining == 0 # EOF"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    peek = @io.peek"},
{"lineNum":"   55","line":"    return nil unless peek"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"    if @read_remaining < peek.size"},
{"lineNum":"   58","line":"      peek = peek[0, @read_remaining]"},
{"lineNum":"   59","line":"    end"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    peek"},
{"lineNum":"   62","line":"  end"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"  def skip(bytes_count) : Nil"},
{"lineNum":"   65","line":"    check_open"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    if bytes_count <= @read_remaining"},
{"lineNum":"   68","line":"      @io.skip(bytes_count)"},
{"lineNum":"   69","line":"      @read_remaining -= bytes_count"},
{"lineNum":"   70","line":"    else"},
{"lineNum":"   71","line":"      raise IO::EOFError.new"},
{"lineNum":"   72","line":"    end"},
{"lineNum":"   73","line":"  end"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"  def write(slice : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"    raise IO::Error.new \"Can\'t write to IO::Sized\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"  end"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"  def close","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"    return if @closed","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"    @closed = true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    @io.close if @sync_close","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   84","line":"  end"},
{"lineNum":"   85","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
