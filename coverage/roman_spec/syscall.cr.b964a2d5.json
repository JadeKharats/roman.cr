var data = {lines:[
{"lineNum":"    1","line":"module IO::Syscall"},
{"lineNum":"    2","line":"  @read_timed_out = false"},
{"lineNum":"    3","line":"  @write_timed_out = false"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"  @read_timeout : Time::Span?"},
{"lineNum":"    6","line":"  @write_timeout : Time::Span?"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"  @readers : Deque(Fiber)?"},
{"lineNum":"    9","line":"  @writers : Deque(Fiber)?"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  # Returns the time to wait when reading before raising an `IO::Timeout`."},
{"lineNum":"   12","line":"  def read_timeout : Time::Span?"},
{"lineNum":"   13","line":"    @read_timeout"},
{"lineNum":"   14","line":"  end"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"  # Sets the time to wait when reading before raising an `IO::Timeout`."},
{"lineNum":"   17","line":"  def read_timeout=(timeout : Time::Span?) : ::Time::Span?"},
{"lineNum":"   18","line":"    @read_timeout = timeout"},
{"lineNum":"   19","line":"  end"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"  # Set the number of seconds to wait when reading before raising an `IO::Timeout`."},
{"lineNum":"   22","line":"  def read_timeout=(read_timeout : Number) : Number"},
{"lineNum":"   23","line":"    self.read_timeout = read_timeout.seconds"},
{"lineNum":"   24","line":"    read_timeout"},
{"lineNum":"   25","line":"  end"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"  # Returns the time to wait when writing before raising an `IO::Timeout`."},
{"lineNum":"   28","line":"  def write_timeout : Time::Span?"},
{"lineNum":"   29","line":"    @write_timeout"},
{"lineNum":"   30","line":"  end"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"  # Sets the time to wait when writing before raising an `IO::Timeout`."},
{"lineNum":"   33","line":"  def write_timeout=(timeout : Time::Span?) : ::Time::Span?"},
{"lineNum":"   34","line":"    @write_timeout = timeout"},
{"lineNum":"   35","line":"  end"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"  # Set the number of seconds to wait when writing before raising an `IO::Timeout`."},
{"lineNum":"   38","line":"  def write_timeout=(write_timeout : Number) : Number"},
{"lineNum":"   39","line":"    self.write_timeout = write_timeout.seconds"},
{"lineNum":"   40","line":"    write_timeout"},
{"lineNum":"   41","line":"  end"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"  def read_syscall_helper(slice : Bytes, errno_msg : String) : Int32"},
{"lineNum":"   44","line":"    loop do"},
{"lineNum":"   45","line":"      bytes_read = yield"},
{"lineNum":"   46","line":"      if bytes_read != -1"},
{"lineNum":"   47","line":"        return bytes_read"},
{"lineNum":"   48","line":"      end"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"      if Errno.value == Errno::EAGAIN"},
{"lineNum":"   51","line":"        wait_readable"},
{"lineNum":"   52","line":"      else"},
{"lineNum":"   53","line":"        raise Errno.new(errno_msg)"},
{"lineNum":"   54","line":"      end"},
{"lineNum":"   55","line":"    end"},
{"lineNum":"   56","line":"  ensure"},
{"lineNum":"   57","line":"    if (readers = @readers) && !readers.empty?"},
{"lineNum":"   58","line":"      add_read_event"},
{"lineNum":"   59","line":"    end"},
{"lineNum":"   60","line":"  end"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"  def write_syscall_helper(slice : Bytes, errno_msg : String) : Nil"},
{"lineNum":"   63","line":"    loop do"},
{"lineNum":"   64","line":"      bytes_written = yield slice"},
{"lineNum":"   65","line":"      if bytes_written != -1"},
{"lineNum":"   66","line":"        slice += bytes_written"},
{"lineNum":"   67","line":"        return if slice.size == 0"},
{"lineNum":"   68","line":"      else"},
{"lineNum":"   69","line":"        if Errno.value == Errno::EAGAIN"},
{"lineNum":"   70","line":"          wait_writable"},
{"lineNum":"   71","line":"        else"},
{"lineNum":"   72","line":"          raise Errno.new(errno_msg)"},
{"lineNum":"   73","line":"        end"},
{"lineNum":"   74","line":"      end"},
{"lineNum":"   75","line":"    end"},
{"lineNum":"   76","line":"  ensure"},
{"lineNum":"   77","line":"    if (writers = @writers) && !writers.empty?"},
{"lineNum":"   78","line":"      add_write_event"},
{"lineNum":"   79","line":"    end"},
{"lineNum":"   80","line":"  end"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"  # :nodoc:"},
{"lineNum":"   83","line":"  def resume_read(timed_out = false)"},
{"lineNum":"   84","line":"    @read_timed_out = timed_out","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    if reader = @readers.try &.shift?"},
{"lineNum":"   87","line":"      reader.resume"},
{"lineNum":"   88","line":"    end"},
{"lineNum":"   89","line":"  end"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"  # :nodoc:"},
{"lineNum":"   92","line":"  def resume_write(timed_out = false)"},
{"lineNum":"   93","line":"    @write_timed_out = timed_out","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    if writer = @writers.try &.shift?"},
{"lineNum":"   96","line":"      writer.resume"},
{"lineNum":"   97","line":"    end"},
{"lineNum":"   98","line":"  end"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"  private def wait_readable(timeout = @read_timeout)"},
{"lineNum":"  101","line":"    wait_readable(timeout: timeout) { |err| raise err }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  102","line":"  end"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"  private def wait_readable(timeout = @read_timeout)"},
{"lineNum":"  105","line":"    readers = (@readers ||= Deque(Fiber).new)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  106","line":"    readers << Fiber.current"},
{"lineNum":"  107","line":"    add_read_event(timeout)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"    Scheduler.reschedule","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    if @read_timed_out","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  111","line":"      @read_timed_out = false","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  112","line":"      yield Timeout.new(\"Read timed out\")","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"    end"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    nil"},
{"lineNum":"  116","line":"  end"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"  private abstract def add_read_event(timeout = @read_timeout)"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"  private def wait_writable(timeout = @write_timeout)"},
{"lineNum":"  121","line":"    wait_writable(timeout: timeout) { |err| raise err }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  122","line":"  end"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  private def wait_writable(timeout = @write_timeout)"},
{"lineNum":"  125","line":"    writers = (@writers ||= Deque(Fiber).new)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  126","line":"    writers << Fiber.current"},
{"lineNum":"  127","line":"    add_write_event(timeout)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  128","line":"    Scheduler.reschedule","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    if @write_timed_out","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  131","line":"      @write_timed_out = false","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  132","line":"      yield Timeout.new(\"Write timed out\")","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  133","line":"    end"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    nil"},
{"lineNum":"  136","line":"  end"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"  private abstract def add_write_event(timeout = @write_timeout)"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  private def reschedule_waiting"},
{"lineNum":"  141","line":"    if readers = @readers","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"      Scheduler.enqueue readers","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  143","line":"      readers.clear"},
{"lineNum":"  144","line":"    end"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    if writers = @writers","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  147","line":"      Scheduler.enqueue writers","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  148","line":"      writers.clear"},
{"lineNum":"  149","line":"    end"},
{"lineNum":"  150","line":"  end"},
{"lineNum":"  151","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 20, "covered" : 0,};
var merged_data = [];
