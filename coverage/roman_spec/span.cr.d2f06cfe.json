var data = {lines:[
{"lineNum":"    1","line":"# `Time::Span` represents one period of time."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# A `Time::Span` initializes with the specified period."},
{"lineNum":"    4","line":"# Different numbers of arguments generate a `Time::Span` in different length."},
{"lineNum":"    5","line":"# Check all `#new` methods for details."},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# ```"},
{"lineNum":"    8","line":"# Time::Span.new(nanoseconds: 10_000) # => 00:00:00.000010000"},
{"lineNum":"    9","line":"# Time::Span.new(10, 10, 10)          # => 10:10:10"},
{"lineNum":"   10","line":"# Time::Span.new(10, 10, 10, 10)      # => 10.10:10:10"},
{"lineNum":"   11","line":"# ```"},
{"lineNum":"   12","line":"#"},
{"lineNum":"   13","line":"# Calculation between `Time` also returns a `Time::Span`."},
{"lineNum":"   14","line":"#"},
{"lineNum":"   15","line":"# ```"},
{"lineNum":"   16","line":"# span = Time.new(2015, 10, 10) - Time.new(2015, 9, 10)"},
{"lineNum":"   17","line":"# span       # => 30.00:00:00"},
{"lineNum":"   18","line":"# span.class # => Time::Span"},
{"lineNum":"   19","line":"# ```"},
{"lineNum":"   20","line":"#"},
{"lineNum":"   21","line":"# Inspection:"},
{"lineNum":"   22","line":"#"},
{"lineNum":"   23","line":"# ```"},
{"lineNum":"   24","line":"# span = Time::Span.new(20, 10, 10)"},
{"lineNum":"   25","line":"# span.hours   # => 20"},
{"lineNum":"   26","line":"# span.minutes # => 10"},
{"lineNum":"   27","line":"# span.seconds # => 10"},
{"lineNum":"   28","line":"# ```"},
{"lineNum":"   29","line":"#"},
{"lineNum":"   30","line":"# Calculation:"},
{"lineNum":"   31","line":"#"},
{"lineNum":"   32","line":"# ```"},
{"lineNum":"   33","line":"# a = Time::Span.new(20, 10, 10)"},
{"lineNum":"   34","line":"# b = Time::Span.new(10, 10, 10)"},
{"lineNum":"   35","line":"# c = a - b # => 10:00:00"},
{"lineNum":"   36","line":"# c.hours   # => 10"},
{"lineNum":"   37","line":"# ```"},
{"lineNum":"   38","line":"#"},
{"lineNum":"   39","line":"struct Time::Span"},
{"lineNum":"   40","line":"  # *Heavily* inspired by Mono\'s Time::Span class:"},
{"lineNum":"   41","line":"  # https://github.com/mono/mono/blob/master/mcs/class/corlib/System/Time::Span.cs"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"  include Comparable(self)"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"  MAX  = new seconds: Int64::MAX, nanoseconds: 999_999_999"},
{"lineNum":"   46","line":"  MIN  = new seconds: Int64::MIN, nanoseconds: -999_999_999"},
{"lineNum":"   47","line":"  ZERO = new nanoseconds: 0"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"  @seconds : Int64"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"  # Nanoseconds are always in the range (-999_999_999..999_999_999)"},
{"lineNum":"   52","line":"  # and always have the same sign as @seconds (if seconds is zero,"},
{"lineNum":"   53","line":"  # @nanoseconds can either be negative or positive)."},
{"lineNum":"   54","line":"  @nanoseconds : Int32"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"  def self.new(hours : Int, minutes : Int, seconds : Int)"},
{"lineNum":"   57","line":"    new(0, hours, minutes, seconds)"},
{"lineNum":"   58","line":"  end"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"  def self.new(days : Int, hours : Int, minutes : Int, seconds : Int, nanoseconds : Int = 0)"},
{"lineNum":"   61","line":"    new("},
{"lineNum":"   62","line":"      seconds: compute_seconds!(days, hours, minutes, seconds),"},
{"lineNum":"   63","line":"      nanoseconds: nanoseconds.to_i64,"},
{"lineNum":"   64","line":"    )"},
{"lineNum":"   65","line":"  end"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"  def initialize(*, seconds : Int, nanoseconds : Int)"},
{"lineNum":"   68","line":"    # Normalize nanoseconds in the range 0...1_000_000_000"},
{"lineNum":"   69","line":"    seconds += nanoseconds.tdiv(NANOSECONDS_PER_SECOND)","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   70","line":"    nanoseconds = nanoseconds.remainder(NANOSECONDS_PER_SECOND)"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    # Make sure that if seconds is positive, nanoseconds is"},
{"lineNum":"   73","line":"    # positive too. Likewise, if seconds is negative, make"},
{"lineNum":"   74","line":"    # sure that nanoseconds is negative too."},
{"lineNum":"   75","line":"    if seconds > 0 && nanoseconds < 0"},
{"lineNum":"   76","line":"      seconds -= 1","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   77","line":"      nanoseconds += NANOSECONDS_PER_SECOND"},
{"lineNum":"   78","line":"    elsif seconds < 0 && nanoseconds > 0","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   79","line":"      seconds += 1","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   80","line":"      nanoseconds -= NANOSECONDS_PER_SECOND"},
{"lineNum":"   81","line":"    end"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    @seconds = seconds.to_i64"},
{"lineNum":"   84","line":"    @nanoseconds = nanoseconds.to_i32"},
{"lineNum":"   85","line":"  end"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"  def self.new(*, nanoseconds : Int)"},
{"lineNum":"   88","line":"    new("},
{"lineNum":"   89","line":"      seconds: nanoseconds.to_i64.tdiv(NANOSECONDS_PER_SECOND),"},
{"lineNum":"   90","line":"      nanoseconds: nanoseconds.to_i64.remainder(NANOSECONDS_PER_SECOND),"},
{"lineNum":"   91","line":"    )"},
{"lineNum":"   92","line":"  end"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  private def self.compute_seconds!(days, hours, minutes, seconds)"},
{"lineNum":"   95","line":"    compute_seconds(days, hours, minutes, seconds, true).not_nil!"},
{"lineNum":"   96","line":"  end"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"  private def self.compute_seconds(days, hours, minutes, seconds, raise_exception)"},
{"lineNum":"   99","line":"    # there\'s no overflow checks for hours, minutes, ..."},
{"lineNum":"  100","line":"    # so big hours/minutes values can overflow at some point and change expected values"},
{"lineNum":"  101","line":"    hrssec = hours * 3600 # break point at (Int32::MAX - 596523)"},
{"lineNum":"  102","line":"    minsec = minutes * 60"},
{"lineNum":"  103","line":"    s = (hrssec + minsec + seconds).to_i64"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    result = 0_i64"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    overflow = false"},
{"lineNum":"  108","line":"    # days is problematic because it can overflow but that overflow can be"},
{"lineNum":"  109","line":"    # \"legal\" (i.e. temporary) (e.g. if other parameters are negative) or"},
{"lineNum":"  110","line":"    # illegal (e.g. sign change)."},
{"lineNum":"  111","line":"    if days > 0"},
{"lineNum":"  112","line":"      sd = SECONDS_PER_DAY.to_i64 * days"},
{"lineNum":"  113","line":"      if sd < days"},
{"lineNum":"  114","line":"        overflow = true"},
{"lineNum":"  115","line":"      elsif s < 0"},
{"lineNum":"  116","line":"        temp = s"},
{"lineNum":"  117","line":"        s += sd"},
{"lineNum":"  118","line":"        # positive days -> total seconds should be lower"},
{"lineNum":"  119","line":"        overflow = temp > s"},
{"lineNum":"  120","line":"      else"},
{"lineNum":"  121","line":"        s += sd"},
{"lineNum":"  122","line":"        # positive + positive != negative result"},
{"lineNum":"  123","line":"        overflow = s < 0"},
{"lineNum":"  124","line":"      end"},
{"lineNum":"  125","line":"    elsif days < 0"},
{"lineNum":"  126","line":"      sd = SECONDS_PER_DAY.to_i64 * days"},
{"lineNum":"  127","line":"      if sd > days"},
{"lineNum":"  128","line":"        overflow = true"},
{"lineNum":"  129","line":"      elsif s <= 0"},
{"lineNum":"  130","line":"        s += sd"},
{"lineNum":"  131","line":"        # negative + negative != positive result"},
{"lineNum":"  132","line":"        overflow = s > 0"},
{"lineNum":"  133","line":"      else"},
{"lineNum":"  134","line":"        nanos = s"},
{"lineNum":"  135","line":"        s += sd"},
{"lineNum":"  136","line":"        # negative days -> total nanos should be lower"},
{"lineNum":"  137","line":"        overflow = s > nanos"},
{"lineNum":"  138","line":"      end"},
{"lineNum":"  139","line":"    end"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    if overflow"},
{"lineNum":"  142","line":"      if raise_exception"},
{"lineNum":"  143","line":"        raise ArgumentError.new \"Time::Span too big or too small\""},
{"lineNum":"  144","line":"      end"},
{"lineNum":"  145","line":"      return nil"},
{"lineNum":"  146","line":"    end"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    s"},
{"lineNum":"  149","line":"  end"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"  # Returns the number of full days in this time span."},
{"lineNum":"  152","line":"  #"},
{"lineNum":"  153","line":"  # ```"},
{"lineNum":"  154","line":"  # (5.days + 25.hours).days # => 6_i64"},
{"lineNum":"  155","line":"  # ```"},
{"lineNum":"  156","line":"  def days : Int64"},
{"lineNum":"  157","line":"    to_i.tdiv(SECONDS_PER_DAY)"},
{"lineNum":"  158","line":"  end"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  # Returns the number of full hours of the day (`0..23`) in this time span."},
{"lineNum":"  161","line":"  def hours : Int32"},
{"lineNum":"  162","line":"    to_i.remainder(SECONDS_PER_DAY)"},
{"lineNum":"  163","line":"        .tdiv(SECONDS_PER_HOUR)"},
{"lineNum":"  164","line":"        .to_i"},
{"lineNum":"  165","line":"  end"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"  # Returns the number of full minutes of the hour (`0..59`) in this time span."},
{"lineNum":"  168","line":"  def minutes : Int32"},
{"lineNum":"  169","line":"    to_i.remainder(SECONDS_PER_HOUR)"},
{"lineNum":"  170","line":"        .tdiv(SECONDS_PER_MINUTE)"},
{"lineNum":"  171","line":"        .to_i"},
{"lineNum":"  172","line":"  end"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"  # Returns the number of full seconds of the minute (`0..59`) in this time span."},
{"lineNum":"  175","line":"  def seconds : Int32"},
{"lineNum":"  176","line":"    to_i.remainder(SECONDS_PER_MINUTE)"},
{"lineNum":"  177","line":"        .to_i"},
{"lineNum":"  178","line":"  end"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"  # Returns the number of milliseconds of the second (`0..999`) in this time span."},
{"lineNum":"  181","line":"  def milliseconds : Int32"},
{"lineNum":"  182","line":"    nanoseconds / NANOSECONDS_PER_MILLISECOND"},
{"lineNum":"  183","line":"  end"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"  # Returns the number of nanoseconds of the second (`0..999_999_999`)"},
{"lineNum":"  186","line":"  # in this time span."},
{"lineNum":"  187","line":"  def nanoseconds : Int32"},
{"lineNum":"  188","line":"    @nanoseconds"},
{"lineNum":"  189","line":"  end"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"  # Converts to a (possibly fractional) number of weeks."},
{"lineNum":"  192","line":"  #"},
{"lineNum":"  193","line":"  # ```"},
{"lineNum":"  194","line":"  # (4.weeks + 5.days + 6.hours).total_weeks # => 4.75"},
{"lineNum":"  195","line":"  # ```"},
{"lineNum":"  196","line":"  def total_weeks : Float64"},
{"lineNum":"  197","line":"    total_days / 7"},
{"lineNum":"  198","line":"  end"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"  # Converts to a (possibly fractional) number of days."},
{"lineNum":"  201","line":"  #"},
{"lineNum":"  202","line":"  # ```"},
{"lineNum":"  203","line":"  # (36.hours).total_days # => 1.5"},
{"lineNum":"  204","line":"  # ```"},
{"lineNum":"  205","line":"  def total_days : Float64"},
{"lineNum":"  206","line":"    total_hours / 24"},
{"lineNum":"  207","line":"  end"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"  # Converts to a (possibly fractional) number of hours."},
{"lineNum":"  210","line":"  def total_hours : Float64"},
{"lineNum":"  211","line":"    total_minutes / 60"},
{"lineNum":"  212","line":"  end"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"  # Converts to a (possibly fractional) number of minutes."},
{"lineNum":"  215","line":"  def total_minutes : Float64"},
{"lineNum":"  216","line":"    total_seconds / 60"},
{"lineNum":"  217","line":"  end"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"  # Converts to a (possibly fractional) number of seconds."},
{"lineNum":"  220","line":"  def total_seconds : Float64","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  221","line":"    to_i.to_f + (nanoseconds.to_f / NANOSECONDS_PER_SECOND)"},
{"lineNum":"  222","line":"  end"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"  # Converts to a number of nanoseconds."},
{"lineNum":"  225","line":"  def total_nanoseconds : Float64","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"    (to_i.to_f * NANOSECONDS_PER_SECOND) + nanoseconds"},
{"lineNum":"  227","line":"  end"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"  # Converts to a number of milliseconds."},
{"lineNum":"  230","line":"  def total_milliseconds : Float64"},
{"lineNum":"  231","line":"    total_nanoseconds / NANOSECONDS_PER_MILLISECOND","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"  end"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"  # Alias of `total_seconds`."},
{"lineNum":"  235","line":"  def to_f : Float64"},
{"lineNum":"  236","line":"    total_seconds"},
{"lineNum":"  237","line":"  end"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"  # Returns the number of full seconds."},
{"lineNum":"  240","line":"  def to_i : Int64"},
{"lineNum":"  241","line":"    @seconds"},
{"lineNum":"  242","line":"  end"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"  # Alias of `abs`."},
{"lineNum":"  245","line":"  def duration : Time::Span"},
{"lineNum":"  246","line":"    abs"},
{"lineNum":"  247","line":"  end"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"  # Returns the absolute (non-negative) amount of time this `Time::Span`"},
{"lineNum":"  250","line":"  # represents by removing the sign."},
{"lineNum":"  251","line":"  def abs : Time::Span"},
{"lineNum":"  252","line":"    Span.new(seconds: to_i.abs, nanoseconds: nanoseconds.abs)"},
{"lineNum":"  253","line":"  end"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"  # Returns a `Time` that happens later by `self` than the current time."},
{"lineNum":"  256","line":"  def from_now : Time"},
{"lineNum":"  257","line":"    Time.now + self"},
{"lineNum":"  258","line":"  end"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"  # Returns a `Time` that happens earlier by `self` than the current time."},
{"lineNum":"  261","line":"  def ago : Time"},
{"lineNum":"  262","line":"    Time.now - self"},
{"lineNum":"  263","line":"  end"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"  def -(other : self) : Time::Span","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  266","line":"    # TODO check overflow"},
{"lineNum":"  267","line":"    Span.new(","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  268","line":"      seconds: to_i - other.to_i,"},
{"lineNum":"  269","line":"      nanoseconds: nanoseconds - other.nanoseconds,"},
{"lineNum":"  270","line":"    )"},
{"lineNum":"  271","line":"  end"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"  def - : Time::Span"},
{"lineNum":"  274","line":"    # TODO check overflow"},
{"lineNum":"  275","line":"    Span.new("},
{"lineNum":"  276","line":"      seconds: -to_i,"},
{"lineNum":"  277","line":"      nanoseconds: -nanoseconds,"},
{"lineNum":"  278","line":"    )"},
{"lineNum":"  279","line":"  end"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"  def +(other : self) : Time::Span"},
{"lineNum":"  282","line":"    # TODO check overflow"},
{"lineNum":"  283","line":"    Span.new("},
{"lineNum":"  284","line":"      seconds: to_i + other.to_i,"},
{"lineNum":"  285","line":"      nanoseconds: nanoseconds + other.nanoseconds,"},
{"lineNum":"  286","line":"    )"},
{"lineNum":"  287","line":"  end"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"  def + : self"},
{"lineNum":"  290","line":"    self"},
{"lineNum":"  291","line":"  end"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"  # Returns a `Time::Span` that is *number* times longer."},
{"lineNum":"  294","line":"  def *(number : Number) : Time::Span"},
{"lineNum":"  295","line":"    # TODO check overflow"},
{"lineNum":"  296","line":"    Span.new("},
{"lineNum":"  297","line":"      seconds: to_i.to_i64 * number,"},
{"lineNum":"  298","line":"      nanoseconds: nanoseconds.to_i64 * number,"},
{"lineNum":"  299","line":"    )"},
{"lineNum":"  300","line":"  end"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"  def /(number : Number) : Time::Span"},
{"lineNum":"  303","line":"    seconds = to_i.tdiv(number)"},
{"lineNum":"  304","line":"    nanoseconds = self.nanoseconds.tdiv(number)"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    remainder = to_i.remainder(number)"},
{"lineNum":"  307","line":"    nanoseconds += (remainder * NANOSECONDS_PER_SECOND) / number"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    # TODO check overflow"},
{"lineNum":"  310","line":"    Span.new("},
{"lineNum":"  311","line":"      seconds: seconds,"},
{"lineNum":"  312","line":"      nanoseconds: nanoseconds,"},
{"lineNum":"  313","line":"    )"},
{"lineNum":"  314","line":"  end"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"  def /(other : self) : Float64"},
{"lineNum":"  317","line":"    total_nanoseconds.to_f64 / other.total_nanoseconds.to_f64"},
{"lineNum":"  318","line":"  end"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"  def <=>(other : self)"},
{"lineNum":"  321","line":"    cmp = to_i <=> other.to_i"},
{"lineNum":"  322","line":"    cmp = nanoseconds <=> other.nanoseconds if cmp == 0"},
{"lineNum":"  323","line":"    cmp"},
{"lineNum":"  324","line":"  end"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"  def inspect(io : IO)"},
{"lineNum":"  327","line":"    if to_i < 0 || nanoseconds < 0"},
{"lineNum":"  328","line":"      io << \'-\'"},
{"lineNum":"  329","line":"    end"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"    # We need to take absolute values of all components."},
{"lineNum":"  332","line":"    # Can\'t handle negative timespans by negating the Time::Span"},
{"lineNum":"  333","line":"    # as a whole. This would lead to an overflow for the"},
{"lineNum":"  334","line":"    # degenerate case `Time::Span.MinValue`."},
{"lineNum":"  335","line":"    if days != 0"},
{"lineNum":"  336","line":"      io << days.abs"},
{"lineNum":"  337","line":"      io << \'.\'"},
{"lineNum":"  338","line":"    end"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"    hours = self.hours.abs"},
{"lineNum":"  341","line":"    io << \'0\' if hours < 10"},
{"lineNum":"  342","line":"    io << hours"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    io << \':\'"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"    minutes = self.minutes.abs"},
{"lineNum":"  347","line":"    io << \'0\' if minutes < 10"},
{"lineNum":"  348","line":"    io << minutes"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    io << \':\'"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    seconds = self.seconds.abs"},
{"lineNum":"  353","line":"    io << \'0\' if seconds < 10"},
{"lineNum":"  354","line":"    io << seconds"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"    nanoseconds = self.nanoseconds.abs"},
{"lineNum":"  357","line":"    if nanoseconds != 0"},
{"lineNum":"  358","line":"      io << \'.\'"},
{"lineNum":"  359","line":"      io << \'0\' if nanoseconds < 100000000"},
{"lineNum":"  360","line":"      io << \'0\' if nanoseconds < 10000000"},
{"lineNum":"  361","line":"      io << \'0\' if nanoseconds < 1000000"},
{"lineNum":"  362","line":"      io << \'0\' if nanoseconds < 100000"},
{"lineNum":"  363","line":"      io << \'0\' if nanoseconds < 10000"},
{"lineNum":"  364","line":"      io << \'0\' if nanoseconds < 1000"},
{"lineNum":"  365","line":"      io << \'0\' if nanoseconds < 100"},
{"lineNum":"  366","line":"      io << \'0\' if nanoseconds < 10"},
{"lineNum":"  367","line":"      io << nanoseconds"},
{"lineNum":"  368","line":"    end"},
{"lineNum":"  369","line":"  end"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"  def self.zero : Time::Span"},
{"lineNum":"  372","line":"    ZERO"},
{"lineNum":"  373","line":"  end"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"  def zero? : Bool"},
{"lineNum":"  376","line":"    to_i == 0 && nanoseconds == 0"},
{"lineNum":"  377","line":"  end"},
{"lineNum":"  378","line":"end"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"struct Int"},
{"lineNum":"  381","line":"  # :nodoc:"},
{"lineNum":"  382","line":"  def week : Time::Span"},
{"lineNum":"  383","line":"    weeks"},
{"lineNum":"  384","line":"  end"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"  # Returns a `Time::Span` of `self` weeks."},
{"lineNum":"  387","line":"  def weeks : Time::Span"},
{"lineNum":"  388","line":"    Time::Span.new 7 * self, 0, 0, 0"},
{"lineNum":"  389","line":"  end"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"  # :nodoc:"},
{"lineNum":"  392","line":"  def day : Time::Span"},
{"lineNum":"  393","line":"    days"},
{"lineNum":"  394","line":"  end"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"  # Returns a `Time::Span` of `self` days."},
{"lineNum":"  397","line":"  def days : Time::Span"},
{"lineNum":"  398","line":"    Time::Span.new self, 0, 0, 0"},
{"lineNum":"  399","line":"  end"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"  # :nodoc:"},
{"lineNum":"  402","line":"  def hour : Time::Span"},
{"lineNum":"  403","line":"    hours"},
{"lineNum":"  404","line":"  end"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"  # Returns a `Time::Span` of `self` hours."},
{"lineNum":"  407","line":"  def hours : Time::Span"},
{"lineNum":"  408","line":"    Time::Span.new self, 0, 0"},
{"lineNum":"  409","line":"  end"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"  # :nodoc:"},
{"lineNum":"  412","line":"  def minute : Time::Span"},
{"lineNum":"  413","line":"    minutes"},
{"lineNum":"  414","line":"  end"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"  # Returns a `Time::Span` of `self` minutes."},
{"lineNum":"  417","line":"  def minutes : Time::Span"},
{"lineNum":"  418","line":"    Time::Span.new 0, self, 0"},
{"lineNum":"  419","line":"  end"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"  # :nodoc:"},
{"lineNum":"  422","line":"  def second : Time::Span"},
{"lineNum":"  423","line":"    seconds"},
{"lineNum":"  424","line":"  end"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"  # Returns a `Time::Span` of `self` seconds."},
{"lineNum":"  427","line":"  def seconds : Time::Span"},
{"lineNum":"  428","line":"    Time::Span.new 0, 0, self"},
{"lineNum":"  429","line":"  end"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"  # :nodoc:"},
{"lineNum":"  432","line":"  def millisecond : Time::Span"},
{"lineNum":"  433","line":"    milliseconds"},
{"lineNum":"  434","line":"  end"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"  # Returns a `Time::Span` of `self` milliseconds."},
{"lineNum":"  437","line":"  def milliseconds : Time::Span"},
{"lineNum":"  438","line":"    Time::Span.new 0, 0, 0, 0, (self.to_i64 * Time::NANOSECONDS_PER_MILLISECOND)"},
{"lineNum":"  439","line":"  end"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"  # :nodoc:"},
{"lineNum":"  442","line":"  def nanosecond : Time::Span"},
{"lineNum":"  443","line":"    nanoseconds"},
{"lineNum":"  444","line":"  end"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"  # Returns a `Time::Span` of `self` nanoseconds."},
{"lineNum":"  447","line":"  def nanoseconds : Time::Span"},
{"lineNum":"  448","line":"    Time::Span.new(nanoseconds: self.to_i64)"},
{"lineNum":"  449","line":"  end"},
{"lineNum":"  450","line":"end"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"struct Float"},
{"lineNum":"  453","line":"  # Returns a `Time::Span` of `self` days."},
{"lineNum":"  454","line":"  def days : Time::Span"},
{"lineNum":"  455","line":"    (self * 24).hours"},
{"lineNum":"  456","line":"  end"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"  # Returns a `Time::Span` of `self` hours."},
{"lineNum":"  459","line":"  def hours : Time::Span"},
{"lineNum":"  460","line":"    (self * 60).minutes"},
{"lineNum":"  461","line":"  end"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"  # Returns a `Time::Span` of `self` minutes."},
{"lineNum":"  464","line":"  def minutes : Time::Span"},
{"lineNum":"  465","line":"    (self * 60).seconds"},
{"lineNum":"  466","line":"  end"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"  # Returns a `Time::Span` of `self` seconds."},
{"lineNum":"  469","line":"  def seconds : Time::Span"},
{"lineNum":"  470","line":"    seconds = self.to_i64"},
{"lineNum":"  471","line":"    nanoseconds = (self - seconds) * Time::NANOSECONDS_PER_SECOND"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    # round away from zero"},
{"lineNum":"  474","line":"    nanoseconds = (nanoseconds < 0 ? (nanoseconds - 0.5) : (nanoseconds + 0.5)).to_i64"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"    Time::Span.new("},
{"lineNum":"  477","line":"      seconds: seconds,"},
{"lineNum":"  478","line":"      nanoseconds: nanoseconds,"},
{"lineNum":"  479","line":"    )"},
{"lineNum":"  480","line":"  end"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"  # Returns a `Time::Span` of `self` milliseconds."},
{"lineNum":"  483","line":"  def milliseconds : Time::Span"},
{"lineNum":"  484","line":"    (self / 1_000).seconds"},
{"lineNum":"  485","line":"  end"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"  # Returns a `Time::Span` of `self` nanoseconds."},
{"lineNum":"  488","line":"  def nanoseconds : Time::Span"},
{"lineNum":"  489","line":"    seconds = (self / Time::NANOSECONDS_PER_SECOND).to_i64"},
{"lineNum":"  490","line":"    nanoseconds = self.remainder(Time::NANOSECONDS_PER_SECOND)"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    # round away from zero"},
{"lineNum":"  493","line":"    nanoseconds = (nanoseconds < 0 ? (nanoseconds - 0.5) : (nanoseconds + 0.5)).to_i64"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"    Time::Span.new("},
{"lineNum":"  496","line":"      seconds: seconds,"},
{"lineNum":"  497","line":"      nanoseconds: nanoseconds,"},
{"lineNum":"  498","line":"    )"},
{"lineNum":"  499","line":"  end"},
{"lineNum":"  500","line":"end"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"# Represents a number of months passed. Used for shifting `Time`s by a"},
{"lineNum":"  503","line":"# specified number of months."},
{"lineNum":"  504","line":"#"},
{"lineNum":"  505","line":"# ```"},
{"lineNum":"  506","line":"# Time.new(2016, 2, 1) + 13.months # => 2017-03-01 00:00:00"},
{"lineNum":"  507","line":"# Time.new(2016, 2, 29) + 2.years  # => 2018-02-28 00:00:00"},
{"lineNum":"  508","line":"# ```"},
{"lineNum":"  509","line":"struct Time::MonthSpan"},
{"lineNum":"  510","line":"  # The number of months."},
{"lineNum":"  511","line":"  getter value : Int64"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"  def initialize(value : Int)"},
{"lineNum":"  514","line":"    @value = value.to_i64"},
{"lineNum":"  515","line":"  end"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"  # Returns a `Time` that happens N months after now."},
{"lineNum":"  518","line":"  def from_now : Time"},
{"lineNum":"  519","line":"    Time.now + self"},
{"lineNum":"  520","line":"  end"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"  # Returns a `Time` that happens N months before now."},
{"lineNum":"  523","line":"  def ago : Time"},
{"lineNum":"  524","line":"    Time.now - self"},
{"lineNum":"  525","line":"  end"},
{"lineNum":"  526","line":"end"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"struct Int"},
{"lineNum":"  529","line":"  # :nodoc:"},
{"lineNum":"  530","line":"  def month : Time::MonthSpan"},
{"lineNum":"  531","line":"    months"},
{"lineNum":"  532","line":"  end"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"  # Returns a `Time::MonthSpan` of `self` months."},
{"lineNum":"  535","line":"  def months : Time::MonthSpan"},
{"lineNum":"  536","line":"    Time::MonthSpan.new(self)"},
{"lineNum":"  537","line":"  end"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"  # :nodoc:"},
{"lineNum":"  540","line":"  def year : Time::MonthSpan"},
{"lineNum":"  541","line":"    years"},
{"lineNum":"  542","line":"  end"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"  # Returns a `Time::MonthSpan` of `self` years."},
{"lineNum":"  545","line":"  def years : Time::MonthSpan"},
{"lineNum":"  546","line":"    Time::MonthSpan.new(self * 12)"},
{"lineNum":"  547","line":"  end"},
{"lineNum":"  548","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 9, "covered" : 0,};
var merged_data = [];
