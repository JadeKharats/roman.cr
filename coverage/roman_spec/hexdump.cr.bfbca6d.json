var data = {lines:[
{"lineNum":"    1","line":"# IO object that prints an hexadecimal dump of all transfered data."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Especially useful for debugging binary protocols on an IO, to understand"},
{"lineNum":"    4","line":"# better when and how data is sent or received."},
{"lineNum":"    5","line":"#"},
{"lineNum":"    6","line":"# By default `IO::Hexdump` won\'t print anything; you must specify which of"},
{"lineNum":"    7","line":"# `read`, `write` or both you want to print."},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Example:"},
{"lineNum":"   10","line":"# ```"},
{"lineNum":"   11","line":"# require \"io/hexdump\""},
{"lineNum":"   12","line":"# socket = IO::Memory.new(\"abc\")"},
{"lineNum":"   13","line":"# io = IO::Hexdump.new(socket, output: STDERR, read: true)"},
{"lineNum":"   14","line":"# ```"},
{"lineNum":"   15","line":"#"},
{"lineNum":"   16","line":"# When data is read from *io* it will print something akin to the following on"},
{"lineNum":"   17","line":"# STDERR:"},
{"lineNum":"   18","line":"# ```text"},
{"lineNum":"   19","line":"# 00000000  50 52 49 20 2a 20 48 54  54 50 2f 32 2e 30 0d 0a  PRI * HTTP/2.0.."},
{"lineNum":"   20","line":"# 00000010  0d 0a 53 4d 0d 0a 0d 0a                           ..SM...."},
{"lineNum":"   21","line":"# 00000000  00 00 00 04                                       ...."},
{"lineNum":"   22","line":"# 00000000  00                                                ."},
{"lineNum":"   23","line":"# 00000000  00 00 00 00                                       ...."},
{"lineNum":"   24","line":"# ```"},
{"lineNum":"   25","line":"class IO::Hexdump < IO"},
{"lineNum":"   26","line":"  def initialize(@io : IO, @output : IO = STDERR, @read = false, @write = false)"},
{"lineNum":"   27","line":"  end"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"  def read(buf : Bytes)"},
{"lineNum":"   30","line":"    @io.read(buf).tap do |read_bytes|"},
{"lineNum":"   31","line":"      @output.puts buf[0, read_bytes].hexdump if @read && read_bytes"},
{"lineNum":"   32","line":"    end"},
{"lineNum":"   33","line":"  end"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  def write(buf : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   36","line":"    @io.write(buf).tap do","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   37","line":"      @output.puts buf.hexdump if @write","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   38","line":"    end"},
{"lineNum":"   39","line":"  end"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"  def peek"},
{"lineNum":"   42","line":"    @io.peek"},
{"lineNum":"   43","line":"  end"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"  def closed?"},
{"lineNum":"   46","line":"    @io.closed?"},
{"lineNum":"   47","line":"  end"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"  def close","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   50","line":"    @io.close","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   51","line":"  end"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"  def flush","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"    @io.flush","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"  end"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"  def tty?"},
{"lineNum":"   58","line":"    @io.tty?"},
{"lineNum":"   59","line":"  end"},
{"lineNum":"   60","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
