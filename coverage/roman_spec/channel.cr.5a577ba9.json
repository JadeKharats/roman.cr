var data = {lines:[
{"lineNum":"    1","line":"require \"fiber\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"abstract class Channel(T)"},
{"lineNum":"    4","line":"  module SelectAction"},
{"lineNum":"    5","line":"    abstract def ready?"},
{"lineNum":"    6","line":"    abstract def execute"},
{"lineNum":"    7","line":"    abstract def wait"},
{"lineNum":"    8","line":"    abstract def unwait"},
{"lineNum":"    9","line":"  end"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  class ClosedError < Exception"},
{"lineNum":"   12","line":"    def initialize(msg = \"Channel is closed\")"},
{"lineNum":"   13","line":"      super(msg)"},
{"lineNum":"   14","line":"    end"},
{"lineNum":"   15","line":"  end"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"  def initialize"},
{"lineNum":"   18","line":"    @closed = false"},
{"lineNum":"   19","line":"    @senders = Deque(Fiber).new"},
{"lineNum":"   20","line":"    @receivers = Deque(Fiber).new"},
{"lineNum":"   21","line":"  end"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"  def self.new : Unbuffered(T)"},
{"lineNum":"   24","line":"    Unbuffered(T).new"},
{"lineNum":"   25","line":"  end"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"  def self.new(capacity) : Buffered(T)"},
{"lineNum":"   28","line":"    Buffered(T).new(capacity)"},
{"lineNum":"   29","line":"  end"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"  def close"},
{"lineNum":"   32","line":"    @closed = true"},
{"lineNum":"   33","line":"    Scheduler.enqueue @receivers"},
{"lineNum":"   34","line":"    @receivers.clear"},
{"lineNum":"   35","line":"    nil"},
{"lineNum":"   36","line":"  end"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"  def closed?"},
{"lineNum":"   39","line":"    @closed"},
{"lineNum":"   40","line":"  end"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"  def receive"},
{"lineNum":"   43","line":"    receive_impl { raise ClosedError.new }"},
{"lineNum":"   44","line":"  end"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"  def receive?"},
{"lineNum":"   47","line":"    receive_impl { return nil }"},
{"lineNum":"   48","line":"  end"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"  def inspect(io)"},
{"lineNum":"   51","line":"    to_s(io)"},
{"lineNum":"   52","line":"  end"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"  def pretty_print(pp)"},
{"lineNum":"   55","line":"    pp.text inspect"},
{"lineNum":"   56","line":"  end"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"  def wait_for_receive"},
{"lineNum":"   59","line":"    @receivers << Fiber.current"},
{"lineNum":"   60","line":"  end"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"  def unwait_for_receive"},
{"lineNum":"   63","line":"    @receivers.delete Fiber.current"},
{"lineNum":"   64","line":"  end"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"  def wait_for_send"},
{"lineNum":"   67","line":"    @senders << Fiber.current"},
{"lineNum":"   68","line":"  end"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"  def unwait_for_send"},
{"lineNum":"   71","line":"    @senders.delete Fiber.current"},
{"lineNum":"   72","line":"  end"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"  protected def raise_if_closed"},
{"lineNum":"   75","line":"    raise ClosedError.new if @closed","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"  end"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"  def self.receive_first(*channels)"},
{"lineNum":"   79","line":"    receive_first channels"},
{"lineNum":"   80","line":"  end"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"  def self.receive_first(channels : Tuple | Array)"},
{"lineNum":"   83","line":"    self.select(channels.map(&.receive_select_action))[1]"},
{"lineNum":"   84","line":"  end"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"  def self.send_first(value, *channels)"},
{"lineNum":"   87","line":"    send_first value, channels"},
{"lineNum":"   88","line":"  end"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"  def self.send_first(value, channels : Tuple | Array)"},
{"lineNum":"   91","line":"    self.select(channels.map(&.send_select_action(value)))"},
{"lineNum":"   92","line":"    nil"},
{"lineNum":"   93","line":"  end"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"  def self.select(*ops : SelectAction)"},
{"lineNum":"   96","line":"    self.select ops"},
{"lineNum":"   97","line":"  end"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  def self.select(ops : Tuple | Array, has_else = false)"},
{"lineNum":"  100","line":"    loop do"},
{"lineNum":"  101","line":"      ops.each_with_index do |op, index|"},
{"lineNum":"  102","line":"        if op.ready?"},
{"lineNum":"  103","line":"          result = op.execute"},
{"lineNum":"  104","line":"          return index, result"},
{"lineNum":"  105","line":"        end"},
{"lineNum":"  106","line":"      end"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"      if has_else"},
{"lineNum":"  109","line":"        return ops.size, nil"},
{"lineNum":"  110","line":"      end"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"      ops.each &.wait"},
{"lineNum":"  113","line":"      Scheduler.reschedule"},
{"lineNum":"  114","line":"      ops.each &.unwait"},
{"lineNum":"  115","line":"    end"},
{"lineNum":"  116","line":"  end"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"  def send_select_action(value : T)"},
{"lineNum":"  119","line":"    SendAction.new(self, value)"},
{"lineNum":"  120","line":"  end"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  def receive_select_action"},
{"lineNum":"  123","line":"    ReceiveAction.new(self)"},
{"lineNum":"  124","line":"  end"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"  struct ReceiveAction(C)"},
{"lineNum":"  127","line":"    include SelectAction"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    def initialize(@channel : C)"},
{"lineNum":"  130","line":"    end"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    def ready?"},
{"lineNum":"  133","line":"      !@channel.empty?"},
{"lineNum":"  134","line":"    end"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    def execute"},
{"lineNum":"  137","line":"      @channel.receive"},
{"lineNum":"  138","line":"    end"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    def wait"},
{"lineNum":"  141","line":"      @channel.wait_for_receive"},
{"lineNum":"  142","line":"    end"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    def unwait"},
{"lineNum":"  145","line":"      @channel.unwait_for_receive"},
{"lineNum":"  146","line":"    end"},
{"lineNum":"  147","line":"  end"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"  struct SendAction(C, T)"},
{"lineNum":"  150","line":"    include SelectAction"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    def initialize(@channel : C, @value : T)"},
{"lineNum":"  153","line":"    end"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"    def ready?"},
{"lineNum":"  156","line":"      !@channel.full?"},
{"lineNum":"  157","line":"    end"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    def execute"},
{"lineNum":"  160","line":"      @channel.send(@value)"},
{"lineNum":"  161","line":"    end"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    def wait"},
{"lineNum":"  164","line":"      @channel.wait_for_send"},
{"lineNum":"  165","line":"    end"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    def unwait"},
{"lineNum":"  168","line":"      @channel.unwait_for_send"},
{"lineNum":"  169","line":"    end"},
{"lineNum":"  170","line":"  end"},
{"lineNum":"  171","line":"end"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"class Channel::Buffered(T) < Channel(T)"},
{"lineNum":"  174","line":"  def initialize(@capacity = 32)"},
{"lineNum":"  175","line":"    @queue = Deque(T).new(@capacity)"},
{"lineNum":"  176","line":"    super()"},
{"lineNum":"  177","line":"  end"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"  def send(value : T)"},
{"lineNum":"  180","line":"    while full?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  181","line":"      raise_if_closed","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"      @senders << Fiber.current"},
{"lineNum":"  183","line":"      Scheduler.reschedule","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"    end"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    raise_if_closed"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"    @queue << value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"    Scheduler.enqueue @receivers","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"    @receivers.clear"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    self"},
{"lineNum":"  193","line":"  end"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"  private def receive_impl"},
{"lineNum":"  196","line":"    while empty?"},
{"lineNum":"  197","line":"      yield if @closed"},
{"lineNum":"  198","line":"      @receivers << Fiber.current"},
{"lineNum":"  199","line":"      Scheduler.reschedule"},
{"lineNum":"  200","line":"    end"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    @queue.shift.tap do"},
{"lineNum":"  203","line":"      Scheduler.enqueue @senders"},
{"lineNum":"  204","line":"      @senders.clear"},
{"lineNum":"  205","line":"    end"},
{"lineNum":"  206","line":"  end"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"  def full?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"    @queue.size >= @capacity"},
{"lineNum":"  210","line":"  end"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"  def empty?"},
{"lineNum":"  213","line":"    @queue.empty?"},
{"lineNum":"  214","line":"  end"},
{"lineNum":"  215","line":"end"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"class Channel::Unbuffered(T) < Channel(T)"},
{"lineNum":"  218","line":"  @sender : Fiber?"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"  def initialize"},
{"lineNum":"  221","line":"    @has_value = false"},
{"lineNum":"  222","line":"    @value = uninitialized T"},
{"lineNum":"  223","line":"    super"},
{"lineNum":"  224","line":"  end"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"  def send(value : T)"},
{"lineNum":"  227","line":"    while @has_value"},
{"lineNum":"  228","line":"      raise_if_closed"},
{"lineNum":"  229","line":"      @senders << Fiber.current"},
{"lineNum":"  230","line":"      Scheduler.reschedule"},
{"lineNum":"  231","line":"    end"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    raise_if_closed"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    @value = value"},
{"lineNum":"  236","line":"    @has_value = true"},
{"lineNum":"  237","line":"    @sender = Fiber.current"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    if receiver = @receivers.shift?"},
{"lineNum":"  240","line":"      receiver.resume"},
{"lineNum":"  241","line":"    else"},
{"lineNum":"  242","line":"      Scheduler.reschedule"},
{"lineNum":"  243","line":"    end"},
{"lineNum":"  244","line":"  end"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"  private def receive_impl"},
{"lineNum":"  247","line":"    until @has_value"},
{"lineNum":"  248","line":"      yield if @closed"},
{"lineNum":"  249","line":"      @receivers << Fiber.current"},
{"lineNum":"  250","line":"      if sender = @senders.shift?"},
{"lineNum":"  251","line":"        sender.resume"},
{"lineNum":"  252","line":"      else"},
{"lineNum":"  253","line":"        Scheduler.reschedule"},
{"lineNum":"  254","line":"      end"},
{"lineNum":"  255","line":"    end"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    yield if @closed"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    @value.tap do"},
{"lineNum":"  260","line":"      @has_value = false"},
{"lineNum":"  261","line":"      Scheduler.enqueue @sender.not_nil!"},
{"lineNum":"  262","line":"    end"},
{"lineNum":"  263","line":"  end"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"  def empty?"},
{"lineNum":"  266","line":"    !@has_value && @senders.empty?"},
{"lineNum":"  267","line":"  end"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"  def full?"},
{"lineNum":"  270","line":"    @has_value || @receivers.empty?"},
{"lineNum":"  271","line":"  end"},
{"lineNum":"  272","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
