var data = {lines:[
{"lineNum":"    1","line":"# `Object` is the base type of all Crystal objects."},
{"lineNum":"    2","line":"class Object"},
{"lineNum":"    3","line":"  # Returns `true` if this object is equal to *other*."},
{"lineNum":"    4","line":"  #"},
{"lineNum":"    5","line":"  # Subclasses override this method to provide class-specific meaning."},
{"lineNum":"    6","line":"  abstract def ==(other)"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"  # Returns `true` if this object is not equal to *other*."},
{"lineNum":"    9","line":"  #"},
{"lineNum":"   10","line":"  # By default this method is implemented as `!(self == other)`"},
{"lineNum":"   11","line":"  # so there\'s no need to override this unless there\'s a more efficient"},
{"lineNum":"   12","line":"  # way to do it."},
{"lineNum":"   13","line":"  def !=(other)"},
{"lineNum":"   14","line":"    !(self == other)"},
{"lineNum":"   15","line":"  end"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"  # Shortcut to `!(self =~ other)`."},
{"lineNum":"   18","line":"  def !~(other)"},
{"lineNum":"   19","line":"    !(self =~ other)"},
{"lineNum":"   20","line":"  end"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"  # Case equality."},
{"lineNum":"   23","line":"  #"},
{"lineNum":"   24","line":"  # The `===` method is used in a `case ... when ... end` expression."},
{"lineNum":"   25","line":"  #"},
{"lineNum":"   26","line":"  # For example, this code:"},
{"lineNum":"   27","line":"  #"},
{"lineNum":"   28","line":"  # ```","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   29","line":"  # case value"},
{"lineNum":"   30","line":"  # when x"},
{"lineNum":"   31","line":"  #   # something when x"},
{"lineNum":"   32","line":"  # when y"},
{"lineNum":"   33","line":"  #   # something when y"},
{"lineNum":"   34","line":"  # end"},
{"lineNum":"   35","line":"  # ```"},
{"lineNum":"   36","line":"  #"},
{"lineNum":"   37","line":"  # Is equivalent to this code:"},
{"lineNum":"   38","line":"  #"},
{"lineNum":"   39","line":"  # ```"},
{"lineNum":"   40","line":"  # if x === value"},
{"lineNum":"   41","line":"  #   # something when x"},
{"lineNum":"   42","line":"  # elsif y === value"},
{"lineNum":"   43","line":"  #   # something when y"},
{"lineNum":"   44","line":"  # end"},
{"lineNum":"   45","line":"  # ```"},
{"lineNum":"   46","line":"  #"},
{"lineNum":"   47","line":"  # Object simply implements `===` by invoking `==`, but subclasses"},
{"lineNum":"   48","line":"  # (notably `Regex`) can override it to provide meaningful case-equality semantics."},
{"lineNum":"   49","line":"  def ===(other)","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"   50","line":"    self == other"},
{"lineNum":"   51","line":"  end"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"  # Pattern match."},
{"lineNum":"   54","line":"  #"},
{"lineNum":"   55","line":"  # Overridden by descendants (notably `Regex` and `String`) to provide meaningful"},
{"lineNum":"   56","line":"  # pattern-match semantics."},
{"lineNum":"   57","line":"  def =~(other)"},
{"lineNum":"   58","line":"    nil"},
{"lineNum":"   59","line":"  end"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  # Appends this object\'s value to *hasher*, and returns the modified *hasher*."},
{"lineNum":"   62","line":"  #"},
{"lineNum":"   63","line":"  # Usually the macro `def_hash` can be used to generate this method."},
{"lineNum":"   64","line":"  # Otherwise, invoke `hash(hasher)` on each object\'s instance variables to"},
{"lineNum":"   65","line":"  # accumulate the result:"},
{"lineNum":"   66","line":"  #"},
{"lineNum":"   67","line":"  # ```"},
{"lineNum":"   68","line":"  # def hash(hasher)"},
{"lineNum":"   69","line":"  #   hasher = @some_ivar.hash(hasher)"},
{"lineNum":"   70","line":"  #   hasher = @some_other_ivar.hash(hasher)"},
{"lineNum":"   71","line":"  #   hasher"},
{"lineNum":"   72","line":"  # end"},
{"lineNum":"   73","line":"  # ```"},
{"lineNum":"   74","line":"  abstract def hash(hasher)"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"  # Generates an `UInt64` hash value for this object."},
{"lineNum":"   77","line":"  #"},
{"lineNum":"   78","line":"  # This method must have the property that `a == b` implies `a.hash == b.hash`."},
{"lineNum":"   79","line":"  #"},
{"lineNum":"   80","line":"  # The hash value is used along with `==` by the `Hash` class to determine if two objects"},
{"lineNum":"   81","line":"  # reference the same hash key."},
{"lineNum":"   82","line":"  #"},
{"lineNum":"   83","line":"  # Subclasses must not override this method. Instead, they must define `hash(hasher)`,"},
{"lineNum":"   84","line":"  # though usually the macro `def_hash` can be used to generate this method."},
{"lineNum":"   85","line":"  def hash","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"    hash(Crystal::Hasher.new).result","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"  end"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"  # Returns a string representation of this object."},
{"lineNum":"   90","line":"  #"},
{"lineNum":"   91","line":"  # Descendants must usually **not** override this method. Instead,"},
{"lineNum":"   92","line":"  # they must override `to_s(io)`, which must append to the given"},
{"lineNum":"   93","line":"  # IO object."},
{"lineNum":"   94","line":"  def to_s"},
{"lineNum":"   95","line":"    String.build do |io|"},
{"lineNum":"   96","line":"      to_s io"},
{"lineNum":"   97","line":"    end"},
{"lineNum":"   98","line":"  end"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"  # Appends a `String` representation of this object"},
{"lineNum":"  101","line":"  # to the given `IO` object."},
{"lineNum":"  102","line":"  #"},
{"lineNum":"  103","line":"  # An object must never append itself to the io argument,"},
{"lineNum":"  104","line":"  # as this will in turn call `to_s(io)` on it."},
{"lineNum":"  105","line":"  abstract def to_s(io : IO)"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"  # Returns a `String` representation of this object."},
{"lineNum":"  108","line":"  #"},
{"lineNum":"  109","line":"  # Similar to `to_s`, but usually returns more information about"},
{"lineNum":"  110","line":"  # this object."},
{"lineNum":"  111","line":"  #"},
{"lineNum":"  112","line":"  # Classes must usually **not** override this method. Instead,"},
{"lineNum":"  113","line":"  # they must override `inspect(io)`, which must append to the"},
{"lineNum":"  114","line":"  # given `IO` object."},
{"lineNum":"  115","line":"  def inspect","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"    String.build do |io|"},
{"lineNum":"  117","line":"      inspect io","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  118","line":"    end"},
{"lineNum":"  119","line":"  end"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"  # Appends a string representation of this object"},
{"lineNum":"  122","line":"  # to the given `IO` object."},
{"lineNum":"  123","line":"  #"},
{"lineNum":"  124","line":"  # Similar to `to_s(io)`, but usually appends more information"},
{"lineNum":"  125","line":"  # about this object."},
{"lineNum":"  126","line":"  def inspect(io : IO)"},
{"lineNum":"  127","line":"    to_s io"},
{"lineNum":"  128","line":"  end"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"  # Pretty prints `self` into the given printer."},
{"lineNum":"  131","line":"  #"},
{"lineNum":"  132","line":"  # By default appends a text that is the result of invoking"},
{"lineNum":"  133","line":"  # `#inspect` on `self`. Subclasses should override"},
{"lineNum":"  134","line":"  # for custom pretty printing."},
{"lineNum":"  135","line":"  def pretty_print(pp : PrettyPrint) : Nil"},
{"lineNum":"  136","line":"    pp.text(inspect)"},
{"lineNum":"  137","line":"  end"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"  # Returns a pretty printed version of `self`."},
{"lineNum":"  140","line":"  def pretty_inspect(width = 79, newline = \"\\n\", indent = 0) : String"},
{"lineNum":"  141","line":"    String.build do |io|"},
{"lineNum":"  142","line":"      PrettyPrint.format(self, io, width, newline, indent)"},
{"lineNum":"  143","line":"    end"},
{"lineNum":"  144","line":"  end"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"  # Yields `self` to the block, and then returns `self`."},
{"lineNum":"  147","line":"  #"},
{"lineNum":"  148","line":"  # The primary purpose of this method is to \"tap into\" a method chain,"},
{"lineNum":"  149","line":"  # in order to perform operations on intermediate results within the chain."},
{"lineNum":"  150","line":"  #"},
{"lineNum":"  151","line":"  # ```"},
{"lineNum":"  152","line":"  # (1..10).tap { |x| puts \"original: #{x.inspect}\" }"},
{"lineNum":"  153","line":"  #        .to_a.tap { |x| puts \"array: #{x.inspect}\" }"},
{"lineNum":"  154","line":"  #             .select { |x| x % 2 == 0 }.tap { |x| puts \"evens: #{x.inspect}\" }"},
{"lineNum":"  155","line":"  #                                       .map { |x| x*x }.tap { |x| puts \"squares: #{x.inspect}\" }"},
{"lineNum":"  156","line":"  # ```"},
{"lineNum":"  157","line":"  def tap"},
{"lineNum":"  158","line":"    yield self"},
{"lineNum":"  159","line":"    self"},
{"lineNum":"  160","line":"  end"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"  # Yields `self`. `Nil` overrides this method and doesn\'t yield."},
{"lineNum":"  163","line":"  #"},
{"lineNum":"  164","line":"  # This method is useful for dealing with nilable types, to safely"},
{"lineNum":"  165","line":"  # perform operations only when the value is not `nil`."},
{"lineNum":"  166","line":"  #"},
{"lineNum":"  167","line":"  # ```"},
{"lineNum":"  168","line":"  # # First program argument in downcase, or nil"},
{"lineNum":"  169","line":"  # ARGV[0]?.try &.downcase"},
{"lineNum":"  170","line":"  # ```"},
{"lineNum":"  171","line":"  def try"},
{"lineNum":"  172","line":"    yield self"},
{"lineNum":"  173","line":"  end"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"  # Returns `self`. `Nil` overrides this method and raises an exception."},
{"lineNum":"  176","line":"  def not_nil!"},
{"lineNum":"  177","line":"    self"},
{"lineNum":"  178","line":"  end"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"  # Return `self`."},
{"lineNum":"  181","line":"  #"},
{"lineNum":"  182","line":"  # ```"},
{"lineNum":"  183","line":"  # str = \"hello\""},
{"lineNum":"  184","line":"  # str.itself.object_id == str.object_id # => true"},
{"lineNum":"  185","line":"  # ```"},
{"lineNum":"  186","line":"  def itself"},
{"lineNum":"  187","line":"    self"},
{"lineNum":"  188","line":"  end"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"  # Returns a shallow copy of this object."},
{"lineNum":"  191","line":"  #"},
{"lineNum":"  192","line":"  # As a convention, `clone` is the method used to create a deep copy of"},
{"lineNum":"  193","line":"  # an object, but this logic isn\'t defined generically for every type"},
{"lineNum":"  194","line":"  # because cycles could be involved, and the clone logic might not need"},
{"lineNum":"  195","line":"  # to clone everything."},
{"lineNum":"  196","line":"  #"},
{"lineNum":"  197","line":"  # Many types in the standard library, like `Array`, `Hash`, `Set` and"},
{"lineNum":"  198","line":"  # `Deque`, and all primitive types, define `dup` and `clone`."},
{"lineNum":"  199","line":"  abstract def dup"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"  # Unsafely reinterprets the bytes of an object as being of another `type`."},
{"lineNum":"  202","line":"  #"},
{"lineNum":"  203","line":"  # This method is useful to treat a type that is represented as a chunk of"},
{"lineNum":"  204","line":"  # bytes as another type where those bytes convey useful information. As an"},
{"lineNum":"  205","line":"  # example, you can check the individual bytes of an `Int32`:"},
{"lineNum":"  206","line":"  #"},
{"lineNum":"  207","line":"  # ```"},
{"lineNum":"  208","line":"  # 0x01020304.unsafe_as(StaticArray(UInt8, 4)) # => StaticArray[4, 3, 2, 1]"},
{"lineNum":"  209","line":"  # ```"},
{"lineNum":"  210","line":"  #"},
{"lineNum":"  211","line":"  # Or treat the bytes of a `Float64` as an `Int64`:"},
{"lineNum":"  212","line":"  #"},
{"lineNum":"  213","line":"  # ```"},
{"lineNum":"  214","line":"  # 1.234_f64.unsafe_as(Int64) # => 4608236261112822104"},
{"lineNum":"  215","line":"  # ```"},
{"lineNum":"  216","line":"  #"},
{"lineNum":"  217","line":"  # This method is **unsafe** because it behaves unpredictably when the given"},
{"lineNum":"  218","line":"  # `type` doesn\'t have the same bytesize as the receiver, or when the given"},
{"lineNum":"  219","line":"  # `type` representation doesn\'t semantically match the underlying bytes."},
{"lineNum":"  220","line":"  #"},
{"lineNum":"  221","line":"  # Also note that because `unsafe_as` is a regular method, unlike the pseudo-method"},
{"lineNum":"  222","line":"  # `as`, you can\'t specify some types in the type grammar using a short notation, so"},
{"lineNum":"  223","line":"  # specifying a static array must always be done as `StaticArray(T, N)`, a tuple"},
{"lineNum":"  224","line":"  # as `Tuple(...)` and so on, never as `UInt8[4]` or `{Int32, Int32}`."},
{"lineNum":"  225","line":"  def unsafe_as(type : T.class) forall T"},
{"lineNum":"  226","line":"    x = self","class":"lineNoCov","hits":"0","possible_hits":"24",},
{"lineNum":"  227","line":"    pointerof(x).as(T*).value"},
{"lineNum":"  228","line":"  end"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"  {% for prefixes in { {\"\", \"\", \"@\"}, {\"class_\", \"self.\", \"@@\"} } %}"},
{"lineNum":"  231","line":"    {%"},
{"lineNum":"  232","line":"      macro_prefix = prefixes[0].id"},
{"lineNum":"  233","line":"      method_prefix = prefixes[1].id"},
{"lineNum":"  234","line":"      var_prefix = prefixes[2].id"},
{"lineNum":"  235","line":"    %}"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    # Defines getter methods for each of the given arguments."},
{"lineNum":"  238","line":"    #"},
{"lineNum":"  239","line":"    # Writing:"},
{"lineNum":"  240","line":"    #"},
{"lineNum":"  241","line":"    # ```"},
{"lineNum":"  242","line":"    # class Person"},
{"lineNum":"  243","line":"    #   {{macro_prefix}}getter name"},
{"lineNum":"  244","line":"    # end"},
{"lineNum":"  245","line":"    # ```"},
{"lineNum":"  246","line":"    #"},
{"lineNum":"  247","line":"    # Is the same as writing:"},
{"lineNum":"  248","line":"    #"},
{"lineNum":"  249","line":"    # ```"},
{"lineNum":"  250","line":"    # class Person"},
{"lineNum":"  251","line":"    #   def {{method_prefix}}name"},
{"lineNum":"  252","line":"    #     {{var_prefix}}name"},
{"lineNum":"  253","line":"    #   end"},
{"lineNum":"  254","line":"    # end"},
{"lineNum":"  255","line":"    # ```"},
{"lineNum":"  256","line":"    #"},
{"lineNum":"  257","line":"    # The arguments can be string literals, symbol literals or plain names:"},
{"lineNum":"  258","line":"    #"},
{"lineNum":"  259","line":"    # ```"},
{"lineNum":"  260","line":"    # class Person"},
{"lineNum":"  261","line":"    #   {{macro_prefix}}getter :name, \"age\""},
{"lineNum":"  262","line":"    # end"},
{"lineNum":"  263","line":"    # ```"},
{"lineNum":"  264","line":"    #"},
{"lineNum":"  265","line":"    # If a type declaration is given, a variable with that name"},
{"lineNum":"  266","line":"    # is declared with that type."},
{"lineNum":"  267","line":"    #"},
{"lineNum":"  268","line":"    # ```"},
{"lineNum":"  269","line":"    # class Person"},
{"lineNum":"  270","line":"    #   {{macro_prefix}}getter name : String"},
{"lineNum":"  271","line":"    # end"},
{"lineNum":"  272","line":"    # ```"},
{"lineNum":"  273","line":"    #"},
{"lineNum":"  274","line":"    # Is the same as writing:"},
{"lineNum":"  275","line":"    #"},
{"lineNum":"  276","line":"    # ```"},
{"lineNum":"  277","line":"    # class Person"},
{"lineNum":"  278","line":"    #   {{var_prefix}}name : String"},
{"lineNum":"  279","line":"    #"},
{"lineNum":"  280","line":"    #   def {{method_prefix}}name : String"},
{"lineNum":"  281","line":"    #     {{var_prefix}}name"},
{"lineNum":"  282","line":"    #   end"},
{"lineNum":"  283","line":"    # end"},
{"lineNum":"  284","line":"    # ```"},
{"lineNum":"  285","line":"    #"},
{"lineNum":"  286","line":"    # The type declaration can also include an initial value:"},
{"lineNum":"  287","line":"    #"},
{"lineNum":"  288","line":"    # ```"},
{"lineNum":"  289","line":"    # class Person"},
{"lineNum":"  290","line":"    #   {{macro_prefix}}getter name : String = \"John Doe\""},
{"lineNum":"  291","line":"    # end"},
{"lineNum":"  292","line":"    # ```"},
{"lineNum":"  293","line":"    #"},
{"lineNum":"  294","line":"    # Is the same as writing:"},
{"lineNum":"  295","line":"    #"},
{"lineNum":"  296","line":"    # ```"},
{"lineNum":"  297","line":"    # class Person"},
{"lineNum":"  298","line":"    #   {{var_prefix}}name : String = \"John Doe\""},
{"lineNum":"  299","line":"    #"},
{"lineNum":"  300","line":"    #   def {{method_prefix}}name : String"},
{"lineNum":"  301","line":"    #     {{var_prefix}}name"},
{"lineNum":"  302","line":"    #   end"},
{"lineNum":"  303","line":"    # end"},
{"lineNum":"  304","line":"    # ```"},
{"lineNum":"  305","line":"    #"},
{"lineNum":"  306","line":"    # An assignment can be passed too, but in this case the type of the"},
{"lineNum":"  307","line":"    # variable must be easily inferrable from the initial value:"},
{"lineNum":"  308","line":"    #"},
{"lineNum":"  309","line":"    # ```"},
{"lineNum":"  310","line":"    # class Person"},
{"lineNum":"  311","line":"    #   {{macro_prefix}}getter name = \"John Doe\""},
{"lineNum":"  312","line":"    # end"},
{"lineNum":"  313","line":"    # ```"},
{"lineNum":"  314","line":"    #"},
{"lineNum":"  315","line":"    # Is the same as writing:"},
{"lineNum":"  316","line":"    #"},
{"lineNum":"  317","line":"    # ```"},
{"lineNum":"  318","line":"    # class Person"},
{"lineNum":"  319","line":"    #   {{var_prefix}}name = \"John Doe\""},
{"lineNum":"  320","line":"    #"},
{"lineNum":"  321","line":"    #   def {{method_prefix}}name : String"},
{"lineNum":"  322","line":"    #     {{var_prefix}}name"},
{"lineNum":"  323","line":"    #   end"},
{"lineNum":"  324","line":"    # end"},
{"lineNum":"  325","line":"    # ```"},
{"lineNum":"  326","line":"    #"},
{"lineNum":"  327","line":"    # If a block is given to the macro, a getter is generated"},
{"lineNum":"  328","line":"    # with a variable that is lazily initialized with"},
{"lineNum":"  329","line":"    # the block\'s contents:"},
{"lineNum":"  330","line":"    #"},
{"lineNum":"  331","line":"    # ```"},
{"lineNum":"  332","line":"    # class Person"},
{"lineNum":"  333","line":"    #   {{macro_prefix}}getter(birth_date) { Time.now }"},
{"lineNum":"  334","line":"    # end"},
{"lineNum":"  335","line":"    # ```"},
{"lineNum":"  336","line":"    #"},
{"lineNum":"  337","line":"    # Is the same as writing:"},
{"lineNum":"  338","line":"    #"},
{"lineNum":"  339","line":"    # ```"},
{"lineNum":"  340","line":"    # class Person"},
{"lineNum":"  341","line":"    #   def {{method_prefix}}birth_date"},
{"lineNum":"  342","line":"    #     {{var_prefix}}birth_date ||= Time.now"},
{"lineNum":"  343","line":"    #   end"},
{"lineNum":"  344","line":"    # end"},
{"lineNum":"  345","line":"    # ```"},
{"lineNum":"  346","line":"    macro {{macro_prefix}}getter(*names, &block)"},
{"lineNum":"  347","line":"      \\{% if block %}"},
{"lineNum":"  348","line":"        \\{% if names.size != 1 %}"},
{"lineNum":"  349","line":"          \\{{ raise \"Only one argument can be passed to `getter` with a block\" }}"},
{"lineNum":"  350","line":"        \\{% end %}"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"        \\{% name = names[0] %}"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"        \\{% if name.is_a?(TypeDeclaration) %}"},
{"lineNum":"  355","line":"          {{var_prefix}}\\{{name.var.id}} : \\{{name.type}}?"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"          def {{method_prefix}}\\{{name.var.id}}"},
{"lineNum":"  358","line":"            {{var_prefix}}\\{{name.var.id}} ||= \\{{yield}}"},
{"lineNum":"  359","line":"          end"},
{"lineNum":"  360","line":"        \\{% else %}"},
{"lineNum":"  361","line":"          def {{method_prefix}}\\{{name.id}}"},
{"lineNum":"  362","line":"            {{var_prefix}}\\{{name.id}} ||= \\{{yield}}"},
{"lineNum":"  363","line":"          end"},
{"lineNum":"  364","line":"        \\{% end %}"},
{"lineNum":"  365","line":"      \\{% else %}"},
{"lineNum":"  366","line":"        \\{% for name in names %}"},
{"lineNum":"  367","line":"          \\{% if name.is_a?(TypeDeclaration) %}"},
{"lineNum":"  368","line":"            {{var_prefix}}\\{{name}}"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"            def {{method_prefix}}\\{{name.var.id}} : \\{{name.type}}"},
{"lineNum":"  371","line":"              {{var_prefix}}\\{{name.var.id}}"},
{"lineNum":"  372","line":"            end"},
{"lineNum":"  373","line":"          \\{% elsif name.is_a?(Assign) %}"},
{"lineNum":"  374","line":"            {{var_prefix}}\\{{name}}"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"            def {{method_prefix}}\\{{name.target.id}}"},
{"lineNum":"  377","line":"              {{var_prefix}}\\{{name.target.id}}"},
{"lineNum":"  378","line":"            end"},
{"lineNum":"  379","line":"          \\{% else %}"},
{"lineNum":"  380","line":"            def {{method_prefix}}\\{{name.id}}"},
{"lineNum":"  381","line":"              {{var_prefix}}\\{{name.id}}"},
{"lineNum":"  382","line":"            end"},
{"lineNum":"  383","line":"          \\{% end %}"},
{"lineNum":"  384","line":"        \\{% end %}"},
{"lineNum":"  385","line":"      \\{% end %}"},
{"lineNum":"  386","line":"    end"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"    # Defines raise-on-nil and nilable getter methods for each of the given arguments."},
{"lineNum":"  389","line":"    #"},
{"lineNum":"  390","line":"    # Writing:"},
{"lineNum":"  391","line":"    #"},
{"lineNum":"  392","line":"    # ```"},
{"lineNum":"  393","line":"    # class Person"},
{"lineNum":"  394","line":"    #   {{macro_prefix}}getter! name"},
{"lineNum":"  395","line":"    # end"},
{"lineNum":"  396","line":"    # ```"},
{"lineNum":"  397","line":"    #"},
{"lineNum":"  398","line":"    # Is the same as writing:"},
{"lineNum":"  399","line":"    #"},
{"lineNum":"  400","line":"    # ```"},
{"lineNum":"  401","line":"    # class Person"},
{"lineNum":"  402","line":"    #   def {{method_prefix}}name?"},
{"lineNum":"  403","line":"    #     {{var_prefix}}name"},
{"lineNum":"  404","line":"    #   end"},
{"lineNum":"  405","line":"    #"},
{"lineNum":"  406","line":"    #   def {{method_prefix}}name"},
{"lineNum":"  407","line":"    #     {{var_prefix}}name.not_nil!"},
{"lineNum":"  408","line":"    #   end"},
{"lineNum":"  409","line":"    # end"},
{"lineNum":"  410","line":"    # ```"},
{"lineNum":"  411","line":"    #"},
{"lineNum":"  412","line":"    # The arguments can be string literals, symbol literals or plain names:"},
{"lineNum":"  413","line":"    #"},
{"lineNum":"  414","line":"    # ```"},
{"lineNum":"  415","line":"    # class Person"},
{"lineNum":"  416","line":"    #   {{macro_prefix}}getter! :name, \"age\""},
{"lineNum":"  417","line":"    # end"},
{"lineNum":"  418","line":"    # ```"},
{"lineNum":"  419","line":"    #"},
{"lineNum":"  420","line":"    # If a type declaration is given, a variable with that name"},
{"lineNum":"  421","line":"    # is declared with that type, as nilable."},
{"lineNum":"  422","line":"    #"},
{"lineNum":"  423","line":"    # ```"},
{"lineNum":"  424","line":"    # class Person"},
{"lineNum":"  425","line":"    #   {{macro_prefix}}getter! name : String"},
{"lineNum":"  426","line":"    # end"},
{"lineNum":"  427","line":"    # ```"},
{"lineNum":"  428","line":"    #"},
{"lineNum":"  429","line":"    # is the same as writing:"},
{"lineNum":"  430","line":"    #"},
{"lineNum":"  431","line":"    # ```"},
{"lineNum":"  432","line":"    # class Person"},
{"lineNum":"  433","line":"    #   {{var_prefix}}name : String?"},
{"lineNum":"  434","line":"    #"},
{"lineNum":"  435","line":"    #   def {{method_prefix}}name?"},
{"lineNum":"  436","line":"    #     {{var_prefix}}name"},
{"lineNum":"  437","line":"    #   end"},
{"lineNum":"  438","line":"    #"},
{"lineNum":"  439","line":"    #   def {{method_prefix}}name"},
{"lineNum":"  440","line":"    #     {{var_prefix}}name.not_nil!"},
{"lineNum":"  441","line":"    #   end"},
{"lineNum":"  442","line":"    # end"},
{"lineNum":"  443","line":"    # ```"},
{"lineNum":"  444","line":"    macro {{macro_prefix}}getter!(*names)"},
{"lineNum":"  445","line":"      \\{% for name in names %}"},
{"lineNum":"  446","line":"        \\{% if name.is_a?(TypeDeclaration) %}"},
{"lineNum":"  447","line":"          {{var_prefix}}\\{{name}}?"},
{"lineNum":"  448","line":"          \\{% name = name.var %}"},
{"lineNum":"  449","line":"        \\{% end %}"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"        def {{method_prefix}}\\{{name.id}}?"},
{"lineNum":"  452","line":"          {{var_prefix}}\\{{name.id}}"},
{"lineNum":"  453","line":"        end"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"        def {{method_prefix}}\\{{name.id}}"},
{"lineNum":"  456","line":"          {{var_prefix}}\\{{name.id}}.not_nil!"},
{"lineNum":"  457","line":"        end"},
{"lineNum":"  458","line":"      \\{% end %}"},
{"lineNum":"  459","line":"    end"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"    # Defines query getter methods for each of the given arguments."},
{"lineNum":"  462","line":"    #"},
{"lineNum":"  463","line":"    # Writing:"},
{"lineNum":"  464","line":"    #"},
{"lineNum":"  465","line":"    # ```"},
{"lineNum":"  466","line":"    # class Person"},
{"lineNum":"  467","line":"    #   {{macro_prefix}}getter? happy"},
{"lineNum":"  468","line":"    # end"},
{"lineNum":"  469","line":"    # ```"},
{"lineNum":"  470","line":"    #"},
{"lineNum":"  471","line":"    # Is the same as writing:"},
{"lineNum":"  472","line":"    #"},
{"lineNum":"  473","line":"    # ```"},
{"lineNum":"  474","line":"    # class Person"},
{"lineNum":"  475","line":"    #   def {{method_prefix}}happy?"},
{"lineNum":"  476","line":"    #     {{var_prefix}}happy"},
{"lineNum":"  477","line":"    #   end"},
{"lineNum":"  478","line":"    # end"},
{"lineNum":"  479","line":"    # ```"},
{"lineNum":"  480","line":"    #"},
{"lineNum":"  481","line":"    # The arguments can be string literals, symbol literals or plain names:"},
{"lineNum":"  482","line":"    #"},
{"lineNum":"  483","line":"    # ```"},
{"lineNum":"  484","line":"    # class Person"},
{"lineNum":"  485","line":"    #   {{macro_prefix}}getter? :happy, \"famous\""},
{"lineNum":"  486","line":"    # end"},
{"lineNum":"  487","line":"    # ```"},
{"lineNum":"  488","line":"    #"},
{"lineNum":"  489","line":"    # If a type declaration is given, a variable with that name"},
{"lineNum":"  490","line":"    # is declared with that type."},
{"lineNum":"  491","line":"    #"},
{"lineNum":"  492","line":"    # ```"},
{"lineNum":"  493","line":"    # class Person"},
{"lineNum":"  494","line":"    #   {{macro_prefix}}getter? happy : Bool"},
{"lineNum":"  495","line":"    # end"},
{"lineNum":"  496","line":"    # ```"},
{"lineNum":"  497","line":"    #"},
{"lineNum":"  498","line":"    # is the same as writing:"},
{"lineNum":"  499","line":"    #"},
{"lineNum":"  500","line":"    # ```"},
{"lineNum":"  501","line":"    # class Person"},
{"lineNum":"  502","line":"    #   {{var_prefix}}happy : Bool"},
{"lineNum":"  503","line":"    #"},
{"lineNum":"  504","line":"    #   def {{method_prefix}}happy? : Bool"},
{"lineNum":"  505","line":"    #     {{var_prefix}}happy"},
{"lineNum":"  506","line":"    #   end"},
{"lineNum":"  507","line":"    # end"},
{"lineNum":"  508","line":"    # ```"},
{"lineNum":"  509","line":"    #"},
{"lineNum":"  510","line":"    # The type declaration can also include an initial value:"},
{"lineNum":"  511","line":"    #"},
{"lineNum":"  512","line":"    # ```"},
{"lineNum":"  513","line":"    # class Person"},
{"lineNum":"  514","line":"    #   {{macro_prefix}}getter? happy : Bool = true"},
{"lineNum":"  515","line":"    # end"},
{"lineNum":"  516","line":"    # ```"},
{"lineNum":"  517","line":"    #"},
{"lineNum":"  518","line":"    # Is the same as writing:"},
{"lineNum":"  519","line":"    #"},
{"lineNum":"  520","line":"    # ```"},
{"lineNum":"  521","line":"    # class Person"},
{"lineNum":"  522","line":"    #   {{var_prefix}}happy : Bool = true"},
{"lineNum":"  523","line":"    #"},
{"lineNum":"  524","line":"    #   def {{method_prefix}}happy? : Bool"},
{"lineNum":"  525","line":"    #     {{var_prefix}}happy"},
{"lineNum":"  526","line":"    #   end"},
{"lineNum":"  527","line":"    # end"},
{"lineNum":"  528","line":"    # ```"},
{"lineNum":"  529","line":"    #"},
{"lineNum":"  530","line":"    # An assignment can be passed too, but in this case the type of the"},
{"lineNum":"  531","line":"    # variable must be easily inferrable from the initial value:"},
{"lineNum":"  532","line":"    #"},
{"lineNum":"  533","line":"    # ```"},
{"lineNum":"  534","line":"    # class Person"},
{"lineNum":"  535","line":"    #   {{macro_prefix}}getter? happy = true"},
{"lineNum":"  536","line":"    # end"},
{"lineNum":"  537","line":"    # ```"},
{"lineNum":"  538","line":"    #"},
{"lineNum":"  539","line":"    # Is the same as writing:"},
{"lineNum":"  540","line":"    #"},
{"lineNum":"  541","line":"    # ```"},
{"lineNum":"  542","line":"    # class Person"},
{"lineNum":"  543","line":"    #   {{var_prefix}}happy = true"},
{"lineNum":"  544","line":"    #"},
{"lineNum":"  545","line":"    #   def {{method_prefix}}happy?"},
{"lineNum":"  546","line":"    #     {{var_prefix}}happy"},
{"lineNum":"  547","line":"    #   end"},
{"lineNum":"  548","line":"    # end"},
{"lineNum":"  549","line":"    # ```"},
{"lineNum":"  550","line":"    macro {{macro_prefix}}getter?(*names)"},
{"lineNum":"  551","line":"      \\{% for name in names %}"},
{"lineNum":"  552","line":"        \\{% if name.is_a?(TypeDeclaration) %}"},
{"lineNum":"  553","line":"          {{var_prefix}}\\{{name}}"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"          def {{method_prefix}}\\{{name.var.id}}? : \\{{name.type}}"},
{"lineNum":"  556","line":"            {{var_prefix}}\\{{name.var.id}}"},
{"lineNum":"  557","line":"          end"},
{"lineNum":"  558","line":"        \\{% elsif name.is_a?(Assign) %}"},
{"lineNum":"  559","line":"          {{var_prefix}}\\{{name}}"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"          def {{method_prefix}}\\{{name.target.id}}?"},
{"lineNum":"  562","line":"            {{var_prefix}}\\{{name.target.id}}"},
{"lineNum":"  563","line":"          end"},
{"lineNum":"  564","line":"        \\{% else %}"},
{"lineNum":"  565","line":"          def {{method_prefix}}\\{{name.id}}?"},
{"lineNum":"  566","line":"            {{var_prefix}}\\{{name.id}}"},
{"lineNum":"  567","line":"          end"},
{"lineNum":"  568","line":"        \\{% end %}"},
{"lineNum":"  569","line":"      \\{% end %}"},
{"lineNum":"  570","line":"    end"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"    # Defines setter methods for each of the given arguments."},
{"lineNum":"  573","line":"    #"},
{"lineNum":"  574","line":"    # Writing:"},
{"lineNum":"  575","line":"    #"},
{"lineNum":"  576","line":"    # ```"},
{"lineNum":"  577","line":"    # class Person"},
{"lineNum":"  578","line":"    #   {{macro_prefix}}setter name"},
{"lineNum":"  579","line":"    # end"},
{"lineNum":"  580","line":"    # ```"},
{"lineNum":"  581","line":"    #"},
{"lineNum":"  582","line":"    # Is the same as writing:"},
{"lineNum":"  583","line":"    #"},
{"lineNum":"  584","line":"    # ```"},
{"lineNum":"  585","line":"    # class Person"},
{"lineNum":"  586","line":"    #   def {{method_prefix}}name=({{var_prefix}}name)"},
{"lineNum":"  587","line":"    #   end"},
{"lineNum":"  588","line":"    # end"},
{"lineNum":"  589","line":"    # ```"},
{"lineNum":"  590","line":"    #"},
{"lineNum":"  591","line":"    # The arguments can be string literals, symbol literals or plain names:"},
{"lineNum":"  592","line":"    #"},
{"lineNum":"  593","line":"    # ```"},
{"lineNum":"  594","line":"    # class Person"},
{"lineNum":"  595","line":"    #   {{macro_prefix}}setter :name, \"age\""},
{"lineNum":"  596","line":"    # end"},
{"lineNum":"  597","line":"    # ```"},
{"lineNum":"  598","line":"    #"},
{"lineNum":"  599","line":"    # If a type declaration is given, a variable with that name"},
{"lineNum":"  600","line":"    # is declared with that type."},
{"lineNum":"  601","line":"    #"},
{"lineNum":"  602","line":"    # ```"},
{"lineNum":"  603","line":"    # class Person"},
{"lineNum":"  604","line":"    #   {{macro_prefix}}setter name : String"},
{"lineNum":"  605","line":"    # end"},
{"lineNum":"  606","line":"    # ```"},
{"lineNum":"  607","line":"    #"},
{"lineNum":"  608","line":"    # is the same as writing:"},
{"lineNum":"  609","line":"    #"},
{"lineNum":"  610","line":"    # ```"},
{"lineNum":"  611","line":"    # class Person"},
{"lineNum":"  612","line":"    #   {{var_prefix}}name : String"},
{"lineNum":"  613","line":"    #"},
{"lineNum":"  614","line":"    #   def {{method_prefix}}name=({{var_prefix}}name : String)"},
{"lineNum":"  615","line":"    #   end"},
{"lineNum":"  616","line":"    # end"},
{"lineNum":"  617","line":"    # ```"},
{"lineNum":"  618","line":"    #"},
{"lineNum":"  619","line":"    # The type declaration can also include an initial value:"},
{"lineNum":"  620","line":"    #"},
{"lineNum":"  621","line":"    # ```"},
{"lineNum":"  622","line":"    # class Person"},
{"lineNum":"  623","line":"    #   {{macro_prefix}}setter name : String = \"John Doe\""},
{"lineNum":"  624","line":"    # end"},
{"lineNum":"  625","line":"    # ```"},
{"lineNum":"  626","line":"    #"},
{"lineNum":"  627","line":"    # Is the same as writing:"},
{"lineNum":"  628","line":"    #"},
{"lineNum":"  629","line":"    # ```"},
{"lineNum":"  630","line":"    # class Person"},
{"lineNum":"  631","line":"    #   {{var_prefix}}name : String = \"John Doe\""},
{"lineNum":"  632","line":"    #"},
{"lineNum":"  633","line":"    #   def {{method_prefix}}name=({{var_prefix}}name : String)"},
{"lineNum":"  634","line":"    #   end"},
{"lineNum":"  635","line":"    # end"},
{"lineNum":"  636","line":"    # ```"},
{"lineNum":"  637","line":"    #"},
{"lineNum":"  638","line":"    # An assignment can be passed too, but in this case the type of the"},
{"lineNum":"  639","line":"    # variable must be easily inferrable from the initial value:"},
{"lineNum":"  640","line":"    #"},
{"lineNum":"  641","line":"    # ```"},
{"lineNum":"  642","line":"    # class Person"},
{"lineNum":"  643","line":"    #   {{macro_prefix}}setter name = \"John Doe\""},
{"lineNum":"  644","line":"    # end"},
{"lineNum":"  645","line":"    # ```"},
{"lineNum":"  646","line":"    #"},
{"lineNum":"  647","line":"    # Is the same as writing:"},
{"lineNum":"  648","line":"    #"},
{"lineNum":"  649","line":"    # ```"},
{"lineNum":"  650","line":"    # class Person"},
{"lineNum":"  651","line":"    #   {{var_prefix}}name = \"John Doe\""},
{"lineNum":"  652","line":"    #"},
{"lineNum":"  653","line":"    #   def {{method_prefix}}name=({{var_prefix}}name)"},
{"lineNum":"  654","line":"    #   end"},
{"lineNum":"  655","line":"    # end"},
{"lineNum":"  656","line":"    # ```"},
{"lineNum":"  657","line":"    macro {{macro_prefix}}setter(*names)"},
{"lineNum":"  658","line":"      \\{% for name in names %}"},
{"lineNum":"  659","line":"        \\{% if name.is_a?(TypeDeclaration) %}"},
{"lineNum":"  660","line":"          {{var_prefix}}\\{{name}}"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"          def {{method_prefix}}\\{{name.var.id}}=({{var_prefix}}\\{{name.var.id}} : \\{{name.type}})"},
{"lineNum":"  663","line":"          end"},
{"lineNum":"  664","line":"        \\{% elsif name.is_a?(Assign) %}"},
{"lineNum":"  665","line":"          {{var_prefix}}\\{{name}}"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"          def {{method_prefix}}\\{{name.target.id}}=({{var_prefix}}\\{{name.target.id}})"},
{"lineNum":"  668","line":"          end"},
{"lineNum":"  669","line":"        \\{% else %}"},
{"lineNum":"  670","line":"          def {{method_prefix}}\\{{name.id}}=({{var_prefix}}\\{{name.id}})"},
{"lineNum":"  671","line":"          end"},
{"lineNum":"  672","line":"        \\{% end %}"},
{"lineNum":"  673","line":"      \\{% end %}"},
{"lineNum":"  674","line":"    end"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"    # Defines property methods for each of the given arguments."},
{"lineNum":"  677","line":"    #"},
{"lineNum":"  678","line":"    # Writing:"},
{"lineNum":"  679","line":"    #"},
{"lineNum":"  680","line":"    # ```"},
{"lineNum":"  681","line":"    # class Person"},
{"lineNum":"  682","line":"    #   {{macro_prefix}}property name"},
{"lineNum":"  683","line":"    # end"},
{"lineNum":"  684","line":"    # ```"},
{"lineNum":"  685","line":"    #"},
{"lineNum":"  686","line":"    # Is the same as writing:"},
{"lineNum":"  687","line":"    #"},
{"lineNum":"  688","line":"    # ```"},
{"lineNum":"  689","line":"    # class Person"},
{"lineNum":"  690","line":"    #   def {{method_prefix}}name=({{var_prefix}}name)"},
{"lineNum":"  691","line":"    #   end"},
{"lineNum":"  692","line":"    #"},
{"lineNum":"  693","line":"    #   def {{method_prefix}}name"},
{"lineNum":"  694","line":"    #     {{var_prefix}}name"},
{"lineNum":"  695","line":"    #   end"},
{"lineNum":"  696","line":"    # end"},
{"lineNum":"  697","line":"    # ```"},
{"lineNum":"  698","line":"    #"},
{"lineNum":"  699","line":"    # The arguments can be string literals, symbol literals or plain names:"},
{"lineNum":"  700","line":"    #"},
{"lineNum":"  701","line":"    # ```"},
{"lineNum":"  702","line":"    # class Person"},
{"lineNum":"  703","line":"    #   {{macro_prefix}}property :name, \"age\""},
{"lineNum":"  704","line":"    # end"},
{"lineNum":"  705","line":"    # ```"},
{"lineNum":"  706","line":"    #"},
{"lineNum":"  707","line":"    # If a type declaration is given, a variable with that name"},
{"lineNum":"  708","line":"    # is declared with that type."},
{"lineNum":"  709","line":"    #"},
{"lineNum":"  710","line":"    # ```"},
{"lineNum":"  711","line":"    # class Person"},
{"lineNum":"  712","line":"    #   {{macro_prefix}}property name : String"},
{"lineNum":"  713","line":"    # end"},
{"lineNum":"  714","line":"    # ```"},
{"lineNum":"  715","line":"    #"},
{"lineNum":"  716","line":"    # Is the same as writing:"},
{"lineNum":"  717","line":"    #"},
{"lineNum":"  718","line":"    # ```"},
{"lineNum":"  719","line":"    # class Person"},
{"lineNum":"  720","line":"    #   {{var_prefix}}name : String"},
{"lineNum":"  721","line":"    #"},
{"lineNum":"  722","line":"    #   def {{method_prefix}}name=({{var_prefix}}name)"},
{"lineNum":"  723","line":"    #   end"},
{"lineNum":"  724","line":"    #"},
{"lineNum":"  725","line":"    #   def {{method_prefix}}name"},
{"lineNum":"  726","line":"    #     {{var_prefix}}name"},
{"lineNum":"  727","line":"    #   end"},
{"lineNum":"  728","line":"    # end"},
{"lineNum":"  729","line":"    # ```"},
{"lineNum":"  730","line":"    #"},
{"lineNum":"  731","line":"    # The type declaration can also include an initial value:"},
{"lineNum":"  732","line":"    #"},
{"lineNum":"  733","line":"    # ```"},
{"lineNum":"  734","line":"    # class Person"},
{"lineNum":"  735","line":"    #   {{macro_prefix}}property name : String = \"John Doe\""},
{"lineNum":"  736","line":"    # end"},
{"lineNum":"  737","line":"    # ```"},
{"lineNum":"  738","line":"    #"},
{"lineNum":"  739","line":"    # Is the same as writing:"},
{"lineNum":"  740","line":"    #"},
{"lineNum":"  741","line":"    # ```"},
{"lineNum":"  742","line":"    # class Person"},
{"lineNum":"  743","line":"    #   {{var_prefix}}name : String = \"John Doe\""},
{"lineNum":"  744","line":"    #"},
{"lineNum":"  745","line":"    #   def {{method_prefix}}name=({{var_prefix}}name : String)"},
{"lineNum":"  746","line":"    #   end"},
{"lineNum":"  747","line":"    #"},
{"lineNum":"  748","line":"    #   def {{method_prefix}}name"},
{"lineNum":"  749","line":"    #     {{var_prefix}}name"},
{"lineNum":"  750","line":"    #   end"},
{"lineNum":"  751","line":"    # end"},
{"lineNum":"  752","line":"    # ```"},
{"lineNum":"  753","line":"    #"},
{"lineNum":"  754","line":"    # An assignment can be passed too, but in this case the type of the"},
{"lineNum":"  755","line":"    # variable must be easily inferrable from the initial value:"},
{"lineNum":"  756","line":"    #"},
{"lineNum":"  757","line":"    # ```"},
{"lineNum":"  758","line":"    # class Person"},
{"lineNum":"  759","line":"    #   {{macro_prefix}}property name = \"John Doe\""},
{"lineNum":"  760","line":"    # end"},
{"lineNum":"  761","line":"    # ```"},
{"lineNum":"  762","line":"    #"},
{"lineNum":"  763","line":"    # Is the same as writing:"},
{"lineNum":"  764","line":"    #"},
{"lineNum":"  765","line":"    # ```"},
{"lineNum":"  766","line":"    # class Person"},
{"lineNum":"  767","line":"    #   {{var_prefix}}name = \"John Doe\""},
{"lineNum":"  768","line":"    #"},
{"lineNum":"  769","line":"    #   def {{method_prefix}}name=({{var_prefix}}name : String)"},
{"lineNum":"  770","line":"    #   end"},
{"lineNum":"  771","line":"    #"},
{"lineNum":"  772","line":"    #   def {{method_prefix}}name"},
{"lineNum":"  773","line":"    #     {{var_prefix}}name"},
{"lineNum":"  774","line":"    #   end"},
{"lineNum":"  775","line":"    # end"},
{"lineNum":"  776","line":"    # ```"},
{"lineNum":"  777","line":"    #"},
{"lineNum":"  778","line":"    # If a block is given to the macro, a property is generated"},
{"lineNum":"  779","line":"    # with a variable that is lazily initialized with"},
{"lineNum":"  780","line":"    # the block\'s contents:"},
{"lineNum":"  781","line":"    #"},
{"lineNum":"  782","line":"    # ```"},
{"lineNum":"  783","line":"    # class Person"},
{"lineNum":"  784","line":"    #   {{macro_prefix}}property(birth_date) { Time.now }"},
{"lineNum":"  785","line":"    # end"},
{"lineNum":"  786","line":"    # ```"},
{"lineNum":"  787","line":"    #"},
{"lineNum":"  788","line":"    # Is the same as writing:"},
{"lineNum":"  789","line":"    #"},
{"lineNum":"  790","line":"    # ```"},
{"lineNum":"  791","line":"    # class Person"},
{"lineNum":"  792","line":"    #   def {{method_prefix}}birth_date"},
{"lineNum":"  793","line":"    #     {{var_prefix}}birth_date ||= Time.now"},
{"lineNum":"  794","line":"    #   end"},
{"lineNum":"  795","line":"    #"},
{"lineNum":"  796","line":"    #   def {{method_prefix}}birth_date=({{var_prefix}}birth_date)"},
{"lineNum":"  797","line":"    #   end"},
{"lineNum":"  798","line":"    # end"},
{"lineNum":"  799","line":"    # ```"},
{"lineNum":"  800","line":"    macro {{macro_prefix}}property(*names, &block)"},
{"lineNum":"  801","line":"      \\{% if block %}"},
{"lineNum":"  802","line":"        \\{% if names.size != 1 %}"},
{"lineNum":"  803","line":"          \\{{ raise \"Only one argument can be passed to `property` with a block\" }}"},
{"lineNum":"  804","line":"        \\{% end %}"},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":"        \\{% name = names[0] %}"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"        {{macro_prefix}}setter \\{{name}}"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"        \\{% if name.is_a?(TypeDeclaration) %}"},
{"lineNum":"  811","line":"          {{var_prefix}}\\{{name.var.id}} : \\{{name.type}}?"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"          def {{method_prefix}}\\{{name.var.id}}"},
{"lineNum":"  814","line":"            {{var_prefix}}\\{{name.var.id}} ||= \\{{yield}}"},
{"lineNum":"  815","line":"          end"},
{"lineNum":"  816","line":"        \\{% else %}"},
{"lineNum":"  817","line":"          def {{method_prefix}}\\{{name.id}}"},
{"lineNum":"  818","line":"            {{var_prefix}}\\{{name.id}} ||= \\{{yield}}"},
{"lineNum":"  819","line":"          end"},
{"lineNum":"  820","line":"        \\{% end %}"},
{"lineNum":"  821","line":"      \\{% else %}"},
{"lineNum":"  822","line":"        \\{% for name in names %}"},
{"lineNum":"  823","line":"          \\{% if name.is_a?(TypeDeclaration) %}"},
{"lineNum":"  824","line":"            {{var_prefix}}\\{{name}}"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"            def {{method_prefix}}\\{{name.var.id}} : \\{{name.type}}"},
{"lineNum":"  827","line":"              {{var_prefix}}\\{{name.var.id}}"},
{"lineNum":"  828","line":"            end"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"            def {{method_prefix}}\\{{name.var.id}}=({{var_prefix}}\\{{name.var.id}} : \\{{name.type}})"},
{"lineNum":"  831","line":"            end"},
{"lineNum":"  832","line":"          \\{% elsif name.is_a?(Assign) %}"},
{"lineNum":"  833","line":"            {{var_prefix}}\\{{name}}"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"            def {{method_prefix}}\\{{name.target.id}}"},
{"lineNum":"  836","line":"              {{var_prefix}}\\{{name.target.id}}"},
{"lineNum":"  837","line":"            end"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"            def {{method_prefix}}\\{{name.target.id}}=({{var_prefix}}\\{{name.target.id}})"},
{"lineNum":"  840","line":"            end"},
{"lineNum":"  841","line":"          \\{% else %}"},
{"lineNum":"  842","line":"            def {{method_prefix}}\\{{name.id}}"},
{"lineNum":"  843","line":"              {{var_prefix}}\\{{name.id}}"},
{"lineNum":"  844","line":"            end"},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"            def {{method_prefix}}\\{{name.id}}=({{var_prefix}}\\{{name.id}})"},
{"lineNum":"  847","line":"            end"},
{"lineNum":"  848","line":"          \\{% end %}"},
{"lineNum":"  849","line":"        \\{% end %}"},
{"lineNum":"  850","line":"      \\{% end %}"},
{"lineNum":"  851","line":"    end"},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"    # Defines raise-on-nil property methods for each of the given arguments."},
{"lineNum":"  854","line":"    #"},
{"lineNum":"  855","line":"    # Writing:"},
{"lineNum":"  856","line":"    #"},
{"lineNum":"  857","line":"    # ```"},
{"lineNum":"  858","line":"    # class Person"},
{"lineNum":"  859","line":"    #   {{macro_prefix}}property! name"},
{"lineNum":"  860","line":"    # end"},
{"lineNum":"  861","line":"    # ```"},
{"lineNum":"  862","line":"    #"},
{"lineNum":"  863","line":"    # Is the same as writing:"},
{"lineNum":"  864","line":"    #"},
{"lineNum":"  865","line":"    # ```"},
{"lineNum":"  866","line":"    # class Person"},
{"lineNum":"  867","line":"    #   def {{method_prefix}}name=({{var_prefix}}name)"},
{"lineNum":"  868","line":"    #   end"},
{"lineNum":"  869","line":"    #"},
{"lineNum":"  870","line":"    #   def {{method_prefix}}name?"},
{"lineNum":"  871","line":"    #     {{var_prefix}}name"},
{"lineNum":"  872","line":"    #   end"},
{"lineNum":"  873","line":"    #"},
{"lineNum":"  874","line":"    #   def {{method_prefix}}name"},
{"lineNum":"  875","line":"    #     {{var_prefix}}name.not_nil!"},
{"lineNum":"  876","line":"    #   end"},
{"lineNum":"  877","line":"    # end"},
{"lineNum":"  878","line":"    # ```"},
{"lineNum":"  879","line":"    #"},
{"lineNum":"  880","line":"    # The arguments can be string literals, symbol literals or plain names:"},
{"lineNum":"  881","line":"    #"},
{"lineNum":"  882","line":"    # ```"},
{"lineNum":"  883","line":"    # class Person"},
{"lineNum":"  884","line":"    #   {{macro_prefix}}property! :name, \"age\""},
{"lineNum":"  885","line":"    # end"},
{"lineNum":"  886","line":"    # ```"},
{"lineNum":"  887","line":"    #"},
{"lineNum":"  888","line":"    # If a type declaration is given, a variable with that name"},
{"lineNum":"  889","line":"    # is declared with that type, as nilable."},
{"lineNum":"  890","line":"    #"},
{"lineNum":"  891","line":"    # ```"},
{"lineNum":"  892","line":"    # class Person"},
{"lineNum":"  893","line":"    #   {{macro_prefix}}property! name : String"},
{"lineNum":"  894","line":"    # end"},
{"lineNum":"  895","line":"    # ```"},
{"lineNum":"  896","line":"    #"},
{"lineNum":"  897","line":"    # Is the same as writing:"},
{"lineNum":"  898","line":"    #"},
{"lineNum":"  899","line":"    # ```"},
{"lineNum":"  900","line":"    # class Person"},
{"lineNum":"  901","line":"    #   {{var_prefix}}name : String?"},
{"lineNum":"  902","line":"    #"},
{"lineNum":"  903","line":"    #   def {{method_prefix}}name=({{var_prefix}}name)"},
{"lineNum":"  904","line":"    #   end"},
{"lineNum":"  905","line":"    #"},
{"lineNum":"  906","line":"    #   def {{method_prefix}}name?"},
{"lineNum":"  907","line":"    #     {{var_prefix}}name"},
{"lineNum":"  908","line":"    #   end"},
{"lineNum":"  909","line":"    #"},
{"lineNum":"  910","line":"    #   def {{method_prefix}}name"},
{"lineNum":"  911","line":"    #     {{var_prefix}}name.not_nil!"},
{"lineNum":"  912","line":"    #   end"},
{"lineNum":"  913","line":"    # end"},
{"lineNum":"  914","line":"    # ```"},
{"lineNum":"  915","line":"    macro {{macro_prefix}}property!(*names)"},
{"lineNum":"  916","line":"      {{macro_prefix}}getter! \\{{*names}}"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"      \\{% for name in names %}"},
{"lineNum":"  919","line":"        \\{% if name.is_a?(TypeDeclaration) %}"},
{"lineNum":"  920","line":"          def {{method_prefix}}\\{{name.var.id}}=({{var_prefix}}\\{{name.var.id}} : \\{{name.type}})"},
{"lineNum":"  921","line":"          end"},
{"lineNum":"  922","line":"        \\{% else %}"},
{"lineNum":"  923","line":"          def {{method_prefix}}\\{{name.id}}=({{var_prefix}}\\{{name.id}})"},
{"lineNum":"  924","line":"          end"},
{"lineNum":"  925","line":"        \\{% end %}"},
{"lineNum":"  926","line":"      \\{% end %}"},
{"lineNum":"  927","line":"    end"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"    # Defines query property methods for each of the given arguments."},
{"lineNum":"  930","line":"    #"},
{"lineNum":"  931","line":"    # Writing:"},
{"lineNum":"  932","line":"    #"},
{"lineNum":"  933","line":"    # ```"},
{"lineNum":"  934","line":"    # class Person"},
{"lineNum":"  935","line":"    #   {{macro_prefix}}property? happy"},
{"lineNum":"  936","line":"    # end"},
{"lineNum":"  937","line":"    # ```"},
{"lineNum":"  938","line":"    #"},
{"lineNum":"  939","line":"    # Is the same as writing:"},
{"lineNum":"  940","line":"    #"},
{"lineNum":"  941","line":"    # ```"},
{"lineNum":"  942","line":"    # class Person"},
{"lineNum":"  943","line":"    #   def {{method_prefix}}happy=({{var_prefix}}happy)"},
{"lineNum":"  944","line":"    #   end"},
{"lineNum":"  945","line":"    #"},
{"lineNum":"  946","line":"    #   def {{method_prefix}}happy?"},
{"lineNum":"  947","line":"    #     {{var_prefix}}happy"},
{"lineNum":"  948","line":"    #   end"},
{"lineNum":"  949","line":"    # end"},
{"lineNum":"  950","line":"    # ```"},
{"lineNum":"  951","line":"    #"},
{"lineNum":"  952","line":"    # The arguments can be string literals, symbol literals or plain names:"},
{"lineNum":"  953","line":"    #"},
{"lineNum":"  954","line":"    # ```"},
{"lineNum":"  955","line":"    # class Person"},
{"lineNum":"  956","line":"    #   {{macro_prefix}}property? :happy, \"famous\""},
{"lineNum":"  957","line":"    # end"},
{"lineNum":"  958","line":"    # ```"},
{"lineNum":"  959","line":"    #"},
{"lineNum":"  960","line":"    # If a type declaration is given, a variable with that name"},
{"lineNum":"  961","line":"    # is declared with that type."},
{"lineNum":"  962","line":"    #"},
{"lineNum":"  963","line":"    # ```"},
{"lineNum":"  964","line":"    # class Person"},
{"lineNum":"  965","line":"    #   {{macro_prefix}}property? happy : Bool"},
{"lineNum":"  966","line":"    # end"},
{"lineNum":"  967","line":"    # ```"},
{"lineNum":"  968","line":"    #"},
{"lineNum":"  969","line":"    # Is the same as writing:"},
{"lineNum":"  970","line":"    #"},
{"lineNum":"  971","line":"    # ```"},
{"lineNum":"  972","line":"    # class Person"},
{"lineNum":"  973","line":"    #   {{var_prefix}}happy : Bool"},
{"lineNum":"  974","line":"    #"},
{"lineNum":"  975","line":"    #   def {{method_prefix}}happy=({{var_prefix}}happy)"},
{"lineNum":"  976","line":"    #   end"},
{"lineNum":"  977","line":"    #"},
{"lineNum":"  978","line":"    #   def {{method_prefix}}happy?"},
{"lineNum":"  979","line":"    #     {{var_prefix}}happy"},
{"lineNum":"  980","line":"    #   end"},
{"lineNum":"  981","line":"    # end"},
{"lineNum":"  982","line":"    # ```"},
{"lineNum":"  983","line":"    #"},
{"lineNum":"  984","line":"    # The type declaration can also include an initial value:"},
{"lineNum":"  985","line":"    #"},
{"lineNum":"  986","line":"    # ```"},
{"lineNum":"  987","line":"    # class Person"},
{"lineNum":"  988","line":"    #   {{macro_prefix}}property? happy : Bool = true"},
{"lineNum":"  989","line":"    # end"},
{"lineNum":"  990","line":"    # ```"},
{"lineNum":"  991","line":"    #"},
{"lineNum":"  992","line":"    # Is the same as writing:"},
{"lineNum":"  993","line":"    #"},
{"lineNum":"  994","line":"    # ```"},
{"lineNum":"  995","line":"    # class Person"},
{"lineNum":"  996","line":"    #   {{var_prefix}}happy : Bool = true"},
{"lineNum":"  997","line":"    #"},
{"lineNum":"  998","line":"    #   def {{method_prefix}}happy=({{var_prefix}}happy : Bool)"},
{"lineNum":"  999","line":"    #   end"},
{"lineNum":" 1000","line":"    #"},
{"lineNum":" 1001","line":"    #   def {{method_prefix}}happy? : Bool"},
{"lineNum":" 1002","line":"    #     {{var_prefix}}happy"},
{"lineNum":" 1003","line":"    #   end"},
{"lineNum":" 1004","line":"    # end"},
{"lineNum":" 1005","line":"    # ```"},
{"lineNum":" 1006","line":"    #"},
{"lineNum":" 1007","line":"    # An assignment can be passed too, but in this case the type of the"},
{"lineNum":" 1008","line":"    # variable must be easily inferrable from the initial value:"},
{"lineNum":" 1009","line":"    #"},
{"lineNum":" 1010","line":"    # ```"},
{"lineNum":" 1011","line":"    # class Person"},
{"lineNum":" 1012","line":"    #   {{macro_prefix}}property? happy = true"},
{"lineNum":" 1013","line":"    # end"},
{"lineNum":" 1014","line":"    # ```"},
{"lineNum":" 1015","line":"    #"},
{"lineNum":" 1016","line":"    # Is the same as writing:"},
{"lineNum":" 1017","line":"    #"},
{"lineNum":" 1018","line":"    # ```"},
{"lineNum":" 1019","line":"    # class Person"},
{"lineNum":" 1020","line":"    #   {{var_prefix}}happy = true"},
{"lineNum":" 1021","line":"    #"},
{"lineNum":" 1022","line":"    #   def {{method_prefix}}happy=({{var_prefix}}happy)"},
{"lineNum":" 1023","line":"    #   end"},
{"lineNum":" 1024","line":"    #"},
{"lineNum":" 1025","line":"    #   def {{method_prefix}}happy?"},
{"lineNum":" 1026","line":"    #     {{var_prefix}}happy"},
{"lineNum":" 1027","line":"    #   end"},
{"lineNum":" 1028","line":"    # end"},
{"lineNum":" 1029","line":"    # ```"},
{"lineNum":" 1030","line":"    macro {{macro_prefix}}property?(*names)"},
{"lineNum":" 1031","line":"      \\{% for name in names %}"},
{"lineNum":" 1032","line":"        \\{% if name.is_a?(TypeDeclaration) %}"},
{"lineNum":" 1033","line":"          {{var_prefix}}\\{{name}}"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"          def {{method_prefix}}\\{{name.var.id}}? : \\{{name.type}}"},
{"lineNum":" 1036","line":"            {{var_prefix}}\\{{name.var.id}}"},
{"lineNum":" 1037","line":"          end"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"          def {{method_prefix}}\\{{name.var.id}}=({{var_prefix}}\\{{name.var.id}} : \\{{name.type}})"},
{"lineNum":" 1040","line":"          end"},
{"lineNum":" 1041","line":"        \\{% elsif name.is_a?(Assign) %}"},
{"lineNum":" 1042","line":"          {{var_prefix}}\\{{name}}"},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"          def {{method_prefix}}\\{{name.target.id}}?"},
{"lineNum":" 1045","line":"            {{var_prefix}}\\{{name.target.id}}"},
{"lineNum":" 1046","line":"          end"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"          def {{method_prefix}}\\{{name.target.id}}=({{var_prefix}}\\{{name.target.id}})"},
{"lineNum":" 1049","line":"          end"},
{"lineNum":" 1050","line":"        \\{% else %}"},
{"lineNum":" 1051","line":"          def {{method_prefix}}\\{{name.id}}?"},
{"lineNum":" 1052","line":"            {{var_prefix}}\\{{name.id}}"},
{"lineNum":" 1053","line":"          end"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"          def {{method_prefix}}\\{{name.id}}=({{var_prefix}}\\{{name.id}})"},
{"lineNum":" 1056","line":"          end"},
{"lineNum":" 1057","line":"        \\{% end %}"},
{"lineNum":" 1058","line":"      \\{% end %}"},
{"lineNum":" 1059","line":"    end"},
{"lineNum":" 1060","line":"  {% end %}"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"  # Delegate *methods* to *to*."},
{"lineNum":" 1063","line":"  #"},
{"lineNum":" 1064","line":"  # Note that due to current language limitations this is only useful"},
{"lineNum":" 1065","line":"  # when no captured blocks are involved."},
{"lineNum":" 1066","line":"  #"},
{"lineNum":" 1067","line":"  # ```"},
{"lineNum":" 1068","line":"  # class StringWrapper"},
{"lineNum":" 1069","line":"  #   def initialize(@string : String)"},
{"lineNum":" 1070","line":"  #   end"},
{"lineNum":" 1071","line":"  #"},
{"lineNum":" 1072","line":"  #   delegate downcase, to: @string"},
{"lineNum":" 1073","line":"  #   delegate gsub, to: @string"},
{"lineNum":" 1074","line":"  #   delegate empty?, capitalize, to: @string"},
{"lineNum":" 1075","line":"  # end"},
{"lineNum":" 1076","line":"  #"},
{"lineNum":" 1077","line":"  # wrapper = StringWrapper.new \"HELLO\""},
{"lineNum":" 1078","line":"  # wrapper.downcase       # => \"hello\""},
{"lineNum":" 1079","line":"  # wrapper.gsub(/E/, \"A\") # => \"HALLO\""},
{"lineNum":" 1080","line":"  # wrapper.empty?         # => false"},
{"lineNum":" 1081","line":"  # wrapper.capitalize     # => \"Hello\""},
{"lineNum":" 1082","line":"  # ```"},
{"lineNum":" 1083","line":"  macro delegate(*methods, to object)"},
{"lineNum":" 1084","line":"    {% for method in methods %}"},
{"lineNum":" 1085","line":"      def {{method.id}}(*args, **options)"},
{"lineNum":" 1086","line":"        {{object.id}}.{{method.id}}(*args, **options)"},
{"lineNum":" 1087","line":"      end"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"      def {{method.id}}(*args, **options)"},
{"lineNum":" 1090","line":"        {{object.id}}.{{method.id}}(*args, **options) do |*yield_args|"},
{"lineNum":" 1091","line":"          yield *yield_args"},
{"lineNum":" 1092","line":"        end"},
{"lineNum":" 1093","line":"      end"},
{"lineNum":" 1094","line":"    {% end %}"},
{"lineNum":" 1095","line":"  end"},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"  # Defines a `hash(hasher)` that will append a hash value for the given fields."},
{"lineNum":" 1098","line":"  #"},
{"lineNum":" 1099","line":"  # ```"},
{"lineNum":" 1100","line":"  # class Person"},
{"lineNum":" 1101","line":"  #   def initialize(@name, @age)"},
{"lineNum":" 1102","line":"  #   end"},
{"lineNum":" 1103","line":"  #"},
{"lineNum":" 1104","line":"  #   # Define a hash(hasher) method based on @name and @age"},
{"lineNum":" 1105","line":"  #   def_hash @name, @age"},
{"lineNum":" 1106","line":"  # end"},
{"lineNum":" 1107","line":"  # ```"},
{"lineNum":" 1108","line":"  macro def_hash(*fields)"},
{"lineNum":" 1109","line":"    def hash(hasher)"},
{"lineNum":" 1110","line":"      {% for field in fields %}"},
{"lineNum":" 1111","line":"        hasher = {{field}}.hash(hasher)"},
{"lineNum":" 1112","line":"      {% end %}"},
{"lineNum":" 1113","line":"      hasher"},
{"lineNum":" 1114","line":"    end"},
{"lineNum":" 1115","line":"  end"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"  # Defines an `==` method by comparing the given fields."},
{"lineNum":" 1118","line":"  #"},
{"lineNum":" 1119","line":"  # The generated `==` method has a `self` restriction."},
{"lineNum":" 1120","line":"  #"},
{"lineNum":" 1121","line":"  # ```"},
{"lineNum":" 1122","line":"  # class Person"},
{"lineNum":" 1123","line":"  #   def initialize(@name, @age)"},
{"lineNum":" 1124","line":"  #   end"},
{"lineNum":" 1125","line":"  #"},
{"lineNum":" 1126","line":"  #   # Define a `==` method that compares @name and @age"},
{"lineNum":" 1127","line":"  #   def_equals @name, @age"},
{"lineNum":" 1128","line":"  # end"},
{"lineNum":" 1129","line":"  # ```"},
{"lineNum":" 1130","line":"  macro def_equals(*fields)"},
{"lineNum":" 1131","line":"    def ==(other : self)"},
{"lineNum":" 1132","line":"      {% for field in fields %}"},
{"lineNum":" 1133","line":"        return false unless {{field.id}} == other.{{field.id}}"},
{"lineNum":" 1134","line":"      {% end %}"},
{"lineNum":" 1135","line":"      true"},
{"lineNum":" 1136","line":"    end"},
{"lineNum":" 1137","line":"  end"},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"  # Defines `hash` and `==` method from the given fields."},
{"lineNum":" 1140","line":"  #"},
{"lineNum":" 1141","line":"  # The generated `==` method has a `self` restriction."},
{"lineNum":" 1142","line":"  #"},
{"lineNum":" 1143","line":"  # ```"},
{"lineNum":" 1144","line":"  # class Person"},
{"lineNum":" 1145","line":"  #   def initialize(@name, @age)"},
{"lineNum":" 1146","line":"  #   end"},
{"lineNum":" 1147","line":"  #"},
{"lineNum":" 1148","line":"  #   # Define a hash method based on @name and @age"},
{"lineNum":" 1149","line":"  #   # Define a `==` method that compares @name and @age"},
{"lineNum":" 1150","line":"  #   def_equals_and_hash @name, @age"},
{"lineNum":" 1151","line":"  # end"},
{"lineNum":" 1152","line":"  # ```"},
{"lineNum":" 1153","line":"  macro def_equals_and_hash(*fields)"},
{"lineNum":" 1154","line":"    def_equals {{*fields}}"},
{"lineNum":" 1155","line":"    def_hash {{*fields}}"},
{"lineNum":" 1156","line":"  end"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"  # Forwards missing methods to *delegate*."},
{"lineNum":" 1159","line":"  #"},
{"lineNum":" 1160","line":"  # ```"},
{"lineNum":" 1161","line":"  # class StringWrapper"},
{"lineNum":" 1162","line":"  #   def initialize(@string : String)"},
{"lineNum":" 1163","line":"  #   end"},
{"lineNum":" 1164","line":"  #"},
{"lineNum":" 1165","line":"  #   forward_missing_to @string"},
{"lineNum":" 1166","line":"  # end"},
{"lineNum":" 1167","line":"  #"},
{"lineNum":" 1168","line":"  # wrapper = StringWrapper.new \"HELLO\""},
{"lineNum":" 1169","line":"  # wrapper.downcase       # => \"hello\""},
{"lineNum":" 1170","line":"  # wrapper.gsub(/E/, \"A\") # => \"HALLO\""},
{"lineNum":" 1171","line":"  # ```"},
{"lineNum":" 1172","line":"  macro forward_missing_to(delegate)"},
{"lineNum":" 1173","line":"    macro method_missing(call)"},
{"lineNum":" 1174","line":"      {{delegate}}.\\{{call}}"},
{"lineNum":" 1175","line":"    end"},
{"lineNum":" 1176","line":"  end"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"  # Defines a `clone` method that returns a copy of this object with all"},
{"lineNum":" 1179","line":"  # instance variables cloned (`clone` is in turn invoked on them)."},
{"lineNum":" 1180","line":"  macro def_clone"},
{"lineNum":" 1181","line":"    # Returns a copy of `self` with all instance variables cloned."},
{"lineNum":" 1182","line":"    def clone"},
{"lineNum":" 1183","line":"      clone = \\{{@type}}.allocate"},
{"lineNum":" 1184","line":"      clone.initialize_copy(self)"},
{"lineNum":" 1185","line":"      clone"},
{"lineNum":" 1186","line":"    end"},
{"lineNum":" 1187","line":""},
{"lineNum":" 1188","line":"    protected def initialize_copy(other)"},
{"lineNum":" 1189","line":"      \\{% for ivar in @type.instance_vars %}"},
{"lineNum":" 1190","line":"        @\\{{ivar.id}} = other.@\\{{ivar.id}}.clone"},
{"lineNum":" 1191","line":"      \\{% end %}"},
{"lineNum":" 1192","line":"    end"},
{"lineNum":" 1193","line":"  end"},
{"lineNum":" 1194","line":""},
{"lineNum":" 1195","line":"  protected def self.set_crystal_type_id(ptr)"},
{"lineNum":" 1196","line":"    ptr.as(LibC::SizeT*).value = LibC::SizeT.new(crystal_instance_type_id)"},
{"lineNum":" 1197","line":"    ptr"},
{"lineNum":" 1198","line":"  end"},
{"lineNum":" 1199","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
