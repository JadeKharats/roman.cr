var data = {lines:[
{"lineNum":"    1","line":"lib LibCrystalMain","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    2","line":"  @[Raises]"},
{"lineNum":"    3","line":"  fun __crystal_main(argc : Int32, argv : UInt8**)"},
{"lineNum":"    4","line":"end"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"# :nodoc:"},
{"lineNum":"    7","line":"def _crystal_main(argc : Int32, argv : UInt8**)"},
{"lineNum":"    8","line":"  # TODO: remove this method and embed this inside"},
{"lineNum":"    9","line":"  # Crystal.main. A bug in Crystal 0.23.1 prevents invoking"},
{"lineNum":"   10","line":"  # __crystal_main from anywhere except the top level."},
{"lineNum":"   11","line":"  LibCrystalMain.__crystal_main(argc, argv)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   12","line":"end"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"module Crystal"},
{"lineNum":"   15","line":"  @@stdin_is_blocking = false"},
{"lineNum":"   16","line":"  @@stdout_is_blocking = false"},
{"lineNum":"   17","line":"  @@stderr_is_blocking = false"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"  # Defines the main routine run by normal Crystal programs:"},
{"lineNum":"   20","line":"  #"},
{"lineNum":"   21","line":"  # - Initializes the GC"},
{"lineNum":"   22","line":"  # - Invokes the given *block*"},
{"lineNum":"   23","line":"  # - Handles unhandled exceptions"},
{"lineNum":"   24","line":"  # - Invokes `at_exit` handlers"},
{"lineNum":"   25","line":"  # - Flushes `STDOUT` and `STDERR`"},
{"lineNum":"   26","line":"  #"},
{"lineNum":"   27","line":"  # This method can be invoked if you need to define a custom"},
{"lineNum":"   28","line":"  # main (as in C main) function, doing all the above steps."},
{"lineNum":"   29","line":"  #"},
{"lineNum":"   30","line":"  # For example:"},
{"lineNum":"   31","line":"  #"},
{"lineNum":"   32","line":"  # ```"},
{"lineNum":"   33","line":"  # fun main(argc : Int32, argv : UInt8**) : Int32"},
{"lineNum":"   34","line":"  #   Crystal.main do"},
{"lineNum":"   35","line":"  #     elapsed = Time.measure do"},
{"lineNum":"   36","line":"  #       Crystal.main_user_code(argc, argv)"},
{"lineNum":"   37","line":"  #     end"},
{"lineNum":"   38","line":"  #     puts \"Time to execute program: #{elapsed}\""},
{"lineNum":"   39","line":"  #   end"},
{"lineNum":"   40","line":"  # end"},
{"lineNum":"   41","line":"  # ```"},
{"lineNum":"   42","line":"  #"},
{"lineNum":"   43","line":"  # Note that the above is really just an example, almost the"},
{"lineNum":"   44","line":"  # same can be accomplished with `at_exit`. But in some cases"},
{"lineNum":"   45","line":"  # redefinition of C\'s main is needed."},
{"lineNum":"   46","line":"  def self.main(&block)"},
{"lineNum":"   47","line":"    GC.init"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    remember_blocking_state"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    status ="},
{"lineNum":"   52","line":"      begin"},
{"lineNum":"   53","line":"        yield"},
{"lineNum":"   54","line":"        0"},
{"lineNum":"   55","line":"      rescue ex"},
{"lineNum":"   56","line":"        1"},
{"lineNum":"   57","line":"      end"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    AtExitHandlers.run status","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   60","line":"    ex.inspect_with_backtrace STDERR if ex","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   61","line":"    STDOUT.flush","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   62","line":"    STDERR.flush"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    restore_blocking_state","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    status"},
{"lineNum":"   67","line":"  end"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"  # Main method run by all Crystal programs at startup."},
{"lineNum":"   70","line":"  #"},
{"lineNum":"   71","line":"  # This setups up the GC, invokes your program, rescuing"},
{"lineNum":"   72","line":"  # any handled exception, and then runs `at_exit` handlers."},
{"lineNum":"   73","line":"  #"},
{"lineNum":"   74","line":"  # This method is automatically invoked for you, so you"},
{"lineNum":"   75","line":"  # don\'t need to invoke it."},
{"lineNum":"   76","line":"  #"},
{"lineNum":"   77","line":"  # However, if you need to define a special main C function,"},
{"lineNum":"   78","line":"  # you can redefine main and invoke `Crystal.main` from it:"},
{"lineNum":"   79","line":"  #"},
{"lineNum":"   80","line":"  # ```"},
{"lineNum":"   81","line":"  # fun main(argc : Int32, argv : UInt8**) : Int32"},
{"lineNum":"   82","line":"  #   # some setup before Crystal main"},
{"lineNum":"   83","line":"  #   Crystal.main(argc, argv)"},
{"lineNum":"   84","line":"  #   # some cleanup logic after Crystal main"},
{"lineNum":"   85","line":"  # end"},
{"lineNum":"   86","line":"  # ```"},
{"lineNum":"   87","line":"  #"},
{"lineNum":"   88","line":"  # The `Crystal.main` can also be passed as a callback:"},
{"lineNum":"   89","line":"  #"},
{"lineNum":"   90","line":"  # ```"},
{"lineNum":"   91","line":"  # fun main(argc : Int32, argv : UInt8**) : Int32"},
{"lineNum":"   92","line":"  #   LibFoo.init_foo_and_invoke_main(argc, argv, ->Crystal.main)"},
{"lineNum":"   93","line":"  # end"},
{"lineNum":"   94","line":"  # ```"},
{"lineNum":"   95","line":"  #"},
{"lineNum":"   96","line":"  # Note that before `Crystal.main` is invoked the GC"},
{"lineNum":"   97","line":"  # is not setup yet, so nothing that allocates memory"},
{"lineNum":"   98","line":"  # in Crystal (like `new` for classes) can be used."},
{"lineNum":"   99","line":"  def self.main(argc : Int32, argv : UInt8**)"},
{"lineNum":"  100","line":"    main do"},
{"lineNum":"  101","line":"      main_user_code(argc, argv)"},
{"lineNum":"  102","line":"    end"},
{"lineNum":"  103","line":"  end"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"  # Executes the main user code. This normally is executed"},
{"lineNum":"  106","line":"  # after initializing the GC and before executing `at_exit` handlers."},
{"lineNum":"  107","line":"  #"},
{"lineNum":"  108","line":"  # You should never invoke this method unless you need to"},
{"lineNum":"  109","line":"  # redefine C\'s main function. See `Crystal.main` for"},
{"lineNum":"  110","line":"  # more details."},
{"lineNum":"  111","line":"  def self.main_user_code(argc : Int32, argv : UInt8**)"},
{"lineNum":"  112","line":"    _crystal_main(argc, argv)"},
{"lineNum":"  113","line":"  end"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"  # :nodoc:"},
{"lineNum":"  116","line":"  def self.remember_blocking_state"},
{"lineNum":"  117","line":"    @@stdin_is_blocking = IO::FileDescriptor.fcntl(0, LibC::F_GETFL) & LibC::O_NONBLOCK == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  118","line":"    @@stdout_is_blocking = IO::FileDescriptor.fcntl(1, LibC::F_GETFL) & LibC::O_NONBLOCK == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"    @@stderr_is_blocking = IO::FileDescriptor.fcntl(2, LibC::F_GETFL) & LibC::O_NONBLOCK == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  120","line":"  end"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  # :nodoc:"},
{"lineNum":"  123","line":"  def self.restore_blocking_state","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  124","line":"    STDIN.blocking = @@stdin_is_blocking","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"    STDOUT.blocking = @@stdout_is_blocking","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  126","line":"    STDERR.blocking = @@stderr_is_blocking","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"  end"},
{"lineNum":"  128","line":"end"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"# Main function that acts as C\'s main function."},
{"lineNum":"  131","line":"# Invokes `Crystal.main`."},
{"lineNum":"  132","line":"#"},
{"lineNum":"  133","line":"# Can be redefined. See `Crystal.main` for examples."},
{"lineNum":"  134","line":"fun main(argc : Int32, argv : UInt8**) : Int32","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"  Crystal.main(argc, argv)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 15, "covered" : 0,};
var merged_data = [];
