var data = {lines:[
{"lineNum":"    1","line":"# `Reference` is the base class of classes you define in your program."},
{"lineNum":"    2","line":"# It is set as a class\' superclass when you don\'t specify one:"},
{"lineNum":"    3","line":"#"},
{"lineNum":"    4","line":"# ```"},
{"lineNum":"    5","line":"# class MyClass # < Reference"},
{"lineNum":"    6","line":"# end"},
{"lineNum":"    7","line":"# ```"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# A reference type is passed by reference: when you pass it to methods,"},
{"lineNum":"   10","line":"# return it from methods or assign it to variables, a pointer is actually passed."},
{"lineNum":"   11","line":"#"},
{"lineNum":"   12","line":"# Invoking `new` on a `Reference` allocates a new instance on the heap."},
{"lineNum":"   13","line":"# The instance\'s memory is automatically freed (garbage-collected) when"},
{"lineNum":"   14","line":"# the instance is no longer referred by any other entity in the program."},
{"lineNum":"   15","line":"class Reference"},
{"lineNum":"   16","line":"  # Returns `true` if this reference is the same as *other*. Invokes `same?`."},
{"lineNum":"   17","line":"  def ==(other : self)"},
{"lineNum":"   18","line":"    same?(other)"},
{"lineNum":"   19","line":"  end"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"  # Returns `false` (other can only be a `Value` here)."},
{"lineNum":"   22","line":"  def ==(other)"},
{"lineNum":"   23","line":"    false"},
{"lineNum":"   24","line":"  end"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"  # Returns `true` if this reference is the same as *other*. This is only"},
{"lineNum":"   27","line":"  # `true` if this reference\'s `object_id` is the same as *other*\'s."},
{"lineNum":"   28","line":"  def same?(other : Reference)","class":"lineNoCov","hits":"0","possible_hits":"64",},
{"lineNum":"   29","line":"    object_id == other.object_id"},
{"lineNum":"   30","line":"  end"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"  # Returns `false`: a reference is never `nil`."},
{"lineNum":"   33","line":"  def same?(other : Nil)"},
{"lineNum":"   34","line":"    false"},
{"lineNum":"   35","line":"  end"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"  # Returns a shallow copy of this object."},
{"lineNum":"   38","line":"  #"},
{"lineNum":"   39","line":"  # This allocates a new object and copies the contents of"},
{"lineNum":"   40","line":"  # `self` into it."},
{"lineNum":"   41","line":"  def dup"},
{"lineNum":"   42","line":"    {% if @type.abstract? %}"},
{"lineNum":"   43","line":"      # This shouldn\'t happen, as the type is abstract,"},
{"lineNum":"   44","line":"      # but we need to avoid the allocate invocation below"},
{"lineNum":"   45","line":"      raise \"Can\'t dup {{@type}}\""},
{"lineNum":"   46","line":"    {% else %}"},
{"lineNum":"   47","line":"      dup = self.class.allocate"},
{"lineNum":"   48","line":"      dup.as(Void*).copy_from(self.as(Void*), instance_sizeof(self))"},
{"lineNum":"   49","line":"      dup"},
{"lineNum":"   50","line":"    {% end %}"},
{"lineNum":"   51","line":"  end"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"  # See `Object#hash(hasher)`"},
{"lineNum":"   54","line":"  def hash(hasher)"},
{"lineNum":"   55","line":"    hasher.reference(self)"},
{"lineNum":"   56","line":"  end"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"  def inspect(io : IO) : Nil"},
{"lineNum":"   59","line":"    io << \"#<\" << {{@type.name.id.stringify}} << \":0x\""},
{"lineNum":"   60","line":"    object_id.to_s(16, io)"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    executed = exec_recursive(:inspect) do"},
{"lineNum":"   63","line":"      {% for ivar, i in @type.instance_vars %}"},
{"lineNum":"   64","line":"        {% if i > 0 %}"},
{"lineNum":"   65","line":"          io << \",\""},
{"lineNum":"   66","line":"        {% end %}"},
{"lineNum":"   67","line":"        io << \" @{{ivar.id}}=\""},
{"lineNum":"   68","line":"        @{{ivar.id}}.inspect io"},
{"lineNum":"   69","line":"      {% end %}"},
{"lineNum":"   70","line":"    end"},
{"lineNum":"   71","line":"    unless executed"},
{"lineNum":"   72","line":"      io << \" ...\""},
{"lineNum":"   73","line":"    end"},
{"lineNum":"   74","line":"    io << \">\""},
{"lineNum":"   75","line":"    nil"},
{"lineNum":"   76","line":"  end"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"  def pretty_print(pp) : Nil"},
{"lineNum":"   79","line":"    {% if @type.overrides?(Reference, \"inspect\") %}"},
{"lineNum":"   80","line":"      pp.text inspect"},
{"lineNum":"   81","line":"    {% else %}"},
{"lineNum":"   82","line":"      prefix = \"#<#{{{@type.name.id.stringify}}}:0x#{object_id.to_s(16)}\""},
{"lineNum":"   83","line":"      executed = exec_recursive(:pretty_print) do"},
{"lineNum":"   84","line":"        pp.surround(prefix, \">\", left_break: nil, right_break: nil) do"},
{"lineNum":"   85","line":"          {% for ivar, i in @type.instance_vars.map(&.name).sort %}"},
{"lineNum":"   86","line":"            {% if i == 0 %}"},
{"lineNum":"   87","line":"              pp.breakable"},
{"lineNum":"   88","line":"            {% else %}"},
{"lineNum":"   89","line":"              pp.comma"},
{"lineNum":"   90","line":"            {% end %}"},
{"lineNum":"   91","line":"            pp.group do"},
{"lineNum":"   92","line":"              pp.text \"@{{ivar.id}}=\""},
{"lineNum":"   93","line":"              pp.nest do"},
{"lineNum":"   94","line":"                pp.breakable \"\""},
{"lineNum":"   95","line":"                @{{ivar.id}}.pretty_print(pp)"},
{"lineNum":"   96","line":"              end"},
{"lineNum":"   97","line":"            end"},
{"lineNum":"   98","line":"          {% end %}"},
{"lineNum":"   99","line":"        end"},
{"lineNum":"  100","line":"      end"},
{"lineNum":"  101","line":"      unless executed"},
{"lineNum":"  102","line":"        pp.text \"#{prefix} ...>\""},
{"lineNum":"  103","line":"      end"},
{"lineNum":"  104","line":"    {% end %}"},
{"lineNum":"  105","line":"  end"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"  def to_s(io : IO) : Nil"},
{"lineNum":"  108","line":"    io << \"#<\" << self.class.name << \":0x\""},
{"lineNum":"  109","line":"    object_id.to_s(16, io)"},
{"lineNum":"  110","line":"    io << \">\""},
{"lineNum":"  111","line":"    nil"},
{"lineNum":"  112","line":"  end"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"  # :nodoc:"},
{"lineNum":"  115","line":"  module ExecRecursive"},
{"lineNum":"  116","line":"    def self.hash"},
{"lineNum":"  117","line":"      @@exec_recursive ||= {} of {UInt64, Symbol} => Bool"},
{"lineNum":"  118","line":"    end"},
{"lineNum":"  119","line":"  end"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"  private def exec_recursive(method)"},
{"lineNum":"  122","line":"    hash = ExecRecursive.hash"},
{"lineNum":"  123","line":"    key = {object_id, method}"},
{"lineNum":"  124","line":"    if hash[key]?"},
{"lineNum":"  125","line":"      false"},
{"lineNum":"  126","line":"    else"},
{"lineNum":"  127","line":"      hash[key] = true"},
{"lineNum":"  128","line":"      value = yield"},
{"lineNum":"  129","line":"      hash.delete(key)"},
{"lineNum":"  130","line":"      true"},
{"lineNum":"  131","line":"    end"},
{"lineNum":"  132","line":"  end"},
{"lineNum":"  133","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
