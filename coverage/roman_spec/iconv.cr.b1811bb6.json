var data = {lines:[
{"lineNum":"    1","line":"require \"c/iconv\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# :nodoc:"},
{"lineNum":"    4","line":"struct Iconv"},
{"lineNum":"    5","line":"  @skip_invalid : Bool"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"  def initialize(from : String, to : String, invalid : Symbol? = nil)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"    8","line":"    original_from, original_to = from, to","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"    @skip_invalid = invalid == :skip","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   11","line":"    {% unless flag?(:freebsd) || flag?(:musl) %}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   12","line":"    if @skip_invalid"},
{"lineNum":"   13","line":"      from = \"#{from}//IGNORE\""},
{"lineNum":"   14","line":"      to = \"#{to}//IGNORE\""},
{"lineNum":"   15","line":"    end"},
{"lineNum":"   16","line":"    {% end %}"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"    @iconv = LibC.iconv_open(to, from)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    if @iconv.address == LibC::SizeT.new(-1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   21","line":"      if Errno.value == Errno::EINVAL","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   22","line":"        if original_from == \"UTF-8\""},
{"lineNum":"   23","line":"          raise ArgumentError.new(\"Invalid encoding: #{original_to}\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   24","line":"        elsif original_to == \"UTF-8\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"          raise ArgumentError.new(\"Invalid encoding: #{original_from}\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"        else"},
{"lineNum":"   27","line":"          raise ArgumentError.new(\"Invalid encoding: #{original_from} -> #{original_to}\")"},
{"lineNum":"   28","line":"        end"},
{"lineNum":"   29","line":"      else"},
{"lineNum":"   30","line":"        raise Errno.new(\"iconv_open\")","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   31","line":"      end"},
{"lineNum":"   32","line":"    end"},
{"lineNum":"   33","line":"  end"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  def self.new(from : String, to : String, invalid : Symbol? = nil)"},
{"lineNum":"   36","line":"    iconv = new(from, to, invalid)"},
{"lineNum":"   37","line":"    begin"},
{"lineNum":"   38","line":"      yield iconv"},
{"lineNum":"   39","line":"    ensure"},
{"lineNum":"   40","line":"      iconv.close"},
{"lineNum":"   41","line":"    end"},
{"lineNum":"   42","line":"  end"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"  def convert(inbuf : UInt8**, inbytesleft : LibC::SizeT*, outbuf : UInt8**, outbytesleft : LibC::SizeT*)"},
{"lineNum":"   45","line":"    {% if flag?(:freebsd) %}"},
{"lineNum":"   46","line":"    if @skip_invalid"},
{"lineNum":"   47","line":"      return LibC.__iconv(@iconv, inbuf, inbytesleft, outbuf, outbytesleft, LibC::ICONV_F_HIDE_INVALID, out invalids)"},
{"lineNum":"   48","line":"    end"},
{"lineNum":"   49","line":"    {% end %}"},
{"lineNum":"   50","line":"    LibC.iconv(@iconv, inbuf, inbytesleft, outbuf, outbytesleft)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   51","line":"  end"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"  def handle_invalid(inbuf, inbytesleft)"},
{"lineNum":"   54","line":"    if @skip_invalid","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   55","line":"      # iconv will leave inbuf right at the beginning of the invalid sequence,"},
{"lineNum":"   56","line":"      # so we just skip that byte and later we\'ll try with the next one"},
{"lineNum":"   57","line":"      if inbytesleft.value > 0","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   58","line":"        inbuf.value += 1","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   59","line":"        inbytesleft.value -= 1"},
{"lineNum":"   60","line":"      end"},
{"lineNum":"   61","line":"    else"},
{"lineNum":"   62","line":"      case Errno.value"},
{"lineNum":"   63","line":"      when Errno::EINVAL","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   64","line":"        raise ArgumentError.new \"Incomplete multibyte sequence\"","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   65","line":"      when Errno::EILSEQ"},
{"lineNum":"   66","line":"        raise ArgumentError.new \"Invalid multibyte sequence\"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   67","line":"      end"},
{"lineNum":"   68","line":"    end"},
{"lineNum":"   69","line":"  end"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"  def close"},
{"lineNum":"   72","line":"    if LibC.iconv_close(@iconv) == -1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":"      raise Errno.new(\"iconv_close\")","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   74","line":"    end"},
{"lineNum":"   75","line":"  end"},
{"lineNum":"   76","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 20, "covered" : 0,};
var merged_data = [];
