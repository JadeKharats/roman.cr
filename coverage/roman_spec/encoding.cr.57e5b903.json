var data = {lines:[
{"lineNum":"    1","line":"class IO"},
{"lineNum":"    2","line":"  # Has the `name` and the `invalid` option."},
{"lineNum":"    3","line":"  struct EncodingOptions"},
{"lineNum":"    4","line":"    getter name : String"},
{"lineNum":"    5","line":"    getter invalid : Symbol?"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"    def initialize(@name : String, @invalid : Symbol?)"},
{"lineNum":"    8","line":"      EncodingOptions.check_invalid(invalid)"},
{"lineNum":"    9","line":"    end"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"    def self.check_invalid(invalid)"},
{"lineNum":"   12","line":"      if invalid && invalid != :skip"},
{"lineNum":"   13","line":"        raise ArgumentError.new \"Valid values for `invalid` option are `nil` and `:skip`, not #{invalid.inspect}\""},
{"lineNum":"   14","line":"      end"},
{"lineNum":"   15","line":"    end"},
{"lineNum":"   16","line":"  end"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"  private class Encoder"},
{"lineNum":"   19","line":"    def initialize(@encoding_options : EncodingOptions)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   20","line":"      @iconv = Iconv.new(\"UTF-8\", encoding_options.name, encoding_options.invalid)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   21","line":"      @closed = false","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   22","line":"    end"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    def write(io, slice : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   25","line":"      inbuf_ptr = slice.to_unsafe","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   26","line":"      inbytesleft = LibC::SizeT.new(slice.size)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   27","line":"      outbuf = uninitialized UInt8[1024]"},
{"lineNum":"   28","line":"      while inbytesleft > 0","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"   29","line":"        outbuf_ptr = outbuf.to_unsafe","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   30","line":"        outbytesleft = LibC::SizeT.new(outbuf.size)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   31","line":"        err = @iconv.convert(pointerof(inbuf_ptr), pointerof(inbytesleft), pointerof(outbuf_ptr), pointerof(outbytesleft))"},
{"lineNum":"   32","line":"        if err == -1","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   33","line":"          @iconv.handle_invalid(pointerof(inbuf_ptr), pointerof(inbytesleft))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"        end"},
{"lineNum":"   35","line":"        io.write(outbuf.to_slice[0, outbuf.size - outbytesleft])","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   36","line":"      end"},
{"lineNum":"   37","line":"    end"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    def close"},
{"lineNum":"   40","line":"      return if @closed","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"      @closed = true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":"      @iconv.close"},
{"lineNum":"   43","line":"    end"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    def finalize"},
{"lineNum":"   46","line":"      close"},
{"lineNum":"   47","line":"    end"},
{"lineNum":"   48","line":"  end"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"  private class Decoder"},
{"lineNum":"   51","line":"    BUFFER_SIZE     = 4 * 1024"},
{"lineNum":"   52","line":"    OUT_BUFFER_SIZE = 4 * 1024"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    property out_slice : Bytes"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    @in_buffer : Pointer(UInt8)"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    def initialize(@encoding_options : EncodingOptions)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   59","line":"      @iconv = Iconv.new(encoding_options.name, \"UTF-8\", encoding_options.invalid)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   60","line":"      @buffer = Bytes.new((GC.malloc_atomic(BUFFER_SIZE).as(UInt8*)), BUFFER_SIZE)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   61","line":"      @in_buffer = @buffer.to_unsafe","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   62","line":"      @in_buffer_left = LibC::SizeT.new(0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   63","line":"      @out_buffer = Bytes.new((GC.malloc_atomic(OUT_BUFFER_SIZE).as(UInt8*)), OUT_BUFFER_SIZE)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   64","line":"      @out_slice = Bytes.empty","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   65","line":"      @closed = false","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   66","line":"    end"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    def read(io)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   69","line":"      loop do"},
{"lineNum":"   70","line":"        return unless @out_slice.empty?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"        if @in_buffer_left == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":"          @in_buffer = @buffer.to_unsafe","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   74","line":"          @in_buffer_left = LibC::SizeT.new(io.read(@buffer))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   75","line":"        end"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"        # If we just have a few bytes to decode, read more, just in case these don\'t produce a character"},
{"lineNum":"   78","line":"        if @in_buffer_left < 16","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   79","line":"          buffer_remaining = BUFFER_SIZE - @in_buffer_left - (@in_buffer - @buffer.to_unsafe)"},
{"lineNum":"   80","line":"          @buffer.copy_from(@in_buffer, @in_buffer_left)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   81","line":"          @in_buffer = @buffer.to_unsafe","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":"          @in_buffer_left += LibC::SizeT.new(io.read(Slice.new(@in_buffer + @in_buffer_left, buffer_remaining)))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   83","line":"        end"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"        # If, after refilling the buffer, we couldn\'t read new bytes"},
{"lineNum":"   86","line":"        # it means we reached the end"},
{"lineNum":"   87","line":"        break if @in_buffer_left == 0","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"        # Convert bytes using iconv"},
{"lineNum":"   90","line":"        out_buffer = @out_buffer.to_unsafe","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   91","line":"        out_buffer_left = LibC::SizeT.new(OUT_BUFFER_SIZE)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   92","line":"        result = @iconv.convert(pointerof(@in_buffer), pointerof(@in_buffer_left), pointerof(out_buffer), pointerof(out_buffer_left))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   93","line":"        @out_slice = @out_buffer[0, OUT_BUFFER_SIZE - out_buffer_left]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"        # Check for errors"},
{"lineNum":"   96","line":"        if result == -1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   97","line":"          case Errno.value"},
{"lineNum":"   98","line":"          when Errno::EILSEQ","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   99","line":"            # For an illegal sequence we just skip one byte and we\'ll continue next"},
{"lineNum":"  100","line":"            @iconv.handle_invalid(pointerof(@in_buffer), pointerof(@in_buffer_left))"},
{"lineNum":"  101","line":"          when Errno::EINVAL","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  102","line":"            # EINVAL means \"An incomplete multibyte sequence has been encountered in the input.\""},
{"lineNum":"  103","line":"            old_in_buffer_left = @in_buffer_left"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"            # On invalid multibyte sequence we try to read more bytes"},
{"lineNum":"  106","line":"            # to see if they complete the sequence"},
{"lineNum":"  107","line":"            refill_in_buffer(io)"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"            # If we couldn\'t read anything new, we raise or skip"},
{"lineNum":"  110","line":"            if old_in_buffer_left == @in_buffer_left","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  111","line":"              @iconv.handle_invalid(pointerof(@in_buffer), pointerof(@in_buffer_left))"},
{"lineNum":"  112","line":"            end"},
{"lineNum":"  113","line":"          end"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"          # Continue decoding after an error"},
{"lineNum":"  116","line":"          next"},
{"lineNum":"  117","line":"        end"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"        break"},
{"lineNum":"  120","line":"      end"},
{"lineNum":"  121","line":"    end"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    private def refill_in_buffer(io)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":"      buffer_remaining = BUFFER_SIZE - @in_buffer_left - (@in_buffer - @buffer.to_unsafe)"},
{"lineNum":"  125","line":"      if buffer_remaining < 64","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":"        @buffer.copy_from(@in_buffer, @in_buffer_left)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"        @in_buffer = @buffer.to_unsafe","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  128","line":"        buffer_remaining = BUFFER_SIZE - @in_buffer_left","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  129","line":"      end"},
{"lineNum":"  130","line":"      @in_buffer_left += LibC::SizeT.new(io.read(Slice.new(@in_buffer + @in_buffer_left, buffer_remaining)))","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  131","line":"    end"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    def read_byte(io)"},
{"lineNum":"  134","line":"      read(io)"},
{"lineNum":"  135","line":"      if out_slice.empty?"},
{"lineNum":"  136","line":"        nil"},
{"lineNum":"  137","line":"      else"},
{"lineNum":"  138","line":"        byte = out_slice.to_unsafe.value"},
{"lineNum":"  139","line":"        advance 1"},
{"lineNum":"  140","line":"        byte"},
{"lineNum":"  141","line":"      end"},
{"lineNum":"  142","line":"    end"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    def read_utf8(io, slice)"},
{"lineNum":"  145","line":"      count = 0"},
{"lineNum":"  146","line":"      until slice.empty?"},
{"lineNum":"  147","line":"        read(io)"},
{"lineNum":"  148","line":"        break if out_slice.empty?"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"        available = Math.min(out_slice.size, slice.size)"},
{"lineNum":"  151","line":"        out_slice[0, available].copy_to(slice.to_unsafe, available)"},
{"lineNum":"  152","line":"        advance(available)"},
{"lineNum":"  153","line":"        count += available"},
{"lineNum":"  154","line":"        slice += available"},
{"lineNum":"  155","line":"      end"},
{"lineNum":"  156","line":"      count"},
{"lineNum":"  157","line":"    end"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    def gets(io, delimiter : UInt8, limit : Int, chomp)"},
{"lineNum":"  160","line":"      read(io)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  161","line":"      return nil if @out_slice.empty?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"      index = @out_slice.index(delimiter)"},
{"lineNum":"  164","line":"      if index","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  165","line":"        # If we find it past the limit, limit the result"},
{"lineNum":"  166","line":"        if index >= limit","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  167","line":"          index = limit","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  168","line":"        else"},
{"lineNum":"  169","line":"          index += 1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  170","line":"        end"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"        return gets_index(index, delimiter, chomp)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"      end"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"      # Check if there\'s limit bytes in the out slice"},
{"lineNum":"  176","line":"      if @out_slice.size >= limit","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  177","line":"        return gets_index(limit, delimiter, chomp)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  178","line":"      end"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"      # We need to read from the out_slice into a String until we find that byte,"},
{"lineNum":"  181","line":"      # or until we consumed limit bytes"},
{"lineNum":"  182","line":"      String.build do |str|"},
{"lineNum":"  183","line":"        loop do"},
{"lineNum":"  184","line":"          limit -= @out_slice.size"},
{"lineNum":"  185","line":"          write str"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"          read(io)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"          break if @out_slice.empty?"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"          index = @out_slice.index(delimiter)"},
{"lineNum":"  192","line":"          if index","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  193","line":"            if index >= limit","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  194","line":"              index = limit","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  195","line":"            else"},
{"lineNum":"  196","line":"              index += 1"},
{"lineNum":"  197","line":"            end"},
{"lineNum":"  198","line":"            write str, index","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  199","line":"            break"},
{"lineNum":"  200","line":"          else"},
{"lineNum":"  201","line":"            if limit < @out_slice.size","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  202","line":"              write(str, limit)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  203","line":"              break"},
{"lineNum":"  204","line":"            end"},
{"lineNum":"  205","line":"          end"},
{"lineNum":"  206","line":"        end"},
{"lineNum":"  207","line":"        str.chomp!(delimiter) if chomp"},
{"lineNum":"  208","line":"      end"},
{"lineNum":"  209","line":"    end"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    private def gets_index(index, delimiter, chomp)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":"      advance_increment = index"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"      if chomp && index > 0 && @out_slice[index - 1] === delimiter"},
{"lineNum":"  215","line":"        index -= 1"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"        if delimiter === \'\\n\' && index > 0 && @out_slice[index - 1] === \'\\r\'","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":"          index -= 1"},
{"lineNum":"  219","line":"        end"},
{"lineNum":"  220","line":"      end"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"      string = String.new(@out_slice[0, index])"},
{"lineNum":"  223","line":"      advance(advance_increment)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":"      string"},
{"lineNum":"  225","line":"    end"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    def write(io)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  228","line":"      io.write @out_slice","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  229","line":"      @out_slice = Bytes.empty","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  230","line":"    end"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    def write(io, numbytes)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"      io.write @out_slice[0, numbytes]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":"      @out_slice += numbytes","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"    end"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    def advance(numbytes)"},
{"lineNum":"  238","line":"      @out_slice += numbytes","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"    end"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    def close"},
{"lineNum":"  242","line":"      return if @closed","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"      @closed = true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"      @iconv.close"},
{"lineNum":"  246","line":"    end"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    def finalize"},
{"lineNum":"  249","line":"      close"},
{"lineNum":"  250","line":"    end"},
{"lineNum":"  251","line":"  end"},
{"lineNum":"  252","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 74, "covered" : 0,};
var merged_data = [];
