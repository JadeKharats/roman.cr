var data = {lines:[
{"lineNum":"    1","line":"module Spec::Methods"},
{"lineNum":"    2","line":"  # Defines an example group that describes a unit to be tested."},
{"lineNum":"    3","line":"  # Inside *&block* examples are defined by `#it` or `#pending`."},
{"lineNum":"    4","line":"  #"},
{"lineNum":"    5","line":"  # Several `describe` blocks can be nested."},
{"lineNum":"    6","line":"  #"},
{"lineNum":"    7","line":"  # Example:"},
{"lineNum":"    8","line":"  # ```"},
{"lineNum":"    9","line":"  # describe \"Int32\" do"},
{"lineNum":"   10","line":"  #   describe \"+\" do"},
{"lineNum":"   11","line":"  #     it \"adds\" { (1 + 1).should eq 2 }"},
{"lineNum":"   12","line":"  #   end"},
{"lineNum":"   13","line":"  # end"},
{"lineNum":"   14","line":"  # ```"},
{"lineNum":"   15","line":"  def describe(description, file = __FILE__, line = __LINE__, &block)"},
{"lineNum":"   16","line":"    Spec::RootContext.describe(description.to_s, file, line, &block)"},
{"lineNum":"   17","line":"  end"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"  # Defines an example group that establishes a specific context,"},
{"lineNum":"   20","line":"  # like *empty array* versus *array with elements*."},
{"lineNum":"   21","line":"  # Inside *&block* examples are defined by `#it` or `#pending`."},
{"lineNum":"   22","line":"  #"},
{"lineNum":"   23","line":"  # It is functionally equivalent to `#describe`."},
{"lineNum":"   24","line":"  def context(description, file = __FILE__, line = __LINE__, &block)"},
{"lineNum":"   25","line":"    describe(description.to_s, file, line, &block)"},
{"lineNum":"   26","line":"  end"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"  # Defines a concrete test case."},
{"lineNum":"   29","line":"  #"},
{"lineNum":"   30","line":"  # The test is performed by the block supplied to *&block*."},
{"lineNum":"   31","line":"  #"},
{"lineNum":"   32","line":"  # Example:"},
{"lineNum":"   33","line":"  # ```"},
{"lineNum":"   34","line":"  # it \"adds\" { (1 + 1).should eq 2 }"},
{"lineNum":"   35","line":"  # ```"},
{"lineNum":"   36","line":"  #"},
{"lineNum":"   37","line":"  # It is usually used inside a `#describe` or `#context` section."},
{"lineNum":"   38","line":"  def it(description = \"assert\", file = __FILE__, line = __LINE__, end_line = __END_LINE__, &block)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":"    return unless Spec.matches?(description, file, line, end_line)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    Spec.formatters.each(&.before_example(description))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    start = Time.monotonic"},
{"lineNum":"   44","line":"    begin"},
{"lineNum":"   45","line":"      Spec.run_before_each_hooks","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   46","line":"      block.call"},
{"lineNum":"   47","line":"      Spec::RootContext.report(:success, description, file, line, Time.monotonic - start)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   48","line":"    rescue ex : Spec::AssertionFailed"},
{"lineNum":"   49","line":"      Spec::RootContext.report(:fail, description, file, line, Time.monotonic - start, ex)"},
{"lineNum":"   50","line":"      Spec.abort! if Spec.fail_fast?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   51","line":"    rescue ex"},
{"lineNum":"   52","line":"      Spec::RootContext.report(:error, description, file, line, Time.monotonic - start, ex)"},
{"lineNum":"   53","line":"      Spec.abort! if Spec.fail_fast?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"    ensure"},
{"lineNum":"   55","line":"      Spec.run_after_each_hooks"},
{"lineNum":"   56","line":"    end"},
{"lineNum":"   57","line":"  end"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"  # Defines a pending test case."},
{"lineNum":"   60","line":"  #"},
{"lineNum":"   61","line":"  # *&block* is never evaluated."},
{"lineNum":"   62","line":"  # It can be used to describe behaviour that is not yet implemented."},
{"lineNum":"   63","line":"  #"},
{"lineNum":"   64","line":"  # Example:"},
{"lineNum":"   65","line":"  # ```"},
{"lineNum":"   66","line":"  # pending \"check cat\" { cat.alive? }"},
{"lineNum":"   67","line":"  # ```"},
{"lineNum":"   68","line":"  #"},
{"lineNum":"   69","line":"  # It is usually used inside a `#describe` or `#context` section."},
{"lineNum":"   70","line":"  def pending(description = \"assert\", file = __FILE__, line = __LINE__, end_line = __END_LINE__, &block)"},
{"lineNum":"   71","line":"    return unless Spec.matches?(description, file, line, end_line)"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    Spec.formatters.each(&.before_example(description))"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"    Spec::RootContext.report(:pending, description, file, line)"},
{"lineNum":"   76","line":"  end"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"  # DEPRECATED: Use `#it`"},
{"lineNum":"   79","line":"  def assert(file = __FILE__, line = __LINE__, end_line = __END_LINE__, &block)"},
{"lineNum":"   80","line":"    {{ raise \"\'assert\' was removed: use \'it\' instead\".id }}"},
{"lineNum":"   81","line":"  end"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"  # Fails an example."},
{"lineNum":"   84","line":"  #"},
{"lineNum":"   85","line":"  # This method can be used to manually fail an example defined in an `#it` block."},
{"lineNum":"   86","line":"  def fail(msg, file = __FILE__, line = __LINE__)"},
{"lineNum":"   87","line":"    raise Spec::AssertionFailed.new(msg, file, line)"},
{"lineNum":"   88","line":"  end"},
{"lineNum":"   89","line":"end"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"include Spec::Methods"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
