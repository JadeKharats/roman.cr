var data = {lines:[
{"lineNum":"    1","line":"# Defines a byte format to encode integers and floats"},
{"lineNum":"    2","line":"# from/to `Bytes` and `IO`."},
{"lineNum":"    3","line":"#"},
{"lineNum":"    4","line":"# ### Decode from bytes"},
{"lineNum":"    5","line":"#"},
{"lineNum":"    6","line":"# ```"},
{"lineNum":"    7","line":"# bytes = Bytes[0x34, 0x12]"},
{"lineNum":"    8","line":"# int16 = IO::ByteFormat::LittleEndian.decode(Int16, bytes)"},
{"lineNum":"    9","line":"# int16 # => 0x1234_i16"},
{"lineNum":"   10","line":"# ```"},
{"lineNum":"   11","line":"#"},
{"lineNum":"   12","line":"# ### Decode from an IO"},
{"lineNum":"   13","line":"#"},
{"lineNum":"   14","line":"# ```"},
{"lineNum":"   15","line":"# io = IO::Memory.new(Bytes[0x34, 0x12])"},
{"lineNum":"   16","line":"# int16 = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)"},
{"lineNum":"   17","line":"# int16 # => 0x1234_i16"},
{"lineNum":"   18","line":"# ```"},
{"lineNum":"   19","line":"#"},
{"lineNum":"   20","line":"# ### Encode to bytes"},
{"lineNum":"   21","line":"#"},
{"lineNum":"   22","line":"# ```"},
{"lineNum":"   23","line":"# raw = uninitialized UInt8[2]"},
{"lineNum":"   24","line":"# IO::ByteFormat::LittleEndian.encode(0x1234_i16, raw.to_slice)"},
{"lineNum":"   25","line":"# raw # => StaticArray[0x34, 0x12]"},
{"lineNum":"   26","line":"# ```"},
{"lineNum":"   27","line":"#"},
{"lineNum":"   28","line":"# ### Encode to IO"},
{"lineNum":"   29","line":"#"},
{"lineNum":"   30","line":"# ```"},
{"lineNum":"   31","line":"# io = IO::Memory.new"},
{"lineNum":"   32","line":"# io.write_bytes(0x1234_i16, IO::ByteFormat::LittleEndian)"},
{"lineNum":"   33","line":"# io.to_slice # => Bytes[0x34, 0x12]"},
{"lineNum":"   34","line":"# ```"},
{"lineNum":"   35","line":"module IO::ByteFormat"},
{"lineNum":"   36","line":"  abstract def encode(int : Int8, io : IO)"},
{"lineNum":"   37","line":"  abstract def encode(int : UInt8, io : IO)"},
{"lineNum":"   38","line":"  abstract def encode(int : Int16, io : IO)"},
{"lineNum":"   39","line":"  abstract def encode(int : UInt16, io : IO)"},
{"lineNum":"   40","line":"  abstract def encode(int : Int32, io : IO)"},
{"lineNum":"   41","line":"  abstract def encode(int : UInt32, io : IO)"},
{"lineNum":"   42","line":"  abstract def encode(int : Int64, io : IO)"},
{"lineNum":"   43","line":"  abstract def encode(int : UInt64, io : IO)"},
{"lineNum":"   44","line":"  abstract def encode(int : Int128, io : IO)"},
{"lineNum":"   45","line":"  abstract def encode(int : UInt128, io : IO)"},
{"lineNum":"   46","line":"  abstract def encode(int : Float32, io : IO)"},
{"lineNum":"   47","line":"  abstract def encode(int : Float64, io : IO)"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"  abstract def encode(int : Int8, bytes : Bytes)"},
{"lineNum":"   50","line":"  abstract def encode(int : UInt8, bytes : Bytes)"},
{"lineNum":"   51","line":"  abstract def encode(int : Int16, bytes : Bytes)"},
{"lineNum":"   52","line":"  abstract def encode(int : UInt16, bytes : Bytes)"},
{"lineNum":"   53","line":"  abstract def encode(int : Int32, bytes : Bytes)"},
{"lineNum":"   54","line":"  abstract def encode(int : UInt32, bytes : Bytes)"},
{"lineNum":"   55","line":"  abstract def encode(int : Int64, bytes : Bytes)"},
{"lineNum":"   56","line":"  abstract def encode(int : UInt64, bytes : Bytes)"},
{"lineNum":"   57","line":"  abstract def encode(int : Int128, bytes : Bytes)"},
{"lineNum":"   58","line":"  abstract def encode(int : UInt128, bytes : Bytes)"},
{"lineNum":"   59","line":"  abstract def encode(int : Float32, bytes : Bytes)"},
{"lineNum":"   60","line":"  abstract def encode(int : Float64, bytes : Bytes)"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"  abstract def decode(int : Int8.class, io : IO)"},
{"lineNum":"   63","line":"  abstract def decode(int : UInt8.class, io : IO)"},
{"lineNum":"   64","line":"  abstract def decode(int : Int16.class, io : IO)"},
{"lineNum":"   65","line":"  abstract def decode(int : UInt16.class, io : IO)"},
{"lineNum":"   66","line":"  abstract def decode(int : Int32.class, io : IO)"},
{"lineNum":"   67","line":"  abstract def decode(int : UInt32.class, io : IO)"},
{"lineNum":"   68","line":"  abstract def decode(int : Int64.class, io : IO)"},
{"lineNum":"   69","line":"  abstract def decode(int : UInt64.class, io : IO)"},
{"lineNum":"   70","line":"  abstract def decode(int : Int128.class, io : IO)"},
{"lineNum":"   71","line":"  abstract def decode(int : UInt128.class, io : IO)"},
{"lineNum":"   72","line":"  abstract def decode(int : Float32.class, io : IO)"},
{"lineNum":"   73","line":"  abstract def decode(int : Float64.class, io : IO)"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"  abstract def decode(int : Int8.class, bytes : Bytes)"},
{"lineNum":"   76","line":"  abstract def decode(int : UInt8.class, bytes : Bytes)"},
{"lineNum":"   77","line":"  abstract def decode(int : Int16.class, bytes : Bytes)"},
{"lineNum":"   78","line":"  abstract def decode(int : UInt16.class, bytes : Bytes)"},
{"lineNum":"   79","line":"  abstract def decode(int : Int32.class, bytes : Bytes)"},
{"lineNum":"   80","line":"  abstract def decode(int : UInt32.class, bytes : Bytes)"},
{"lineNum":"   81","line":"  abstract def decode(int : Int64.class, bytes : Bytes)"},
{"lineNum":"   82","line":"  abstract def decode(int : UInt64.class, bytes : Bytes)"},
{"lineNum":"   83","line":"  abstract def decode(int : Int128.class, bytes : Bytes)"},
{"lineNum":"   84","line":"  abstract def decode(int : UInt128.class, bytes : Bytes)"},
{"lineNum":"   85","line":"  abstract def decode(int : Float32.class, bytes : Bytes)"},
{"lineNum":"   86","line":"  abstract def decode(int : Float64.class, bytes : Bytes)"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"  def encode(float : Float32, io : IO)"},
{"lineNum":"   89","line":"    encode(float.unsafe_as(Int32), io)"},
{"lineNum":"   90","line":"  end"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  def encode(float : Float32, bytes : Bytes)"},
{"lineNum":"   93","line":"    encode(float.unsafe_as(Int32), bytes)"},
{"lineNum":"   94","line":"  end"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"  def decode(type : Float32.class, io : IO)"},
{"lineNum":"   97","line":"    decode(Int32, io).unsafe_as(Float32)"},
{"lineNum":"   98","line":"  end"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"  def decode(type : Float32.class, bytes : Bytes)"},
{"lineNum":"  101","line":"    decode(Int32, bytes).unsafe_as(Float32)"},
{"lineNum":"  102","line":"  end"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"  def encode(float : Float64, io : IO)"},
{"lineNum":"  105","line":"    encode(float.unsafe_as(Int64), io)"},
{"lineNum":"  106","line":"  end"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"  def encode(float : Float64, bytes : Bytes)"},
{"lineNum":"  109","line":"    encode(float.unsafe_as(Int64), bytes)"},
{"lineNum":"  110","line":"  end"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  def decode(type : Float64.class, io : IO)"},
{"lineNum":"  113","line":"    decode(Int64, io).unsafe_as(Float64)"},
{"lineNum":"  114","line":"  end"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"  def decode(type : Float64.class, bytes : Bytes)"},
{"lineNum":"  117","line":"    decode(Int64, bytes).unsafe_as(Float64)"},
{"lineNum":"  118","line":"  end"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"  module LittleEndian"},
{"lineNum":"  121","line":"    extend ByteFormat"},
{"lineNum":"  122","line":"  end"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  module BigEndian"},
{"lineNum":"  125","line":"    extend ByteFormat"},
{"lineNum":"  126","line":"  end"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"  alias SystemEndian = LittleEndian"},
{"lineNum":"  129","line":"  alias NetworkEndian = BigEndian"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"  {% for mod in %w(LittleEndian BigEndian) %}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"    module {{mod.id}}"},
{"lineNum":"  133","line":"      {% for type, i in %w(Int8 UInt8 Int16 UInt16 Int32 UInt32 Int64 UInt64 Int128 UInt128) %}"},
{"lineNum":"  134","line":"        {% bytesize = 2 ** (i / 2) %}"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"        def self.encode(int : {{type.id}}, io : IO)"},
{"lineNum":"  137","line":"          buffer = int.unsafe_as(StaticArray(UInt8, {{bytesize}}))"},
{"lineNum":"  138","line":"          buffer.reverse! unless SystemEndian == self"},
{"lineNum":"  139","line":"          io.write(buffer.to_slice)"},
{"lineNum":"  140","line":"        end"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"        def self.encode(int : {{type.id}}, bytes : Bytes)"},
{"lineNum":"  143","line":"          buffer = int.unsafe_as(StaticArray(UInt8, {{bytesize}}))"},
{"lineNum":"  144","line":"          buffer.reverse! unless SystemEndian == self"},
{"lineNum":"  145","line":"          buffer.to_slice.copy_to(bytes)"},
{"lineNum":"  146","line":"        end"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"        def self.decode(type : {{type.id}}.class, io : IO)"},
{"lineNum":"  149","line":"          buffer = uninitialized UInt8[{{bytesize}}]"},
{"lineNum":"  150","line":"          io.read_fully(buffer.to_slice)"},
{"lineNum":"  151","line":"          buffer.reverse! unless SystemEndian == self"},
{"lineNum":"  152","line":"          buffer.unsafe_as({{type.id}})"},
{"lineNum":"  153","line":"        end"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"        def self.decode(type : {{type.id}}.class, bytes : Bytes)"},
{"lineNum":"  156","line":"          buffer = uninitialized UInt8[{{bytesize}}]"},
{"lineNum":"  157","line":"          bytes.to_slice[0, {{bytesize}}].copy_to(buffer.to_slice)"},
{"lineNum":"  158","line":"          buffer.reverse! unless SystemEndian == self"},
{"lineNum":"  159","line":"          buffer.unsafe_as({{type.id}})"},
{"lineNum":"  160","line":"        end"},
{"lineNum":"  161","line":"      {% end %}"},
{"lineNum":"  162","line":"    end"},
{"lineNum":"  163","line":"  {% end %}"},
{"lineNum":"  164","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
