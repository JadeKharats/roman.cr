var data = {lines:[
{"lineNum":"    1","line":"require \"c/stdlib\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# `ENV` is a hash-like accessor for environment variables."},
{"lineNum":"    4","line":"#"},
{"lineNum":"    5","line":"# ### Example"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# ```"},
{"lineNum":"    8","line":"# # Set env var PORT to a default if not already set"},
{"lineNum":"    9","line":"# ENV[\"PORT\"] ||= \"5000\""},
{"lineNum":"   10","line":"# # Later use that env var."},
{"lineNum":"   11","line":"# puts ENV[\"PORT\"].to_i"},
{"lineNum":"   12","line":"# ```"},
{"lineNum":"   13","line":"#"},
{"lineNum":"   14","line":"# NOTE: All keys and values are strings. You must take care to cast other types"},
{"lineNum":"   15","line":"# at runtime, e.g. integer port numbers."},
{"lineNum":"   16","line":"module ENV"},
{"lineNum":"   17","line":"  extend Enumerable({String, String})"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"  # Retrieves the value for environment variable named *key* as a `String`."},
{"lineNum":"   20","line":"  # Raises `KeyError` if the named variable does not exist."},
{"lineNum":"   21","line":"  def self.[](key : String) : String"},
{"lineNum":"   22","line":"    fetch(key)"},
{"lineNum":"   23","line":"  end"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"  # Retrieves the value for environment variable named *key* as a `String?`."},
{"lineNum":"   26","line":"  # Returns `nil` if the named variable does not exist."},
{"lineNum":"   27","line":"  def self.[]?(key : String) : String?"},
{"lineNum":"   28","line":"    fetch(key, nil)"},
{"lineNum":"   29","line":"  end"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"  # Sets the value for environment variable named *key* as *value*."},
{"lineNum":"   32","line":"  # Overwrites existing environment variable if already present."},
{"lineNum":"   33","line":"  # Returns *value* if successful, otherwise raises an exception."},
{"lineNum":"   34","line":"  # If *value* is `nil`, the environment variable is deleted."},
{"lineNum":"   35","line":"  #"},
{"lineNum":"   36","line":"  # If *key* or *value* contains a null-byte an `ArgumentError` is raised."},
{"lineNum":"   37","line":"  def self.[]=(key : String, value : String?)"},
{"lineNum":"   38","line":"    raise ArgumentError.new(\"Key contains null byte\") if key.byte_index(0)"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    if value"},
{"lineNum":"   41","line":"      raise ArgumentError.new(\"Value contains null byte\") if value.byte_index(0)"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"      if LibC.setenv(key, value, 1) != 0"},
{"lineNum":"   44","line":"        raise Errno.new(\"Error setting environment variable #{key.inspect}\")"},
{"lineNum":"   45","line":"      end"},
{"lineNum":"   46","line":"    else"},
{"lineNum":"   47","line":"      LibC.unsetenv(key)"},
{"lineNum":"   48","line":"    end"},
{"lineNum":"   49","line":"    value"},
{"lineNum":"   50","line":"  end"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"  # Returns `true` if the environment variable named *key* exists and `false`"},
{"lineNum":"   53","line":"  # if it doesn\'t."},
{"lineNum":"   54","line":"  def self.has_key?(key : String) : Bool"},
{"lineNum":"   55","line":"    !!LibC.getenv(key)"},
{"lineNum":"   56","line":"  end"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"  # Retrieves a value corresponding to the given *key*. Raises a `KeyError` exception if the"},
{"lineNum":"   59","line":"  # key does not exist."},
{"lineNum":"   60","line":"  def self.fetch(key) : String"},
{"lineNum":"   61","line":"    fetch(key) do"},
{"lineNum":"   62","line":"      raise KeyError.new \"Missing ENV key: #{key.inspect}\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"    end"},
{"lineNum":"   64","line":"  end"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"  # Retrieves a value corresponding to the given *key*. Return the second argument\'s value"},
{"lineNum":"   67","line":"  # if the *key* does not exist."},
{"lineNum":"   68","line":"  def self.fetch(key, default)"},
{"lineNum":"   69","line":"    fetch(key) { default }"},
{"lineNum":"   70","line":"  end"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"  # Retrieves a value corresponding to a given *key*. Return the value of the block if"},
{"lineNum":"   73","line":"  # the *key* does not exist."},
{"lineNum":"   74","line":"  def self.fetch(key : String, &block : String -> String? | NoReturn)"},
{"lineNum":"   75","line":"    value = LibC.getenv key","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   76","line":"    return String.new(value) if value","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   77","line":"    yield(key)"},
{"lineNum":"   78","line":"  end"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  # Returns an array of all the environment variable names."},
{"lineNum":"   81","line":"  def self.keys : Array(String)"},
{"lineNum":"   82","line":"    keys = [] of String"},
{"lineNum":"   83","line":"    each { |key, v| keys << key }"},
{"lineNum":"   84","line":"    keys"},
{"lineNum":"   85","line":"  end"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"  # Returns an array of all the environment variable values."},
{"lineNum":"   88","line":"  def self.values : Array(String)"},
{"lineNum":"   89","line":"    values = [] of String"},
{"lineNum":"   90","line":"    each { |k, value| values << value }"},
{"lineNum":"   91","line":"    values"},
{"lineNum":"   92","line":"  end"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  # Removes the environment variable named *key*. Returns the previous value if"},
{"lineNum":"   95","line":"  # the environment variable existed, otherwise returns `nil`."},
{"lineNum":"   96","line":"  def self.delete(key : String) : String?"},
{"lineNum":"   97","line":"    if value = self[key]?"},
{"lineNum":"   98","line":"      LibC.unsetenv(key)"},
{"lineNum":"   99","line":"      value"},
{"lineNum":"  100","line":"    else"},
{"lineNum":"  101","line":"      nil"},
{"lineNum":"  102","line":"    end"},
{"lineNum":"  103","line":"  end"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"  # Iterates over all `KEY=VALUE` pairs of environment variables, yielding both"},
{"lineNum":"  106","line":"  # the *key* and *value*."},
{"lineNum":"  107","line":"  #"},
{"lineNum":"  108","line":"  # ```"},
{"lineNum":"  109","line":"  # ENV.each do |key, value|"},
{"lineNum":"  110","line":"  #   puts \"#{key} => #{value}\""},
{"lineNum":"  111","line":"  # end"},
{"lineNum":"  112","line":"  # ```"},
{"lineNum":"  113","line":"  def self.each"},
{"lineNum":"  114","line":"    environ_ptr = LibC.environ"},
{"lineNum":"  115","line":"    while environ_ptr"},
{"lineNum":"  116","line":"      environ_value = environ_ptr.value"},
{"lineNum":"  117","line":"      if environ_value"},
{"lineNum":"  118","line":"        key_value = String.new(environ_value).split(\'=\', 2)"},
{"lineNum":"  119","line":"        key = key_value[0]"},
{"lineNum":"  120","line":"        value = key_value[1]? || \"\""},
{"lineNum":"  121","line":"        yield({key, value})"},
{"lineNum":"  122","line":"        environ_ptr += 1"},
{"lineNum":"  123","line":"      else"},
{"lineNum":"  124","line":"        break"},
{"lineNum":"  125","line":"      end"},
{"lineNum":"  126","line":"    end"},
{"lineNum":"  127","line":"  end"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"  def self.clear"},
{"lineNum":"  130","line":"    keys.each { |k| delete k }"},
{"lineNum":"  131","line":"  end"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"  # Writes the contents of the environment to *io*."},
{"lineNum":"  134","line":"  def self.inspect(io)"},
{"lineNum":"  135","line":"    io << \"{\""},
{"lineNum":"  136","line":"    found_one = false"},
{"lineNum":"  137","line":"    each do |key, value|"},
{"lineNum":"  138","line":"      io << \", \" if found_one"},
{"lineNum":"  139","line":"      key.inspect(io)"},
{"lineNum":"  140","line":"      io << \" => \""},
{"lineNum":"  141","line":"      value.inspect(io)"},
{"lineNum":"  142","line":"      found_one = true"},
{"lineNum":"  143","line":"    end"},
{"lineNum":"  144","line":"    io << \"}\""},
{"lineNum":"  145","line":"  end"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  def self.pretty_print(pp)"},
{"lineNum":"  148","line":"    pp.list(\"{\", keys.sort, \"}\") do |key|"},
{"lineNum":"  149","line":"      pp.group do"},
{"lineNum":"  150","line":"        key.pretty_print(pp)"},
{"lineNum":"  151","line":"        pp.text \" =>\""},
{"lineNum":"  152","line":"        pp.nest do"},
{"lineNum":"  153","line":"          pp.breakable"},
{"lineNum":"  154","line":"          self[key].pretty_print(pp)"},
{"lineNum":"  155","line":"        end"},
{"lineNum":"  156","line":"      end"},
{"lineNum":"  157","line":"    end"},
{"lineNum":"  158","line":"  end"},
{"lineNum":"  159","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
