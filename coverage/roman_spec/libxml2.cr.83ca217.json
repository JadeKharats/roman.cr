var data = {lines:[
{"lineNum":"    1","line":"require \"./type\""},
{"lineNum":"    2","line":"require \"./parser_options\""},
{"lineNum":"    3","line":"require \"./html_parser_options\""},
{"lineNum":"    4","line":"require \"./save_options\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"@[Link(\"xml2\")]"},
{"lineNum":"    7","line":"lib LibXML"},
{"lineNum":"    8","line":"  alias Int = LibC::Int"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"  $xmlIndentTreeOutput : Int"},
{"lineNum":"   11","line":"  $xmlTreeIndentString : UInt8*"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"  type Dtd = Void*"},
{"lineNum":"   14","line":"  type Dict = Void*"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"  struct NS"},
{"lineNum":"   17","line":"    next : NS*"},
{"lineNum":"   18","line":"    type : XML::Type"},
{"lineNum":"   19","line":"    href : UInt8*"},
{"lineNum":"   20","line":"    prefix : UInt8*"},
{"lineNum":"   21","line":"    _private : Void*"},
{"lineNum":"   22","line":"    context : Doc*"},
{"lineNum":"   23","line":"  end"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"  struct NodeCommon"},
{"lineNum":"   26","line":"    _private : Void*"},
{"lineNum":"   27","line":"    type : XML::Type"},
{"lineNum":"   28","line":"    name : UInt8*"},
{"lineNum":"   29","line":"    children : Node*"},
{"lineNum":"   30","line":"    last : Node*"},
{"lineNum":"   31","line":"    parent : Node*"},
{"lineNum":"   32","line":"    next : Node*"},
{"lineNum":"   33","line":"    prev : Node*"},
{"lineNum":"   34","line":"    doc : Doc*"},
{"lineNum":"   35","line":"  end"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"  struct Doc"},
{"lineNum":"   38","line":"    include NodeCommon"},
{"lineNum":"   39","line":"    compression : Int"},
{"lineNum":"   40","line":"    standalone : Int"},
{"lineNum":"   41","line":"    int_subset : Dtd"},
{"lineNum":"   42","line":"    ext_subset : Dtd"},
{"lineNum":"   43","line":"    old_ns : NS*"},
{"lineNum":"   44","line":"    version : UInt8*"},
{"lineNum":"   45","line":"    encoding : UInt8*"},
{"lineNum":"   46","line":"    ids : Void*"},
{"lineNum":"   47","line":"    refs : Void*"},
{"lineNum":"   48","line":"    url : UInt8*"},
{"lineNum":"   49","line":"    charset : Int"},
{"lineNum":"   50","line":"    dict : Dict"},
{"lineNum":"   51","line":"    psvi : Void*"},
{"lineNum":"   52","line":"    parse_flags : Int"},
{"lineNum":"   53","line":"    properties : Int"},
{"lineNum":"   54","line":"  end"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"  struct Attr"},
{"lineNum":"   57","line":"    include NodeCommon"},
{"lineNum":"   58","line":"    ns : NS*"},
{"lineNum":"   59","line":"    atype : XML::AttributeType"},
{"lineNum":"   60","line":"    psvi : Void*"},
{"lineNum":"   61","line":"  end"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  struct Node"},
{"lineNum":"   64","line":"    include NodeCommon"},
{"lineNum":"   65","line":"    ns : NS*"},
{"lineNum":"   66","line":"    content : UInt8*"},
{"lineNum":"   67","line":"    properties : Attr*"},
{"lineNum":"   68","line":"    ns_def : NS*"},
{"lineNum":"   69","line":"    psvi : Void*"},
{"lineNum":"   70","line":"    line : UInt16"},
{"lineNum":"   71","line":"    extra : UInt16"},
{"lineNum":"   72","line":"  end"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"  struct NodeSet"},
{"lineNum":"   75","line":"    node_nr : Int"},
{"lineNum":"   76","line":"    node_max : Int"},
{"lineNum":"   77","line":"    node_tab : Node**"},
{"lineNum":"   78","line":"  end"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  type InputBuffer = Void*"},
{"lineNum":"   81","line":"  type XMLTextReader = Void*"},
{"lineNum":"   82","line":"  type XMLTextReaderLocator = Void*"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"  enum ParserSeverity"},
{"lineNum":"   85","line":"    VALIDITY_WARNING = 1"},
{"lineNum":"   86","line":"    VALIDITY_ERROR   = 2"},
{"lineNum":"   87","line":"    WARNING          = 3"},
{"lineNum":"   88","line":"    ERROR            = 4"},
{"lineNum":"   89","line":"  end"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"  alias TextReaderErrorFunc = (Void*, UInt8*, ParserSeverity, XMLTextReaderLocator) ->"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"  fun xmlParserInputBufferCreateStatic(mem : UInt8*, size : Int, encoding : Int) : InputBuffer"},
{"lineNum":"   94","line":"  fun xmlParserInputBufferCreateIO(ioread : (Void*, UInt8*, Int) -> Int, ioclose : Void* -> Int, ioctx : Void*, enc : Int) : InputBuffer"},
{"lineNum":"   95","line":"  fun xmlNewTextReader(input : InputBuffer, uri : UInt8*) : XMLTextReader"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"  fun xmlTextReaderRead(reader : XMLTextReader) : Int"},
{"lineNum":"   98","line":"  fun xmlTextReaderNodeType(reader : XMLTextReader) : XML::Type"},
{"lineNum":"   99","line":"  fun xmlTextReaderConstName(reader : XMLTextReader) : UInt8*"},
{"lineNum":"  100","line":"  fun xmlTextReaderIsEmptyElement(reader : XMLTextReader) : Int"},
{"lineNum":"  101","line":"  fun xmlTextReaderConstValue(reader : XMLTextReader) : UInt8*"},
{"lineNum":"  102","line":"  fun xmlTextReaderHasAttributes(reader : XMLTextReader) : Int"},
{"lineNum":"  103","line":"  fun xmlTextReaderAttributeCount(reader : XMLTextReader) : Int"},
{"lineNum":"  104","line":"  fun xmlTextReaderMoveToFirstAttribute(reader : XMLTextReader) : Int"},
{"lineNum":"  105","line":"  fun xmlTextReaderMoveToNextAttribute(reader : XMLTextReader) : Int"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"  fun xmlTextReaderSetErrorHandler(reader : XMLTextReader, f : TextReaderErrorFunc) : Void"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"  fun xmlTextReaderLocatorLineNumber(XMLTextReaderLocator) : Int"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"  fun xmlReadMemory(buffer : UInt8*, size : Int, url : UInt8*, encoding : UInt8*, options : XML::ParserOptions) : Doc*"},
{"lineNum":"  112","line":"  fun htmlReadMemory(buffer : UInt8*, size : Int, url : UInt8*, encoding : UInt8*, options : XML::HTMLParserOptions) : Doc*"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"  alias InputReadCallback = (Void*, UInt8*, Int) -> Int"},
{"lineNum":"  115","line":"  alias InputCloseCallback = (Void*) -> Int"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"  fun xmlReadIO(ioread : InputReadCallback, ioclose : InputCloseCallback, ioctx : Void*, url : UInt8*, encoding : UInt8*, options : XML::ParserOptions) : Doc*"},
{"lineNum":"  118","line":"  fun htmlReadIO(ioread : InputReadCallback, ioclose : InputCloseCallback, ioctx : Void*, url : UInt8*, encoding : UInt8*, options : XML::HTMLParserOptions) : Doc*"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"  fun xmlDocGetRootElement(doc : Doc*) : Node*"},
{"lineNum":"  121","line":"  fun xmlXPathNodeSetCreate(node : Node*) : NodeSet*"},
{"lineNum":"  122","line":"  fun xmlXPathNodeSetAddUnique(cur : NodeSet*, val : Node*) : Int"},
{"lineNum":"  123","line":"  fun xmlNodeGetContent(node : Node*) : UInt8*"},
{"lineNum":"  124","line":"  fun xmlNodeSetContent(node : Node*, content : UInt8*)"},
{"lineNum":"  125","line":"  fun xmlNodeSetName(node : Node*, name : UInt8*)"},
{"lineNum":"  126","line":"  fun xmlUnlinkNode(node : Node*)"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"  fun xmlGcMemSetup(free_func : Void* ->,"},
{"lineNum":"  129","line":"                    malloc_func : LibC::SizeT -> Void*,"},
{"lineNum":"  130","line":"                    malloc_atomic_func : LibC::SizeT -> Void*,"},
{"lineNum":"  131","line":"                    realloc_func : Void*, LibC::SizeT -> Void*,"},
{"lineNum":"  132","line":"                    strdup_func : UInt8* -> UInt8*) : Int"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  alias OutputWriteCallback = (Void*, UInt8*, Int) -> Int"},
{"lineNum":"  135","line":"  alias OutputCloseCallback = (Void*) -> Int"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"  type SaveCtxPtr = Void*"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"  fun xmlSaveToIO(iowrite : OutputWriteCallback, ioclose : OutputCloseCallback, ioctx : Void*, encoding : UInt8*, options : XML::SaveOptions) : SaveCtxPtr"},
{"lineNum":"  140","line":"  fun xmlSaveTree(ctx : SaveCtxPtr, node : Node*) : LibC::Long"},
{"lineNum":"  141","line":"  fun xmlSaveClose(ctx : SaveCtxPtr) : Int"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"  struct OutputBuffer"},
{"lineNum":"  144","line":"    context : Void*"},
{"lineNum":"  145","line":"    writecallback : OutputWriteCallback"},
{"lineNum":"  146","line":"    closecallback : OutputCloseCallback"},
{"lineNum":"  147","line":"    xmlCharEncodingHandlerPtr : Void*"},
{"lineNum":"  148","line":"    buffer : Void*"},
{"lineNum":"  149","line":"    conv : Void*"},
{"lineNum":"  150","line":"    writter : Int"},
{"lineNum":"  151","line":"    error : Int"},
{"lineNum":"  152","line":"  end"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"  type TextWriter = Void*"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"  fun xmlNewTextWriter(out : OutputBuffer*) : TextWriter"},
{"lineNum":"  157","line":"  fun xmlTextWriterStartDocument(TextWriter, version : UInt8*, encoding : UInt8*, standalone : UInt8*) : Int"},
{"lineNum":"  158","line":"  fun xmlTextWriterEndDocument(TextWriter) : Int"},
{"lineNum":"  159","line":"  fun xmlTextWriterStartElement(TextWriter, name : UInt8*) : Int"},
{"lineNum":"  160","line":"  fun xmlTextWriterEndElement(TextWriter) : Int"},
{"lineNum":"  161","line":"  fun xmlTextWriterStartAttribute(TextWriter, name : UInt8*) : Int"},
{"lineNum":"  162","line":"  fun xmlTextWriterEndAttribute(TextWriter) : Int"},
{"lineNum":"  163","line":"  fun xmlTextWriterFlush(TextWriter) : Int"},
{"lineNum":"  164","line":"  fun xmlTextWriterSetIndent(TextWriter, indent : Int) : Int"},
{"lineNum":"  165","line":"  fun xmlTextWriterSetIndentString(TextWriter, str : UInt8*) : Int"},
{"lineNum":"  166","line":"  fun xmlTextWriterSetQuoteChar(TextWriter, char : UInt8) : Int"},
{"lineNum":"  167","line":"  fun xmlTextWriterWriteAttribute(TextWriter, name : UInt8*, content : UInt8*) : Int"},
{"lineNum":"  168","line":"  fun xmlTextWriterWriteString(TextWriter, content : UInt8*) : Int"},
{"lineNum":"  169","line":"  fun xmlTextWriterStartAttributeNS(TextWriter, prefix : UInt8*, name : UInt8*, namespaceURI : UInt8*) : Int"},
{"lineNum":"  170","line":"  fun xmlTextWriterWriteAttributeNS(TextWriter, prefix : UInt8*, name : UInt8*, namespaceURI : UInt8*, content : UInt8*) : Int"},
{"lineNum":"  171","line":"  fun xmlTextWriterStartElementNS(TextWriter, prefix : UInt8*, name : UInt8*, namespaceURI : UInt8*) : Int"},
{"lineNum":"  172","line":"  fun xmlTextWriterStartCDATA(TextWriter) : Int"},
{"lineNum":"  173","line":"  fun xmlTextWriterEndCDATA(TextWriter) : Int"},
{"lineNum":"  174","line":"  fun xmlTextWriterWriteCDATA(TextWriter, content : UInt8*) : Int"},
{"lineNum":"  175","line":"  fun xmlTextWriterStartComment(TextWriter) : Int"},
{"lineNum":"  176","line":"  fun xmlTextWriterEndComment(TextWriter) : Int"},
{"lineNum":"  177","line":"  fun xmlTextWriterWriteComment(TextWriter, content : UInt8*) : Int"},
{"lineNum":"  178","line":"  fun xmlTextWriterStartDTD(TextWriter, name : UInt8*, pubid : UInt8*, sysid : UInt8*) : Int"},
{"lineNum":"  179","line":"  fun xmlTextWriterEndDTD(TextWriter) : Int"},
{"lineNum":"  180","line":"  fun xmlTextWriterWriteDTD(TextWriter, name : UInt8*, pubid : UInt8*, sysid : UInt8*, subset : UInt8*) : Int"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"  fun xmlOutputBufferCreateIO(iowrite : OutputWriteCallback, ioclose : OutputCloseCallback, ioctx : Void*, encoder : Void*) : OutputBuffer*"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"  enum ErrorLevel"},
{"lineNum":"  185","line":"    NONE    = 0"},
{"lineNum":"  186","line":"    WARNING = 1"},
{"lineNum":"  187","line":"    ERROR   = 2"},
{"lineNum":"  188","line":"    FATAL   = 3"},
{"lineNum":"  189","line":"  end"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"  struct Error"},
{"lineNum":"  192","line":"    domain : Int"},
{"lineNum":"  193","line":"    code : Int"},
{"lineNum":"  194","line":"    message : UInt8*"},
{"lineNum":"  195","line":"    level : ErrorLevel"},
{"lineNum":"  196","line":"    file : UInt8*"},
{"lineNum":"  197","line":"    line : Int"},
{"lineNum":"  198","line":"    str1 : UInt8*"},
{"lineNum":"  199","line":"    str2 : UInt8*"},
{"lineNum":"  200","line":"    str3 : UInt8*"},
{"lineNum":"  201","line":"    int1 : Int"},
{"lineNum":"  202","line":"    int2 : Int"},
{"lineNum":"  203","line":"    ctxt : Void*"},
{"lineNum":"  204","line":"    node : Void*"},
{"lineNum":"  205","line":"  end"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"  fun xmlGetLastError : Error*"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"  struct XPathContext"},
{"lineNum":"  210","line":"    doc : Doc*"},
{"lineNum":"  211","line":"    node : Node*"},
{"lineNum":"  212","line":"    nb_variables_unused : Int"},
{"lineNum":"  213","line":"    max_variables_unused : Int"},
{"lineNum":"  214","line":"    varHash : Void*"},
{"lineNum":"  215","line":"    nb_types : Int"},
{"lineNum":"  216","line":"    max_types : Int"},
{"lineNum":"  217","line":"    types : Void*"},
{"lineNum":"  218","line":"    nb_funcs_unused : Int"},
{"lineNum":"  219","line":"    max_funcs_unused : Int"},
{"lineNum":"  220","line":"    funcHash : Void*"},
{"lineNum":"  221","line":"    nb_axis : Int"},
{"lineNum":"  222","line":"    max_axis : Int"},
{"lineNum":"  223","line":"    axis : Void*"},
{"lineNum":"  224","line":"    namespaces : Void*"},
{"lineNum":"  225","line":"    nsNr : Int"},
{"lineNum":"  226","line":"    user : Void*"},
{"lineNum":"  227","line":"    context_size : Int"},
{"lineNum":"  228","line":"    proximity_position : Int"},
{"lineNum":"  229","line":"    xptr : Int"},
{"lineNum":"  230","line":"    here : Node*"},
{"lineNum":"  231","line":"    origin : Node*"},
{"lineNum":"  232","line":"    nsHash : Void*"},
{"lineNum":"  233","line":"    varLookupFunc : Void*"},
{"lineNum":"  234","line":"    varLookupData : Void*"},
{"lineNum":"  235","line":"    extra : Void*"},
{"lineNum":"  236","line":"    function : UInt8*"},
{"lineNum":"  237","line":"    functionURI : UInt8*"},
{"lineNum":"  238","line":"    funcLookupFunc : Void*"},
{"lineNum":"  239","line":"    funcLookupData : Void*"},
{"lineNum":"  240","line":"    tmpNsList : Void*"},
{"lineNum":"  241","line":"    tmpNsNr : Int"},
{"lineNum":"  242","line":"    userData : Void*"},
{"lineNum":"  243","line":"    error : Void*"},
{"lineNum":"  244","line":"    lastError : Error"},
{"lineNum":"  245","line":"    debugNode : Node*"},
{"lineNum":"  246","line":"    dictPtr : Void*"},
{"lineNum":"  247","line":"    flags : Int"},
{"lineNum":"  248","line":"    cache : Void*"},
{"lineNum":"  249","line":"  end"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"  enum XPathObjectType"},
{"lineNum":"  252","line":"    UNDEFINED   = 0"},
{"lineNum":"  253","line":"    NODESET     = 1"},
{"lineNum":"  254","line":"    BOOLEAN     = 2"},
{"lineNum":"  255","line":"    NUMBER      = 3"},
{"lineNum":"  256","line":"    STRING      = 4"},
{"lineNum":"  257","line":"    POINT       = 5"},
{"lineNum":"  258","line":"    RANGE       = 6"},
{"lineNum":"  259","line":"    LOCATIONSET = 7"},
{"lineNum":"  260","line":"    USERS       = 8"},
{"lineNum":"  261","line":"    XSLT_TREE   = 9"},
{"lineNum":"  262","line":"  end"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"  struct XPathObject"},
{"lineNum":"  265","line":"    type : XPathObjectType"},
{"lineNum":"  266","line":"    nodesetval : NodeSet*"},
{"lineNum":"  267","line":"    boolval : Int"},
{"lineNum":"  268","line":"    floatval : Float64"},
{"lineNum":"  269","line":"    stringval : UInt8*"},
{"lineNum":"  270","line":"    user : Void*"},
{"lineNum":"  271","line":"    index : Int"},
{"lineNum":"  272","line":"    user2 : Void*"},
{"lineNum":"  273","line":"    index2 : Int"},
{"lineNum":"  274","line":"  end"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"  fun xmlXPathInit"},
{"lineNum":"  277","line":"  fun xmlXPathNewContext(doc : Doc*) : XPathContext*"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"  @[Raises]"},
{"lineNum":"  280","line":"  fun xmlXPathEvalExpression(str : UInt8*, ctx : XPathContext*) : XPathObject*"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"  fun xmlXPathRegisterNs(ctx : XPathContext*, prefix : UInt8*, uri : UInt8*) : Int"},
{"lineNum":"  283","line":"  fun xmlXPathRegisterVariable(ctx : XPathContext*, name : UInt8*, value : XPathObject*) : Int"},
{"lineNum":"  284","line":"  fun xmlXPathNewCString(val : UInt8*) : XPathObject*"},
{"lineNum":"  285","line":"  fun xmlXPathNewFloat(val : Float64) : XPathObject*"},
{"lineNum":"  286","line":"  fun xmlXPathNewBoolean(val : Int) : XPathObject*"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"  alias StructuredErrorFunc = (Void*, Error*) ->"},
{"lineNum":"  289","line":"  alias GenericErrorFunc = (Void*, UInt8*) ->"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"  fun xmlSetStructuredErrorFunc(ctx : Void*, f : StructuredErrorFunc)"},
{"lineNum":"  292","line":"  fun xmlSetGenericErrorFunc(ctx : Void*, f : GenericErrorFunc)"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"  fun xmlGetNsList(doc : Doc*, node : Node*) : NS**"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"  fun xmlSetProp(node : Node*, name : UInt8*, value : UInt8*) : Attr*"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"  fun xmlValidateNameValue(value : UInt8*) : Int"},
{"lineNum":"  299","line":"end"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"LibXML.xmlGcMemSetup(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"  ->GC.free,"},
{"lineNum":"  303","line":"  ->GC.malloc(LibC::SizeT),"},
{"lineNum":"  304","line":"  ->GC.malloc(LibC::SizeT),"},
{"lineNum":"  305","line":"  ->GC.realloc(Void*, LibC::SizeT),"},
{"lineNum":"  306","line":"  ->(str) {"},
{"lineNum":"  307","line":"    len = LibC.strlen(str)"},
{"lineNum":"  308","line":"    copy = Pointer(UInt8).malloc(len)"},
{"lineNum":"  309","line":"    copy.copy_from(str, len)"},
{"lineNum":"  310","line":"    copy"},
{"lineNum":"  311","line":"  }"},
{"lineNum":"  312","line":")"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
