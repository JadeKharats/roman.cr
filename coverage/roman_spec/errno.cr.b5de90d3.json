var data = {lines:[
{"lineNum":"    1","line":"require \"c/errno\""},
{"lineNum":"    2","line":"require \"c/string\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"lib LibC"},
{"lineNum":"    5","line":"  {% if flag?(:linux) %}"},
{"lineNum":"    6","line":"    {% if flag?(:musl) %}"},
{"lineNum":"    7","line":"      fun __errno_location : Int*"},
{"lineNum":"    8","line":"    {% else %}"},
{"lineNum":"    9","line":"      @[ThreadLocal]"},
{"lineNum":"   10","line":"      $errno : Int"},
{"lineNum":"   11","line":"    {% end %}"},
{"lineNum":"   12","line":"  {% elsif flag?(:darwin) || flag?(:freebsd) %}"},
{"lineNum":"   13","line":"    fun __error : Int*"},
{"lineNum":"   14","line":"  {% elsif flag?(:openbsd) %}"},
{"lineNum":"   15","line":"    fun __error = __errno : Int*"},
{"lineNum":"   16","line":"  {% end %}"},
{"lineNum":"   17","line":"end"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"# Errno wraps and gives access to libc\'s errno. This is mostly useful when"},
{"lineNum":"   20","line":"# dealing with C libraries."},
{"lineNum":"   21","line":"#"},
{"lineNum":"   22","line":"# This class is the exception thrown when errno errors are encountered."},
{"lineNum":"   23","line":"class Errno < Exception"},
{"lineNum":"   24","line":"  # Argument list too long"},
{"lineNum":"   25","line":"  E2BIG = LibC::E2BIG"},
{"lineNum":"   26","line":"  # Operation not permitted"},
{"lineNum":"   27","line":"  EPERM = LibC::EPERM"},
{"lineNum":"   28","line":"  # No such file or directory"},
{"lineNum":"   29","line":"  ENOENT = LibC::ENOENT"},
{"lineNum":"   30","line":"  # No such process"},
{"lineNum":"   31","line":"  ESRCH = LibC::ESRCH"},
{"lineNum":"   32","line":"  # Interrupted system call"},
{"lineNum":"   33","line":"  EINTR = LibC::EINTR"},
{"lineNum":"   34","line":"  # Input/output error"},
{"lineNum":"   35","line":"  EIO = LibC::EIO"},
{"lineNum":"   36","line":"  # Device not configured"},
{"lineNum":"   37","line":"  ENXIO = LibC::ENXIO"},
{"lineNum":"   38","line":"  # Exec format error"},
{"lineNum":"   39","line":"  ENOEXEC = LibC::ENOEXEC"},
{"lineNum":"   40","line":"  # Bad file descriptor"},
{"lineNum":"   41","line":"  EBADF = LibC::EBADF"},
{"lineNum":"   42","line":"  # No child processes"},
{"lineNum":"   43","line":"  ECHILD = LibC::ECHILD"},
{"lineNum":"   44","line":"  # Resource deadlock avoided"},
{"lineNum":"   45","line":"  EDEADLK = LibC::EDEADLK"},
{"lineNum":"   46","line":"  # Cannot allocate memory"},
{"lineNum":"   47","line":"  ENOMEM = LibC::ENOMEM"},
{"lineNum":"   48","line":"  # Permission denied"},
{"lineNum":"   49","line":"  EACCES = LibC::EACCES"},
{"lineNum":"   50","line":"  # Bad address"},
{"lineNum":"   51","line":"  EFAULT = LibC::EFAULT"},
{"lineNum":"   52","line":"  # Block device required"},
{"lineNum":"   53","line":"  ENOTBLK = LibC::ENOTBLK"},
{"lineNum":"   54","line":"  # Device / Resource busy"},
{"lineNum":"   55","line":"  EBUSY = LibC::EBUSY"},
{"lineNum":"   56","line":"  # File exists"},
{"lineNum":"   57","line":"  EEXIST = LibC::EEXIST"},
{"lineNum":"   58","line":"  # Cross-device link"},
{"lineNum":"   59","line":"  EXDEV = LibC::EXDEV"},
{"lineNum":"   60","line":"  # Operation not supported by device"},
{"lineNum":"   61","line":"  ENODEV = LibC::ENODEV"},
{"lineNum":"   62","line":"  # Not a directory"},
{"lineNum":"   63","line":"  ENOTDIR = LibC::ENOTDIR"},
{"lineNum":"   64","line":"  # Is a directory"},
{"lineNum":"   65","line":"  EISDIR = LibC::EISDIR"},
{"lineNum":"   66","line":"  # Invalid argument"},
{"lineNum":"   67","line":"  EINVAL = LibC::EINVAL"},
{"lineNum":"   68","line":"  # Too many open files in system"},
{"lineNum":"   69","line":"  ENFILE = LibC::ENFILE"},
{"lineNum":"   70","line":"  # Too many open files"},
{"lineNum":"   71","line":"  EMFILE = LibC::EMFILE"},
{"lineNum":"   72","line":"  # Inappropriate ioctl for device"},
{"lineNum":"   73","line":"  ENOTTY = LibC::ENOTTY"},
{"lineNum":"   74","line":"  # Text file busy"},
{"lineNum":"   75","line":"  ETXTBSY = LibC::ETXTBSY"},
{"lineNum":"   76","line":"  # File too large"},
{"lineNum":"   77","line":"  EFBIG = LibC::EFBIG"},
{"lineNum":"   78","line":"  # No space left on device"},
{"lineNum":"   79","line":"  ENOSPC = LibC::ENOSPC"},
{"lineNum":"   80","line":"  # Illegal seek"},
{"lineNum":"   81","line":"  ESPIPE = LibC::ESPIPE"},
{"lineNum":"   82","line":"  # Read-only file system"},
{"lineNum":"   83","line":"  EROFS = LibC::EROFS"},
{"lineNum":"   84","line":"  # Too many links"},
{"lineNum":"   85","line":"  EMLINK = LibC::EMLINK"},
{"lineNum":"   86","line":"  # Broken pipe"},
{"lineNum":"   87","line":"  EPIPE = LibC::EPIPE"},
{"lineNum":"   88","line":"  # Numerical argument out of domain"},
{"lineNum":"   89","line":"  EDOM = LibC::EDOM"},
{"lineNum":"   90","line":"  # Result too large"},
{"lineNum":"   91","line":"  ERANGE = LibC::ERANGE"},
{"lineNum":"   92","line":"  # Resource temporarily unavailable"},
{"lineNum":"   93","line":"  EAGAIN = LibC::EAGAIN"},
{"lineNum":"   94","line":"  # Operation would block"},
{"lineNum":"   95","line":"  EWOULDBLOCK = LibC::EWOULDBLOCK"},
{"lineNum":"   96","line":"  # Operation now in progress"},
{"lineNum":"   97","line":"  EINPROGRESS = LibC::EINPROGRESS"},
{"lineNum":"   98","line":"  # Operation already in progress"},
{"lineNum":"   99","line":"  EALREADY = LibC::EALREADY"},
{"lineNum":"  100","line":"  # Socket operation on non-socket"},
{"lineNum":"  101","line":"  ENOTSOCK = LibC::ENOTSOCK"},
{"lineNum":"  102","line":"  # Destination address required"},
{"lineNum":"  103","line":"  EDESTADDRREQ = LibC::EDESTADDRREQ"},
{"lineNum":"  104","line":"  # Message too long"},
{"lineNum":"  105","line":"  EMSGSIZE = LibC::EMSGSIZE"},
{"lineNum":"  106","line":"  # Protocol wrong type for socket"},
{"lineNum":"  107","line":"  EPROTOTYPE = LibC::EPROTOTYPE"},
{"lineNum":"  108","line":"  # Protocol not available"},
{"lineNum":"  109","line":"  ENOPROTOOPT = LibC::ENOPROTOOPT"},
{"lineNum":"  110","line":"  # Protocol not supported"},
{"lineNum":"  111","line":"  EPROTONOSUPPORT = LibC::EPROTONOSUPPORT"},
{"lineNum":"  112","line":"  # Socket type not supported"},
{"lineNum":"  113","line":"  ESOCKTNOSUPPORT = LibC::ESOCKTNOSUPPORT"},
{"lineNum":"  114","line":"  # Protocol family not supported"},
{"lineNum":"  115","line":"  EPFNOSUPPORT = LibC::EPFNOSUPPORT"},
{"lineNum":"  116","line":"  # Address family not supported by protocol family"},
{"lineNum":"  117","line":"  EAFNOSUPPORT = LibC::EAFNOSUPPORT"},
{"lineNum":"  118","line":"  # Address already in use"},
{"lineNum":"  119","line":"  EADDRINUSE = LibC::EADDRINUSE"},
{"lineNum":"  120","line":"  # Can\'t assign requested address"},
{"lineNum":"  121","line":"  EADDRNOTAVAIL = LibC::EADDRNOTAVAIL"},
{"lineNum":"  122","line":"  # Network is down"},
{"lineNum":"  123","line":"  ENETDOWN = LibC::ENETDOWN"},
{"lineNum":"  124","line":"  # Network is unreachable"},
{"lineNum":"  125","line":"  ENETUNREACH = LibC::ENETUNREACH"},
{"lineNum":"  126","line":"  # Network dropped connection on reset"},
{"lineNum":"  127","line":"  ENETRESET = LibC::ENETRESET"},
{"lineNum":"  128","line":"  # Software caused connection abort"},
{"lineNum":"  129","line":"  ECONNABORTED = LibC::ECONNABORTED"},
{"lineNum":"  130","line":"  # Connection reset by peer"},
{"lineNum":"  131","line":"  ECONNRESET = LibC::ECONNRESET"},
{"lineNum":"  132","line":"  # No buffer space available"},
{"lineNum":"  133","line":"  ENOBUFS = LibC::ENOBUFS"},
{"lineNum":"  134","line":"  # Socket is already connected"},
{"lineNum":"  135","line":"  EISCONN = LibC::EISCONN"},
{"lineNum":"  136","line":"  # Socket is not connected"},
{"lineNum":"  137","line":"  ENOTCONN = LibC::ENOTCONN"},
{"lineNum":"  138","line":"  # Can\'t send after socket shutdown"},
{"lineNum":"  139","line":"  ESHUTDOWN = LibC::ESHUTDOWN"},
{"lineNum":"  140","line":"  # Too many references: can\'t splice"},
{"lineNum":"  141","line":"  ETOOMANYREFS = LibC::ETOOMANYREFS"},
{"lineNum":"  142","line":"  # Operation timed out"},
{"lineNum":"  143","line":"  ETIMEDOUT = LibC::ETIMEDOUT"},
{"lineNum":"  144","line":"  # Connection refused"},
{"lineNum":"  145","line":"  ECONNREFUSED = LibC::ECONNREFUSED"},
{"lineNum":"  146","line":"  # Too many levels of symbolic links"},
{"lineNum":"  147","line":"  ELOOP = LibC::ELOOP"},
{"lineNum":"  148","line":"  # File name too long"},
{"lineNum":"  149","line":"  ENAMETOOLONG = LibC::ENAMETOOLONG"},
{"lineNum":"  150","line":"  # Host is down"},
{"lineNum":"  151","line":"  EHOSTDOWN = LibC::EHOSTDOWN"},
{"lineNum":"  152","line":"  # No route to host"},
{"lineNum":"  153","line":"  EHOSTUNREACH = LibC::EHOSTUNREACH"},
{"lineNum":"  154","line":"  # Directory not empty"},
{"lineNum":"  155","line":"  ENOTEMPTY = LibC::ENOTEMPTY"},
{"lineNum":"  156","line":"  # Too many users"},
{"lineNum":"  157","line":"  EUSERS = LibC::EUSERS"},
{"lineNum":"  158","line":"  # Disc quota exceeded"},
{"lineNum":"  159","line":"  EDQUOT = LibC::EDQUOT"},
{"lineNum":"  160","line":"  # Stale NFS file handle"},
{"lineNum":"  161","line":"  ESTALE = LibC::ESTALE"},
{"lineNum":"  162","line":"  # Too many levels of remote in path"},
{"lineNum":"  163","line":"  EREMOTE = LibC::EREMOTE"},
{"lineNum":"  164","line":"  # No locks available"},
{"lineNum":"  165","line":"  ENOLCK = LibC::ENOLCK"},
{"lineNum":"  166","line":"  # Function not implemented"},
{"lineNum":"  167","line":"  ENOSYS = LibC::ENOSYS"},
{"lineNum":"  168","line":"  # Value too large to be stored in data type"},
{"lineNum":"  169","line":"  EOVERFLOW = LibC::EOVERFLOW"},
{"lineNum":"  170","line":"  # Operation canceled"},
{"lineNum":"  171","line":"  ECANCELED = LibC::ECANCELED"},
{"lineNum":"  172","line":"  # Identifier removed"},
{"lineNum":"  173","line":"  EIDRM = LibC::EIDRM"},
{"lineNum":"  174","line":"  # No message of desired type"},
{"lineNum":"  175","line":"  ENOMSG = LibC::ENOMSG"},
{"lineNum":"  176","line":"  # Illegal byte sequence"},
{"lineNum":"  177","line":"  EILSEQ = LibC::EILSEQ"},
{"lineNum":"  178","line":"  # Bad message"},
{"lineNum":"  179","line":"  EBADMSG = LibC::EBADMSG"},
{"lineNum":"  180","line":"  # Reserved"},
{"lineNum":"  181","line":"  EMULTIHOP = LibC::EMULTIHOP"},
{"lineNum":"  182","line":"  # No message available on STREAM"},
{"lineNum":"  183","line":"  ENODATA = LibC::ENODATA"},
{"lineNum":"  184","line":"  # Reserved"},
{"lineNum":"  185","line":"  ENOLINK = LibC::ENOLINK"},
{"lineNum":"  186","line":"  # No STREAM resources"},
{"lineNum":"  187","line":"  ENOSR = LibC::ENOSR"},
{"lineNum":"  188","line":"  # Not a STREAM"},
{"lineNum":"  189","line":"  ENOSTR = LibC::ENOSTR"},
{"lineNum":"  190","line":"  # Protocol error"},
{"lineNum":"  191","line":"  EPROTO = LibC::EPROTO"},
{"lineNum":"  192","line":"  # STREAM ioctl timeout"},
{"lineNum":"  193","line":"  ETIME = LibC::ETIME"},
{"lineNum":"  194","line":"  # Operation not supported on socket"},
{"lineNum":"  195","line":"  EOPNOTSUPP = LibC::EOPNOTSUPP"},
{"lineNum":"  196","line":"  # State not recoverable"},
{"lineNum":"  197","line":"  ENOTRECOVERABLE = LibC::ENOTRECOVERABLE"},
{"lineNum":"  198","line":"  # Previous owner died"},
{"lineNum":"  199","line":"  EOWNERDEAD = LibC::EOWNERDEAD"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"  # Returns the numeric value of errno."},
{"lineNum":"  202","line":"  getter errno : Int32"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"  # Creates a new Errno with the given message. The message will"},
{"lineNum":"  205","line":"  # have concatenated the message denoted by `Errno#value`."},
{"lineNum":"  206","line":"  #"},
{"lineNum":"  207","line":"  # Typical usage:"},
{"lineNum":"  208","line":"  #"},
{"lineNum":"  209","line":"  # ```"},
{"lineNum":"  210","line":"  # err = LibC.some_call"},
{"lineNum":"  211","line":"  # if err == -1"},
{"lineNum":"  212","line":"  #   raise Errno.new(\"some_call\")"},
{"lineNum":"  213","line":"  # end"},
{"lineNum":"  214","line":"  # ```"},
{"lineNum":"  215","line":"  def initialize(message, errno = Errno.value)"},
{"lineNum":"  216","line":"    @errno = errno","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"    super \"#{message}: #{String.new(LibC.strerror(errno))}\"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  218","line":"  end"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"  # Returns the value of libc\'s errno."},
{"lineNum":"  221","line":"  def self.value : LibC::Int","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  222","line":"    {% if flag?(:linux) %}"},
{"lineNum":"  223","line":"      {% if flag?(:musl) %}"},
{"lineNum":"  224","line":"        LibC.__errno_location.value"},
{"lineNum":"  225","line":"      {% else %}"},
{"lineNum":"  226","line":"        LibC.errno"},
{"lineNum":"  227","line":"      {% end %}"},
{"lineNum":"  228","line":"    {% elsif flag?(:darwin) || flag?(:freebsd) || flag?(:openbsd) %}"},
{"lineNum":"  229","line":"      LibC.__error.value"},
{"lineNum":"  230","line":"    {% end %}"},
{"lineNum":"  231","line":"  end"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"  # Sets the value of libc\'s errno."},
{"lineNum":"  234","line":"  def self.value=(value)"},
{"lineNum":"  235","line":"    {% if flag?(:linux) %}"},
{"lineNum":"  236","line":"      {% if flag?(:musl) %}"},
{"lineNum":"  237","line":"        LibC.__errno_location.value = value"},
{"lineNum":"  238","line":"      {% else %}"},
{"lineNum":"  239","line":"        LibC.errno = value"},
{"lineNum":"  240","line":"      {% end %}"},
{"lineNum":"  241","line":"    {% elsif flag?(:darwin) || flag?(:freebsd) || flag?(:openbsd) %}"},
{"lineNum":"  242","line":"      LibC.__error.value = value"},
{"lineNum":"  243","line":"    {% end %}"},
{"lineNum":"  244","line":"  end"},
{"lineNum":"  245","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
