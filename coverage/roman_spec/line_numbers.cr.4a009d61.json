var data = {lines:[
{"lineNum":"    1","line":"module Debug"},
{"lineNum":"    2","line":"  # DWARF reader."},
{"lineNum":"    3","line":"  #"},
{"lineNum":"    4","line":"  # Documentation:"},
{"lineNum":"    5","line":"  # - <http://dwarfstd.org>"},
{"lineNum":"    6","line":"  module DWARF"},
{"lineNum":"    7","line":"    # Standard Line Number opcodes."},
{"lineNum":"    8","line":"    # :nodoc:"},
{"lineNum":"    9","line":"    enum LNS : UInt8"},
{"lineNum":"   10","line":"      Copy             =  1"},
{"lineNum":"   11","line":"      AdvancePc        =  2"},
{"lineNum":"   12","line":"      AdvanceLine      =  3"},
{"lineNum":"   13","line":"      SetFile          =  4"},
{"lineNum":"   14","line":"      SetColumn        =  5"},
{"lineNum":"   15","line":"      NegateStmt       =  6"},
{"lineNum":"   16","line":"      SetBasicBlock    =  7"},
{"lineNum":"   17","line":"      ConstAddPc       =  8"},
{"lineNum":"   18","line":"      FixedAdvancePc   =  9"},
{"lineNum":"   19","line":"      SetPrologueEnd   = 10"},
{"lineNum":"   20","line":"      SetEpiloqueBegin = 11"},
{"lineNum":"   21","line":"      SetIsa           = 12"},
{"lineNum":"   22","line":"    end"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    # Extended Line Number opcodes.","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   25","line":"    # :nodoc:"},
{"lineNum":"   26","line":"    enum LNE : UInt8"},
{"lineNum":"   27","line":"      EndSequence      = 1"},
{"lineNum":"   28","line":"      SetAddress       = 2"},
{"lineNum":"   29","line":"      DefineFile       = 3"},
{"lineNum":"   30","line":"      SetDiscriminator = 4"},
{"lineNum":"   31","line":"    end"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    # DWARF Line Numbers parser. Supports DWARF versions 2, 3 and 4."},
{"lineNum":"   34","line":"    #"},
{"lineNum":"   35","line":"    # Usually located in the `.debug_line` section of ELF executables, or the"},
{"lineNum":"   36","line":"    # `__debug_line` section of Mach-O files."},
{"lineNum":"   37","line":"    #"},
{"lineNum":"   38","line":"    # Documentation:"},
{"lineNum":"   39","line":"    # - [DWARF2](http://dwarfstd.org/doc/dwarf-2.0.0.pdf) section 6.2"},
{"lineNum":"   40","line":"    # - [DWARF3](http://dwarfstd.org/doc/Dwarf3.pdf) section 6.2"},
{"lineNum":"   41","line":"    # - [DWARF4](http://dwarfstd.org/doc/DWARF4.pdf) section 6.2"},
{"lineNum":"   42","line":"    struct LineNumbers"},
{"lineNum":"   43","line":"      # The state machine registers used to decompress the line number"},
{"lineNum":"   44","line":"      # sequences."},
{"lineNum":"   45","line":"      #"},
{"lineNum":"   46","line":"      # :nodoc:"},
{"lineNum":"   47","line":"      struct Register"},
{"lineNum":"   48","line":"        # The Program Counter (PC) value corresponding to a machine instruction"},
{"lineNum":"   49","line":"        # generated by the compiler."},
{"lineNum":"   50","line":"        property address : UInt64"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        # The index of an operation inside a Very Long Instruction Word (VLIW)"},
{"lineNum":"   53","line":"        # instruction. Together with `address` they reference an individual"},
{"lineNum":"   54","line":"        # operation."},
{"lineNum":"   55","line":"        property op_index : UInt32"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        # Source file for the instruction."},
{"lineNum":"   58","line":"        property file : UInt32"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"        # Line number within the source file. Starting at 1; the value 0 means"},
{"lineNum":"   61","line":"        # that the instruction can\'t be attributed to any source line."},
{"lineNum":"   62","line":"        property line : UInt32"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"        # Column number within the source file. Starting at 1; the value 0 means"},
{"lineNum":"   65","line":"        # that a statement begins at the \"left edge\" of the line."},
{"lineNum":"   66","line":"        property column : UInt32"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"        # Recommended breakpoint location."},
{"lineNum":"   69","line":"        property is_stmt : Bool"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"        # Indicates that the instruction is the beginning of a basic block."},
{"lineNum":"   72","line":"        property basic_block : Bool"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"        # Terminates a sequence of lines. Other information in the same row (of"},
{"lineNum":"   75","line":"        # the decoded matrix) isn\'t meaningful."},
{"lineNum":"   76","line":"        property end_sequence : Bool"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        # Indicates the the instruction is one where execution should be"},
{"lineNum":"   79","line":"        # suspended (for an entry breakpoint)."},
{"lineNum":"   80","line":"        property prologue_end : Bool"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"        # Indicates the the instruction is one where execution should be"},
{"lineNum":"   83","line":"        # suspended (for an exit breakpoint)."},
{"lineNum":"   84","line":"        property epilogue_begin : Bool"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"        # Applicable Instruction Set Architecture for the instruction."},
{"lineNum":"   87","line":"        property isa : UInt32"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"        # Identifies the block to which the instruction belongs."},
{"lineNum":"   90","line":"        property discriminator : UInt32"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        def initialize(@is_stmt)"},
{"lineNum":"   93","line":"          @address = 0_u64"},
{"lineNum":"   94","line":"          @op_index = 0_u32"},
{"lineNum":"   95","line":"          @file = 1_u32"},
{"lineNum":"   96","line":"          @line = 1_u32"},
{"lineNum":"   97","line":"          @column = 0_u32"},
{"lineNum":"   98","line":"          @basic_block = false"},
{"lineNum":"   99","line":"          @end_sequence = false"},
{"lineNum":"  100","line":"          @prologue_end = false"},
{"lineNum":"  101","line":"          @epilogue_begin = false"},
{"lineNum":"  102","line":"          @isa = 0_u32"},
{"lineNum":"  103","line":"          @discriminator = 0_u32"},
{"lineNum":"  104","line":"        end"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"        def reset"},
{"lineNum":"  107","line":"          @basic_block = false"},
{"lineNum":"  108","line":"          @prologue_end = false"},
{"lineNum":"  109","line":"          @epilogue_begin = false"},
{"lineNum":"  110","line":"          @discriminator = 0_u32"},
{"lineNum":"  111","line":"        end"},
{"lineNum":"  112","line":"      end"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"      # The decoded line number information for an instruction."},
{"lineNum":"  115","line":"      record Row,"},
{"lineNum":"  116","line":"        address : UInt64,"},
{"lineNum":"  117","line":"        op_index : UInt32,"},
{"lineNum":"  118","line":"        directory : Int32,"},
{"lineNum":"  119","line":"        file : Int32,"},
{"lineNum":"  120","line":"        line : Int32,"},
{"lineNum":"  121","line":"        column : Int32,"},
{"lineNum":"  122","line":"        end_sequence : Bool"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"      # An individual compressed sequence."},
{"lineNum":"  125","line":"      #"},
{"lineNum":"  126","line":"      # :nodoc:"},
{"lineNum":"  127","line":"      struct Sequence"},
{"lineNum":"  128","line":"        property! offset : LibC::OffT"},
{"lineNum":"  129","line":"        property! unit_length : UInt32","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"        property! version : UInt16","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"        property! header_length : UInt32 # FIXME: UInt64 for DWARF64 (uncommon)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"        property! minimum_instruction_length : UInt8","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":"        property maximum_operations_per_instruction : UInt8"},
{"lineNum":"  134","line":"        property! default_is_stmt : Bool"},
{"lineNum":"  135","line":"        property! line_base : Int8","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"        property! line_range : UInt8","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"        property! opcode_base : UInt8","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"        # An array of how many args an array. Starts at 1 because 0 means an"},
{"lineNum":"  140","line":"        # extended opcode."},
{"lineNum":"  141","line":"        getter standard_opcode_lengths"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"        # An array of directory names. Starts at 1; 0 means that the information"},
{"lineNum":"  144","line":"        # is missing."},
{"lineNum":"  145","line":"        getter include_directories"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"        # An array of file names. Starts at 1; 0 means that the information is"},
{"lineNum":"  148","line":"        # missing."},
{"lineNum":"  149","line":"        getter file_names"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"        def initialize"},
{"lineNum":"  152","line":"          @maximum_operations_per_instruction = 1_u8"},
{"lineNum":"  153","line":"          @include_directories = [\"\"]"},
{"lineNum":"  154","line":"          @file_names = [{\"\", 0, 0, 0}]"},
{"lineNum":"  155","line":"          @standard_opcode_lengths = [0_u8]"},
{"lineNum":"  156","line":"        end"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"        # Returns the unit length, adding the size of the `unit_length`."},
{"lineNum":"  159","line":"        def total_length"},
{"lineNum":"  160","line":"          unit_length + sizeof(typeof(unit_length))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"        end"},
{"lineNum":"  162","line":"      end"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"      # Matrix of decompressed `Row` to search line number informations from the"},
{"lineNum":"  165","line":"      # address of an instruction."},
{"lineNum":"  166","line":"      #"},
{"lineNum":"  167","line":"      # The matrix contains indexed references to `directories` and `files` to"},
{"lineNum":"  168","line":"      # reduce the memory usage of repeating a String many times."},
{"lineNum":"  169","line":"      getter matrix : Array(Array(Row))"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"      # The array of indexed directory paths."},
{"lineNum":"  172","line":"      getter directories : Array(String)"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"      # The array of indexed file names."},
{"lineNum":"  175","line":"      getter files : Array(String)"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"      @offset : LibC::OffT"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"      def initialize(@io : IO::FileDescriptor, size)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  180","line":"        @offset = @io.tell","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  181","line":"        @matrix = Array(Array(Row)).new","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"        @directories = [] of String","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"        @files = [] of String","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  184","line":"        decode_sequences(size)"},
{"lineNum":"  185","line":"      end","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"      # Returns the `Row` for the given Program Counter (PC) address if found."},
{"lineNum":"  188","line":"      def find(address)"},
{"lineNum":"  189","line":"        matrix.each do |rows|"},
{"lineNum":"  190","line":"          if row = rows.first?"},
{"lineNum":"  191","line":"            next if address < row.address","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"          end"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"          if row = rows.last?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"            next if address > row.address"},
{"lineNum":"  196","line":"          end"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"          rows.each_with_index do |current_row, index|"},
{"lineNum":"  199","line":"            if current_row.address == address","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  200","line":"              return current_row"},
{"lineNum":"  201","line":"            end"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"            if address < current_row.address"},
{"lineNum":"  204","line":"              if previous_row = rows[index - 1]?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  205","line":"                return previous_row"},
{"lineNum":"  206","line":"              end"},
{"lineNum":"  207","line":"            end"},
{"lineNum":"  208","line":"          end"},
{"lineNum":"  209","line":"        end"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"        nil"},
{"lineNum":"  212","line":"      end"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"      # Decodes the compressed matrix of addresses to line numbers."},
{"lineNum":"  215","line":"      private def decode_sequences(size)"},
{"lineNum":"  216","line":"        while (@io.tell - @offset) < size","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  217","line":"          sequence = Sequence.new","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"          sequence.offset = @io.tell - @offset","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":"          sequence.unit_length = @io.read_bytes(UInt32)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  221","line":"          sequence.version = @io.read_bytes(UInt16)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  222","line":"          sequence.header_length = @io.read_bytes(UInt32)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":"          sequence.minimum_instruction_length = @io.read_byte.not_nil!","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"          if sequence.version >= 4","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"            sequence.maximum_operations_per_instruction = @io.read_byte.not_nil!","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  227","line":"          end"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"          sequence.default_is_stmt = @io.read_byte.not_nil! == 1","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  230","line":"          sequence.line_base = @io.read_bytes(Int8)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":"          sequence.line_range = @io.read_byte.not_nil!","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  232","line":"          sequence.opcode_base = @io.read_byte.not_nil!","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"          read_opcodes(sequence)"},
{"lineNum":"  235","line":"          read_directory_table(sequence)"},
{"lineNum":"  236","line":"          read_filename_table(sequence)"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"          if @io.tell - @offset < sequence.offset + sequence.total_length","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  239","line":"            read_statement_program(sequence)"},
{"lineNum":"  240","line":"          end"},
{"lineNum":"  241","line":"        end"},
{"lineNum":"  242","line":"      end"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"      private def read_opcodes(sequence)"},
{"lineNum":"  245","line":"        1.upto(sequence.opcode_base - 1) do","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"          sequence.standard_opcode_lengths << @io.read_byte.not_nil!","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  247","line":"        end"},
{"lineNum":"  248","line":"      end"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"      private def read_directory_table(sequence)"},
{"lineNum":"  251","line":"        loop do"},
{"lineNum":"  252","line":"          name = @io.gets(\'\\0\').to_s.chomp(\'\\0\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"          break if name.empty?"},
{"lineNum":"  254","line":"          sequence.include_directories << name","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"        end"},
{"lineNum":"  256","line":"      end"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"      private def read_filename_table(sequence)"},
{"lineNum":"  259","line":"        loop do"},
{"lineNum":"  260","line":"          name = @io.gets(\'\\0\').to_s.chomp(\'\\0\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":"          break if name.empty?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"          dir = DWARF.read_unsigned_leb128(@io)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":"          time = DWARF.read_unsigned_leb128(@io)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"          length = DWARF.read_unsigned_leb128(@io)"},
{"lineNum":"  265","line":"          sequence.file_names << {name, dir.to_i, time.to_i, length.to_i}"},
{"lineNum":"  266","line":"        end"},
{"lineNum":"  267","line":"      end"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"      private macro increment_address_and_op_index(operation_advance)"},
{"lineNum":"  270","line":"        if sequence.maximum_operations_per_instruction == 1"},
{"lineNum":"  271","line":"          registers.address += {{operation_advance}} * sequence.minimum_instruction_length"},
{"lineNum":"  272","line":"        else"},
{"lineNum":"  273","line":"          registers.address += sequence.minimum_instruction_length *"},
{"lineNum":"  274","line":"            ((registers.op_index + operation_advance) / sequence.maximum_operations_per_instruction)"},
{"lineNum":"  275","line":"          registers.op_index = (registers.op_index + operation_advance) % sequence.maximum_operations_per_instruction"},
{"lineNum":"  276","line":"        end"},
{"lineNum":"  277","line":"      end"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"      # TODO: support LNE::DefineFile (manually register file, uncommon)"},
{"lineNum":"  280","line":"      private def read_statement_program(sequence)"},
{"lineNum":"  281","line":"        registers = Register.new(sequence.default_is_stmt)"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"        loop do"},
{"lineNum":"  284","line":"          opcode = @io.read_byte.not_nil!","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"          if opcode >= sequence.opcode_base","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"            # special opcode"},
{"lineNum":"  288","line":"            adjusted_opcode = opcode - sequence.opcode_base"},
{"lineNum":"  289","line":"            operation_advance = adjusted_opcode / sequence.line_range","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":"            increment_address_and_op_index(operation_advance)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"            registers.line += sequence.line_base + (adjusted_opcode % sequence.line_range)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  293","line":"            register_to_matrix(sequence, registers)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  294","line":"            registers.reset"},
{"lineNum":"  295","line":"          elsif opcode == 0"},
{"lineNum":"  296","line":"            # extended opcode"},
{"lineNum":"  297","line":"            len = DWARF.read_unsigned_leb128(@io) - 1 # -1 accounts for the opcode","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  298","line":"            extended_opcode = LNE.new(@io.read_byte.not_nil!)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"            case extended_opcode"},
{"lineNum":"  301","line":"            when LNE::EndSequence","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"              registers.end_sequence = true"},
{"lineNum":"  303","line":"              register_to_matrix(sequence, registers)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"              if (@io.tell - @offset - sequence.offset) < sequence.total_length","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  305","line":"                registers = Register.new(sequence.default_is_stmt)"},
{"lineNum":"  306","line":"              else"},
{"lineNum":"  307","line":"                break"},
{"lineNum":"  308","line":"              end"},
{"lineNum":"  309","line":"            when LNE::SetAddress"},
{"lineNum":"  310","line":"              case len"},
{"lineNum":"  311","line":"              when 8 then registers.address = @io.read_bytes(UInt64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"              when 4 then registers.address = @io.read_bytes(UInt32).to_u64","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  313","line":"              else        @io.skip(len)"},
{"lineNum":"  314","line":"              end"},
{"lineNum":"  315","line":"              registers.op_index = 0_u32"},
{"lineNum":"  316","line":"            when LNE::SetDiscriminator","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"              registers.discriminator = DWARF.read_unsigned_leb128(@io)"},
{"lineNum":"  318","line":"            else"},
{"lineNum":"  319","line":"              # skip unsupported opcode"},
{"lineNum":"  320","line":"              @io.read_fully(Bytes.new(len))"},
{"lineNum":"  321","line":"            end"},
{"lineNum":"  322","line":"          else"},
{"lineNum":"  323","line":"            # standard opcode"},
{"lineNum":"  324","line":"            standard_opcode = LNS.new(opcode)"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"            case standard_opcode"},
{"lineNum":"  327","line":"            when LNS::Copy"},
{"lineNum":"  328","line":"              register_to_matrix(sequence, registers)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":"              registers.reset"},
{"lineNum":"  330","line":"            when LNS::AdvancePc","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  331","line":"              operation_advance = DWARF.read_unsigned_leb128(@io)"},
{"lineNum":"  332","line":"              increment_address_and_op_index(operation_advance)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  333","line":"            when LNS::AdvanceLine","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  334","line":"              registers.line += DWARF.read_signed_leb128(@io)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  335","line":"            when LNS::SetFile","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"              registers.file = DWARF.read_unsigned_leb128(@io)"},
{"lineNum":"  337","line":"            when LNS::SetColumn","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  338","line":"              registers.column = DWARF.read_unsigned_leb128(@io)"},
{"lineNum":"  339","line":"            when LNS::NegateStmt","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":"              registers.is_stmt = !registers.is_stmt"},
{"lineNum":"  341","line":"            when LNS::SetBasicBlock"},
{"lineNum":"  342","line":"              registers.basic_block = true"},
{"lineNum":"  343","line":"            when LNS::ConstAddPc"},
{"lineNum":"  344","line":"              adjusted_opcode = 255 - sequence.opcode_base"},
{"lineNum":"  345","line":"              operation_advance = adjusted_opcode / sequence.line_range"},
{"lineNum":"  346","line":"              increment_address_and_op_index(operation_advance)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  347","line":"            when LNS::FixedAdvancePc","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":"              registers.address += @io.read_bytes(UInt16).not_nil!","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  349","line":"              registers.op_index = 0_u32"},
{"lineNum":"  350","line":"            when LNS::SetPrologueEnd"},
{"lineNum":"  351","line":"              registers.prologue_end = true"},
{"lineNum":"  352","line":"            when LNS::SetEpiloqueBegin"},
{"lineNum":"  353","line":"              registers.epilogue_begin = true"},
{"lineNum":"  354","line":"            when LNS::SetIsa","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  355","line":"              registers.isa = DWARF.read_unsigned_leb128(@io)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":"            else"},
{"lineNum":"  357","line":"              # consume unknown opcode args"},
{"lineNum":"  358","line":"              n_args = sequence.standard_opcode_lengths[opcode.to_i]"},
{"lineNum":"  359","line":"              n_args.times { DWARF.read_unsigned_leb128(@io) }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":"            end"},
{"lineNum":"  361","line":"          end"},
{"lineNum":"  362","line":"        end"},
{"lineNum":"  363","line":"      end"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"      @current_sequence_matrix : Array(Row)?"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"      private def register_to_matrix(sequence, registers)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":"        file = sequence.file_names[registers.file]"},
{"lineNum":"  369","line":"        path = sequence.include_directories[file[1]]"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"        row = Row.new("},
{"lineNum":"  372","line":"          registers.address,"},
{"lineNum":"  373","line":"          registers.op_index,"},
{"lineNum":"  374","line":"          register_directory(path),"},
{"lineNum":"  375","line":"          register_filename(file[0]),"},
{"lineNum":"  376","line":"          registers.line.to_i,"},
{"lineNum":"  377","line":"          registers.column.to_i,"},
{"lineNum":"  378","line":"          registers.end_sequence"},
{"lineNum":"  379","line":"        )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"        if rows = @current_sequence_matrix","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":"          rows << row","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  383","line":"        else"},
{"lineNum":"  384","line":"          matrix << (rows = [row])"},
{"lineNum":"  385","line":"          @current_sequence_matrix = rows","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  386","line":"        end"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"        if registers.end_sequence","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  389","line":"          @current_sequence_matrix = nil","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  390","line":"        end"},
{"lineNum":"  391","line":"      end"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"      private def register_filename(name)"},
{"lineNum":"  394","line":"        if index = @files.index(name)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  395","line":"          return index"},
{"lineNum":"  396","line":"        end"},
{"lineNum":"  397","line":"        @files << name","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  398","line":"        @files.size - 1"},
{"lineNum":"  399","line":"      end"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"      private def register_directory(name)"},
{"lineNum":"  402","line":"        if index = @directories.index(name)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"          return index"},
{"lineNum":"  404","line":"        end"},
{"lineNum":"  405","line":"        @directories << name","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":"        @directories.size - 1"},
{"lineNum":"  407","line":"      end"},
{"lineNum":"  408","line":"    end"},
{"lineNum":"  409","line":"  end"},
{"lineNum":"  410","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 80, "covered" : 0,};
var merged_data = [];
