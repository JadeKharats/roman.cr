var data = {lines:[
{"lineNum":"    1","line":"require \"c/stdlib\""},
{"lineNum":"    2","line":"require \"c/stdio\""},
{"lineNum":"    3","line":"require \"c/string\""},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"# A `String` represents an immutable sequence of UTF-8 characters."},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# A `String` is typically created with a string literal, enclosing UTF-8 characters"},
{"lineNum":"    8","line":"# in double quotes:"},
{"lineNum":"    9","line":"#"},
{"lineNum":"   10","line":"# ```"},
{"lineNum":"   11","line":"# \"hello world\""},
{"lineNum":"   12","line":"# ```"},
{"lineNum":"   13","line":"#"},
{"lineNum":"   14","line":"# A backslash can be used to denote some characters inside the string:"},
{"lineNum":"   15","line":"#"},
{"lineNum":"   16","line":"# ```"},
{"lineNum":"   17","line":"# \"\\\"\" # double quote"},
{"lineNum":"   18","line":"# \"\\\\\" # backslash"},
{"lineNum":"   19","line":"# \"\\e\" # escape"},
{"lineNum":"   20","line":"# \"\\f\" # form feed"},
{"lineNum":"   21","line":"# \"\\n\" # newline"},
{"lineNum":"   22","line":"# \"\\r\" # carriage return"},
{"lineNum":"   23","line":"# \"\\t\" # tab"},
{"lineNum":"   24","line":"# \"\\v\" # vertical tab"},
{"lineNum":"   25","line":"# ```"},
{"lineNum":"   26","line":"#"},
{"lineNum":"   27","line":"# You can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:"},
{"lineNum":"   28","line":"#","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   29","line":"# ```"},
{"lineNum":"   30","line":"# \"\\u0041\" # == \"A\""},
{"lineNum":"   31","line":"# ```"},
{"lineNum":"   32","line":"#"},
{"lineNum":"   33","line":"# Or you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):"},
{"lineNum":"   34","line":"#"},
{"lineNum":"   35","line":"# ```"},
{"lineNum":"   36","line":"# \"\\u{41}\" # == \"A\""},
{"lineNum":"   37","line":"# ```"},
{"lineNum":"   38","line":"#"},
{"lineNum":"   39","line":"# A string can span multiple lines:"},
{"lineNum":"   40","line":"#"},
{"lineNum":"   41","line":"# ```"},
{"lineNum":"   42","line":"# \"hello"},
{"lineNum":"   43","line":"#       world\" # same as \"hello\\n      world\""},
{"lineNum":"   44","line":"# ```"},
{"lineNum":"   45","line":"#"},
{"lineNum":"   46","line":"# Note that in the above example trailing and leading spaces, as well as newlines,"},
{"lineNum":"   47","line":"# end up in the resulting string. To avoid this, you can split a string into multiple lines"},
{"lineNum":"   48","line":"# by joining multiple literals with a backslash:"},
{"lineNum":"   49","line":"#"},
{"lineNum":"   50","line":"# ```"},
{"lineNum":"   51","line":"# \"hello \" \\"},
{"lineNum":"   52","line":"# \"world, \" \\"},
{"lineNum":"   53","line":"# \"no newlines\" # same as \"hello world, no newlines\""},
{"lineNum":"   54","line":"# ```"},
{"lineNum":"   55","line":"#"},
{"lineNum":"   56","line":"# Alternatively, a backslash followed by a newline can be inserted inside the string literal:"},
{"lineNum":"   57","line":"#"},
{"lineNum":"   58","line":"# ```"},
{"lineNum":"   59","line":"# \"hello \\"},
{"lineNum":"   60","line":"#      world, \\"},
{"lineNum":"   61","line":"#      no newlines\" # same as \"hello world, no newlines\""},
{"lineNum":"   62","line":"# ```"},
{"lineNum":"   63","line":"#"},
{"lineNum":"   64","line":"# In this case, leading whitespace is not included in the resulting string."},
{"lineNum":"   65","line":"#"},
{"lineNum":"   66","line":"# If you need to write a string that has many double quotes, parentheses, or similar"},
{"lineNum":"   67","line":"# characters, you can use alternative literals:"},
{"lineNum":"   68","line":"#"},
{"lineNum":"   69","line":"# ```"},
{"lineNum":"   70","line":"# # Supports double quotes and nested parentheses"},
{"lineNum":"   71","line":"# %(hello (\"world\")) # same as \"hello (\\\"world\\\")\""},
{"lineNum":"   72","line":"#"},
{"lineNum":"   73","line":"# # Supports double quotes and nested brackets"},
{"lineNum":"   74","line":"# %[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\""},
{"lineNum":"   75","line":"#"},
{"lineNum":"   76","line":"# # Supports double quotes and nested curlies"},
{"lineNum":"   77","line":"# %{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\""},
{"lineNum":"   78","line":"#"},
{"lineNum":"   79","line":"# # Supports double quotes and nested angles"},
{"lineNum":"   80","line":"# %<hello <\"world\">> # same as \"hello <\\\"world\\\">\""},
{"lineNum":"   81","line":"# ```"},
{"lineNum":"   82","line":"#"},
{"lineNum":"   83","line":"# To create a `String` with embedded expressions, you can use string interpolation:"},
{"lineNum":"   84","line":"#"},
{"lineNum":"   85","line":"# ```"},
{"lineNum":"   86","line":"# a = 1"},
{"lineNum":"   87","line":"# b = 2"},
{"lineNum":"   88","line":"# \"sum = #{a + b}\" # \"sum = 3\""},
{"lineNum":"   89","line":"# ```"},
{"lineNum":"   90","line":"#"},
{"lineNum":"   91","line":"# This ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`."},
{"lineNum":"   92","line":"#"},
{"lineNum":"   93","line":"# If you need to dynamically build a string, use `String#build` or `IO::Memory`."},
{"lineNum":"   94","line":"#"},
{"lineNum":"   95","line":"# ### Non UTF-8 valid strings"},
{"lineNum":"   96","line":"#"},
{"lineNum":"   97","line":"# String might end up being conformed of bytes which are an invalid"},
{"lineNum":"   98","line":"# byte sequence according to UTF-8. This can happen if the string is created"},
{"lineNum":"   99","line":"# via one of the constructors that accept bytes, or when getting a string"},
{"lineNum":"  100","line":"# from `String.build` or `IO::Memory`. No exception will be raised, but"},
{"lineNum":"  101","line":"# invalid byte sequences, when asked as chars, will use the unicode replacement"},
{"lineNum":"  102","line":"# char (value 0xFFFD). For example:"},
{"lineNum":"  103","line":"#"},
{"lineNum":"  104","line":"# ```"},
{"lineNum":"  105","line":"# # here 255 is not a valid byte value in the UTF-8 encoding"},
{"lineNum":"  106","line":"# string = String.new(Bytes[255, 97])"},
{"lineNum":"  107","line":"# string.valid_encoding? # => false"},
{"lineNum":"  108","line":"#"},
{"lineNum":"  109","line":"# # The first char here is the unicode replacement char"},
{"lineNum":"  110","line":"# string.chars # => [\'ï¿½\', \'a\']"},
{"lineNum":"  111","line":"# ```"},
{"lineNum":"  112","line":"#"},
{"lineNum":"  113","line":"# One can also create strings with specific byte value in them by"},
{"lineNum":"  114","line":"# using octal and hexadecimal escape sequences:"},
{"lineNum":"  115","line":"#"},
{"lineNum":"  116","line":"# ```"},
{"lineNum":"  117","line":"# # Octal escape sequences"},
{"lineNum":"  118","line":"# \"\\101\" # # => \"A\""},
{"lineNum":"  119","line":"# \"\\12\"  # # => \"\\n\""},
{"lineNum":"  120","line":"# \"\\1\"   # string with one character with code point 1"},
{"lineNum":"  121","line":"# \"\\377\" # string with one byte with value 255"},
{"lineNum":"  122","line":"#"},
{"lineNum":"  123","line":"# # Hexadecimal escape sequences"},
{"lineNum":"  124","line":"# \"\\x41\" # # => \"A\""},
{"lineNum":"  125","line":"# \"\\xFF\" # string with one byte with value 255"},
{"lineNum":"  126","line":"# ```"},
{"lineNum":"  127","line":"#"},
{"lineNum":"  128","line":"# The reason for allowing strings that don\'t have a valid UTF-8 sequence"},
{"lineNum":"  129","line":"# is that the world is full of content that isn\'t properly encoded,"},
{"lineNum":"  130","line":"# and having a program raise an exception or stop because of this"},
{"lineNum":"  131","line":"# is not good. It\'s better if programs are more resilient, but"},
{"lineNum":"  132","line":"# show a replacement character when there\'s an error in incoming data."},
{"lineNum":"  133","line":"class String"},
{"lineNum":"  134","line":"  # :nodoc:"},
{"lineNum":"  135","line":"  TYPE_ID = \"\".crystal_type_id"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"  # :nodoc:"},
{"lineNum":"  138","line":"  HEADER_SIZE = sizeof({Int32, Int32, Int32})"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  include Comparable(self)"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"  macro inherited"},
{"lineNum":"  143","line":"    {{ raise \"Cannot inherit from String\" }}"},
{"lineNum":"  144","line":"  end"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"  # Creates a `String` from the given *slice*. `Bytes` will be copied from the slice."},
{"lineNum":"  147","line":"  #"},
{"lineNum":"  148","line":"  # This method is always safe to call, and the resulting string will have"},
{"lineNum":"  149","line":"  # the contents and size of the slice."},
{"lineNum":"  150","line":"  #"},
{"lineNum":"  151","line":"  # ```"},
{"lineNum":"  152","line":"  # slice = Slice.new(4) { |i| (\'a\'.ord + i).to_u8 }"},
{"lineNum":"  153","line":"  # String.new(slice) # => \"abcd\""},
{"lineNum":"  154","line":"  # ```"},
{"lineNum":"  155","line":"  def self.new(slice : Bytes)"},
{"lineNum":"  156","line":"    new(slice.pointer(slice.size), slice.size)"},
{"lineNum":"  157","line":"  end"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"  # Creates a new `String` from the given *bytes*, which are encoded in the given *encoding*."},
{"lineNum":"  160","line":"  #"},
{"lineNum":"  161","line":"  # The *invalid* argument can be:"},
{"lineNum":"  162","line":"  # * `nil`: an exception is raised on invalid byte sequences"},
{"lineNum":"  163","line":"  # * `:skip`: invalid byte sequences are ignored"},
{"lineNum":"  164","line":"  #"},
{"lineNum":"  165","line":"  # ```"},
{"lineNum":"  166","line":"  # slice = Slice.new(2, 0_u8)"},
{"lineNum":"  167","line":"  # slice[0] = 186_u8"},
{"lineNum":"  168","line":"  # slice[1] = 195_u8"},
{"lineNum":"  169","line":"  # String.new(slice, \"GB2312\") # => \"å¥½\""},
{"lineNum":"  170","line":"  # ```"},
{"lineNum":"  171","line":"  def self.new(bytes : Bytes, encoding : String, invalid : Symbol? = nil) : String"},
{"lineNum":"  172","line":"    String.build do |str|"},
{"lineNum":"  173","line":"      String.encode(bytes, encoding, \"UTF-8\", str, invalid)"},
{"lineNum":"  174","line":"    end"},
{"lineNum":"  175","line":"  end"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"  # Creates a `String` from a pointer. `Bytes` will be copied from the pointer."},
{"lineNum":"  178","line":"  #"},
{"lineNum":"  179","line":"  # This method is **unsafe**: the pointer must point to data that eventually"},
{"lineNum":"  180","line":"  # contains a zero byte that indicates the ends of the string. Otherwise,","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  181","line":"  # the result of this method is undefined and might cause a segmentation fault."},
{"lineNum":"  182","line":"  #"},
{"lineNum":"  183","line":"  # This method is typically used in C bindings, where you get a `char*` from a","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  184","line":"  # library and the library guarantees that this pointer eventually has an"},
{"lineNum":"  185","line":"  # ending zero byte."},
{"lineNum":"  186","line":"  #"},
{"lineNum":"  187","line":"  # ```"},
{"lineNum":"  188","line":"  # ptr = Pointer.malloc(5) { |i| i == 4 ? 0_u8 : (\'a\'.ord + i).to_u8 }"},
{"lineNum":"  189","line":"  # String.new(ptr) # => \"abcd\""},
{"lineNum":"  190","line":"  # ```"},
{"lineNum":"  191","line":"  def self.new(chars : UInt8*)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"    new(chars, LibC.strlen(chars))","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":"  193","line":"  end"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"  # Creates a new `String` from a pointer, indicating its bytesize count"},
{"lineNum":"  196","line":"  # and, optionally, the UTF-8 codepoints count (size). `Bytes` will be"},
{"lineNum":"  197","line":"  # copied from the pointer."},
{"lineNum":"  198","line":"  #"},
{"lineNum":"  199","line":"  # If the given size is zero, the amount of UTF-8 codepoints will be"},
{"lineNum":"  200","line":"  # lazily computed when needed."},
{"lineNum":"  201","line":"  #"},
{"lineNum":"  202","line":"  # ```"},
{"lineNum":"  203","line":"  # ptr = Pointer.malloc(4) { |i| (\'a\'.ord + i).to_u8 }"},
{"lineNum":"  204","line":"  # String.new(ptr, 2) # => \"ab\""},
{"lineNum":"  205","line":"  # ```"},
{"lineNum":"  206","line":"  def self.new(chars : UInt8*, bytesize, size = 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"    # Avoid allocating memory for the empty string"},
{"lineNum":"  208","line":"    return \"\" if bytesize == 0","class":"lineNoCov","hits":"0","possible_hits":"40",},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    new(bytesize) do |buffer|"},
{"lineNum":"  211","line":"      buffer.copy_from(chars, bytesize)"},
{"lineNum":"  212","line":"      {bytesize, size}"},
{"lineNum":"  213","line":"    end"},
{"lineNum":"  214","line":"  end"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"  # Creates a new `String` by allocating a buffer (`Pointer(UInt8)`) with the given capacity, then"},
{"lineNum":"  217","line":"  # yielding that buffer. The block must return a tuple with the bytesize and size"},
{"lineNum":"  218","line":"  # (UTF-8 codepoints count) of the String. If the returned size is zero, the UTF-8 codepoints"},
{"lineNum":"  219","line":"  # count will be lazily computed."},
{"lineNum":"  220","line":"  #"},
{"lineNum":"  221","line":"  # The bytesize returned by the block must be less than or equal to the"},
{"lineNum":"  222","line":"  # capacity given to this String, otherwise `ArgumentError` is raised."},
{"lineNum":"  223","line":"  #"},
{"lineNum":"  224","line":"  # If you need to build a `String` where the maximum capacity is unknown, use `String#build`."},
{"lineNum":"  225","line":"  #"},
{"lineNum":"  226","line":"  # ```"},
{"lineNum":"  227","line":"  # str = String.new(4) do |buffer|"},
{"lineNum":"  228","line":"  #   buffer[0] = \'a\'.ord.to_u8"},
{"lineNum":"  229","line":"  #   buffer[1] = \'b\'.ord.to_u8"},
{"lineNum":"  230","line":"  #   {2, 2}"},
{"lineNum":"  231","line":"  # end"},
{"lineNum":"  232","line":"  # str # => \"ab\""},
{"lineNum":"  233","line":"  # ```"},
{"lineNum":"  234","line":"  def self.new(capacity : Int)"},
{"lineNum":"  235","line":"    check_capacity_in_bounds(capacity)","class":"lineNoCov","hits":"0","possible_hits":"48",},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    str = GC.malloc_atomic(capacity.to_u32 + HEADER_SIZE + 1).as(UInt8*)"},
{"lineNum":"  238","line":"    buffer = str.as(String).to_unsafe"},
{"lineNum":"  239","line":"    bytesize, size = yield buffer","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    unless 0 <= bytesize <= capacity"},
{"lineNum":"  242","line":"      raise ArgumentError.new(\"Bytesize out of capacity bounds\")","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  243","line":"    end"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    buffer[bytesize] = 0_u8"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"    # Try to reclaim some memory if capacity is bigger than what was requested"},
{"lineNum":"  248","line":"    if bytesize < capacity","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  249","line":"      str = str.realloc(bytesize.to_u32 + HEADER_SIZE + 1)"},
{"lineNum":"  250","line":"    end"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    str_header = str.as({Int32, Int32, Int32}*)","class":"lineNoCov","hits":"0","possible_hits":"51",},
{"lineNum":"  253","line":"    str_header.value = {TYPE_ID, bytesize.to_i, size.to_i}"},
{"lineNum":"  254","line":"    str.as(String)"},
{"lineNum":"  255","line":"  end"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"  # Builds a `String` by creating a `String::Builder` with the given initial capacity, yielding"},
{"lineNum":"  258","line":"  # it to the block and finally getting a `String` out of it. The `String::Builder` automatically"},
{"lineNum":"  259","line":"  # resizes as needed."},
{"lineNum":"  260","line":"  #"},
{"lineNum":"  261","line":"  # ```"},
{"lineNum":"  262","line":"  # str = String.build do |str|"},
{"lineNum":"  263","line":"  #   str << \"hello \""},
{"lineNum":"  264","line":"  #   str << 1"},
{"lineNum":"  265","line":"  # end"},
{"lineNum":"  266","line":"  # str # => \"hello 1\""},
{"lineNum":"  267","line":"  # ```"},
{"lineNum":"  268","line":"  def self.build(capacity = 64) : self"},
{"lineNum":"  269","line":"    String::Builder.build(capacity) do |builder|"},
{"lineNum":"  270","line":"      yield builder"},
{"lineNum":"  271","line":"    end"},
{"lineNum":"  272","line":"  end"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"  # Returns the number of bytes in this string."},
{"lineNum":"  275","line":"  #"},
{"lineNum":"  276","line":"  # ```"},
{"lineNum":"  277","line":"  # \"hello\".bytesize # => 5"},
{"lineNum":"  278","line":"  # \"ä½ å¥½\".bytesize    # => 6"},
{"lineNum":"  279","line":"  # ```"},
{"lineNum":"  280","line":"  def bytesize"},
{"lineNum":"  281","line":"    @bytesize"},
{"lineNum":"  282","line":"  end"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"  # Returns the result of interpreting leading characters in this string as an"},
{"lineNum":"  285","line":"  # integer base *base* (between 2 and 36)."},
{"lineNum":"  286","line":"  #"},
{"lineNum":"  287","line":"  # If there is not a valid number at the start of this string,"},
{"lineNum":"  288","line":"  # or if the resulting integer doesn\'t fit an `Int32`, an `ArgumentError` is raised."},
{"lineNum":"  289","line":"  #"},
{"lineNum":"  290","line":"  # Options:"},
{"lineNum":"  291","line":"  # * **whitespace**: if `true`, leading and trailing whitespaces are allowed"},
{"lineNum":"  292","line":"  # * **underscore**: if `true`, underscores in numbers are allowed"},
{"lineNum":"  293","line":"  # * **prefix**: if `true`, the prefixes `\"0x\"`, `\"0\"` and `\"0b\"` override the base"},
{"lineNum":"  294","line":"  # * **strict**: if `true`, extraneous characters past the end of the number are disallowed"},
{"lineNum":"  295","line":"  #"},
{"lineNum":"  296","line":"  # ```"},
{"lineNum":"  297","line":"  # \"12345\".to_i             # => 12345"},
{"lineNum":"  298","line":"  # \"0a\".to_i                # raises ArgumentError"},
{"lineNum":"  299","line":"  # \"hello\".to_i             # raises ArgumentError"},
{"lineNum":"  300","line":"  # \"0a\".to_i(16)            # => 10"},
{"lineNum":"  301","line":"  # \"1100101\".to_i(2)        # => 101"},
{"lineNum":"  302","line":"  # \"1100101\".to_i(8)        # => 294977"},
{"lineNum":"  303","line":"  # \"1100101\".to_i(10)       # => 1100101"},
{"lineNum":"  304","line":"  # \"1100101\".to_i(base: 16) # => 17826049"},
{"lineNum":"  305","line":"  #"},
{"lineNum":"  306","line":"  # \"12_345\".to_i                   # raises ArgumentError"},
{"lineNum":"  307","line":"  # \"12_345\".to_i(underscore: true) # => 12345"},
{"lineNum":"  308","line":"  #"},
{"lineNum":"  309","line":"  # \"  12345  \".to_i                    # => 12345"},
{"lineNum":"  310","line":"  # \"  12345  \".to_i(whitespace: false) # raises ArgumentError"},
{"lineNum":"  311","line":"  #"},
{"lineNum":"  312","line":"  # \"0x123abc\".to_i               # raises ArgumentError"},
{"lineNum":"  313","line":"  # \"0x123abc\".to_i(prefix: true) # => 1194684"},
{"lineNum":"  314","line":"  #"},
{"lineNum":"  315","line":"  # \"99 red balloons\".to_i                # raises ArgumentError"},
{"lineNum":"  316","line":"  # \"99 red balloons\".to_i(strict: false) # => 99"},
{"lineNum":"  317","line":"  # ```"},
{"lineNum":"  318","line":"  def to_i(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":"    to_i32(base, whitespace, underscore, prefix, strict)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":"  end"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"  # Same as `#to_i`, but returns `nil` if there is not a valid number at the start"},
{"lineNum":"  323","line":"  # of this string, or if the resulting integer doesn\'t fit an `Int32`."},
{"lineNum":"  324","line":"  #"},
{"lineNum":"  325","line":"  # ```"},
{"lineNum":"  326","line":"  # \"12345\".to_i?             # => 12345"},
{"lineNum":"  327","line":"  # \"99 red balloons\".to_i?   # => nil"},
{"lineNum":"  328","line":"  # \"0a\".to_i?(strict: false) # => 0"},
{"lineNum":"  329","line":"  # \"hello\".to_i?             # => nil"},
{"lineNum":"  330","line":"  # ```"},
{"lineNum":"  331","line":"  def to_i?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true)"},
{"lineNum":"  332","line":"    to_i32?(base, whitespace, underscore, prefix, strict)"},
{"lineNum":"  333","line":"  end"},
{"lineNum":"  334","line":"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  335","line":"  # Same as `#to_i`, but returns the block\'s value if there is not a valid number at the start"},
{"lineNum":"  336","line":"  # of this string, or if the resulting integer doesn\'t fit an `Int32`."},
{"lineNum":"  337","line":"  #"},
{"lineNum":"  338","line":"  # ```"},
{"lineNum":"  339","line":"  # \"12345\".to_i { 0 } # => 12345"},
{"lineNum":"  340","line":"  # \"hello\".to_i { 0 } # => 0"},
{"lineNum":"  341","line":"  # ```"},
{"lineNum":"  342","line":"  def to_i(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)"},
{"lineNum":"  343","line":"    to_i32(base, whitespace, underscore, prefix, strict) { yield }"},
{"lineNum":"  344","line":"  end"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"  # Same as `#to_i` but returns an `Int8`.","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  347","line":"  def to_i8(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int8"},
{"lineNum":"  348","line":"    to_i8(base, whitespace, underscore, prefix, strict) { raise ArgumentError.new(\"Invalid Int8: #{self}\") }"},
{"lineNum":"  349","line":"  end"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"  # Same as `#to_i` but returns an `Int8` or `nil`."},
{"lineNum":"  352","line":"  def to_i8?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int8?"},
{"lineNum":"  353","line":"    to_i8(base, whitespace, underscore, prefix, strict) { nil }"},
{"lineNum":"  354","line":"  end"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"  # Same as `#to_i` but returns an `Int8` or the block\'s value."},
{"lineNum":"  357","line":"  def to_i8(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)"},
{"lineNum":"  358","line":"    gen_to_ i8, 127, 128"},
{"lineNum":"  359","line":"  end"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"  # Same as `#to_i` but returns an `UInt8`."},
{"lineNum":"  362","line":"  def to_u8(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt8"},
{"lineNum":"  363","line":"    to_u8(base, whitespace, underscore, prefix, strict) { raise ArgumentError.new(\"Invalid UInt8: #{self}\") }"},
{"lineNum":"  364","line":"  end"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"  # Same as `#to_i` but returns an `UInt8` or `nil`."},
{"lineNum":"  367","line":"  def to_u8?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt8?"},
{"lineNum":"  368","line":"    to_u8(base, whitespace, underscore, prefix, strict) { nil }"},
{"lineNum":"  369","line":"  end"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"  # Same as `#to_i` but returns an `UInt8` or the block\'s value."},
{"lineNum":"  372","line":"  def to_u8(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)"},
{"lineNum":"  373","line":"    gen_to_ u8, 255"},
{"lineNum":"  374","line":"  end"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"  # Same as `#to_i` but returns an `Int16`."},
{"lineNum":"  377","line":"  def to_i16(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int16"},
{"lineNum":"  378","line":"    to_i16(base, whitespace, underscore, prefix, strict) { raise ArgumentError.new(\"Invalid Int16: #{self}\") }"},
{"lineNum":"  379","line":"  end"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"  # Same as `#to_i` but returns an `Int16` or `nil`."},
{"lineNum":"  382","line":"  def to_i16?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int16?"},
{"lineNum":"  383","line":"    to_i16(base, whitespace, underscore, prefix, strict) { nil }"},
{"lineNum":"  384","line":"  end"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"  # Same as `#to_i` but returns an `Int16` or the block\'s value."},
{"lineNum":"  387","line":"  def to_i16(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)"},
{"lineNum":"  388","line":"    gen_to_ i16, 32767, 32768"},
{"lineNum":"  389","line":"  end"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"  # Same as `#to_i` but returns an `UInt16`."},
{"lineNum":"  392","line":"  def to_u16(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt16"},
{"lineNum":"  393","line":"    to_u16(base, whitespace, underscore, prefix, strict) { raise ArgumentError.new(\"Invalid UInt16: #{self}\") }"},
{"lineNum":"  394","line":"  end"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"  # Same as `#to_i` but returns an `UInt16` or `nil`."},
{"lineNum":"  397","line":"  def to_u16?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt16?"},
{"lineNum":"  398","line":"    to_u16(base, whitespace, underscore, prefix, strict) { nil }"},
{"lineNum":"  399","line":"  end"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"  # Same as `#to_i` but returns an `UInt16` or the block\'s value."},
{"lineNum":"  402","line":"  def to_u16(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)"},
{"lineNum":"  403","line":"    gen_to_ u16, 65535"},
{"lineNum":"  404","line":"  end"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"  # Same as `#to_i`."},
{"lineNum":"  407","line":"  def to_i32(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int32"},
{"lineNum":"  408","line":"    to_i32(base, whitespace, underscore, prefix, strict) { raise ArgumentError.new(\"Invalid Int32: #{self}\") }"},
{"lineNum":"  409","line":"  end"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"  # Same as `#to_i`."},
{"lineNum":"  412","line":"  def to_i32?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int32?"},
{"lineNum":"  413","line":"    to_i32(base, whitespace, underscore, prefix, strict) { nil }"},
{"lineNum":"  414","line":"  end"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"  # Same as `#to_i`."},
{"lineNum":"  417","line":"  def to_i32(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)"},
{"lineNum":"  418","line":"    gen_to_ i32, 2147483647, 2147483648","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  419","line":"  end"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"  # Same as `#to_i` but returns an `UInt32`."},
{"lineNum":"  422","line":"  def to_u32(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt32"},
{"lineNum":"  423","line":"    to_u32(base, whitespace, underscore, prefix, strict) { raise ArgumentError.new(\"Invalid UInt32: #{self}\") }"},
{"lineNum":"  424","line":"  end"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"  # Same as `#to_i` but returns an `UInt32` or `nil`."},
{"lineNum":"  427","line":"  def to_u32?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt32?"},
{"lineNum":"  428","line":"    to_u32(base, whitespace, underscore, prefix, strict) { nil }"},
{"lineNum":"  429","line":"  end"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"  # Same as `#to_i` but returns an `UInt32` or the block\'s value."},
{"lineNum":"  432","line":"  def to_u32(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)"},
{"lineNum":"  433","line":"    gen_to_ u32, 4294967295"},
{"lineNum":"  434","line":"  end"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"  # Same as `#to_i` but returns an `Int64`."},
{"lineNum":"  437","line":"  def to_i64(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int64"},
{"lineNum":"  438","line":"    to_i64(base, whitespace, underscore, prefix, strict) { raise ArgumentError.new(\"Invalid Int64: #{self}\") }"},
{"lineNum":"  439","line":"  end"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"  # Same as `#to_i` but returns an `Int64` or `nil`."},
{"lineNum":"  442","line":"  def to_i64?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : Int64?"},
{"lineNum":"  443","line":"    to_i64(base, whitespace, underscore, prefix, strict) { nil }"},
{"lineNum":"  444","line":"  end"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"  # Same as `#to_i` but returns an `Int64` or the block\'s value."},
{"lineNum":"  447","line":"  def to_i64(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)"},
{"lineNum":"  448","line":"    gen_to_ i64, 9223372036854775807, 9223372036854775808"},
{"lineNum":"  449","line":"  end"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"  # Same as `#to_i` but returns an `UInt64`."},
{"lineNum":"  452","line":"  def to_u64(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt64"},
{"lineNum":"  453","line":"    to_u64(base, whitespace, underscore, prefix, strict) { raise ArgumentError.new(\"Invalid UInt64: #{self}\") }"},
{"lineNum":"  454","line":"  end"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"  # Same as `#to_i` but returns an `UInt64` or `nil`."},
{"lineNum":"  457","line":"  def to_u64?(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true) : UInt64?"},
{"lineNum":"  458","line":"    to_u64(base, whitespace, underscore, prefix, strict) { nil }"},
{"lineNum":"  459","line":"  end"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"  # Same as `#to_i` but returns an `UInt64` or the block\'s value."},
{"lineNum":"  462","line":"  def to_u64(base : Int = 10, whitespace = true, underscore = false, prefix = false, strict = true, &block)"},
{"lineNum":"  463","line":"    gen_to_ u64"},
{"lineNum":"  464","line":"  end"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"  # :nodoc:"},
{"lineNum":"  467","line":"  CHAR_TO_DIGIT = begin"},
{"lineNum":"  468","line":"    table = StaticArray(Int8, 256).new(-1_i8)"},
{"lineNum":"  469","line":"    10_i8.times do |i|"},
{"lineNum":"  470","line":"      table.to_unsafe[48 + i] = i"},
{"lineNum":"  471","line":"    end"},
{"lineNum":"  472","line":"    26_i8.times do |i|"},
{"lineNum":"  473","line":"      table.to_unsafe[65 + i] = i + 10"},
{"lineNum":"  474","line":"      table.to_unsafe[97 + i] = i + 10"},
{"lineNum":"  475","line":"    end"},
{"lineNum":"  476","line":"    table"},
{"lineNum":"  477","line":"  end"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"  # :nodoc:"},
{"lineNum":"  480","line":"  CHAR_TO_DIGIT62 = begin"},
{"lineNum":"  481","line":"    table = CHAR_TO_DIGIT.clone"},
{"lineNum":"  482","line":"    26_i8.times do |i|"},
{"lineNum":"  483","line":"      table.to_unsafe[65 + i] = i + 36"},
{"lineNum":"  484","line":"    end"},
{"lineNum":"  485","line":"    table"},
{"lineNum":"  486","line":"  end"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"  # :nodoc:"},
{"lineNum":"  489","line":"  record ToU64Info,"},
{"lineNum":"  490","line":"    value : UInt64,"},
{"lineNum":"  491","line":"    negative : Bool,"},
{"lineNum":"  492","line":"    invalid : Bool"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"  private macro gen_to_(method, max_positive = nil, max_negative = nil)"},
{"lineNum":"  495","line":"    info = to_u64_info(base, whitespace, underscore, prefix, strict)"},
{"lineNum":"  496","line":"    return yield if info.invalid"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    if info.negative"},
{"lineNum":"  499","line":"      {% if max_negative %}"},
{"lineNum":"  500","line":"        return yield if info.value > {{max_negative}}"},
{"lineNum":"  501","line":"        -info.value.to_{{method}}"},
{"lineNum":"  502","line":"      {% else %}"},
{"lineNum":"  503","line":"        return yield"},
{"lineNum":"  504","line":"      {% end %}"},
{"lineNum":"  505","line":"    else"},
{"lineNum":"  506","line":"      {% if max_positive %}"},
{"lineNum":"  507","line":"        return yield if info.value > {{max_positive}}"},
{"lineNum":"  508","line":"      {% end %}"},
{"lineNum":"  509","line":"      info.value.to_{{method}}"},
{"lineNum":"  510","line":"    end"},
{"lineNum":"  511","line":"  end"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"  private def to_u64_info(base, whitespace, underscore, prefix, strict)"},
{"lineNum":"  514","line":"    raise ArgumentError.new(\"Invalid base #{base}\") unless 2 <= base <= 36 || base == 62"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"    ptr = to_unsafe"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"    # Skip leading whitespace"},
{"lineNum":"  519","line":"    if whitespace"},
{"lineNum":"  520","line":"      while ptr.value.unsafe_chr.ascii_whitespace?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  521","line":"        ptr += 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  522","line":"      end"},
{"lineNum":"  523","line":"    end"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"    negative = false"},
{"lineNum":"  526","line":"    found_digit = false"},
{"lineNum":"  527","line":"    mul_overflow = ~0_u64 / base"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"    # Check + and -"},
{"lineNum":"  530","line":"    case ptr.value.unsafe_chr"},
{"lineNum":"  531","line":"    when \'+\'"},
{"lineNum":"  532","line":"      ptr += 1"},
{"lineNum":"  533","line":"    when \'-\'"},
{"lineNum":"  534","line":"      negative = true"},
{"lineNum":"  535","line":"      ptr += 1"},
{"lineNum":"  536","line":"    end"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"    # Check leading zero"},
{"lineNum":"  539","line":"    if ptr.value.unsafe_chr == \'0\'","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  540","line":"      ptr += 1"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"      if prefix"},
{"lineNum":"  543","line":"        case ptr.value.unsafe_chr"},
{"lineNum":"  544","line":"        when \'b\'"},
{"lineNum":"  545","line":"          base = 2"},
{"lineNum":"  546","line":"          ptr += 1"},
{"lineNum":"  547","line":"        when \'x\'"},
{"lineNum":"  548","line":"          base = 16"},
{"lineNum":"  549","line":"          ptr += 1"},
{"lineNum":"  550","line":"        else"},
{"lineNum":"  551","line":"          base = 8"},
{"lineNum":"  552","line":"        end"},
{"lineNum":"  553","line":"        found_digit = false"},
{"lineNum":"  554","line":"      else"},
{"lineNum":"  555","line":"        found_digit = true"},
{"lineNum":"  556","line":"      end"},
{"lineNum":"  557","line":"    end"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"    value = 0_u64"},
{"lineNum":"  560","line":"    last_is_underscore = true"},
{"lineNum":"  561","line":"    invalid = false"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"    digits = (base == 62 ? CHAR_TO_DIGIT62 : CHAR_TO_DIGIT).to_unsafe","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  564","line":"    while ptr.value != 0","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  565","line":"      if ptr.value.unsafe_chr == \'_\' && underscore"},
{"lineNum":"  566","line":"        break if last_is_underscore"},
{"lineNum":"  567","line":"        last_is_underscore = true"},
{"lineNum":"  568","line":"        ptr += 1"},
{"lineNum":"  569","line":"        next"},
{"lineNum":"  570","line":"      end"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"      last_is_underscore = false"},
{"lineNum":"  573","line":"      digit = digits[ptr.value]"},
{"lineNum":"  574","line":"      if digit == -1 || digit >= base"},
{"lineNum":"  575","line":"        break"},
{"lineNum":"  576","line":"      end"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"      if value > mul_overflow","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  579","line":"        invalid = true"},
{"lineNum":"  580","line":"        break","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  581","line":"      end"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"      value *= base"},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"      old = value"},
{"lineNum":"  586","line":"      value += digit"},
{"lineNum":"  587","line":"      if value < old"},
{"lineNum":"  588","line":"        invalid = true"},
{"lineNum":"  589","line":"        break"},
{"lineNum":"  590","line":"      end"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"      found_digit = true"},
{"lineNum":"  593","line":"      ptr += 1"},
{"lineNum":"  594","line":"    end"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"    if found_digit","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  597","line":"      unless ptr.value == 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  598","line":"        if whitespace"},
{"lineNum":"  599","line":"          while ptr.value.unsafe_chr.ascii_whitespace?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  600","line":"            ptr += 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":"          end"},
{"lineNum":"  602","line":"        end"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"        if strict && ptr.value != 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  605","line":"          invalid = true"},
{"lineNum":"  606","line":"        end"},
{"lineNum":"  607","line":"      end"},
{"lineNum":"  608","line":"    else"},
{"lineNum":"  609","line":"      invalid = true"},
{"lineNum":"  610","line":"    end"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"    ToU64Info.new value, negative, invalid"},
{"lineNum":"  613","line":"  end"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"  # Returns the result of interpreting characters in this string as a floating point number (`Float64`)."},
{"lineNum":"  616","line":"  # This method raises an exception if the string is not a valid float representation."},
{"lineNum":"  617","line":"  #"},
{"lineNum":"  618","line":"  # Options:"},
{"lineNum":"  619","line":"  # * **whitespace**: if `true`, leading and trailing whitespaces are allowed"},
{"lineNum":"  620","line":"  # * **strict**: if `true`, extraneous characters past the end of the number are disallowed"},
{"lineNum":"  621","line":"  #"},
{"lineNum":"  622","line":"  # ```"},
{"lineNum":"  623","line":"  # \"123.45e1\".to_f                # => 1234.5"},
{"lineNum":"  624","line":"  # \"45.67 degrees\".to_f           # raises ArgumentError"},
{"lineNum":"  625","line":"  # \"thx1138\".to_f(strict: false)  # raises ArgumentError"},
{"lineNum":"  626","line":"  # \" 1.2\".to_f(whitespace: false) # raises ArgumentError"},
{"lineNum":"  627","line":"  # \"1.2foo\".to_f(strict: false)   # => 1.2"},
{"lineNum":"  628","line":"  # ```"},
{"lineNum":"  629","line":"  def to_f(whitespace = true, strict = true)"},
{"lineNum":"  630","line":"    to_f64(whitespace: whitespace, strict: strict)"},
{"lineNum":"  631","line":"  end"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"  # Returns the result of interpreting characters in this string as a floating point number (`Float64`)."},
{"lineNum":"  634","line":"  # This method returns `nil` if the string is not a valid float representation."},
{"lineNum":"  635","line":"  #"},
{"lineNum":"  636","line":"  # Options:"},
{"lineNum":"  637","line":"  # * **whitespace**: if `true`, leading and trailing whitespaces are allowed"},
{"lineNum":"  638","line":"  # * **strict**: if `true`, extraneous characters past the end of the number are disallowed"},
{"lineNum":"  639","line":"  #"},
{"lineNum":"  640","line":"  # ```"},
{"lineNum":"  641","line":"  # \"123.45e1\".to_f?                # => 1234.5"},
{"lineNum":"  642","line":"  # \"45.67 degrees\".to_f?           # => nil"},
{"lineNum":"  643","line":"  # \"thx1138\".to_f?                 # => nil"},
{"lineNum":"  644","line":"  # \" 1.2\".to_f?(whitespace: false) # => nil"},
{"lineNum":"  645","line":"  # \"1.2foo\".to_f?(strict: false)   # => 1.2"},
{"lineNum":"  646","line":"  # ```"},
{"lineNum":"  647","line":"  def to_f?(whitespace = true, strict = true)"},
{"lineNum":"  648","line":"    to_f64?(whitespace: whitespace, strict: strict)"},
{"lineNum":"  649","line":"  end"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"  # Same as `#to_f` but returns a Float32."},
{"lineNum":"  652","line":"  def to_f32(whitespace = true, strict = true)"},
{"lineNum":"  653","line":"    to_f32?(whitespace: whitespace, strict: strict) || raise ArgumentError.new(\"Invalid Float32: #{self}\")"},
{"lineNum":"  654","line":"  end"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"  # Same as `#to_f?` but returns a Float32."},
{"lineNum":"  657","line":"  def to_f32?(whitespace = true, strict = true)"},
{"lineNum":"  658","line":"    to_f_impl(whitespace: whitespace, strict: strict) do"},
{"lineNum":"  659","line":"      v = LibC.strtof self, out endptr"},
{"lineNum":"  660","line":"      {v, endptr}"},
{"lineNum":"  661","line":"    end"},
{"lineNum":"  662","line":"  end"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"  # Same as `#to_f`."},
{"lineNum":"  665","line":"  def to_f64(whitespace = true, strict = true)"},
{"lineNum":"  666","line":"    to_f64?(whitespace: whitespace, strict: strict) || raise ArgumentError.new(\"Invalid Float64: #{self}\")"},
{"lineNum":"  667","line":"  end"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"  # Same as `#to_f?`."},
{"lineNum":"  670","line":"  def to_f64?(whitespace = true, strict = true)"},
{"lineNum":"  671","line":"    to_f_impl(whitespace: whitespace, strict: strict) do"},
{"lineNum":"  672","line":"      v = LibC.strtod self, out endptr"},
{"lineNum":"  673","line":"      {v, endptr}"},
{"lineNum":"  674","line":"    end"},
{"lineNum":"  675","line":"  end"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"  private def to_f_impl(whitespace = true, strict = true)"},
{"lineNum":"  678","line":"    return unless whitespace || \'0\' <= self[0] <= \'9\' || self[0] == \'-\' || self[0] == \'+\'"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"    v, endptr = yield"},
{"lineNum":"  681","line":"    string_end = to_unsafe + bytesize"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"    # blank string"},
{"lineNum":"  684","line":"    return if endptr == to_unsafe"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"    if strict"},
{"lineNum":"  687","line":"      if whitespace"},
{"lineNum":"  688","line":"        while endptr < string_end && endptr.value.chr.ascii_whitespace?"},
{"lineNum":"  689","line":"          endptr += 1"},
{"lineNum":"  690","line":"        end"},
{"lineNum":"  691","line":"      end"},
{"lineNum":"  692","line":"      # reached the end of the string"},
{"lineNum":"  693","line":"      v if endptr == string_end"},
{"lineNum":"  694","line":"    else"},
{"lineNum":"  695","line":"      ptr = to_unsafe"},
{"lineNum":"  696","line":"      if whitespace"},
{"lineNum":"  697","line":"        while ptr < string_end && ptr.value.chr.ascii_whitespace?"},
{"lineNum":"  698","line":"          ptr += 1"},
{"lineNum":"  699","line":"        end"},
{"lineNum":"  700","line":"      end"},
{"lineNum":"  701","line":"      # consumed some bytes"},
{"lineNum":"  702","line":"      v if endptr > ptr"},
{"lineNum":"  703","line":"    end"},
{"lineNum":"  704","line":"  end"},
{"lineNum":"  705","line":""},
{"lineNum":"  706","line":"  # Returns the `Char` at the given *index*, or raises `IndexError` if out of bounds."},
{"lineNum":"  707","line":"  #"},
{"lineNum":"  708","line":"  # Negative indices can be used to start counting from the end of the string."},
{"lineNum":"  709","line":"  #"},
{"lineNum":"  710","line":"  # ```"},
{"lineNum":"  711","line":"  # \"hello\"[0]  # \'h\'"},
{"lineNum":"  712","line":"  # \"hello\"[1]  # \'e\'"},
{"lineNum":"  713","line":"  # \"hello\"[-1] # \'o\'"},
{"lineNum":"  714","line":"  # \"hello\"[-2] # \'l\'"},
{"lineNum":"  715","line":"  # \"hello\"[5]  # raises IndexError"},
{"lineNum":"  716","line":"  # ```"},
{"lineNum":"  717","line":"  def [](index : Int)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  718","line":"    at(index) { raise IndexError.new }"},
{"lineNum":"  719","line":"  end"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"  # Returns a substring by using a Range\'s *begin* and *end*"},
{"lineNum":"  722","line":"  # as character indices. Indices can be negative to start"},
{"lineNum":"  723","line":"  # counting from the end of the string."},
{"lineNum":"  724","line":"  #"},
{"lineNum":"  725","line":"  # Raises `IndexError` if the range\'s start is not in range."},
{"lineNum":"  726","line":"  #"},
{"lineNum":"  727","line":"  # ```"},
{"lineNum":"  728","line":"  # \"hello\"[0..2]   # \"hel\""},
{"lineNum":"  729","line":"  # \"hello\"[0...2]  # \"he\""},
{"lineNum":"  730","line":"  # \"hello\"[1..-1]  # \"ello\""},
{"lineNum":"  731","line":"  # \"hello\"[1...-1] # \"ell\""},
{"lineNum":"  732","line":"  # ```"},
{"lineNum":"  733","line":"  def [](range : Range(Int, Int))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  734","line":"    self[*Indexable.range_to_index_and_count(range, size)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  735","line":"  end"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"  # Returns a substring starting from the *start* character"},
{"lineNum":"  738","line":"  # of size *count*."},
{"lineNum":"  739","line":"  #"},
{"lineNum":"  740","line":"  # The *start* argument can be negative to start counting"},
{"lineNum":"  741","line":"  # from the end of the string."},
{"lineNum":"  742","line":"  #"},
{"lineNum":"  743","line":"  # Raises `IndexError` if *start* isn\'t in range."},
{"lineNum":"  744","line":"  #"},
{"lineNum":"  745","line":"  # Raises `ArgumentError` if *count* is negative."},
{"lineNum":"  746","line":"  def [](start : Int, count : Int)"},
{"lineNum":"  747","line":"    if ascii_only?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  748","line":"      return byte_slice(start, count)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  749","line":"    end"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"    start += size if start < 0"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"    start_pos = nil"},
{"lineNum":"  754","line":"    end_pos = nil"},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"    reader = Char::Reader.new(self)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  757","line":"    i = 0"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"    reader.each do |char|"},
{"lineNum":"  760","line":"      if i == start","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  761","line":"        start_pos = reader.pos","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  762","line":"      elsif count >= 0 && i == start + count"},
{"lineNum":"  763","line":"        end_pos = reader.pos","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  764","line":"        i += 1"},
{"lineNum":"  765","line":"        break","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  766","line":"      end"},
{"lineNum":"  767","line":"      i += 1"},
{"lineNum":"  768","line":"    end"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"    end_pos ||= reader.pos"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"    if start_pos","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  773","line":"      raise ArgumentError.new \"Negative count\" if count < 0"},
{"lineNum":"  774","line":"      return \"\" if count == 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  775","line":""},
{"lineNum":"  776","line":"      count = end_pos - start_pos"},
{"lineNum":"  777","line":"      return self if count == bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"      String.new(count) do |buffer|"},
{"lineNum":"  780","line":"        buffer.copy_from(to_unsafe + start_pos, count)"},
{"lineNum":"  781","line":"        {count, 0}"},
{"lineNum":"  782","line":"      end"},
{"lineNum":"  783","line":"    elsif start == i"},
{"lineNum":"  784","line":"      if count >= 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  785","line":"        return \"\""},
{"lineNum":"  786","line":"      else"},
{"lineNum":"  787","line":"        raise ArgumentError.new \"Negative count\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  788","line":"      end"},
{"lineNum":"  789","line":"    else"},
{"lineNum":"  790","line":"      raise IndexError.new"},
{"lineNum":"  791","line":"    end"},
{"lineNum":"  792","line":"  end"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"  def []?(index : Int)"},
{"lineNum":"  795","line":"    at(index) { nil }"},
{"lineNum":"  796","line":"  end"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"  def []?(str : String | Char)"},
{"lineNum":"  799","line":"    includes?(str) ? str : nil"},
{"lineNum":"  800","line":"  end"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"  def []?(regex : Regex)"},
{"lineNum":"  803","line":"    self[regex, 0]?"},
{"lineNum":"  804","line":"  end"},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":"  def []?(regex : Regex, group)"},
{"lineNum":"  807","line":"    match = match(regex)"},
{"lineNum":"  808","line":"    match[group]? if match"},
{"lineNum":"  809","line":"  end"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"  def [](str : String | Char)"},
{"lineNum":"  812","line":"    self[str]?.not_nil!"},
{"lineNum":"  813","line":"  end"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"  def [](regex : Regex)"},
{"lineNum":"  816","line":"    self[regex]?.not_nil!"},
{"lineNum":"  817","line":"  end"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"  def [](regex : Regex, group)"},
{"lineNum":"  820","line":"    self[regex, group]?.not_nil!"},
{"lineNum":"  821","line":"  end"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"  def at(index : Int)"},
{"lineNum":"  824","line":"    at(index) { raise IndexError.new }"},
{"lineNum":"  825","line":"  end"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"  def at(index : Int)"},
{"lineNum":"  828","line":"    if ascii_only?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  829","line":"      byte = byte_at?(index)"},
{"lineNum":"  830","line":"      if byte"},
{"lineNum":"  831","line":"        return byte < 0x80 ? byte.unsafe_chr : Char::REPLACEMENT","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  832","line":"      else"},
{"lineNum":"  833","line":"        return yield"},
{"lineNum":"  834","line":"      end"},
{"lineNum":"  835","line":"    end"},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"    index += size if index < 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"    byte_index = char_index_to_byte_index(index)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  840","line":"    if byte_index && byte_index < @bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  841","line":"      reader = Char::Reader.new(self, pos: byte_index)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  842","line":"      return reader.current_char"},
{"lineNum":"  843","line":"    else"},
{"lineNum":"  844","line":"      yield"},
{"lineNum":"  845","line":"    end"},
{"lineNum":"  846","line":"  end"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"  def byte_slice(start : Int, count : Int)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  849","line":"    start += bytesize if start < 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  850","line":"    single_byte_optimizable = ascii_only?"},
{"lineNum":"  851","line":""},
{"lineNum":"  852","line":"    if 0 <= start < bytesize"},
{"lineNum":"  853","line":"      raise ArgumentError.new \"Negative count\" if count < 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"      count = bytesize - start if start + count > bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  856","line":"      return \"\" if count == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  857","line":"      return self if count == bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"      String.new(count) do |buffer|"},
{"lineNum":"  860","line":"        buffer.copy_from(to_unsafe + start, count)"},
{"lineNum":"  861","line":"        slice_size = single_byte_optimizable ? count : 0"},
{"lineNum":"  862","line":"        {count, slice_size}"},
{"lineNum":"  863","line":"      end"},
{"lineNum":"  864","line":"    elsif start == bytesize"},
{"lineNum":"  865","line":"      if count >= 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  866","line":"        return \"\""},
{"lineNum":"  867","line":"      else"},
{"lineNum":"  868","line":"        raise ArgumentError.new \"Negative count\""},
{"lineNum":"  869","line":"      end"},
{"lineNum":"  870","line":"    else"},
{"lineNum":"  871","line":"      raise IndexError.new","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  872","line":"    end"},
{"lineNum":"  873","line":"  end"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"  def byte_slice(start : Int)"},
{"lineNum":"  876","line":"    byte_slice start, bytesize - start"},
{"lineNum":"  877","line":"  end"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"  def codepoint_at(index)"},
{"lineNum":"  880","line":"    char_at(index).ord"},
{"lineNum":"  881","line":"  end"},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"  def char_at(index)"},
{"lineNum":"  884","line":"    self[index]"},
{"lineNum":"  885","line":"  end"},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"  def byte_at(index)"},
{"lineNum":"  888","line":"    byte_at(index) { raise IndexError.new }"},
{"lineNum":"  889","line":"  end"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"  def byte_at?(index)"},
{"lineNum":"  892","line":"    byte_at(index) { nil }"},
{"lineNum":"  893","line":"  end"},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"  def byte_at(index)"},
{"lineNum":"  896","line":"    index += bytesize if index < 0","class":"lineNoCov","hits":"0","possible_hits":"49",},
{"lineNum":"  897","line":"    if 0 <= index < bytesize"},
{"lineNum":"  898","line":"      to_unsafe[index]","class":"lineNoCov","hits":"0","possible_hits":"38",},
{"lineNum":"  899","line":"    else"},
{"lineNum":"  900","line":"      yield"},
{"lineNum":"  901","line":"    end"},
{"lineNum":"  902","line":"  end"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"  def unsafe_byte_at(index)"},
{"lineNum":"  905","line":"    to_unsafe[index]"},
{"lineNum":"  906","line":"  end"},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"  # Returns a new `String` with each uppercase letter replaced with its lowercase"},
{"lineNum":"  909","line":"  # counterpart."},
{"lineNum":"  910","line":"  #"},
{"lineNum":"  911","line":"  # ```"},
{"lineNum":"  912","line":"  # \"hEllO\".downcase # => \"hello\""},
{"lineNum":"  913","line":"  # ```"},
{"lineNum":"  914","line":"  def downcase(options = Unicode::CaseOptions::None)"},
{"lineNum":"  915","line":"    return self if empty?"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"    if ascii_only? && (options.none? || options.ascii?)"},
{"lineNum":"  918","line":"      String.new(bytesize) do |buffer|"},
{"lineNum":"  919","line":"        bytesize.times do |i|"},
{"lineNum":"  920","line":"          buffer[i] = to_unsafe[i].unsafe_chr.downcase.ord.to_u8"},
{"lineNum":"  921","line":"        end"},
{"lineNum":"  922","line":"        {@bytesize, @length}"},
{"lineNum":"  923","line":"      end"},
{"lineNum":"  924","line":"    else"},
{"lineNum":"  925","line":"      String.build(bytesize) do |io|"},
{"lineNum":"  926","line":"        each_char do |char|"},
{"lineNum":"  927","line":"          char.downcase(options) do |res|"},
{"lineNum":"  928","line":"            io << res"},
{"lineNum":"  929","line":"          end"},
{"lineNum":"  930","line":"        end"},
{"lineNum":"  931","line":"      end"},
{"lineNum":"  932","line":"    end"},
{"lineNum":"  933","line":"  end"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"  # Returns a new `String` with each lowercase letter replaced with its uppercase"},
{"lineNum":"  936","line":"  # counterpart."},
{"lineNum":"  937","line":"  #"},
{"lineNum":"  938","line":"  # ```"},
{"lineNum":"  939","line":"  # \"hEllO\".upcase # => \"HELLO\""},
{"lineNum":"  940","line":"  # ```"},
{"lineNum":"  941","line":"  def upcase(options = Unicode::CaseOptions::None)"},
{"lineNum":"  942","line":"    return self if empty?"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"    if ascii_only? && (options.none? || options.ascii?)"},
{"lineNum":"  945","line":"      String.new(bytesize) do |buffer|"},
{"lineNum":"  946","line":"        bytesize.times do |i|"},
{"lineNum":"  947","line":"          buffer[i] = to_unsafe[i].unsafe_chr.upcase.ord.to_u8"},
{"lineNum":"  948","line":"        end"},
{"lineNum":"  949","line":"        {@bytesize, @length}"},
{"lineNum":"  950","line":"      end"},
{"lineNum":"  951","line":"    else"},
{"lineNum":"  952","line":"      String.build(bytesize) do |io|"},
{"lineNum":"  953","line":"        each_char do |char|"},
{"lineNum":"  954","line":"          char.upcase(options) do |res|"},
{"lineNum":"  955","line":"            io << res"},
{"lineNum":"  956","line":"          end"},
{"lineNum":"  957","line":"        end"},
{"lineNum":"  958","line":"      end"},
{"lineNum":"  959","line":"    end"},
{"lineNum":"  960","line":"  end"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"  # Returns a new `String` with the first letter converted to uppercase and every"},
{"lineNum":"  963","line":"  # subsequent letter converted to lowercase."},
{"lineNum":"  964","line":"  #"},
{"lineNum":"  965","line":"  # ```"},
{"lineNum":"  966","line":"  # \"hEllO\".capitalize # => \"Hello\""},
{"lineNum":"  967","line":"  # ```"},
{"lineNum":"  968","line":"  def capitalize(options = Unicode::CaseOptions::None)"},
{"lineNum":"  969","line":"    return self if empty?"},
{"lineNum":"  970","line":""},
{"lineNum":"  971","line":"    if ascii_only? && (options.none? || options.ascii?)"},
{"lineNum":"  972","line":"      String.new(bytesize) do |buffer|"},
{"lineNum":"  973","line":"        bytesize.times do |i|"},
{"lineNum":"  974","line":"          if i == 0"},
{"lineNum":"  975","line":"            buffer[i] = to_unsafe[i].unsafe_chr.upcase.ord.to_u8"},
{"lineNum":"  976","line":"          else"},
{"lineNum":"  977","line":"            buffer[i] = to_unsafe[i].unsafe_chr.downcase.ord.to_u8"},
{"lineNum":"  978","line":"          end"},
{"lineNum":"  979","line":"        end"},
{"lineNum":"  980","line":"        {@bytesize, @length}"},
{"lineNum":"  981","line":"      end"},
{"lineNum":"  982","line":"    else"},
{"lineNum":"  983","line":"      String.build(bytesize) do |io|"},
{"lineNum":"  984","line":"        each_char_with_index do |char, i|"},
{"lineNum":"  985","line":"          if i == 0"},
{"lineNum":"  986","line":"            char.upcase(options) { |c| io << c }"},
{"lineNum":"  987","line":"          else"},
{"lineNum":"  988","line":"            char.downcase(options) { |c| io << c }"},
{"lineNum":"  989","line":"          end"},
{"lineNum":"  990","line":"        end"},
{"lineNum":"  991","line":"      end"},
{"lineNum":"  992","line":"    end"},
{"lineNum":"  993","line":"  end"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"  # Returns a new `String` with the last carriage return removed (that is, it"},
{"lineNum":"  996","line":"  # will remove \\n, \\r, and \\r\\n)."},
{"lineNum":"  997","line":"  #"},
{"lineNum":"  998","line":"  # ```"},
{"lineNum":"  999","line":"  # \"string\\r\\n\".chomp # => \"string\""},
{"lineNum":" 1000","line":"  # \"string\\n\\r\".chomp # => \"string\\n\""},
{"lineNum":" 1001","line":"  # \"string\\n\".chomp   # => \"string\""},
{"lineNum":" 1002","line":"  # \"string\".chomp     # => \"string\""},
{"lineNum":" 1003","line":"  # \"x\".chomp.chomp    # => \"x\""},
{"lineNum":" 1004","line":"  # ```"},
{"lineNum":" 1005","line":"  def chomp","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1006","line":"    return self if empty?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":"    case to_unsafe[bytesize - 1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1009","line":"    when \'\\n\'","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1010","line":"      if bytesize > 1 && to_unsafe[bytesize - 2] === \'\\r\'","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1011","line":"        unsafe_byte_slice_string(0, bytesize - 2)"},
{"lineNum":" 1012","line":"      else"},
{"lineNum":" 1013","line":"        unsafe_byte_slice_string(0, bytesize - 1)"},
{"lineNum":" 1014","line":"      end"},
{"lineNum":" 1015","line":"    when \'\\r\'"},
{"lineNum":" 1016","line":"      unsafe_byte_slice_string(0, bytesize - 1)"},
{"lineNum":" 1017","line":"    else"},
{"lineNum":" 1018","line":"      self"},
{"lineNum":" 1019","line":"    end"},
{"lineNum":" 1020","line":"  end"},
{"lineNum":" 1021","line":""},
{"lineNum":" 1022","line":"  # Returns a new `String` with *suffix* removed from the end of the string."},
{"lineNum":" 1023","line":"  # If *suffix* is `\'\\n\'` then `\"\\r\\n\"` is also removed if the string ends with it,"},
{"lineNum":" 1024","line":"  #"},
{"lineNum":" 1025","line":"  # ```"},
{"lineNum":" 1026","line":"  # \"hello\".chomp(\'o\') # => \"hell\""},
{"lineNum":" 1027","line":"  # \"hello\".chomp(\'a\') # => \"hello\""},
{"lineNum":" 1028","line":"  # ```"},
{"lineNum":" 1029","line":"  def chomp(suffix : Char)"},
{"lineNum":" 1030","line":"    if suffix == \'\\n\'"},
{"lineNum":" 1031","line":"      chomp"},
{"lineNum":" 1032","line":"    elsif ends_with?(suffix)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1033","line":"      unsafe_byte_slice_string(0, bytesize - suffix.bytesize)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1034","line":"    else"},
{"lineNum":" 1035","line":"      self"},
{"lineNum":" 1036","line":"    end"},
{"lineNum":" 1037","line":"  end"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"  # Returns a new `String` with *suffix* removed from the end of the string."},
{"lineNum":" 1040","line":"  # If *suffix* is `\"\\n\"` then `\"\\r\\n\"` is also removed if the string ends with it,"},
{"lineNum":" 1041","line":"  #"},
{"lineNum":" 1042","line":"  # ```"},
{"lineNum":" 1043","line":"  # \"hello\".chomp(\"llo\") # => \"he\""},
{"lineNum":" 1044","line":"  # \"hello\".chomp(\"ol\")  # => \"hello\""},
{"lineNum":" 1045","line":"  # ```"},
{"lineNum":" 1046","line":"  def chomp(suffix : String)"},
{"lineNum":" 1047","line":"    if suffix.bytesize == 1"},
{"lineNum":" 1048","line":"      chomp(suffix.to_unsafe[0].unsafe_chr)"},
{"lineNum":" 1049","line":"    elsif ends_with?(suffix)"},
{"lineNum":" 1050","line":"      unsafe_byte_slice_string(0, bytesize - suffix.bytesize)"},
{"lineNum":" 1051","line":"    else"},
{"lineNum":" 1052","line":"      self"},
{"lineNum":" 1053","line":"    end"},
{"lineNum":" 1054","line":"  end"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"  # Returns a new `String` with the first char removed from it."},
{"lineNum":" 1057","line":"  # Applying lchop to an empty string returns an empty string."},
{"lineNum":" 1058","line":"  #"},
{"lineNum":" 1059","line":"  # ```"},
{"lineNum":" 1060","line":"  # \"hello\".lchop # => \"ello\""},
{"lineNum":" 1061","line":"  # \"\".lchop      # => \"\""},
{"lineNum":" 1062","line":"  # ```"},
{"lineNum":" 1063","line":"  def lchop"},
{"lineNum":" 1064","line":"    return \"\" if empty?"},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"    reader = Char::Reader.new(self)"},
{"lineNum":" 1067","line":"    unsafe_byte_slice_string(reader.current_char_width, bytesize - reader.current_char_width)"},
{"lineNum":" 1068","line":"  end"},
{"lineNum":" 1069","line":""},
{"lineNum":" 1070","line":"  # Returns a new `String` with *prefix* removed from the beginning of the string."},
{"lineNum":" 1071","line":"  #"},
{"lineNum":" 1072","line":"  # ```"},
{"lineNum":" 1073","line":"  # \"hello\".lchop(\'h\') # => \"ello\""},
{"lineNum":" 1074","line":"  # \"hello\".lchop(\'g\') # => \"hello\""},
{"lineNum":" 1075","line":"  # ```"},
{"lineNum":" 1076","line":"  def lchop(prefix : Char)"},
{"lineNum":" 1077","line":"    if starts_with?(prefix)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1078","line":"      unsafe_byte_slice_string(prefix.bytesize, bytesize - prefix.bytesize)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1079","line":"    else"},
{"lineNum":" 1080","line":"      self"},
{"lineNum":" 1081","line":"    end"},
{"lineNum":" 1082","line":"  end"},
{"lineNum":" 1083","line":""},
{"lineNum":" 1084","line":"  # Returns a new `String` with *prefix* removed from the beginning of the string."},
{"lineNum":" 1085","line":"  #"},
{"lineNum":" 1086","line":"  # ```"},
{"lineNum":" 1087","line":"  # \"hello\".lchop(\"hel\") # => \"lo\""},
{"lineNum":" 1088","line":"  # \"hello\".lchop(\"eh\")  # => \"hello\""},
{"lineNum":" 1089","line":"  # ```"},
{"lineNum":" 1090","line":"  def lchop(prefix : String)"},
{"lineNum":" 1091","line":"    if starts_with?(prefix)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1092","line":"      unsafe_byte_slice_string(prefix.bytesize, bytesize - prefix.bytesize)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1093","line":"    else"},
{"lineNum":" 1094","line":"      self"},
{"lineNum":" 1095","line":"    end"},
{"lineNum":" 1096","line":"  end"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"  # Returns a new `String` with the last character removed."},
{"lineNum":" 1099","line":"  # Applying rchop to an empty string returns an empty string."},
{"lineNum":" 1100","line":"  #"},
{"lineNum":" 1101","line":"  # ```"},
{"lineNum":" 1102","line":"  # \"string\\r\\n\".rchop # => \"string\\r\""},
{"lineNum":" 1103","line":"  # \"string\\n\\r\".rchop # => \"string\\n\""},
{"lineNum":" 1104","line":"  # \"string\\n\".rchop   # => \"string\""},
{"lineNum":" 1105","line":"  # \"string\".rchop     # => \"strin\""},
{"lineNum":" 1106","line":"  # \"x\".rchop.rchop    # => \"\""},
{"lineNum":" 1107","line":"  # ```"},
{"lineNum":" 1108","line":"  def rchop"},
{"lineNum":" 1109","line":"    return \"\" if bytesize <= 1"},
{"lineNum":" 1110","line":""},
{"lineNum":" 1111","line":"    if to_unsafe[bytesize - 1] < 128 || ascii_only?"},
{"lineNum":" 1112","line":"      return unsafe_byte_slice_string(0, bytesize - 1)"},
{"lineNum":" 1113","line":"    end"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"    self[0, size - 1]"},
{"lineNum":" 1116","line":"  end"},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"  # Returns a new `String` with *suffix* removed from the end of the string."},
{"lineNum":" 1119","line":"  #"},
{"lineNum":" 1120","line":"  # ```"},
{"lineNum":" 1121","line":"  # \"string\".rchop(\'g\') # => \"strin\""},
{"lineNum":" 1122","line":"  # \"string\".rchop(\'x\') # => \"string\""},
{"lineNum":" 1123","line":"  # ```"},
{"lineNum":" 1124","line":"  def rchop(suffix : Char)"},
{"lineNum":" 1125","line":"    return \"\" if empty?"},
{"lineNum":" 1126","line":""},
{"lineNum":" 1127","line":"    if ends_with?(suffix)"},
{"lineNum":" 1128","line":"      unsafe_byte_slice_string(0, bytesize - suffix.bytesize)"},
{"lineNum":" 1129","line":"    else"},
{"lineNum":" 1130","line":"      self"},
{"lineNum":" 1131","line":"    end"},
{"lineNum":" 1132","line":"  end"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"  # Returns a new `String` with *suffix* removed from the end of the string."},
{"lineNum":" 1135","line":"  #"},
{"lineNum":" 1136","line":"  # ```"},
{"lineNum":" 1137","line":"  # \"string\".rchop(\"ing\") # => \"str\""},
{"lineNum":" 1138","line":"  # \"string\".rchop(\"inx\") # => \"string\""},
{"lineNum":" 1139","line":"  # ```"},
{"lineNum":" 1140","line":"  def rchop(suffix : String)"},
{"lineNum":" 1141","line":"    return \"\" if empty?"},
{"lineNum":" 1142","line":""},
{"lineNum":" 1143","line":"    if ends_with?(suffix)"},
{"lineNum":" 1144","line":"      unsafe_byte_slice_string(0, bytesize - suffix.bytesize)"},
{"lineNum":" 1145","line":"    else"},
{"lineNum":" 1146","line":"      self"},
{"lineNum":" 1147","line":"    end"},
{"lineNum":" 1148","line":"  end"},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"  # Returns a slice of bytes containing this string encoded in the given encoding."},
{"lineNum":" 1151","line":"  #"},
{"lineNum":" 1152","line":"  # The *invalid* argument can be:"},
{"lineNum":" 1153","line":"  # * `nil`: an exception is raised on invalid byte sequences"},
{"lineNum":" 1154","line":"  # * `:skip`: invalid byte sequences are ignored"},
{"lineNum":" 1155","line":"  #"},
{"lineNum":" 1156","line":"  # ```"},
{"lineNum":" 1157","line":"  # \"å¥½\".encode(\"GB2312\") # => Bytes[186, 195]"},
{"lineNum":" 1158","line":"  # \"å¥½\".bytes            # => [229, 165, 189]"},
{"lineNum":" 1159","line":"  # ```"},
{"lineNum":" 1160","line":"  def encode(encoding : String, invalid : Symbol? = nil) : Bytes"},
{"lineNum":" 1161","line":"    io = IO::Memory.new"},
{"lineNum":" 1162","line":"    String.encode(to_slice, \"UTF-8\", encoding, io, invalid)"},
{"lineNum":" 1163","line":"    io.to_slice"},
{"lineNum":" 1164","line":"  end"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"  # :nodoc:"},
{"lineNum":" 1167","line":"  protected def self.encode(slice, from, to, io, invalid)"},
{"lineNum":" 1168","line":"    IO::EncodingOptions.check_invalid(invalid)"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"    inbuf_ptr = slice.to_unsafe"},
{"lineNum":" 1171","line":"    inbytesleft = LibC::SizeT.new(slice.size)"},
{"lineNum":" 1172","line":"    outbuf = uninitialized UInt8[1024]"},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":"    Iconv.new(from, to, invalid) do |iconv|"},
{"lineNum":" 1175","line":"      while inbytesleft > 0"},
{"lineNum":" 1176","line":"        outbuf_ptr = outbuf.to_unsafe"},
{"lineNum":" 1177","line":"        outbytesleft = LibC::SizeT.new(outbuf.size)"},
{"lineNum":" 1178","line":"        err = iconv.convert(pointerof(inbuf_ptr), pointerof(inbytesleft), pointerof(outbuf_ptr), pointerof(outbytesleft))"},
{"lineNum":" 1179","line":"        if err == -1"},
{"lineNum":" 1180","line":"          iconv.handle_invalid(pointerof(inbuf_ptr), pointerof(inbytesleft))"},
{"lineNum":" 1181","line":"        end"},
{"lineNum":" 1182","line":"        io.write(outbuf.to_slice[0, outbuf.size - outbytesleft])"},
{"lineNum":" 1183","line":"      end"},
{"lineNum":" 1184","line":"    end"},
{"lineNum":" 1185","line":"  end"},
{"lineNum":" 1186","line":""},
{"lineNum":" 1187","line":"  # Interprets this string as containing a sequence of hexadecimal values"},
{"lineNum":" 1188","line":"  # and decodes it as a slice of bytes. Two consecutive bytes in the string"},
{"lineNum":" 1189","line":"  # represent a byte in the returned slice."},
{"lineNum":" 1190","line":"  #"},
{"lineNum":" 1191","line":"  # Raises `ArgumentError` if this string does not denote an hexstring."},
{"lineNum":" 1192","line":"  #"},
{"lineNum":" 1193","line":"  # ```"},
{"lineNum":" 1194","line":"  # \"0102031aff\".hexbytes  # => Bytes[1, 2, 3, 26, 255]"},
{"lineNum":" 1195","line":"  # \"1\".hexbytes           # raises ArgumentError"},
{"lineNum":" 1196","line":"  # \"hello world\".hexbytes # raises ArgumentError"},
{"lineNum":" 1197","line":"  # ```"},
{"lineNum":" 1198","line":"  def hexbytes : Bytes"},
{"lineNum":" 1199","line":"    hexbytes? || raise(ArgumentError.new(\"#{self} is not a hexstring\"))"},
{"lineNum":" 1200","line":"  end"},
{"lineNum":" 1201","line":""},
{"lineNum":" 1202","line":"  # Interprets this string as containing a sequence of hexadecimal values"},
{"lineNum":" 1203","line":"  # and decodes it as a slice of bytes. Two consecutive bytes in the string"},
{"lineNum":" 1204","line":"  # represent a byte in the returned slice."},
{"lineNum":" 1205","line":"  #"},
{"lineNum":" 1206","line":"  # Returns `nil` if this string does not denote an hexstring."},
{"lineNum":" 1207","line":"  #"},
{"lineNum":" 1208","line":"  # ```"},
{"lineNum":" 1209","line":"  # \"0102031aff\".hexbytes?  # => Bytes[1, 2, 3, 26, 255]"},
{"lineNum":" 1210","line":"  # \"1\".hexbytes?           # => nil"},
{"lineNum":" 1211","line":"  # \"hello world\".hexbytes? # => nil"},
{"lineNum":" 1212","line":"  # ```"},
{"lineNum":" 1213","line":"  def hexbytes? : Bytes?"},
{"lineNum":" 1214","line":"    return unless bytesize.divisible_by?(2)"},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"    bytes = Bytes.new(bytesize / 2)"},
{"lineNum":" 1217","line":""},
{"lineNum":" 1218","line":"    i = 0"},
{"lineNum":" 1219","line":"    while i < bytesize"},
{"lineNum":" 1220","line":"      high_nibble = to_unsafe[i].unsafe_chr.to_u8?(16)"},
{"lineNum":" 1221","line":"      low_nibble = to_unsafe[i + 1].unsafe_chr.to_u8?(16)"},
{"lineNum":" 1222","line":"      return unless high_nibble && low_nibble"},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"      bytes[i / 2] = (high_nibble << 4) | low_nibble"},
{"lineNum":" 1225","line":"      i += 2"},
{"lineNum":" 1226","line":"    end"},
{"lineNum":" 1227","line":""},
{"lineNum":" 1228","line":"    bytes"},
{"lineNum":" 1229","line":"  end"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"  # Returns a new `String` that results of inserting *other* in `self` at *index*."},
{"lineNum":" 1232","line":"  # Negative indices count from the end of the string, and insert **after**"},
{"lineNum":" 1233","line":"  # the given index."},
{"lineNum":" 1234","line":"  #"},
{"lineNum":" 1235","line":"  # Raises `IndexError` if the index is out of bounds."},
{"lineNum":" 1236","line":"  #"},
{"lineNum":" 1237","line":"  # ```"},
{"lineNum":" 1238","line":"  # \"abcd\".insert(0, \'X\')  # => \"Xabcd\""},
{"lineNum":" 1239","line":"  # \"abcd\".insert(3, \'X\')  # => \"abcXd\""},
{"lineNum":" 1240","line":"  # \"abcd\".insert(4, \'X\')  # => \"abcdX\""},
{"lineNum":" 1241","line":"  # \"abcd\".insert(-3, \'X\') # => \"abXcd\""},
{"lineNum":" 1242","line":"  # \"abcd\".insert(-1, \'X\') # => \"abcdX\""},
{"lineNum":" 1243","line":"  #"},
{"lineNum":" 1244","line":"  # \"abcd\".insert(5, \'X\')  # raises IndexError"},
{"lineNum":" 1245","line":"  # \"abcd\".insert(-6, \'X\') # raises IndexError"},
{"lineNum":" 1246","line":"  # ```"},
{"lineNum":" 1247","line":"  def insert(index : Int, other : Char)"},
{"lineNum":" 1248","line":"    index = index.to_i"},
{"lineNum":" 1249","line":"    index += size + 1 if index < 0"},
{"lineNum":" 1250","line":""},
{"lineNum":" 1251","line":"    byte_index = char_index_to_byte_index(index)"},
{"lineNum":" 1252","line":"    raise IndexError.new unless byte_index"},
{"lineNum":" 1253","line":""},
{"lineNum":" 1254","line":"    bytes, count = String.char_bytes_and_bytesize(other)"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"    new_bytesize = bytesize + count"},
{"lineNum":" 1257","line":"    new_size = (ascii_only? && other.ascii?) ? new_bytesize : 0"},
{"lineNum":" 1258","line":""},
{"lineNum":" 1259","line":"    insert_impl(byte_index, bytes.to_unsafe, count, new_bytesize, new_size)"},
{"lineNum":" 1260","line":"  end"},
{"lineNum":" 1261","line":""},
{"lineNum":" 1262","line":"  # Returns a new `String` that results of inserting *other* in `self` at *index*."},
{"lineNum":" 1263","line":"  # Negative indices count from the end of the string, and insert **after**"},
{"lineNum":" 1264","line":"  # the given index."},
{"lineNum":" 1265","line":"  #"},
{"lineNum":" 1266","line":"  # Raises `IndexError` if the index is out of bounds."},
{"lineNum":" 1267","line":"  #"},
{"lineNum":" 1268","line":"  # ```"},
{"lineNum":" 1269","line":"  # \"abcd\".insert(0, \"FOO\")  # => \"FOOabcd\""},
{"lineNum":" 1270","line":"  # \"abcd\".insert(3, \"FOO\")  # => \"abcFOOd\""},
{"lineNum":" 1271","line":"  # \"abcd\".insert(4, \"FOO\")  # => \"abcdFOO\""},
{"lineNum":" 1272","line":"  # \"abcd\".insert(-3, \"FOO\") # => \"abFOOcd\""},
{"lineNum":" 1273","line":"  # \"abcd\".insert(-1, \"FOO\") # => \"abcdFOO\""},
{"lineNum":" 1274","line":"  #"},
{"lineNum":" 1275","line":"  # \"abcd\".insert(5, \"FOO\")  # raises IndexError"},
{"lineNum":" 1276","line":"  # \"abcd\".insert(-6, \"FOO\") # raises IndexError"},
{"lineNum":" 1277","line":"  # ```"},
{"lineNum":" 1278","line":"  def insert(index : Int, other : String)"},
{"lineNum":" 1279","line":"    index = index.to_i"},
{"lineNum":" 1280","line":"    index += size + 1 if index < 0"},
{"lineNum":" 1281","line":""},
{"lineNum":" 1282","line":"    byte_index = char_index_to_byte_index(index)"},
{"lineNum":" 1283","line":"    raise IndexError.new unless byte_index"},
{"lineNum":" 1284","line":""},
{"lineNum":" 1285","line":"    new_bytesize = bytesize + other.bytesize"},
{"lineNum":" 1286","line":"    new_size = ascii_only? && other.ascii_only? ? new_bytesize : 0"},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":"    insert_impl(byte_index, other.to_unsafe, other.bytesize, new_bytesize, new_size)"},
{"lineNum":" 1289","line":"  end"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"  private def insert_impl(byte_index, other, other_bytesize, new_bytesize, new_size)"},
{"lineNum":" 1292","line":"    String.new(new_bytesize) do |buffer|"},
{"lineNum":" 1293","line":"      buffer.copy_from(to_unsafe, byte_index)"},
{"lineNum":" 1294","line":"      buffer += byte_index"},
{"lineNum":" 1295","line":"      buffer.copy_from(other, other_bytesize)"},
{"lineNum":" 1296","line":"      buffer += other_bytesize"},
{"lineNum":" 1297","line":"      buffer.copy_from(to_unsafe + byte_index, bytesize - byte_index)"},
{"lineNum":" 1298","line":"      {new_bytesize, new_size}"},
{"lineNum":" 1299","line":"    end"},
{"lineNum":" 1300","line":"  end"},
{"lineNum":" 1301","line":""},
{"lineNum":" 1302","line":"  # Returns a new `String` with leading and trailing whitespace removed."},
{"lineNum":" 1303","line":"  #"},
{"lineNum":" 1304","line":"  # ```"},
{"lineNum":" 1305","line":"  # \"    hello    \".strip # => \"hello\""},
{"lineNum":" 1306","line":"  # \"\\tgoodbye\\r\\n\".strip # => \"goodbye\""},
{"lineNum":" 1307","line":"  # ```"},
{"lineNum":" 1308","line":"  def strip"},
{"lineNum":" 1309","line":"    excess_left = calc_excess_left"},
{"lineNum":" 1310","line":"    if excess_left == bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1311","line":"      return \"\""},
{"lineNum":" 1312","line":"    end"},
{"lineNum":" 1313","line":""},
{"lineNum":" 1314","line":"    excess_right = calc_excess_right"},
{"lineNum":" 1315","line":"    remove_excess(excess_left, excess_right)"},
{"lineNum":" 1316","line":"  end"},
{"lineNum":" 1317","line":""},
{"lineNum":" 1318","line":"  # Returns a new string where leading and trailing occurrences of *char* are removed."},
{"lineNum":" 1319","line":"  #"},
{"lineNum":" 1320","line":"  # ```"},
{"lineNum":" 1321","line":"  # \"aaabcdaaa\".strip(\'a\') # => \"bcd\""},
{"lineNum":" 1322","line":"  # ```"},
{"lineNum":" 1323","line":"  def strip(char : Char)"},
{"lineNum":" 1324","line":"    return self if empty?"},
{"lineNum":" 1325","line":""},
{"lineNum":" 1326","line":"    excess_left = calc_excess_left(char)"},
{"lineNum":" 1327","line":"    if excess_left == bytesize"},
{"lineNum":" 1328","line":"      return \"\""},
{"lineNum":" 1329","line":"    end"},
{"lineNum":" 1330","line":""},
{"lineNum":" 1331","line":"    excess_right = calc_excess_right(char)"},
{"lineNum":" 1332","line":"    remove_excess(excess_left, excess_right)"},
{"lineNum":" 1333","line":"  end"},
{"lineNum":" 1334","line":""},
{"lineNum":" 1335","line":"  # Returns a new string where leading and trailing occurrences of any char"},
{"lineNum":" 1336","line":"  # in *chars* are removed. The *chars* argument is not a prefix or suffix;"},
{"lineNum":" 1337","line":"  # rather; all combinations of its values are stripped."},
{"lineNum":" 1338","line":"  #"},
{"lineNum":" 1339","line":"  # ```"},
{"lineNum":" 1340","line":"  # \"abcdefcba\".strip(\"abc\") # => \"def\""},
{"lineNum":" 1341","line":"  # ```"},
{"lineNum":" 1342","line":"  def strip(chars : String)"},
{"lineNum":" 1343","line":"    return self if empty?"},
{"lineNum":" 1344","line":""},
{"lineNum":" 1345","line":"    case chars.size"},
{"lineNum":" 1346","line":"    when 0"},
{"lineNum":" 1347","line":"      return self"},
{"lineNum":" 1348","line":"    when 1"},
{"lineNum":" 1349","line":"      return strip(chars[0])"},
{"lineNum":" 1350","line":"    end"},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"    excess_left = calc_excess_left(chars)"},
{"lineNum":" 1353","line":"    if excess_left == bytesize"},
{"lineNum":" 1354","line":"      return \"\""},
{"lineNum":" 1355","line":"    end"},
{"lineNum":" 1356","line":""},
{"lineNum":" 1357","line":"    excess_right = calc_excess_right(chars)"},
{"lineNum":" 1358","line":"    remove_excess(excess_left, excess_right)"},
{"lineNum":" 1359","line":"  end"},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"  # Returns a new string where leading and trailing characters for which"},
{"lineNum":" 1362","line":"  # the block returns a *truthy* value are removed."},
{"lineNum":" 1363","line":"  #"},
{"lineNum":" 1364","line":"  # ```"},
{"lineNum":" 1365","line":"  # \"bcadefcba\".strip { |c| \'a\' <= c <= \'c\' } # => \"def\""},
{"lineNum":" 1366","line":"  # ```"},
{"lineNum":" 1367","line":"  def strip(&block : Char -> _)"},
{"lineNum":" 1368","line":"    return self if empty?"},
{"lineNum":" 1369","line":""},
{"lineNum":" 1370","line":"    excess_left = calc_excess_left { |c| yield c }"},
{"lineNum":" 1371","line":"    if excess_left == bytesize"},
{"lineNum":" 1372","line":"      return \"\""},
{"lineNum":" 1373","line":"    end"},
{"lineNum":" 1374","line":""},
{"lineNum":" 1375","line":"    excess_right = calc_excess_right { |c| yield c }"},
{"lineNum":" 1376","line":"    remove_excess(excess_left, excess_right)"},
{"lineNum":" 1377","line":"  end"},
{"lineNum":" 1378","line":""},
{"lineNum":" 1379","line":"  # Returns a new `String` with trailing whitespace removed."},
{"lineNum":" 1380","line":"  #"},
{"lineNum":" 1381","line":"  # ```"},
{"lineNum":" 1382","line":"  # \"    hello    \".rstrip # => \"    hello\""},
{"lineNum":" 1383","line":"  # \"\\tgoodbye\\r\\n\".rstrip # => \"\\tgoodbye\""},
{"lineNum":" 1384","line":"  # ```"},
{"lineNum":" 1385","line":"  def rstrip"},
{"lineNum":" 1386","line":"    remove_excess_right(calc_excess_right)"},
{"lineNum":" 1387","line":"  end"},
{"lineNum":" 1388","line":""},
{"lineNum":" 1389","line":"  # Returns a new string with trailing occurrences of *char* removed."},
{"lineNum":" 1390","line":"  #"},
{"lineNum":" 1391","line":"  # ```"},
{"lineNum":" 1392","line":"  # \"aaabcdaaa\".rstrip(\'a\') # => \"aaabcd\""},
{"lineNum":" 1393","line":"  # ```"},
{"lineNum":" 1394","line":"  def rstrip(char : Char)"},
{"lineNum":" 1395","line":"    return self if empty?"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"    remove_excess_right(calc_excess_right(char))"},
{"lineNum":" 1398","line":"  end"},
{"lineNum":" 1399","line":""},
{"lineNum":" 1400","line":"  # Returns a new string where trailing occurrences of any char"},
{"lineNum":" 1401","line":"  # in *chars* are removed. The *chars* argument is not a suffix;"},
{"lineNum":" 1402","line":"  # rather; all combinations of its values are stripped."},
{"lineNum":" 1403","line":"  #"},
{"lineNum":" 1404","line":"  # ```"},
{"lineNum":" 1405","line":"  # \"abcdefcba\".rstrip(\"abc\") # => \"abcdef\""},
{"lineNum":" 1406","line":"  # ```"},
{"lineNum":" 1407","line":"  def rstrip(chars : String)"},
{"lineNum":" 1408","line":"    return self if empty?"},
{"lineNum":" 1409","line":""},
{"lineNum":" 1410","line":"    case chars.size"},
{"lineNum":" 1411","line":"    when 0"},
{"lineNum":" 1412","line":"      self"},
{"lineNum":" 1413","line":"    when 1"},
{"lineNum":" 1414","line":"      rstrip(chars[0])"},
{"lineNum":" 1415","line":"    else"},
{"lineNum":" 1416","line":"      remove_excess_right(calc_excess_right(chars))"},
{"lineNum":" 1417","line":"    end"},
{"lineNum":" 1418","line":"  end"},
{"lineNum":" 1419","line":""},
{"lineNum":" 1420","line":"  # Returns a new string where trailing characters for which"},
{"lineNum":" 1421","line":"  # the block returns a *truthy* value are removed."},
{"lineNum":" 1422","line":"  #"},
{"lineNum":" 1423","line":"  # ```"},
{"lineNum":" 1424","line":"  # \"bcadefcba\".rstrip { |c| \'a\' <= c <= \'c\' } # => \"bcadef\""},
{"lineNum":" 1425","line":"  # ```"},
{"lineNum":" 1426","line":"  def rstrip(&block : Char -> _)"},
{"lineNum":" 1427","line":"    return self if empty?"},
{"lineNum":" 1428","line":""},
{"lineNum":" 1429","line":"    excess_right = calc_excess_right { |c| yield c }"},
{"lineNum":" 1430","line":"    remove_excess_right(excess_right)"},
{"lineNum":" 1431","line":"  end"},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"  # Returns a new `String` with leading whitespace removed."},
{"lineNum":" 1434","line":"  #"},
{"lineNum":" 1435","line":"  # ```"},
{"lineNum":" 1436","line":"  # \"    hello    \".lstrip # => \"hello    \""},
{"lineNum":" 1437","line":"  # \"\\tgoodbye\\r\\n\".lstrip # => \"goodbye\\r\\n\""},
{"lineNum":" 1438","line":"  # ```"},
{"lineNum":" 1439","line":"  def lstrip"},
{"lineNum":" 1440","line":"    remove_excess_left(calc_excess_left)"},
{"lineNum":" 1441","line":"  end"},
{"lineNum":" 1442","line":""},
{"lineNum":" 1443","line":"  # Returns a new string with leading occurrences of *char* removed."},
{"lineNum":" 1444","line":"  #"},
{"lineNum":" 1445","line":"  # ```"},
{"lineNum":" 1446","line":"  # \"aaabcdaaa\".lstrip(\'a\') # => \"bcdaaa\""},
{"lineNum":" 1447","line":"  # ```"},
{"lineNum":" 1448","line":"  def lstrip(char : Char)"},
{"lineNum":" 1449","line":"    return self if empty?"},
{"lineNum":" 1450","line":""},
{"lineNum":" 1451","line":"    remove_excess_left(calc_excess_left(char))"},
{"lineNum":" 1452","line":"  end"},
{"lineNum":" 1453","line":""},
{"lineNum":" 1454","line":"  # Returns a new string where leading occurrences of any char"},
{"lineNum":" 1455","line":"  # in *chars* are removed. The *chars* argument is not a suffix;"},
{"lineNum":" 1456","line":"  # rather; all combinations of its values are stripped."},
{"lineNum":" 1457","line":"  #"},
{"lineNum":" 1458","line":"  # ```"},
{"lineNum":" 1459","line":"  # \"bcadefcba\".lstrip(\"abc\") # => \"defcba\""},
{"lineNum":" 1460","line":"  # ```"},
{"lineNum":" 1461","line":"  def lstrip(chars : String)"},
{"lineNum":" 1462","line":"    return self if empty?"},
{"lineNum":" 1463","line":""},
{"lineNum":" 1464","line":"    case chars.size"},
{"lineNum":" 1465","line":"    when 0"},
{"lineNum":" 1466","line":"      self"},
{"lineNum":" 1467","line":"    when 1"},
{"lineNum":" 1468","line":"      lstrip(chars[0])"},
{"lineNum":" 1469","line":"    else"},
{"lineNum":" 1470","line":"      remove_excess_left(calc_excess_left(chars))"},
{"lineNum":" 1471","line":"    end"},
{"lineNum":" 1472","line":"  end"},
{"lineNum":" 1473","line":""},
{"lineNum":" 1474","line":"  # Returns a new string where leading characters for which"},
{"lineNum":" 1475","line":"  # the block returns a *truthy* value are removed."},
{"lineNum":" 1476","line":"  #"},
{"lineNum":" 1477","line":"  # ```"},
{"lineNum":" 1478","line":"  # \"bcadefcba\".lstrip { |c| \'a\' <= c <= \'c\' } # => \"defcba\""},
{"lineNum":" 1479","line":"  # ```"},
{"lineNum":" 1480","line":"  def lstrip(&block : Char -> _)"},
{"lineNum":" 1481","line":"    return self if empty?"},
{"lineNum":" 1482","line":""},
{"lineNum":" 1483","line":"    excess_left = calc_excess_left { |c| yield c }"},
{"lineNum":" 1484","line":"    remove_excess_left(excess_left)"},
{"lineNum":" 1485","line":"  end"},
{"lineNum":" 1486","line":""},
{"lineNum":" 1487","line":"  private def calc_excess_right"},
{"lineNum":" 1488","line":"    i = bytesize - 1"},
{"lineNum":" 1489","line":"    while i >= 0 && to_unsafe[i].unsafe_chr.ascii_whitespace?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1490","line":"      i -= 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1491","line":"    end"},
{"lineNum":" 1492","line":"    bytesize - 1 - i"},
{"lineNum":" 1493","line":"  end"},
{"lineNum":" 1494","line":""},
{"lineNum":" 1495","line":"  private def calc_excess_right(char : Char)"},
{"lineNum":" 1496","line":"    calc_excess_right do |reader_char|"},
{"lineNum":" 1497","line":"      char == reader_char"},
{"lineNum":" 1498","line":"    end"},
{"lineNum":" 1499","line":"  end"},
{"lineNum":" 1500","line":""},
{"lineNum":" 1501","line":"  private def calc_excess_right(chars : String)"},
{"lineNum":" 1502","line":"    calc_excess_right do |reader_char|"},
{"lineNum":" 1503","line":"      chars.includes?(reader_char)"},
{"lineNum":" 1504","line":"    end"},
{"lineNum":" 1505","line":"  end"},
{"lineNum":" 1506","line":""},
{"lineNum":" 1507","line":"  private def calc_excess_right(&block)"},
{"lineNum":" 1508","line":"    byte_index = bytesize"},
{"lineNum":" 1509","line":"    reader = Char::Reader.new(at_end: self)"},
{"lineNum":" 1510","line":"    while (yield reader.current_char)"},
{"lineNum":" 1511","line":"      byte_index = reader.pos"},
{"lineNum":" 1512","line":"      if byte_index == 0"},
{"lineNum":" 1513","line":"        return bytesize"},
{"lineNum":" 1514","line":"      else"},
{"lineNum":" 1515","line":"        reader.previous_char"},
{"lineNum":" 1516","line":"      end"},
{"lineNum":" 1517","line":"    end"},
{"lineNum":" 1518","line":"    bytesize - byte_index"},
{"lineNum":" 1519","line":"  end"},
{"lineNum":" 1520","line":""},
{"lineNum":" 1521","line":"  private def calc_excess_left"},
{"lineNum":" 1522","line":"    excess_left = 0"},
{"lineNum":" 1523","line":"    # All strings end with \'\\0\', and it\'s not a whitespace"},
{"lineNum":" 1524","line":"    # so it\'s safe to access past 1 byte beyond the string data"},
{"lineNum":" 1525","line":"    while to_unsafe[excess_left].unsafe_chr.ascii_whitespace?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1526","line":"      excess_left += 1"},
{"lineNum":" 1527","line":"    end"},
{"lineNum":" 1528","line":"    excess_left"},
{"lineNum":" 1529","line":"  end"},
{"lineNum":" 1530","line":""},
{"lineNum":" 1531","line":"  private def calc_excess_left(char : Char)"},
{"lineNum":" 1532","line":"    calc_excess_left do |reader_char|"},
{"lineNum":" 1533","line":"      char == reader_char"},
{"lineNum":" 1534","line":"    end"},
{"lineNum":" 1535","line":"  end"},
{"lineNum":" 1536","line":""},
{"lineNum":" 1537","line":"  private def calc_excess_left(chars : String)"},
{"lineNum":" 1538","line":"    calc_excess_left do |reader_char|"},
{"lineNum":" 1539","line":"      chars.includes?(reader_char)"},
{"lineNum":" 1540","line":"    end"},
{"lineNum":" 1541","line":"  end"},
{"lineNum":" 1542","line":""},
{"lineNum":" 1543","line":"  private def calc_excess_left(&block)"},
{"lineNum":" 1544","line":"    reader = Char::Reader.new(self)"},
{"lineNum":" 1545","line":"    while (yield reader.current_char)"},
{"lineNum":" 1546","line":"      reader.next_char"},
{"lineNum":" 1547","line":"      return bytesize unless reader.has_next?"},
{"lineNum":" 1548","line":"    end"},
{"lineNum":" 1549","line":"    reader.pos"},
{"lineNum":" 1550","line":"  end"},
{"lineNum":" 1551","line":""},
{"lineNum":" 1552","line":"  private def remove_excess(excess_left, excess_right)"},
{"lineNum":" 1553","line":"    if excess_right == 0 && excess_left == 0"},
{"lineNum":" 1554","line":"      self"},
{"lineNum":" 1555","line":"    else"},
{"lineNum":" 1556","line":"      unsafe_byte_slice_string(excess_left, bytesize - excess_right - excess_left)"},
{"lineNum":" 1557","line":"    end"},
{"lineNum":" 1558","line":"  end"},
{"lineNum":" 1559","line":""},
{"lineNum":" 1560","line":"  private def remove_excess_right(excess_right)"},
{"lineNum":" 1561","line":"    case excess_right"},
{"lineNum":" 1562","line":"    when 0"},
{"lineNum":" 1563","line":"      self"},
{"lineNum":" 1564","line":"    when bytesize"},
{"lineNum":" 1565","line":"      \"\""},
{"lineNum":" 1566","line":"    else"},
{"lineNum":" 1567","line":"      unsafe_byte_slice_string(0, bytesize - excess_right)"},
{"lineNum":" 1568","line":"    end"},
{"lineNum":" 1569","line":"  end"},
{"lineNum":" 1570","line":""},
{"lineNum":" 1571","line":"  private def remove_excess_left(excess_left)"},
{"lineNum":" 1572","line":"    case excess_left"},
{"lineNum":" 1573","line":"    when 0"},
{"lineNum":" 1574","line":"      self"},
{"lineNum":" 1575","line":"    when bytesize"},
{"lineNum":" 1576","line":"      \"\""},
{"lineNum":" 1577","line":"    else"},
{"lineNum":" 1578","line":"      unsafe_byte_slice_string(excess_left)"},
{"lineNum":" 1579","line":"    end"},
{"lineNum":" 1580","line":"  end"},
{"lineNum":" 1581","line":""},
{"lineNum":" 1582","line":"  # Returns a new string _tr_anslating characters using *from* and *to* as a"},
{"lineNum":" 1583","line":"  # map. If *to* is shorter than *from*, the last character in *to* is used for"},
{"lineNum":" 1584","line":"  # the rest. If *to* is empty, this acts like `String#delete`."},
{"lineNum":" 1585","line":"  #"},
{"lineNum":" 1586","line":"  # ```"},
{"lineNum":" 1587","line":"  # \"aabbcc\".tr(\"abc\", \"xyz\") # => \"xxyyzz\""},
{"lineNum":" 1588","line":"  # \"aabbcc\".tr(\"abc\", \"x\")   # => \"xxxxxx\""},
{"lineNum":" 1589","line":"  # \"aabbcc\".tr(\"a\", \"xyz\")   # => \"xxbbcc\""},
{"lineNum":" 1590","line":"  # ```"},
{"lineNum":" 1591","line":"  def tr(from : String, to : String)"},
{"lineNum":" 1592","line":"    return delete(from) if to.empty?"},
{"lineNum":" 1593","line":""},
{"lineNum":" 1594","line":"    if from.bytesize == 1"},
{"lineNum":" 1595","line":"      return gsub(from.unsafe_byte_at(0).unsafe_chr, to)"},
{"lineNum":" 1596","line":"    end"},
{"lineNum":" 1597","line":""},
{"lineNum":" 1598","line":"    multi = nil"},
{"lineNum":" 1599","line":"    table = StaticArray(Int32, 256).new(-1)"},
{"lineNum":" 1600","line":"    reader = Char::Reader.new(to)"},
{"lineNum":" 1601","line":"    char = reader.current_char"},
{"lineNum":" 1602","line":"    next_char = reader.next_char"},
{"lineNum":" 1603","line":"    from.each_char do |ch|"},
{"lineNum":" 1604","line":"      if ch.ord >= 256"},
{"lineNum":" 1605","line":"        multi ||= {} of Char => Char"},
{"lineNum":" 1606","line":"        multi[ch] = char"},
{"lineNum":" 1607","line":"      else"},
{"lineNum":" 1608","line":"        table[ch.ord] = char.ord"},
{"lineNum":" 1609","line":"      end"},
{"lineNum":" 1610","line":"      if next_char != Char::ZERO"},
{"lineNum":" 1611","line":"        char = next_char"},
{"lineNum":" 1612","line":"        reader.next_char"},
{"lineNum":" 1613","line":"        next_char = reader.current_char"},
{"lineNum":" 1614","line":"      end"},
{"lineNum":" 1615","line":"    end"},
{"lineNum":" 1616","line":""},
{"lineNum":" 1617","line":"    String.build(bytesize) do |buffer|"},
{"lineNum":" 1618","line":"      each_char do |ch|"},
{"lineNum":" 1619","line":"        if ch.ord < 256"},
{"lineNum":" 1620","line":"          if (a = table[ch.ord]) >= 0"},
{"lineNum":" 1621","line":"            buffer << a.unsafe_chr"},
{"lineNum":" 1622","line":"          else"},
{"lineNum":" 1623","line":"            buffer << ch"},
{"lineNum":" 1624","line":"          end"},
{"lineNum":" 1625","line":"        else"},
{"lineNum":" 1626","line":"          if a = multi.try &.[ch]?"},
{"lineNum":" 1627","line":"            buffer << a"},
{"lineNum":" 1628","line":"          else"},
{"lineNum":" 1629","line":"            buffer << ch"},
{"lineNum":" 1630","line":"          end"},
{"lineNum":" 1631","line":"        end"},
{"lineNum":" 1632","line":"      end"},
{"lineNum":" 1633","line":"    end"},
{"lineNum":" 1634","line":"  end"},
{"lineNum":" 1635","line":""},
{"lineNum":" 1636","line":"  # Returns a new `String` where the first character is yielded to the given"},
{"lineNum":" 1637","line":"  # block and replaced by its return value."},
{"lineNum":" 1638","line":"  #"},
{"lineNum":" 1639","line":"  # ```"},
{"lineNum":" 1640","line":"  # \"hello\".sub { |char| char + 1 } # => \"iello\""},
{"lineNum":" 1641","line":"  # \"hello\".sub { \"hi\" }            # => \"hiello\""},
{"lineNum":" 1642","line":"  # ```"},
{"lineNum":" 1643","line":"  def sub(&block : Char -> _)"},
{"lineNum":" 1644","line":"    return self if empty?"},
{"lineNum":" 1645","line":""},
{"lineNum":" 1646","line":"    String.build(bytesize) do |buffer|"},
{"lineNum":" 1647","line":"      reader = Char::Reader.new(self)"},
{"lineNum":" 1648","line":"      buffer << yield reader.current_char"},
{"lineNum":" 1649","line":"      reader.next_char"},
{"lineNum":" 1650","line":"      buffer.write unsafe_byte_slice(reader.pos)"},
{"lineNum":" 1651","line":"    end"},
{"lineNum":" 1652","line":"  end"},
{"lineNum":" 1653","line":""},
{"lineNum":" 1654","line":"  # Returns a `String` where the first occurrence of *char* is replaced by"},
{"lineNum":" 1655","line":"  # *replacement*."},
{"lineNum":" 1656","line":"  #"},
{"lineNum":" 1657","line":"  # ```"},
{"lineNum":" 1658","line":"  # \"hello\".sub(\'l\', \"lo\")      # => \"helolo\""},
{"lineNum":" 1659","line":"  # \"hello world\".sub(\'o\', \'a\') # => \"hella world\""},
{"lineNum":" 1660","line":"  # ```"},
{"lineNum":" 1661","line":"  def sub(char : Char, replacement)"},
{"lineNum":" 1662","line":"    if includes?(char)"},
{"lineNum":" 1663","line":"      String.build(bytesize) do |buffer|"},
{"lineNum":" 1664","line":"        reader = Char::Reader.new(self)"},
{"lineNum":" 1665","line":"        while reader.has_next?"},
{"lineNum":" 1666","line":"          if reader.current_char == char"},
{"lineNum":" 1667","line":"            buffer << replacement"},
{"lineNum":" 1668","line":"            break"},
{"lineNum":" 1669","line":"          else"},
{"lineNum":" 1670","line":"            buffer << reader.current_char"},
{"lineNum":" 1671","line":"          end"},
{"lineNum":" 1672","line":"          reader.next_char"},
{"lineNum":" 1673","line":"        end"},
{"lineNum":" 1674","line":"        reader.next_char"},
{"lineNum":" 1675","line":"        buffer.write unsafe_byte_slice(reader.pos)"},
{"lineNum":" 1676","line":"      end"},
{"lineNum":" 1677","line":"    else"},
{"lineNum":" 1678","line":"      self"},
{"lineNum":" 1679","line":"    end"},
{"lineNum":" 1680","line":"  end"},
{"lineNum":" 1681","line":""},
{"lineNum":" 1682","line":"  # Returns a `String` where the first occurrence of *pattern* is replaced by"},
{"lineNum":" 1683","line":"  # the block\'s return value."},
{"lineNum":" 1684","line":"  #"},
{"lineNum":" 1685","line":"  # ```"},
{"lineNum":" 1686","line":"  # \"hello\".sub(/./) { |s| s[0].ord.to_s + \' \' } # => \"104 ello\""},
{"lineNum":" 1687","line":"  # ```"},
{"lineNum":" 1688","line":"  def sub(pattern : Regex)"},
{"lineNum":" 1689","line":"    sub_append(pattern) do |str, match, buffer|","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1690","line":"      $~ = match"},
{"lineNum":" 1691","line":"      buffer << yield str, match"},
{"lineNum":" 1692","line":"    end"},
{"lineNum":" 1693","line":"  end"},
{"lineNum":" 1694","line":""},
{"lineNum":" 1695","line":"  # Returns a `String` where the first occurrence of *pattern* is replaced by"},
{"lineNum":" 1696","line":"  # *replacement*"},
{"lineNum":" 1697","line":"  #"},
{"lineNum":" 1698","line":"  # ```"},
{"lineNum":" 1699","line":"  # \"hello\".sub(/[aeiou]/, \"*\") # => \"h*llo\""},
{"lineNum":" 1700","line":"  # ```"},
{"lineNum":" 1701","line":"  #"},
{"lineNum":" 1702","line":"  # Within *replacement*, the special match variable `$~` will not refer to the"},
{"lineNum":" 1703","line":"  # current match."},
{"lineNum":" 1704","line":"  #"},
{"lineNum":" 1705","line":"  # If *backreferences* is `true` (the default value), *replacement* can include backreferences:"},
{"lineNum":" 1706","line":"  #"},
{"lineNum":" 1707","line":"  # ```"},
{"lineNum":" 1708","line":"  # \"hello\".sub(/[aeiou]/, \"(\\\\0)\") # => \"h(e)llo\""},
{"lineNum":" 1709","line":"  # ```"},
{"lineNum":" 1710","line":"  #"},
{"lineNum":" 1711","line":"  # When substitution is performed, any backreferences found in *replacement*"},
{"lineNum":" 1712","line":"  # will be replaced with the contents of the corresponding capture group in"},
{"lineNum":" 1713","line":"  # *pattern*. Backreferences to capture groups that were not present in"},
{"lineNum":" 1714","line":"  # *pattern* or that did not match will be skipped. See `Regex` for information"},
{"lineNum":" 1715","line":"  # about capture groups."},
{"lineNum":" 1716","line":"  #"},
{"lineNum":" 1717","line":"  # Backreferences are expressed in the form `\"\\\\d\"`, where *d* is a group"},
{"lineNum":" 1718","line":"  # number, or `\"\\\\k&lt;name>\"` where *name* is the name of a named capture group."},
{"lineNum":" 1719","line":"  # A sequence of literal characters resembling a backreference can be"},
{"lineNum":" 1720","line":"  # expressed by placing `\"\\\\\"` before the sequence."},
{"lineNum":" 1721","line":"  #"},
{"lineNum":" 1722","line":"  # ```"},
{"lineNum":" 1723","line":"  # \"foo\".sub(/o/, \"x\\\\0x\")                  # => \"fxoxo\""},
{"lineNum":" 1724","line":"  # \"foofoo\".sub(/(?<bar>oo)/, \"|\\\\k<bar>|\") # => \"f|oo|foo\""},
{"lineNum":" 1725","line":"  # \"foo\".sub(/o/, \"\\\\\\\\0\")                  # => \"f\\\\0o\""},
{"lineNum":" 1726","line":"  # ```"},
{"lineNum":" 1727","line":"  #"},
{"lineNum":" 1728","line":"  # Raises `ArgumentError` if an incomplete named back-reference is present in"},
{"lineNum":" 1729","line":"  # *replacement*."},
{"lineNum":" 1730","line":"  #"},
{"lineNum":" 1731","line":"  # Raises `IndexError` if a named group referenced in *replacement* is not present"},
{"lineNum":" 1732","line":"  # in *pattern*."},
{"lineNum":" 1733","line":"  def sub(pattern : Regex, replacement, backreferences = true)"},
{"lineNum":" 1734","line":"    if backreferences && replacement.is_a?(String) && replacement.has_back_references?"},
{"lineNum":" 1735","line":"      sub_append(pattern) { |_, match, buffer| scan_backreferences(replacement, match, buffer) }"},
{"lineNum":" 1736","line":"    else"},
{"lineNum":" 1737","line":"      sub(pattern) { replacement }"},
{"lineNum":" 1738","line":"    end"},
{"lineNum":" 1739","line":"  end"},
{"lineNum":" 1740","line":""},
{"lineNum":" 1741","line":"  # Returns a `String` where the first occurrences of the given *pattern* is replaced"},
{"lineNum":" 1742","line":"  # with the matching entry from the *hash* of replacements. If the first match"},
{"lineNum":" 1743","line":"  # is not included in the *hash*, nothing is replaced."},
{"lineNum":" 1744","line":"  #"},
{"lineNum":" 1745","line":"  # ```"},
{"lineNum":" 1746","line":"  # \"hello\".sub(/(he|l|o)/, {\"he\": \"ha\", \"l\": \"la\"}) # => \"hallo\""},
{"lineNum":" 1747","line":"  # \"hello\".sub(/(he|l|o)/, {\"l\": \"la\"})             # => \"hello\""},
{"lineNum":" 1748","line":"  # ```"},
{"lineNum":" 1749","line":"  def sub(pattern : Regex, hash : Hash(String, _) | NamedTuple)"},
{"lineNum":" 1750","line":"    sub(pattern) do |match|"},
{"lineNum":" 1751","line":"      if hash.has_key?(match)"},
{"lineNum":" 1752","line":"        hash[match]"},
{"lineNum":" 1753","line":"      else"},
{"lineNum":" 1754","line":"        return self"},
{"lineNum":" 1755","line":"      end"},
{"lineNum":" 1756","line":"    end"},
{"lineNum":" 1757","line":"  end"},
{"lineNum":" 1758","line":""},
{"lineNum":" 1759","line":"  # Returns a `String` where the first occurrences of the given *string* is replaced"},
{"lineNum":" 1760","line":"  # with the given *replacement*."},
{"lineNum":" 1761","line":"  #"},
{"lineNum":" 1762","line":"  # ```"},
{"lineNum":" 1763","line":"  # \"hello yellow\".sub(\"ll\", \"dd\") # => \"heddo yellow\""},
{"lineNum":" 1764","line":"  # ```"},
{"lineNum":" 1765","line":"  def sub(string : String, replacement)"},
{"lineNum":" 1766","line":"    sub(string) { replacement }"},
{"lineNum":" 1767","line":"  end"},
{"lineNum":" 1768","line":""},
{"lineNum":" 1769","line":"  # Returns a `String` where the first occurrences of the given *string* is replaced"},
{"lineNum":" 1770","line":"  # with the block\'s value."},
{"lineNum":" 1771","line":"  #"},
{"lineNum":" 1772","line":"  # ```"},
{"lineNum":" 1773","line":"  # \"hello yellow\".sub(\"ll\") { \"dd\" } # => \"heddo yellow\""},
{"lineNum":" 1774","line":"  # ```"},
{"lineNum":" 1775","line":"  def sub(string : String, &block)"},
{"lineNum":" 1776","line":"    index = self.byte_index(string)"},
{"lineNum":" 1777","line":"    return self unless index"},
{"lineNum":" 1778","line":""},
{"lineNum":" 1779","line":"    String.build(bytesize) do |buffer|"},
{"lineNum":" 1780","line":"      buffer.write unsafe_byte_slice(0, index)"},
{"lineNum":" 1781","line":"      buffer << yield string"},
{"lineNum":" 1782","line":"      buffer.write unsafe_byte_slice(index + string.bytesize)"},
{"lineNum":" 1783","line":"    end"},
{"lineNum":" 1784","line":"  end"},
{"lineNum":" 1785","line":""},
{"lineNum":" 1786","line":"  # Returns a `String` where the first char in the string matching a key in the"},
{"lineNum":" 1787","line":"  # given *hash* is replaced by the corresponding hash value."},
{"lineNum":" 1788","line":"  #"},
{"lineNum":" 1789","line":"  # ```"},
{"lineNum":" 1790","line":"  # \"hello\".sub({\'a\' => \'b\', \'l\' => \'d\'}) # => \"hedlo\""},
{"lineNum":" 1791","line":"  # ```"},
{"lineNum":" 1792","line":"  def sub(hash : Hash(Char, _))"},
{"lineNum":" 1793","line":"    return self if empty?"},
{"lineNum":" 1794","line":""},
{"lineNum":" 1795","line":"    String.build(bytesize) do |buffer|"},
{"lineNum":" 1796","line":"      reader = Char::Reader.new(self)"},
{"lineNum":" 1797","line":"      while reader.has_next?"},
{"lineNum":" 1798","line":"        if hash.has_key?(reader.current_char)"},
{"lineNum":" 1799","line":"          buffer << hash[reader.current_char]"},
{"lineNum":" 1800","line":"          reader.next_char"},
{"lineNum":" 1801","line":"          break"},
{"lineNum":" 1802","line":"        else"},
{"lineNum":" 1803","line":"          buffer << reader.current_char"},
{"lineNum":" 1804","line":"          reader.next_char"},
{"lineNum":" 1805","line":"        end"},
{"lineNum":" 1806","line":"      end"},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"      buffer << reader.current_char"},
{"lineNum":" 1809","line":""},
{"lineNum":" 1810","line":"      if reader.has_next?"},
{"lineNum":" 1811","line":"        reader.next_char"},
{"lineNum":" 1812","line":"        buffer.write unsafe_byte_slice(reader.pos)"},
{"lineNum":" 1813","line":"      end"},
{"lineNum":" 1814","line":"    end"},
{"lineNum":" 1815","line":"  end"},
{"lineNum":" 1816","line":""},
{"lineNum":" 1817","line":"  private def sub_append(pattern : Regex)"},
{"lineNum":" 1818","line":"    match = pattern.match(self)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1819","line":"    return self unless match","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1820","line":""},
{"lineNum":" 1821","line":"    String.build(bytesize) do |buffer|"},
{"lineNum":" 1822","line":"      buffer.write unsafe_byte_slice(0, match.byte_begin)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1823","line":"      str = match[0]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1824","line":"      $~ = match","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1825","line":"      yield str, match, buffer"},
{"lineNum":" 1826","line":"      buffer.write unsafe_byte_slice(match.byte_begin + str.bytesize)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1827","line":"    end"},
{"lineNum":" 1828","line":"  end"},
{"lineNum":" 1829","line":""},
{"lineNum":" 1830","line":"  # Returns a new `String` with the character at the given index"},
{"lineNum":" 1831","line":"  # replaced by *replacement*."},
{"lineNum":" 1832","line":"  #"},
{"lineNum":" 1833","line":"  # ```"},
{"lineNum":" 1834","line":"  # \"hello\".sub(1, \'a\') # => \"hallo\""},
{"lineNum":" 1835","line":"  # ```"},
{"lineNum":" 1836","line":"  def sub(index : Int, replacement : Char)"},
{"lineNum":" 1837","line":"    sub_index(index.to_i, replacement) do |buffer|"},
{"lineNum":" 1838","line":"      replacement.each_byte do |byte|"},
{"lineNum":" 1839","line":"        buffer.value = byte"},
{"lineNum":" 1840","line":"        buffer += 1"},
{"lineNum":" 1841","line":"      end"},
{"lineNum":" 1842","line":"      {buffer, @length}"},
{"lineNum":" 1843","line":"    end"},
{"lineNum":" 1844","line":"  end"},
{"lineNum":" 1845","line":""},
{"lineNum":" 1846","line":"  # Returns a new `String` with the character at the given index"},
{"lineNum":" 1847","line":"  # replaced by *replacement*."},
{"lineNum":" 1848","line":"  #"},
{"lineNum":" 1849","line":"  # ```"},
{"lineNum":" 1850","line":"  # \"hello\".sub(1, \"eee\") # => \"heeello\""},
{"lineNum":" 1851","line":"  # ```"},
{"lineNum":" 1852","line":"  def sub(index : Int, replacement : String)"},
{"lineNum":" 1853","line":"    sub_index(index.to_i, replacement) do |buffer|"},
{"lineNum":" 1854","line":"      buffer.copy_from(replacement.to_unsafe, replacement.bytesize)"},
{"lineNum":" 1855","line":"      buffer += replacement.bytesize"},
{"lineNum":" 1856","line":"      {buffer, self.size_known? && replacement.size_known? ? self.size + replacement.size - 1 : 0}"},
{"lineNum":" 1857","line":"    end"},
{"lineNum":" 1858","line":"  end"},
{"lineNum":" 1859","line":""},
{"lineNum":" 1860","line":"  private def sub_index(index, replacement)"},
{"lineNum":" 1861","line":"    index += size + 1 if index < 0"},
{"lineNum":" 1862","line":""},
{"lineNum":" 1863","line":"    byte_index = char_index_to_byte_index(index)"},
{"lineNum":" 1864","line":"    raise IndexError.new unless byte_index"},
{"lineNum":" 1865","line":""},
{"lineNum":" 1866","line":"    reader = Char::Reader.new(self, pos: byte_index)"},
{"lineNum":" 1867","line":"    width = reader.current_char_width"},
{"lineNum":" 1868","line":"    replacement_width = replacement.bytesize"},
{"lineNum":" 1869","line":"    new_bytesize = bytesize - width + replacement_width"},
{"lineNum":" 1870","line":""},
{"lineNum":" 1871","line":"    String.new(new_bytesize) do |buffer|"},
{"lineNum":" 1872","line":"      buffer.copy_from(to_unsafe, byte_index)"},
{"lineNum":" 1873","line":"      buffer += byte_index"},
{"lineNum":" 1874","line":"      buffer, length = yield buffer"},
{"lineNum":" 1875","line":"      buffer.copy_from(to_unsafe + byte_index + width, bytesize - byte_index - width)"},
{"lineNum":" 1876","line":"      {new_bytesize, length}"},
{"lineNum":" 1877","line":"    end"},
{"lineNum":" 1878","line":"  end"},
{"lineNum":" 1879","line":""},
{"lineNum":" 1880","line":"  # Returns a new `String` with characters at the given range"},
{"lineNum":" 1881","line":"  # replaced by *replacement*."},
{"lineNum":" 1882","line":"  #"},
{"lineNum":" 1883","line":"  # ```"},
{"lineNum":" 1884","line":"  # \"hello\".sub(1..2, \'a\') # => \"halo\""},
{"lineNum":" 1885","line":"  # ```"},
{"lineNum":" 1886","line":"  def sub(range : Range(Int, Int), replacement : Char)"},
{"lineNum":" 1887","line":"    sub_range(range, replacement) do |buffer, from_index, to_index|"},
{"lineNum":" 1888","line":"      replacement.each_byte do |byte|"},
{"lineNum":" 1889","line":"        buffer.value = byte"},
{"lineNum":" 1890","line":"        buffer += 1"},
{"lineNum":" 1891","line":"      end"},
{"lineNum":" 1892","line":"      {buffer, ascii_only? ? bytesize - (to_index - from_index) + 1 : 0}"},
{"lineNum":" 1893","line":"    end"},
{"lineNum":" 1894","line":"  end"},
{"lineNum":" 1895","line":""},
{"lineNum":" 1896","line":"  # Returns a new `String` with characters at the given range"},
{"lineNum":" 1897","line":"  # replaced by *replacement*."},
{"lineNum":" 1898","line":"  #"},
{"lineNum":" 1899","line":"  # ```"},
{"lineNum":" 1900","line":"  # \"hello\".sub(1..2, \"eee\") # => \"heeelo\""},
{"lineNum":" 1901","line":"  # ```"},
{"lineNum":" 1902","line":"  def sub(range : Range(Int, Int), replacement : String)"},
{"lineNum":" 1903","line":"    sub_range(range, replacement) do |buffer|"},
{"lineNum":" 1904","line":"      buffer.copy_from(replacement.to_unsafe, replacement.bytesize)"},
{"lineNum":" 1905","line":"      buffer += replacement.bytesize"},
{"lineNum":" 1906","line":"      {buffer, 0}"},
{"lineNum":" 1907","line":"    end"},
{"lineNum":" 1908","line":"  end"},
{"lineNum":" 1909","line":""},
{"lineNum":" 1910","line":"  private def sub_range(range, replacement)"},
{"lineNum":" 1911","line":"    from, size = Indexable.range_to_index_and_count(range, self.size)"},
{"lineNum":" 1912","line":""},
{"lineNum":" 1913","line":"    from_index = char_index_to_byte_index(from)"},
{"lineNum":" 1914","line":"    raise IndexError.new unless from_index"},
{"lineNum":" 1915","line":""},
{"lineNum":" 1916","line":"    if size == 0"},
{"lineNum":" 1917","line":"      to_index = from_index"},
{"lineNum":" 1918","line":"    else"},
{"lineNum":" 1919","line":"      to_index = char_index_to_byte_index(from + size)"},
{"lineNum":" 1920","line":"      raise IndexError.new unless to_index"},
{"lineNum":" 1921","line":"    end"},
{"lineNum":" 1922","line":""},
{"lineNum":" 1923","line":"    new_bytesize = bytesize - (to_index - from_index) + replacement.bytesize"},
{"lineNum":" 1924","line":""},
{"lineNum":" 1925","line":"    String.new(new_bytesize) do |buffer|"},
{"lineNum":" 1926","line":"      buffer.copy_from(to_unsafe, from_index)"},
{"lineNum":" 1927","line":"      buffer += from_index"},
{"lineNum":" 1928","line":"      buffer, length = yield buffer, from_index, to_index"},
{"lineNum":" 1929","line":"      buffer.copy_from(to_unsafe + to_index, bytesize - to_index)"},
{"lineNum":" 1930","line":"      {new_bytesize, length}"},
{"lineNum":" 1931","line":"    end"},
{"lineNum":" 1932","line":"  end"},
{"lineNum":" 1933","line":""},
{"lineNum":" 1934","line":"  # This returns `true` if this string has `\'\\\\\'` in it. It might not be a back reference,"},
{"lineNum":" 1935","line":"  # but `\'\\\\\'` is probably used for back references, so this check is faster than parsing"},
{"lineNum":" 1936","line":"  # the whole thing."},
{"lineNum":" 1937","line":"  def has_back_references?"},
{"lineNum":" 1938","line":"    to_slice.index(\'\\\\\'.ord.to_u8)"},
{"lineNum":" 1939","line":"  end"},
{"lineNum":" 1940","line":""},
{"lineNum":" 1941","line":"  private def scan_backreferences(replacement, match_data, buffer)"},
{"lineNum":" 1942","line":"    # We only append to the buffer in chunks, so if we have \"foo\\\\1\", we remember that"},
{"lineNum":" 1943","line":"    # the chunk starts at index 0 (first_index) and when we find a \"\\\\\" we append"},
{"lineNum":" 1944","line":"    # from 0 to 3 in a single write. When we find a \"\\\\0\" or \"\\\\k<...>\", we append"},
{"lineNum":" 1945","line":"    # from the first_index, process the backreference, and then reset first_index"},
{"lineNum":" 1946","line":"    # to the new index."},
{"lineNum":" 1947","line":"    first_index = 0"},
{"lineNum":" 1948","line":"    index = 0"},
{"lineNum":" 1949","line":""},
{"lineNum":" 1950","line":"    while index = replacement.byte_index(\'\\\\\'.ord.to_u8, index)"},
{"lineNum":" 1951","line":"      index += 1"},
{"lineNum":" 1952","line":"      chr = replacement.to_unsafe[index].unsafe_chr"},
{"lineNum":" 1953","line":"      case chr"},
{"lineNum":" 1954","line":"      when \'\\\\\'"},
{"lineNum":" 1955","line":"        buffer.write(replacement.unsafe_byte_slice(first_index, index - first_index))"},
{"lineNum":" 1956","line":"        index += 1"},
{"lineNum":" 1957","line":"        first_index = index"},
{"lineNum":" 1958","line":"      when \'0\'..\'9\'"},
{"lineNum":" 1959","line":"        buffer.write(replacement.unsafe_byte_slice(first_index, index - 1 - first_index))"},
{"lineNum":" 1960","line":"        buffer << match_data[chr - \'0\']?"},
{"lineNum":" 1961","line":"        index += 1"},
{"lineNum":" 1962","line":"        first_index = index"},
{"lineNum":" 1963","line":"      when \'k\'"},
{"lineNum":" 1964","line":"        index += 1"},
{"lineNum":" 1965","line":"        chr = replacement.to_unsafe[index].unsafe_chr"},
{"lineNum":" 1966","line":"        next unless chr == \'<\'"},
{"lineNum":" 1967","line":""},
{"lineNum":" 1968","line":"        buffer.write(replacement.unsafe_byte_slice(first_index, index - 2 - first_index))"},
{"lineNum":" 1969","line":""},
{"lineNum":" 1970","line":"        index += 1"},
{"lineNum":" 1971","line":"        start_index = index"},
{"lineNum":" 1972","line":"        end_index = replacement.byte_index(\'>\'.ord.to_u8, start_index)"},
{"lineNum":" 1973","line":"        raise ArgumentError.new(\"Missing ending \'>\' for \'\\\\\\\\k<...\'\") unless end_index"},
{"lineNum":" 1974","line":""},
{"lineNum":" 1975","line":"        name = replacement.byte_slice(start_index, end_index - start_index)"},
{"lineNum":" 1976","line":"        capture = match_data[name]?"},
{"lineNum":" 1977","line":"        raise IndexError.new(\"Undefined group name reference: #{name.inspect}\") unless capture"},
{"lineNum":" 1978","line":""},
{"lineNum":" 1979","line":"        buffer << capture"},
{"lineNum":" 1980","line":"        index = end_index + 1"},
{"lineNum":" 1981","line":"        first_index = index"},
{"lineNum":" 1982","line":"      end"},
{"lineNum":" 1983","line":"    end"},
{"lineNum":" 1984","line":""},
{"lineNum":" 1985","line":"    if first_index != replacement.bytesize"},
{"lineNum":" 1986","line":"      buffer.write(replacement.unsafe_byte_slice(first_index))"},
{"lineNum":" 1987","line":"    end"},
{"lineNum":" 1988","line":"  end"},
{"lineNum":" 1989","line":""},
{"lineNum":" 1990","line":"  # Returns a `String` where each character yielded to the given block"},
{"lineNum":" 1991","line":"  # is replaced by the block\'s return value."},
{"lineNum":" 1992","line":"  #"},
{"lineNum":" 1993","line":"  # ```"},
{"lineNum":" 1994","line":"  # \"hello\".gsub { |char| char + 1 } # => \"ifmmp\""},
{"lineNum":" 1995","line":"  # \"hello\".gsub { \"hi\" }            # => \"hihihihihi\""},
{"lineNum":" 1996","line":"  # ```"},
{"lineNum":" 1997","line":"  def gsub(&block : Char -> _)"},
{"lineNum":" 1998","line":"    String.build(bytesize) do |buffer|"},
{"lineNum":" 1999","line":"      each_char do |my_char|"},
{"lineNum":" 2000","line":"        buffer << yield my_char"},
{"lineNum":" 2001","line":"      end"},
{"lineNum":" 2002","line":"    end"},
{"lineNum":" 2003","line":"  end"},
{"lineNum":" 2004","line":""},
{"lineNum":" 2005","line":"  # Returns a `String` where all occurrences of the given char are"},
{"lineNum":" 2006","line":"  # replaced with the given *replacement*."},
{"lineNum":" 2007","line":"  #"},
{"lineNum":" 2008","line":"  # ```"},
{"lineNum":" 2009","line":"  # \"hello\".gsub(\'l\', \"lo\")      # => \"heloloo\""},
{"lineNum":" 2010","line":"  # \"hello world\".gsub(\'o\', \'a\') # => \"hella warld\""},
{"lineNum":" 2011","line":"  # ```"},
{"lineNum":" 2012","line":"  def gsub(char : Char, replacement)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2013","line":"    if replacement.is_a?(String) && replacement.bytesize == 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2014","line":"      return gsub(char, replacement.unsafe_byte_at(0).unsafe_chr)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2015","line":"    end"},
{"lineNum":" 2016","line":""},
{"lineNum":" 2017","line":"    if includes?(char)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2018","line":"      if replacement.is_a?(Char) && char.ascii? && replacement.ascii?"},
{"lineNum":" 2019","line":"        return gsub_ascii_char(char, replacement)"},
{"lineNum":" 2020","line":"      end"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"      gsub { |my_char| char == my_char ? replacement : my_char }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 2023","line":"    else"},
{"lineNum":" 2024","line":"      self"},
{"lineNum":" 2025","line":"    end"},
{"lineNum":" 2026","line":"  end"},
{"lineNum":" 2027","line":""},
{"lineNum":" 2028","line":"  private def gsub_ascii_char(char, replacement)"},
{"lineNum":" 2029","line":"    String.new(bytesize) do |buffer|"},
{"lineNum":" 2030","line":"      each_char_with_index do |my_char, i|"},
{"lineNum":" 2031","line":"        buffer[i] = if my_char == char","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2032","line":"                      replacement.ord.to_u8"},
{"lineNum":" 2033","line":"                    else"},
{"lineNum":" 2034","line":"                      unsafe_byte_at(i)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2035","line":"                    end"},
{"lineNum":" 2036","line":"      end"},
{"lineNum":" 2037","line":"      {bytesize, bytesize}"},
{"lineNum":" 2038","line":"    end"},
{"lineNum":" 2039","line":"  end"},
{"lineNum":" 2040","line":""},
{"lineNum":" 2041","line":"  # Returns a `String` where all occurrences of the given *pattern* are replaced"},
{"lineNum":" 2042","line":"  # by the block value\'s value."},
{"lineNum":" 2043","line":"  #"},
{"lineNum":" 2044","line":"  # ```"},
{"lineNum":" 2045","line":"  # \"hello\".gsub(/./) { |s| s[0].ord.to_s + \' \' } # => \"104 101 108 108 111 \""},
{"lineNum":" 2046","line":"  # ```"},
{"lineNum":" 2047","line":"  def gsub(pattern : Regex)"},
{"lineNum":" 2048","line":"    gsub_append(pattern) do |string, match, buffer|","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2049","line":"      $~ = match"},
{"lineNum":" 2050","line":"      buffer << yield string, match"},
{"lineNum":" 2051","line":"    end"},
{"lineNum":" 2052","line":"  end"},
{"lineNum":" 2053","line":""},
{"lineNum":" 2054","line":"  # Returns a `String` where all occurrences of the given *pattern* are replaced"},
{"lineNum":" 2055","line":"  # with the given *replacement*."},
{"lineNum":" 2056","line":"  #"},
{"lineNum":" 2057","line":"  # ```"},
{"lineNum":" 2058","line":"  # \"hello\".gsub(/[aeiou]/, \'*\') # => \"h*ll*\""},
{"lineNum":" 2059","line":"  # ```"},
{"lineNum":" 2060","line":"  #"},
{"lineNum":" 2061","line":"  # Within *replacement*, the special match variable `$~` will not refer to the"},
{"lineNum":" 2062","line":"  # current match."},
{"lineNum":" 2063","line":"  #"},
{"lineNum":" 2064","line":"  # If *backreferences* is `true` (the default value), *replacement* can include backreferences:"},
{"lineNum":" 2065","line":"  #"},
{"lineNum":" 2066","line":"  # ```"},
{"lineNum":" 2067","line":"  # \"hello\".gsub(/[aeiou]/, \"(\\\\0)\") # => \"h(e)ll(o)\""},
{"lineNum":" 2068","line":"  # ```"},
{"lineNum":" 2069","line":"  #"},
{"lineNum":" 2070","line":"  # When substitution is performed, any backreferences found in *replacement*"},
{"lineNum":" 2071","line":"  # will be replaced with the contents of the corresponding capture group in"},
{"lineNum":" 2072","line":"  # *pattern*. Backreferences to capture groups that were not present in"},
{"lineNum":" 2073","line":"  # *pattern* or that did not match will be skipped. See `Regex` for information"},
{"lineNum":" 2074","line":"  # about capture groups."},
{"lineNum":" 2075","line":"  #"},
{"lineNum":" 2076","line":"  # Backreferences are expressed in the form `\"\\\\d\"`, where *d* is a group"},
{"lineNum":" 2077","line":"  # number, or `\"\\\\k<name>\"` where *name* is the name of a named capture group."},
{"lineNum":" 2078","line":"  # A sequence of literal characters resembling a backreference can be"},
{"lineNum":" 2079","line":"  # expressed by placing `\"\\\\\"` before the sequence."},
{"lineNum":" 2080","line":"  #"},
{"lineNum":" 2081","line":"  # ```"},
{"lineNum":" 2082","line":"  # \"foo\".gsub(/o/, \"x\\\\0x\")                  # => \"fxoxxox\""},
{"lineNum":" 2083","line":"  # \"foofoo\".gsub(/(?<bar>oo)/, \"|\\\\k<bar>|\") # => \"f|oo|f|oo|\""},
{"lineNum":" 2084","line":"  # \"foo\".gsub(/o/, \"\\\\\\\\0\")                  # => \"f\\\\0\\\\0\""},
{"lineNum":" 2085","line":"  # ```"},
{"lineNum":" 2086","line":"  #"},
{"lineNum":" 2087","line":"  # Raises `ArgumentError` if an incomplete named back-reference is present in"},
{"lineNum":" 2088","line":"  # *replacement*."},
{"lineNum":" 2089","line":"  #"},
{"lineNum":" 2090","line":"  # Raises `IndexError` if a named group referenced in *replacement* is not present"},
{"lineNum":" 2091","line":"  # in *pattern*."},
{"lineNum":" 2092","line":"  def gsub(pattern : Regex, replacement, backreferences = true)"},
{"lineNum":" 2093","line":"    if backreferences && replacement.is_a?(String) && replacement.has_back_references?"},
{"lineNum":" 2094","line":"      gsub_append(pattern) { |_, match, buffer| scan_backreferences(replacement, match, buffer) }"},
{"lineNum":" 2095","line":"    else"},
{"lineNum":" 2096","line":"      gsub(pattern) { replacement }"},
{"lineNum":" 2097","line":"    end"},
{"lineNum":" 2098","line":"  end"},
{"lineNum":" 2099","line":""},
{"lineNum":" 2100","line":"  # Returns a `String` where all occurrences of the given *pattern* are replaced"},
{"lineNum":" 2101","line":"  # with a *hash* of replacements. If the *hash* contains the matched pattern,"},
{"lineNum":" 2102","line":"  # the corresponding value is used as a replacement. Otherwise the match is"},
{"lineNum":" 2103","line":"  # not included in the returned string."},
{"lineNum":" 2104","line":"  #"},
{"lineNum":" 2105","line":"  # ```"},
{"lineNum":" 2106","line":"  # # \"he\" and \"l\" are matched and replaced,"},
{"lineNum":" 2107","line":"  # # but \"o\" is not and so is not included"},
{"lineNum":" 2108","line":"  # \"hello\".gsub(/(he|l|o)/, {\"he\": \"ha\", \"l\": \"la\"}) # => \"halala\""},
{"lineNum":" 2109","line":"  # ```"},
{"lineNum":" 2110","line":"  def gsub(pattern : Regex, hash : Hash(String, _) | NamedTuple)"},
{"lineNum":" 2111","line":"    gsub(pattern) do |match|"},
{"lineNum":" 2112","line":"      hash[match]?"},
{"lineNum":" 2113","line":"    end"},
{"lineNum":" 2114","line":"  end"},
{"lineNum":" 2115","line":""},
{"lineNum":" 2116","line":"  # Returns a `String` where all occurrences of the given *string* are replaced"},
{"lineNum":" 2117","line":"  # with the given *replacement*."},
{"lineNum":" 2118","line":"  #"},
{"lineNum":" 2119","line":"  # ```"},
{"lineNum":" 2120","line":"  # \"hello yellow\".gsub(\"ll\", \"dd\") # => \"heddo yeddow\""},
{"lineNum":" 2121","line":"  # ```"},
{"lineNum":" 2122","line":"  def gsub(string : String, replacement)"},
{"lineNum":" 2123","line":"    if string.bytesize == 1"},
{"lineNum":" 2124","line":"      gsub(string.unsafe_byte_at(0).unsafe_chr, replacement)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2125","line":"    else"},
{"lineNum":" 2126","line":"      gsub(string) { replacement }"},
{"lineNum":" 2127","line":"    end"},
{"lineNum":" 2128","line":"  end"},
{"lineNum":" 2129","line":""},
{"lineNum":" 2130","line":"  # Returns a `String` where all occurrences of the given *string* are replaced"},
{"lineNum":" 2131","line":"  # with the block\'s value."},
{"lineNum":" 2132","line":"  #"},
{"lineNum":" 2133","line":"  # ```"},
{"lineNum":" 2134","line":"  # \"hello yellow\".gsub(\"ll\") { \"dd\" } # => \"heddo yeddow\""},
{"lineNum":" 2135","line":"  # ```"},
{"lineNum":" 2136","line":"  def gsub(string : String, &block)"},
{"lineNum":" 2137","line":"    byte_offset = 0"},
{"lineNum":" 2138","line":"    index = self.byte_index(string, byte_offset)"},
{"lineNum":" 2139","line":"    return self unless index"},
{"lineNum":" 2140","line":""},
{"lineNum":" 2141","line":"    last_byte_offset = 0"},
{"lineNum":" 2142","line":""},
{"lineNum":" 2143","line":"    String.build(bytesize) do |buffer|"},
{"lineNum":" 2144","line":"      while index"},
{"lineNum":" 2145","line":"        buffer.write unsafe_byte_slice(last_byte_offset, index - last_byte_offset)"},
{"lineNum":" 2146","line":"        buffer << yield string"},
{"lineNum":" 2147","line":""},
{"lineNum":" 2148","line":"        if string.bytesize == 0"},
{"lineNum":" 2149","line":"          byte_offset = index + 1"},
{"lineNum":" 2150","line":"          last_byte_offset = index"},
{"lineNum":" 2151","line":"        else"},
{"lineNum":" 2152","line":"          byte_offset = index + string.bytesize"},
{"lineNum":" 2153","line":"          last_byte_offset = byte_offset"},
{"lineNum":" 2154","line":"        end"},
{"lineNum":" 2155","line":""},
{"lineNum":" 2156","line":"        index = self.byte_index(string, byte_offset)"},
{"lineNum":" 2157","line":"      end"},
{"lineNum":" 2158","line":""},
{"lineNum":" 2159","line":"      if last_byte_offset < bytesize"},
{"lineNum":" 2160","line":"        buffer.write unsafe_byte_slice(last_byte_offset)"},
{"lineNum":" 2161","line":"      end"},
{"lineNum":" 2162","line":"    end"},
{"lineNum":" 2163","line":"  end"},
{"lineNum":" 2164","line":""},
{"lineNum":" 2165","line":"  # Returns a `String` where all chars in the given hash are replaced"},
{"lineNum":" 2166","line":"  # by the corresponding *hash* values."},
{"lineNum":" 2167","line":"  #"},
{"lineNum":" 2168","line":"  # ```"},
{"lineNum":" 2169","line":"  # \"hello\".gsub({\'e\' => \'a\', \'l\' => \'d\'}) # => \"haddo\""},
{"lineNum":" 2170","line":"  # ```"},
{"lineNum":" 2171","line":"  def gsub(hash : Hash(Char, _))"},
{"lineNum":" 2172","line":"    gsub do |char|"},
{"lineNum":" 2173","line":"      hash[char]? || char"},
{"lineNum":" 2174","line":"    end"},
{"lineNum":" 2175","line":"  end"},
{"lineNum":" 2176","line":""},
{"lineNum":" 2177","line":"  # Returns a `String` where all chars in the given named tuple are replaced"},
{"lineNum":" 2178","line":"  # by the corresponding *tuple* values."},
{"lineNum":" 2179","line":"  #"},
{"lineNum":" 2180","line":"  # ```"},
{"lineNum":" 2181","line":"  # \"hello\".gsub({e: \'a\', l: \'d\'}) # => \"haddo\""},
{"lineNum":" 2182","line":"  # ```"},
{"lineNum":" 2183","line":"  def gsub(tuple : NamedTuple)"},
{"lineNum":" 2184","line":"    gsub do |char|"},
{"lineNum":" 2185","line":"      tuple[char.to_s]? || char"},
{"lineNum":" 2186","line":"    end"},
{"lineNum":" 2187","line":"  end"},
{"lineNum":" 2188","line":""},
{"lineNum":" 2189","line":"  private def gsub_append(pattern : Regex)"},
{"lineNum":" 2190","line":"    byte_offset = 0"},
{"lineNum":" 2191","line":"    match = pattern.match_at_byte_index(self, byte_offset)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2192","line":"    return self unless match","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2193","line":""},
{"lineNum":" 2194","line":"    last_byte_offset = 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2195","line":""},
{"lineNum":" 2196","line":"    String.build(bytesize) do |buffer|"},
{"lineNum":" 2197","line":"      while match","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2198","line":"        index = match.byte_begin(0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2199","line":""},
{"lineNum":" 2200","line":"        buffer.write unsafe_byte_slice(last_byte_offset, index - last_byte_offset)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2201","line":"        str = match[0]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2202","line":"        $~ = match","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2203","line":"        yield str, match, buffer"},
{"lineNum":" 2204","line":""},
{"lineNum":" 2205","line":"        if str.bytesize == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2206","line":"          byte_offset = index + 1"},
{"lineNum":" 2207","line":"          last_byte_offset = index","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2208","line":"        else"},
{"lineNum":" 2209","line":"          byte_offset = index + str.bytesize"},
{"lineNum":" 2210","line":"          last_byte_offset = byte_offset"},
{"lineNum":" 2211","line":"        end"},
{"lineNum":" 2212","line":""},
{"lineNum":" 2213","line":"        match = pattern.match_at_byte_index(self, byte_offset)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2214","line":"      end"},
{"lineNum":" 2215","line":""},
{"lineNum":" 2216","line":"      if last_byte_offset < bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2217","line":"        buffer.write unsafe_byte_slice(last_byte_offset)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2218","line":"      end"},
{"lineNum":" 2219","line":"    end"},
{"lineNum":" 2220","line":"  end"},
{"lineNum":" 2221","line":""},
{"lineNum":" 2222","line":"  # Yields each char in this string to the block,"},
{"lineNum":" 2223","line":"  # returns the number of times the block returned a truthy value."},
{"lineNum":" 2224","line":"  #"},
{"lineNum":" 2225","line":"  # ```"},
{"lineNum":" 2226","line":"  # \"aabbcc\".count { |c| [\'a\', \'b\'].includes?(c) } # => 4"},
{"lineNum":" 2227","line":"  # ```"},
{"lineNum":" 2228","line":"  def count"},
{"lineNum":" 2229","line":"    count = 0"},
{"lineNum":" 2230","line":"    each_char do |char|"},
{"lineNum":" 2231","line":"      count += 1 if yield char"},
{"lineNum":" 2232","line":"    end"},
{"lineNum":" 2233","line":"    count"},
{"lineNum":" 2234","line":"  end"},
{"lineNum":" 2235","line":""},
{"lineNum":" 2236","line":"  # Counts the occurrences of *other* char in this string."},
{"lineNum":" 2237","line":"  #"},
{"lineNum":" 2238","line":"  # ```"},
{"lineNum":" 2239","line":"  # \"aabbcc\".count(\'a\') # => 2"},
{"lineNum":" 2240","line":"  # ```"},
{"lineNum":" 2241","line":"  def count(other : Char)"},
{"lineNum":" 2242","line":"    count { |char| char == other }"},
{"lineNum":" 2243","line":"  end"},
{"lineNum":" 2244","line":""},
{"lineNum":" 2245","line":"  # Sets should be a list of strings following the rules"},
{"lineNum":" 2246","line":"  # described at `Char#in_set?`. Returns the number of characters"},
{"lineNum":" 2247","line":"  # in this string that match the given set."},
{"lineNum":" 2248","line":"  def count(*sets)"},
{"lineNum":" 2249","line":"    count { |char| char.in_set?(*sets) }"},
{"lineNum":" 2250","line":"  end"},
{"lineNum":" 2251","line":""},
{"lineNum":" 2252","line":"  # Yields each char in this string to the block."},
{"lineNum":" 2253","line":"  # Returns a new `String` with all characters for which the"},
{"lineNum":" 2254","line":"  # block returned a truthy value removed."},
{"lineNum":" 2255","line":"  #"},
{"lineNum":" 2256","line":"  # ```"},
{"lineNum":" 2257","line":"  # \"aabbcc\".delete { |c| [\'a\', \'b\'].includes?(c) } # => \"cc\""},
{"lineNum":" 2258","line":"  # ```"},
{"lineNum":" 2259","line":"  def delete"},
{"lineNum":" 2260","line":"    String.build(bytesize) do |buffer|"},
{"lineNum":" 2261","line":"      each_char do |char|"},
{"lineNum":" 2262","line":"        buffer << char unless yield char"},
{"lineNum":" 2263","line":"      end"},
{"lineNum":" 2264","line":"    end"},
{"lineNum":" 2265","line":"  end"},
{"lineNum":" 2266","line":""},
{"lineNum":" 2267","line":"  # Returns a new `String` with all occurrences of *char* removed."},
{"lineNum":" 2268","line":"  #"},
{"lineNum":" 2269","line":"  # ```"},
{"lineNum":" 2270","line":"  # \"aabbcc\".delete(\'b\') # => \"aacc\""},
{"lineNum":" 2271","line":"  # ```"},
{"lineNum":" 2272","line":"  def delete(char : Char)"},
{"lineNum":" 2273","line":"    delete { |my_char| my_char == char }"},
{"lineNum":" 2274","line":"  end"},
{"lineNum":" 2275","line":""},
{"lineNum":" 2276","line":"  # Sets should be a list of strings following the rules"},
{"lineNum":" 2277","line":"  # described at `Char#in_set?`. Returns a new `String` with"},
{"lineNum":" 2278","line":"  # all characters that match the given set removed."},
{"lineNum":" 2279","line":"  #"},
{"lineNum":" 2280","line":"  # ```"},
{"lineNum":" 2281","line":"  # \"aabbccdd\".delete(\"a-c\") # => \"dd\""},
{"lineNum":" 2282","line":"  # ```"},
{"lineNum":" 2283","line":"  def delete(*sets)"},
{"lineNum":" 2284","line":"    delete { |char| char.in_set?(*sets) }"},
{"lineNum":" 2285","line":"  end"},
{"lineNum":" 2286","line":""},
{"lineNum":" 2287","line":"  # Yields each char in this string to the block."},
{"lineNum":" 2288","line":"  # Returns a new `String`, that has all characters removed,"},
{"lineNum":" 2289","line":"  # that were the same as the previous one and for which the given"},
{"lineNum":" 2290","line":"  # block returned a truthy value."},
{"lineNum":" 2291","line":"  #"},
{"lineNum":" 2292","line":"  # ```"},
{"lineNum":" 2293","line":"  # \"aaabbbccc\".squeeze { |c| [\'a\', \'b\'].includes?(c) } # => \"abccc\""},
{"lineNum":" 2294","line":"  # \"aaabbbccc\".squeeze { |c| [\'a\', \'c\'].includes?(c) } # => \"abbbc\""},
{"lineNum":" 2295","line":"  # ```"},
{"lineNum":" 2296","line":"  def squeeze"},
{"lineNum":" 2297","line":"    previous = nil"},
{"lineNum":" 2298","line":"    String.build(bytesize) do |buffer|"},
{"lineNum":" 2299","line":"      each_char do |char|"},
{"lineNum":" 2300","line":"        buffer << char unless yield(char) && previous == char"},
{"lineNum":" 2301","line":"        previous = char"},
{"lineNum":" 2302","line":"      end"},
{"lineNum":" 2303","line":"    end"},
{"lineNum":" 2304","line":"  end"},
{"lineNum":" 2305","line":""},
{"lineNum":" 2306","line":"  # Returns a new `String`, with all runs of char replaced by one instance."},
{"lineNum":" 2307","line":"  #"},
{"lineNum":" 2308","line":"  # ```"},
{"lineNum":" 2309","line":"  # \"a    bbb\".squeeze(\' \') # => \"a bbb\""},
{"lineNum":" 2310","line":"  # ```"},
{"lineNum":" 2311","line":"  def squeeze(char : Char)"},
{"lineNum":" 2312","line":"    squeeze { |my_char| char == my_char }"},
{"lineNum":" 2313","line":"  end"},
{"lineNum":" 2314","line":""},
{"lineNum":" 2315","line":"  # Sets should be a list of strings following the rules"},
{"lineNum":" 2316","line":"  # described at `Char#in_set?`. Returns a new `String` with all"},
{"lineNum":" 2317","line":"  # runs of the same character replaced by one instance, if"},
{"lineNum":" 2318","line":"  # they match the given set."},
{"lineNum":" 2319","line":"  #"},
{"lineNum":" 2320","line":"  # If no set is given, all characters are matched."},
{"lineNum":" 2321","line":"  #"},
{"lineNum":" 2322","line":"  # ```"},
{"lineNum":" 2323","line":"  # \"aaabbbcccddd\".squeeze(\"b-d\") # => \"aaabcd\""},
{"lineNum":" 2324","line":"  # \"a       bbb\".squeeze         # => \"a b\""},
{"lineNum":" 2325","line":"  # ```"},
{"lineNum":" 2326","line":"  def squeeze(*sets : String)"},
{"lineNum":" 2327","line":"    squeeze { |char| char.in_set?(*sets) }"},
{"lineNum":" 2328","line":"  end"},
{"lineNum":" 2329","line":""},
{"lineNum":" 2330","line":"  # Returns a new `String`, that has all characters removed,"},
{"lineNum":" 2331","line":"  # that were the same as the previous one."},
{"lineNum":" 2332","line":"  #"},
{"lineNum":" 2333","line":"  # ```"},
{"lineNum":" 2334","line":"  # \"a       bbb\".squeeze # => \"a b\""},
{"lineNum":" 2335","line":"  # ```"},
{"lineNum":" 2336","line":"  def squeeze"},
{"lineNum":" 2337","line":"    squeeze { true }"},
{"lineNum":" 2338","line":"  end"},
{"lineNum":" 2339","line":""},
{"lineNum":" 2340","line":"  # Returns `true` if this is the empty string, `\"\"`."},
{"lineNum":" 2341","line":"  def empty?","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 2342","line":"    bytesize == 0"},
{"lineNum":" 2343","line":"  end"},
{"lineNum":" 2344","line":""},
{"lineNum":" 2345","line":"  # Returns `true` if this string consists exclusively of unicode whitespace."},
{"lineNum":" 2346","line":"  #"},
{"lineNum":" 2347","line":"  # ```"},
{"lineNum":" 2348","line":"  # \"\".blank?        # => true"},
{"lineNum":" 2349","line":"  # \"   \".blank?     # => true"},
{"lineNum":" 2350","line":"  # \"   a   \".blank? # => false"},
{"lineNum":" 2351","line":"  # ```"},
{"lineNum":" 2352","line":"  def blank?"},
{"lineNum":" 2353","line":"    each_char do |char|"},
{"lineNum":" 2354","line":"      return false unless char.whitespace?"},
{"lineNum":" 2355","line":"    end"},
{"lineNum":" 2356","line":"    true"},
{"lineNum":" 2357","line":"  end"},
{"lineNum":" 2358","line":""},
{"lineNum":" 2359","line":"  def ==(other : self)"},
{"lineNum":" 2360","line":"    return true if same?(other)"},
{"lineNum":" 2361","line":"    return false unless bytesize == other.bytesize","class":"lineNoCov","hits":"0","possible_hits":"46",},
{"lineNum":" 2362","line":"    to_unsafe.memcmp(other.to_unsafe, bytesize) == 0","class":"lineNoCov","hits":"0","possible_hits":"30",},
{"lineNum":" 2363","line":"  end"},
{"lineNum":" 2364","line":""},
{"lineNum":" 2365","line":"  # Compares this string with *other*, returning `-1`, `0` or `+1` depending on whether"},
{"lineNum":" 2366","line":"  # this string is less, equal or greater than *other*."},
{"lineNum":" 2367","line":"  #"},
{"lineNum":" 2368","line":"  # Comparison is done byte-per-byte: if a byte is less then the other corresponding"},
{"lineNum":" 2369","line":"  # byte, `-1` is returned and so on."},
{"lineNum":" 2370","line":"  #"},
{"lineNum":" 2371","line":"  # If the strings are of different lengths, and the strings are equal when compared"},
{"lineNum":" 2372","line":"  # up to the shortest length, then the longer string is considered greater than"},
{"lineNum":" 2373","line":"  # the shorter one."},
{"lineNum":" 2374","line":"  #"},
{"lineNum":" 2375","line":"  # ```"},
{"lineNum":" 2376","line":"  # \"abcdef\" <=> \"abcde\"   # => 1"},
{"lineNum":" 2377","line":"  # \"abcdef\" <=> \"abcdef\"  # => 0"},
{"lineNum":" 2378","line":"  # \"abcdef\" <=> \"abcdefg\" # => -1"},
{"lineNum":" 2379","line":"  # \"abcdef\" <=> \"ABCDEF\"  # => 1"},
{"lineNum":" 2380","line":"  # ```"},
{"lineNum":" 2381","line":"  def <=>(other : self)"},
{"lineNum":" 2382","line":"    return 0 if same?(other)"},
{"lineNum":" 2383","line":"    min_bytesize = Math.min(bytesize, other.bytesize)"},
{"lineNum":" 2384","line":""},
{"lineNum":" 2385","line":"    cmp = to_unsafe.memcmp(other.to_unsafe, min_bytesize)"},
{"lineNum":" 2386","line":"    cmp == 0 ? (bytesize <=> other.bytesize) : cmp.sign"},
{"lineNum":" 2387","line":"  end"},
{"lineNum":" 2388","line":""},
{"lineNum":" 2389","line":"  # Compares this string with *other*, returning `-1`, `0` or `+1` depending on whether"},
{"lineNum":" 2390","line":"  # this string is less, equal or greater than *other*, optionally in a *case_insensitive*"},
{"lineNum":" 2391","line":"  # manner."},
{"lineNum":" 2392","line":"  #"},
{"lineNum":" 2393","line":"  # If *case_insitive* is `false`, this method delegates to `<=>`. Otherwise,"},
{"lineNum":" 2394","line":"  # the strings are compared char-by-char, and ASCII characters are compared in a"},
{"lineNum":" 2395","line":"  # case-insensitive way."},
{"lineNum":" 2396","line":"  #"},
{"lineNum":" 2397","line":"  # ```"},
{"lineNum":" 2398","line":"  # \"abcdef\".compare(\"abcde\")   # => 1"},
{"lineNum":" 2399","line":"  # \"abcdef\".compare(\"abcdef\")  # => 0"},
{"lineNum":" 2400","line":"  # \"abcdef\".compare(\"abcdefg\") # => -1"},
{"lineNum":" 2401","line":"  # \"abcdef\".compare(\"ABCDEF\")  # => 1"},
{"lineNum":" 2402","line":"  #"},
{"lineNum":" 2403","line":"  # \"abcdef\".compare(\"ABCDEF\", case_insensitive: true) # => 0"},
{"lineNum":" 2404","line":"  # \"abcdef\".compare(\"ABCDEG\", case_insensitive: true) # => -1"},
{"lineNum":" 2405","line":"  # ```"},
{"lineNum":" 2406","line":"  def compare(other : String, case_insensitive = false)"},
{"lineNum":" 2407","line":"    return self <=> other unless case_insensitive"},
{"lineNum":" 2408","line":""},
{"lineNum":" 2409","line":"    reader1 = Char::Reader.new(self)"},
{"lineNum":" 2410","line":"    reader2 = Char::Reader.new(other)"},
{"lineNum":" 2411","line":"    ch1 = reader1.current_char"},
{"lineNum":" 2412","line":"    ch2 = reader2.current_char"},
{"lineNum":" 2413","line":""},
{"lineNum":" 2414","line":"    while reader1.has_next? && reader2.has_next?"},
{"lineNum":" 2415","line":"      cmp = ch1.downcase <=> ch2.downcase"},
{"lineNum":" 2416","line":"      return cmp.sign if cmp != 0"},
{"lineNum":" 2417","line":""},
{"lineNum":" 2418","line":"      ch1 = reader1.next_char"},
{"lineNum":" 2419","line":"      ch2 = reader2.next_char"},
{"lineNum":" 2420","line":"    end"},
{"lineNum":" 2421","line":""},
{"lineNum":" 2422","line":"    if reader1.has_next?"},
{"lineNum":" 2423","line":"      1"},
{"lineNum":" 2424","line":"    elsif reader2.has_next?"},
{"lineNum":" 2425","line":"      -1"},
{"lineNum":" 2426","line":"    else"},
{"lineNum":" 2427","line":"      0"},
{"lineNum":" 2428","line":"    end"},
{"lineNum":" 2429","line":"  end"},
{"lineNum":" 2430","line":""},
{"lineNum":" 2431","line":"  # Tests whether *str* matches *regex*."},
{"lineNum":" 2432","line":"  # If successful, it returns the position of the first match."},
{"lineNum":" 2433","line":"  # If unsuccessful, it returns `nil`."},
{"lineNum":" 2434","line":"  #"},
{"lineNum":" 2435","line":"  # If the argument isn\'t a `Regex`, it returns `nil`."},
{"lineNum":" 2436","line":"  #"},
{"lineNum":" 2437","line":"  # ```"},
{"lineNum":" 2438","line":"  # \"Haystack\" =~ /ay/ # => 1"},
{"lineNum":" 2439","line":"  # \"Haystack\" =~ /z/  # => nil"},
{"lineNum":" 2440","line":"  #"},
{"lineNum":" 2441","line":"  # \"Haystack\" =~ 45 # => nil"},
{"lineNum":" 2442","line":"  # ```"},
{"lineNum":" 2443","line":"  def =~(regex : Regex)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2444","line":"    match = regex.match(self)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2445","line":"    $~ = match","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2446","line":"    match.try &.begin(0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2447","line":"  end"},
{"lineNum":" 2448","line":""},
{"lineNum":" 2449","line":"  # ditto"},
{"lineNum":" 2450","line":"  def =~(other)"},
{"lineNum":" 2451","line":"    nil"},
{"lineNum":" 2452","line":"  end"},
{"lineNum":" 2453","line":""},
{"lineNum":" 2454","line":"  # Concatenates *str* and *other*."},
{"lineNum":" 2455","line":"  #"},
{"lineNum":" 2456","line":"  # ```"},
{"lineNum":" 2457","line":"  # \"abc\" + \"def\" # => \"abcdef\""},
{"lineNum":" 2458","line":"  # \"abc\" + \'d\'   # => \"abcd\""},
{"lineNum":" 2459","line":"  # ```"},
{"lineNum":" 2460","line":"  def +(other : self)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2461","line":"    return self if other.empty?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2462","line":"    return other if self.empty?"},
{"lineNum":" 2463","line":""},
{"lineNum":" 2464","line":"    size = bytesize + other.bytesize"},
{"lineNum":" 2465","line":"    String.new(size) do |buffer|"},
{"lineNum":" 2466","line":"      buffer.copy_from(to_unsafe, bytesize)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2467","line":"      (buffer + bytesize).copy_from(other.to_unsafe, other.bytesize)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2468","line":""},
{"lineNum":" 2469","line":"      if size_known? && other.size_known?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2470","line":"        {size, @length + other.@length}"},
{"lineNum":" 2471","line":"      else"},
{"lineNum":" 2472","line":"        {size, 0}"},
{"lineNum":" 2473","line":"      end"},
{"lineNum":" 2474","line":"    end"},
{"lineNum":" 2475","line":"  end"},
{"lineNum":" 2476","line":""},
{"lineNum":" 2477","line":"  # ditto"},
{"lineNum":" 2478","line":"  def +(char : Char)"},
{"lineNum":" 2479","line":"    bytes, count = String.char_bytes_and_bytesize(char)"},
{"lineNum":" 2480","line":"    size = bytesize + count"},
{"lineNum":" 2481","line":"    String.new(size) do |buffer|"},
{"lineNum":" 2482","line":"      buffer.copy_from(to_unsafe, bytesize)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2483","line":"      (buffer + bytesize).copy_from(bytes.to_unsafe, count)"},
{"lineNum":" 2484","line":""},
{"lineNum":" 2485","line":"      if size_known?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2486","line":"        {size, @length + 1}"},
{"lineNum":" 2487","line":"      else"},
{"lineNum":" 2488","line":"        {size, 0}"},
{"lineNum":" 2489","line":"      end"},
{"lineNum":" 2490","line":"    end"},
{"lineNum":" 2491","line":"  end"},
{"lineNum":" 2492","line":""},
{"lineNum":" 2493","line":"  # Makes a new `String` by adding *str* to itself *times* times."},
{"lineNum":" 2494","line":"  #"},
{"lineNum":" 2495","line":"  # ```"},
{"lineNum":" 2496","line":"  # \"Developers! \" * 4"},
{"lineNum":" 2497","line":"  # # => \"Developers! Developers! Developers! Developers! \""},
{"lineNum":" 2498","line":"  # ```"},
{"lineNum":" 2499","line":"  def *(times : Int)"},
{"lineNum":" 2500","line":"    raise ArgumentError.new \"Negative argument\" if times < 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2501","line":""},
{"lineNum":" 2502","line":"    if times == 0 || bytesize == 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2503","line":"      return \"\""},
{"lineNum":" 2504","line":"    elsif bytesize == 1"},
{"lineNum":" 2505","line":"      return String.new(times) do |buffer|"},
{"lineNum":" 2506","line":"        Intrinsics.memset(buffer.as(Void*), to_unsafe[0], times, 0, false)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 2507","line":"        {times, times}"},
{"lineNum":" 2508","line":"      end"},
{"lineNum":" 2509","line":"    end"},
{"lineNum":" 2510","line":""},
{"lineNum":" 2511","line":"    total_bytesize = bytesize * times"},
{"lineNum":" 2512","line":"    String.new(total_bytesize) do |buffer|"},
{"lineNum":" 2513","line":"      buffer.copy_from(to_unsafe, bytesize)"},
{"lineNum":" 2514","line":"      n = bytesize"},
{"lineNum":" 2515","line":""},
{"lineNum":" 2516","line":"      while n <= total_bytesize / 2"},
{"lineNum":" 2517","line":"        (buffer + n).copy_from(buffer, n)"},
{"lineNum":" 2518","line":"        n *= 2"},
{"lineNum":" 2519","line":"      end"},
{"lineNum":" 2520","line":""},
{"lineNum":" 2521","line":"      (buffer + n).copy_from(buffer, total_bytesize - n)"},
{"lineNum":" 2522","line":"      {total_bytesize, @length * times}"},
{"lineNum":" 2523","line":"    end"},
{"lineNum":" 2524","line":"  end"},
{"lineNum":" 2525","line":""},
{"lineNum":" 2526","line":"  # Prime number constant for Rabin-Karp algorithm `String#index`."},
{"lineNum":" 2527","line":"  private PRIME_RK = 2097169u32"},
{"lineNum":" 2528","line":""},
{"lineNum":" 2529","line":"  # Update rolling hash for Rabin-Karp algorithm `String#index`."},
{"lineNum":" 2530","line":"  private macro update_hash(n)"},
{"lineNum":" 2531","line":"    {% for i in 1..n %}"},
{"lineNum":" 2532","line":"      {% if i != 1 %}"},
{"lineNum":" 2533","line":"        byte = head_pointer.value"},
{"lineNum":" 2534","line":"      {% end %}"},
{"lineNum":" 2535","line":"      hash = hash * PRIME_RK + pointer.value - pow * byte"},
{"lineNum":" 2536","line":"      pointer += 1"},
{"lineNum":" 2537","line":"      head_pointer += 1"},
{"lineNum":" 2538","line":"    {% end %}"},
{"lineNum":" 2539","line":"  end"},
{"lineNum":" 2540","line":""},
{"lineNum":" 2541","line":"  # Returns the index of *search* in the string, or `nil` if the string is not present."},
{"lineNum":" 2542","line":"  # If *offset* is present, it defines the position to start the search."},
{"lineNum":" 2543","line":"  #"},
{"lineNum":" 2544","line":"  # ```"},
{"lineNum":" 2545","line":"  # \"Hello, World\".index(\'o\')    # => 4"},
{"lineNum":" 2546","line":"  # \"Hello, World\".index(\'Z\')    # => nil"},
{"lineNum":" 2547","line":"  # \"Hello, World\".index(\"o\", 5) # => 8"},
{"lineNum":" 2548","line":"  # \"Hello, World\".index(\"H\", 2) # => nil"},
{"lineNum":" 2549","line":"  # \"Hello, World\".index(/[ ]+/) # => 6"},
{"lineNum":" 2550","line":"  # \"Hello, World\".index(/\\d+/)  # => nil"},
{"lineNum":" 2551","line":"  # ```"},
{"lineNum":" 2552","line":"  def index(search : Char, offset = 0)"},
{"lineNum":" 2553","line":"    # If it\'s ASCII we can delegate to slice"},
{"lineNum":" 2554","line":"    if search.ascii? && ascii_only?"},
{"lineNum":" 2555","line":"      return to_slice.index(search.ord.to_u8, offset)"},
{"lineNum":" 2556","line":"    end"},
{"lineNum":" 2557","line":""},
{"lineNum":" 2558","line":"    offset += size if offset < 0"},
{"lineNum":" 2559","line":"    return nil if offset < 0"},
{"lineNum":" 2560","line":""},
{"lineNum":" 2561","line":"    each_char_with_index do |char, i|"},
{"lineNum":" 2562","line":"      if i >= offset && char == search"},
{"lineNum":" 2563","line":"        return i"},
{"lineNum":" 2564","line":"      end"},
{"lineNum":" 2565","line":"    end"},
{"lineNum":" 2566","line":""},
{"lineNum":" 2567","line":"    nil"},
{"lineNum":" 2568","line":"  end"},
{"lineNum":" 2569","line":""},
{"lineNum":" 2570","line":"  # ditto"},
{"lineNum":" 2571","line":"  def index(search : String, offset = 0)"},
{"lineNum":" 2572","line":"    offset += size if offset < 0"},
{"lineNum":" 2573","line":"    return if offset < 0"},
{"lineNum":" 2574","line":""},
{"lineNum":" 2575","line":"    return size < offset ? nil : offset if search.empty?"},
{"lineNum":" 2576","line":""},
{"lineNum":" 2577","line":"    # Rabin-Karp algorithm"},
{"lineNum":" 2578","line":"    # https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm"},
{"lineNum":" 2579","line":""},
{"lineNum":" 2580","line":"    # calculate a rolling hash of search text (needle)"},
{"lineNum":" 2581","line":"    search_hash = 0u32"},
{"lineNum":" 2582","line":"    search.each_byte do |b|"},
{"lineNum":" 2583","line":"      search_hash = search_hash * PRIME_RK + b"},
{"lineNum":" 2584","line":"    end"},
{"lineNum":" 2585","line":"    pow = PRIME_RK ** search.bytesize"},
{"lineNum":" 2586","line":""},
{"lineNum":" 2587","line":"    # Find start index with offset"},
{"lineNum":" 2588","line":"    char_index = 0"},
{"lineNum":" 2589","line":"    pointer = to_unsafe"},
{"lineNum":" 2590","line":"    end_pointer = pointer + bytesize"},
{"lineNum":" 2591","line":"    while char_index < offset && pointer < end_pointer"},
{"lineNum":" 2592","line":"      byte = pointer.value"},
{"lineNum":" 2593","line":"      if byte < 0x80"},
{"lineNum":" 2594","line":"        pointer += 1"},
{"lineNum":" 2595","line":"      elsif byte < 0xe0"},
{"lineNum":" 2596","line":"        pointer += 2"},
{"lineNum":" 2597","line":"      elsif byte < 0xf0"},
{"lineNum":" 2598","line":"        pointer += 3"},
{"lineNum":" 2599","line":"      else"},
{"lineNum":" 2600","line":"        pointer += 4"},
{"lineNum":" 2601","line":"      end"},
{"lineNum":" 2602","line":"      char_index += 1"},
{"lineNum":" 2603","line":"    end"},
{"lineNum":" 2604","line":""},
{"lineNum":" 2605","line":"    head_pointer = pointer"},
{"lineNum":" 2606","line":""},
{"lineNum":" 2607","line":"    # calculate a rolling hash of this text (haystack)"},
{"lineNum":" 2608","line":"    hash = 0u32"},
{"lineNum":" 2609","line":"    hash_end_pointer = pointer + search.bytesize"},
{"lineNum":" 2610","line":"    return if hash_end_pointer > end_pointer"},
{"lineNum":" 2611","line":"    while pointer < hash_end_pointer"},
{"lineNum":" 2612","line":"      hash = hash * PRIME_RK + pointer.value"},
{"lineNum":" 2613","line":"      pointer += 1"},
{"lineNum":" 2614","line":"    end"},
{"lineNum":" 2615","line":""},
{"lineNum":" 2616","line":"    while true"},
{"lineNum":" 2617","line":"      # check hash equality and real string equality"},
{"lineNum":" 2618","line":"      if hash == search_hash && head_pointer.memcmp(search.to_unsafe, search.bytesize) == 0"},
{"lineNum":" 2619","line":"        return char_index"},
{"lineNum":" 2620","line":"      end"},
{"lineNum":" 2621","line":""},
{"lineNum":" 2622","line":"      return if pointer >= end_pointer"},
{"lineNum":" 2623","line":""},
{"lineNum":" 2624","line":"      byte = head_pointer.value"},
{"lineNum":" 2625","line":""},
{"lineNum":" 2626","line":"      # update a rolling hash of this text (heystack)"},
{"lineNum":" 2627","line":"      # thanks @MaxLap for suggesting this loop reduction"},
{"lineNum":" 2628","line":"      if byte < 0x80"},
{"lineNum":" 2629","line":"        update_hash 1"},
{"lineNum":" 2630","line":"      elsif byte < 0xe0"},
{"lineNum":" 2631","line":"        update_hash 2"},
{"lineNum":" 2632","line":"      elsif byte < 0xf0"},
{"lineNum":" 2633","line":"        update_hash 3"},
{"lineNum":" 2634","line":"      else"},
{"lineNum":" 2635","line":"        update_hash 4"},
{"lineNum":" 2636","line":"      end"},
{"lineNum":" 2637","line":"      char_index += 1"},
{"lineNum":" 2638","line":"    end"},
{"lineNum":" 2639","line":"  end"},
{"lineNum":" 2640","line":""},
{"lineNum":" 2641","line":"  # ditto"},
{"lineNum":" 2642","line":"  def index(search : Regex, offset = 0)"},
{"lineNum":" 2643","line":"    offset += size if offset < 0"},
{"lineNum":" 2644","line":"    return nil unless 0 <= offset <= size"},
{"lineNum":" 2645","line":""},
{"lineNum":" 2646","line":"    self.match(search, offset).try &.begin"},
{"lineNum":" 2647","line":"  end"},
{"lineNum":" 2648","line":""},
{"lineNum":" 2649","line":"  # Returns the index of the _last_ appearance of *search* in the string,"},
{"lineNum":" 2650","line":"  # If *offset* is present, it defines the position to _end_ the search"},
{"lineNum":" 2651","line":"  # (characters beyond this point are ignored)."},
{"lineNum":" 2652","line":"  #"},
{"lineNum":" 2653","line":"  # ```"},
{"lineNum":" 2654","line":"  # \"Hello, World\".rindex(\'o\')    # => 8"},
{"lineNum":" 2655","line":"  # \"Hello, World\".rindex(\'Z\')    # => nil"},
{"lineNum":" 2656","line":"  # \"Hello, World\".rindex(\"o\", 5) # => 4"},
{"lineNum":" 2657","line":"  # \"Hello, World\".rindex(\"W\", 2) # => nil"},
{"lineNum":" 2658","line":"  # ```"},
{"lineNum":" 2659","line":"  def rindex(search : Char, offset = size - 1)"},
{"lineNum":" 2660","line":"    # If it\'s ASCII we can delegate to slice"},
{"lineNum":" 2661","line":"    if search.ascii? && ascii_only?"},
{"lineNum":" 2662","line":"      return to_slice.rindex(search.ord.to_u8, offset)"},
{"lineNum":" 2663","line":"    end"},
{"lineNum":" 2664","line":""},
{"lineNum":" 2665","line":"    offset += size if offset < 0"},
{"lineNum":" 2666","line":"    return nil if offset < 0"},
{"lineNum":" 2667","line":""},
{"lineNum":" 2668","line":"    if offset == size - 1"},
{"lineNum":" 2669","line":"      reader = Char::Reader.new(at_end: self)"},
{"lineNum":" 2670","line":"    else"},
{"lineNum":" 2671","line":"      byte_index = char_index_to_byte_index(offset)"},
{"lineNum":" 2672","line":"      raise IndexError.new unless byte_index"},
{"lineNum":" 2673","line":"      reader = Char::Reader.new(self, pos: byte_index)"},
{"lineNum":" 2674","line":"    end"},
{"lineNum":" 2675","line":""},
{"lineNum":" 2676","line":"    while true"},
{"lineNum":" 2677","line":"      if reader.current_char == search"},
{"lineNum":" 2678","line":"        return offset"},
{"lineNum":" 2679","line":"      elsif reader.has_previous?"},
{"lineNum":" 2680","line":"        reader.previous_char"},
{"lineNum":" 2681","line":"        offset -= 1"},
{"lineNum":" 2682","line":"      else"},
{"lineNum":" 2683","line":"        return nil"},
{"lineNum":" 2684","line":"      end"},
{"lineNum":" 2685","line":"    end"},
{"lineNum":" 2686","line":"  end"},
{"lineNum":" 2687","line":""},
{"lineNum":" 2688","line":"  # ditto"},
{"lineNum":" 2689","line":"  def rindex(search : String, offset = size - search.size)"},
{"lineNum":" 2690","line":"    offset += size if offset < 0"},
{"lineNum":" 2691","line":"    return if offset < 0"},
{"lineNum":" 2692","line":""},
{"lineNum":" 2693","line":"    # Rabin-Karp algorithm"},
{"lineNum":" 2694","line":"    # https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm"},
{"lineNum":" 2695","line":""},
{"lineNum":" 2696","line":"    # calculate a rolling hash of search text (needle)"},
{"lineNum":" 2697","line":"    search_hash = 0u32"},
{"lineNum":" 2698","line":"    search.to_slice.reverse_each do |b|"},
{"lineNum":" 2699","line":"      search_hash = search_hash * PRIME_RK + b"},
{"lineNum":" 2700","line":"    end"},
{"lineNum":" 2701","line":"    pow = PRIME_RK ** search.bytesize"},
{"lineNum":" 2702","line":""},
{"lineNum":" 2703","line":"    hash = 0u32"},
{"lineNum":" 2704","line":"    char_index = size"},
{"lineNum":" 2705","line":""},
{"lineNum":" 2706","line":"    begin_pointer = to_unsafe"},
{"lineNum":" 2707","line":"    pointer = begin_pointer + bytesize"},
{"lineNum":" 2708","line":"    tail_pointer = pointer"},
{"lineNum":" 2709","line":"    hash_begin_pointer = pointer - search.bytesize"},
{"lineNum":" 2710","line":""},
{"lineNum":" 2711","line":"    return if hash_begin_pointer < begin_pointer"},
{"lineNum":" 2712","line":""},
{"lineNum":" 2713","line":"    # calculate a rolling hash of this text (haystack)"},
{"lineNum":" 2714","line":"    while hash_begin_pointer < pointer"},
{"lineNum":" 2715","line":"      pointer -= 1"},
{"lineNum":" 2716","line":"      byte = pointer.value"},
{"lineNum":" 2717","line":"      char_index -= 1 if (byte & 0xC0) != 0x80"},
{"lineNum":" 2718","line":""},
{"lineNum":" 2719","line":"      hash = hash * PRIME_RK + byte"},
{"lineNum":" 2720","line":"    end"},
{"lineNum":" 2721","line":""},
{"lineNum":" 2722","line":"    while true"},
{"lineNum":" 2723","line":"      # check hash equality and real string equality"},
{"lineNum":" 2724","line":"      if hash == search_hash && char_index <= offset &&"},
{"lineNum":" 2725","line":"         pointer.memcmp(search.to_unsafe, search.bytesize) == 0"},
{"lineNum":" 2726","line":"        return char_index"},
{"lineNum":" 2727","line":"      end"},
{"lineNum":" 2728","line":""},
{"lineNum":" 2729","line":"      return if begin_pointer == pointer"},
{"lineNum":" 2730","line":""},
{"lineNum":" 2731","line":"      pointer -= 1"},
{"lineNum":" 2732","line":"      tail_pointer -= 1"},
{"lineNum":" 2733","line":"      byte = pointer.value"},
{"lineNum":" 2734","line":"      char_index -= 1 if (byte & 0xC0) != 0x80"},
{"lineNum":" 2735","line":""},
{"lineNum":" 2736","line":"      # update a rolling hash of this text (haystack)"},
{"lineNum":" 2737","line":"      hash = hash * PRIME_RK + byte - pow * tail_pointer.value"},
{"lineNum":" 2738","line":"    end"},
{"lineNum":" 2739","line":"  end"},
{"lineNum":" 2740","line":""},
{"lineNum":" 2741","line":"  # ditto"},
{"lineNum":" 2742","line":"  def rindex(search : Regex, offset = 0)"},
{"lineNum":" 2743","line":"    offset += size if offset < 0"},
{"lineNum":" 2744","line":"    return nil unless 0 <= offset <= size"},
{"lineNum":" 2745","line":""},
{"lineNum":" 2746","line":"    match_result = nil"},
{"lineNum":" 2747","line":"    self[0, self.size - offset].scan(search) do |match_data|"},
{"lineNum":" 2748","line":"      match_result = match_data"},
{"lineNum":" 2749","line":"    end"},
{"lineNum":" 2750","line":""},
{"lineNum":" 2751","line":"    match_result.try &.begin(0)"},
{"lineNum":" 2752","line":"  end"},
{"lineNum":" 2753","line":""},
{"lineNum":" 2754","line":"  # Searches separator or pattern (`Regex`) in the string, and returns"},
{"lineNum":" 2755","line":"  # a `Tuple` with the part before it, the match, and the part after it."},
{"lineNum":" 2756","line":"  # If it is not found, returns str followed by two empty strings."},
{"lineNum":" 2757","line":"  #"},
{"lineNum":" 2758","line":"  # ```"},
{"lineNum":" 2759","line":"  # \"hello\".partition(\"l\") # => {\"he\", \"l\", \"lo\"}"},
{"lineNum":" 2760","line":"  # \"hello\".partition(\"x\") # => {\"hello\", \"\", \"\"}"},
{"lineNum":" 2761","line":"  # ```"},
{"lineNum":" 2762","line":"  def partition(search : (Char | String)) : Tuple(String, String, String)"},
{"lineNum":" 2763","line":"    pre = mid = post = \"\""},
{"lineNum":" 2764","line":"    search_size = search.is_a?(Char) ? 1 : search.size"},
{"lineNum":" 2765","line":"    case pos = self.index(search)"},
{"lineNum":" 2766","line":"    when .nil?"},
{"lineNum":" 2767","line":"      pre = self"},
{"lineNum":" 2768","line":"    when 0"},
{"lineNum":" 2769","line":"      mid = search.to_s"},
{"lineNum":" 2770","line":"      post = self[(pos + search_size)..-1]"},
{"lineNum":" 2771","line":"    else"},
{"lineNum":" 2772","line":"      pre = self[0..(pos - 1)]"},
{"lineNum":" 2773","line":"      mid = search.to_s"},
{"lineNum":" 2774","line":"      post = self[(pos + search_size)..-1]"},
{"lineNum":" 2775","line":"    end"},
{"lineNum":" 2776","line":"    {pre, mid, post}"},
{"lineNum":" 2777","line":"  end"},
{"lineNum":" 2778","line":""},
{"lineNum":" 2779","line":"  # ditto"},
{"lineNum":" 2780","line":"  def partition(search : Regex) : Tuple(String, String, String)"},
{"lineNum":" 2781","line":"    pre = mid = post = \"\""},
{"lineNum":" 2782","line":"    case m = self.match(search)"},
{"lineNum":" 2783","line":"    when .nil?"},
{"lineNum":" 2784","line":"      pre = self"},
{"lineNum":" 2785","line":"    else"},
{"lineNum":" 2786","line":"      pre = m.pre_match"},
{"lineNum":" 2787","line":"      mid = m[0]"},
{"lineNum":" 2788","line":"      post = m.post_match"},
{"lineNum":" 2789","line":"    end"},
{"lineNum":" 2790","line":"    {pre, mid, post}"},
{"lineNum":" 2791","line":"  end"},
{"lineNum":" 2792","line":""},
{"lineNum":" 2793","line":"  # Searches separator or pattern (`Regex`) in the string from the end of the string,"},
{"lineNum":" 2794","line":"  # and returns a `Tuple` with the part before it, the match, and the part after it."},
{"lineNum":" 2795","line":"  # If it is not found, returns two empty strings and str."},
{"lineNum":" 2796","line":"  #"},
{"lineNum":" 2797","line":"  # ```"},
{"lineNum":" 2798","line":"  # \"hello\".rpartition(\"l\")  # => {\"hel\", \"l\", \"o\"}"},
{"lineNum":" 2799","line":"  # \"hello\".rpartition(\"x\")  # => {\"\", \"\", \"hello\"}"},
{"lineNum":" 2800","line":"  # \"hello\".rpartition(/.l/) # => {\"he\", \"ll\", \"o\"}"},
{"lineNum":" 2801","line":"  # ```"},
{"lineNum":" 2802","line":"  def rpartition(search : (Char | String)) : Tuple(String, String, String)"},
{"lineNum":" 2803","line":"    pos = self.rindex(search)"},
{"lineNum":" 2804","line":"    search_size = search.is_a?(Char) ? 1 : search.size"},
{"lineNum":" 2805","line":""},
{"lineNum":" 2806","line":"    pre = mid = post = \"\""},
{"lineNum":" 2807","line":""},
{"lineNum":" 2808","line":"    case pos"},
{"lineNum":" 2809","line":"    when .nil?"},
{"lineNum":" 2810","line":"      post = self"},
{"lineNum":" 2811","line":"    when 0"},
{"lineNum":" 2812","line":"      mid = search.to_s"},
{"lineNum":" 2813","line":"      post = self[(pos + search_size)..-1]"},
{"lineNum":" 2814","line":"    else"},
{"lineNum":" 2815","line":"      pre = self[0..(pos - 1)]"},
{"lineNum":" 2816","line":"      mid = search.to_s"},
{"lineNum":" 2817","line":"      post = self[(pos + search_size)..-1]"},
{"lineNum":" 2818","line":"    end"},
{"lineNum":" 2819","line":"    {pre, mid, post}"},
{"lineNum":" 2820","line":"  end"},
{"lineNum":" 2821","line":""},
{"lineNum":" 2822","line":"  # ditto"},
{"lineNum":" 2823","line":"  def rpartition(search : Regex) : Tuple(String, String, String)"},
{"lineNum":" 2824","line":"    match_result = nil"},
{"lineNum":" 2825","line":"    pos = self.size - 1"},
{"lineNum":" 2826","line":""},
{"lineNum":" 2827","line":"    while pos >= 0"},
{"lineNum":" 2828","line":"      self[pos..-1].scan(search) do |m|"},
{"lineNum":" 2829","line":"        match_result = m"},
{"lineNum":" 2830","line":"      end"},
{"lineNum":" 2831","line":"      break unless match_result.nil?"},
{"lineNum":" 2832","line":"      pos -= 1"},
{"lineNum":" 2833","line":"    end"},
{"lineNum":" 2834","line":""},
{"lineNum":" 2835","line":"    pre = mid = post = \"\""},
{"lineNum":" 2836","line":""},
{"lineNum":" 2837","line":"    case"},
{"lineNum":" 2838","line":"    when match_result.nil?"},
{"lineNum":" 2839","line":"      post = self"},
{"lineNum":" 2840","line":"    when pos == 0"},
{"lineNum":" 2841","line":"      mid = match_result[0]"},
{"lineNum":" 2842","line":"      post = self[match_result[0].size..-1]"},
{"lineNum":" 2843","line":"    else"},
{"lineNum":" 2844","line":"      pre = self[0..pos - 1]"},
{"lineNum":" 2845","line":"      mid = match_result.not_nil![0]"},
{"lineNum":" 2846","line":"      post = self[pos + match_result.not_nil![0].size..-1]"},
{"lineNum":" 2847","line":"    end"},
{"lineNum":" 2848","line":"    {pre, mid, post}"},
{"lineNum":" 2849","line":"  end"},
{"lineNum":" 2850","line":""},
{"lineNum":" 2851","line":"  def byte_index(byte : Int, offset = 0)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 2852","line":"    offset.upto(bytesize - 1) do |i|"},
{"lineNum":" 2853","line":"      if to_unsafe[i] == byte","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 2854","line":"        return i"},
{"lineNum":" 2855","line":"      end"},
{"lineNum":" 2856","line":"    end"},
{"lineNum":" 2857","line":"    nil"},
{"lineNum":" 2858","line":"  end"},
{"lineNum":" 2859","line":""},
{"lineNum":" 2860","line":"  def byte_index(search : String, offset = 0)"},
{"lineNum":" 2861","line":"    offset += bytesize if offset < 0"},
{"lineNum":" 2862","line":"    return if offset < 0"},
{"lineNum":" 2863","line":""},
{"lineNum":" 2864","line":"    return bytesize < offset ? nil : offset if search.empty?"},
{"lineNum":" 2865","line":""},
{"lineNum":" 2866","line":"    # Rabin-Karp algorithm"},
{"lineNum":" 2867","line":"    # https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm"},
{"lineNum":" 2868","line":""},
{"lineNum":" 2869","line":"    # calculate a rolling hash of search text (needle)"},
{"lineNum":" 2870","line":"    search_hash = 0u32"},
{"lineNum":" 2871","line":"    search.each_byte do |b|"},
{"lineNum":" 2872","line":"      search_hash = search_hash * PRIME_RK + b"},
{"lineNum":" 2873","line":"    end"},
{"lineNum":" 2874","line":"    pow = PRIME_RK ** search.bytesize"},
{"lineNum":" 2875","line":""},
{"lineNum":" 2876","line":"    # calculate a rolling hash of this text (haystack)"},
{"lineNum":" 2877","line":"    pointer = head_pointer = to_unsafe + offset"},
{"lineNum":" 2878","line":"    hash_end_pointer = pointer + search.bytesize"},
{"lineNum":" 2879","line":"    end_pointer = to_unsafe + bytesize"},
{"lineNum":" 2880","line":"    hash = 0u32"},
{"lineNum":" 2881","line":"    return if hash_end_pointer > end_pointer"},
{"lineNum":" 2882","line":"    while pointer < hash_end_pointer"},
{"lineNum":" 2883","line":"      hash = hash * PRIME_RK + pointer.value"},
{"lineNum":" 2884","line":"      pointer += 1"},
{"lineNum":" 2885","line":"    end"},
{"lineNum":" 2886","line":""},
{"lineNum":" 2887","line":"    while true"},
{"lineNum":" 2888","line":"      # check hash equality and real string equality"},
{"lineNum":" 2889","line":"      if hash == search_hash && head_pointer.memcmp(search.to_unsafe, search.bytesize) == 0"},
{"lineNum":" 2890","line":"        return offset"},
{"lineNum":" 2891","line":"      end"},
{"lineNum":" 2892","line":""},
{"lineNum":" 2893","line":"      return if pointer >= end_pointer"},
{"lineNum":" 2894","line":""},
{"lineNum":" 2895","line":"      # update a rolling hash of this text (haystack)"},
{"lineNum":" 2896","line":"      hash = hash * PRIME_RK + pointer.value - pow * head_pointer.value"},
{"lineNum":" 2897","line":"      pointer += 1"},
{"lineNum":" 2898","line":"      head_pointer += 1"},
{"lineNum":" 2899","line":"      offset += 1"},
{"lineNum":" 2900","line":"    end"},
{"lineNum":" 2901","line":""},
{"lineNum":" 2902","line":"    nil"},
{"lineNum":" 2903","line":"  end"},
{"lineNum":" 2904","line":""},
{"lineNum":" 2905","line":"  # Returns the byte index of a char index, or `nil` if out of bounds."},
{"lineNum":" 2906","line":"  #"},
{"lineNum":" 2907","line":"  # It is valid to pass `#size` to *index*, and in this case the answer"},
{"lineNum":" 2908","line":"  # will be the bytesize of this string."},
{"lineNum":" 2909","line":"  #"},
{"lineNum":" 2910","line":"  # ```"},
{"lineNum":" 2911","line":"  # \"hello\".char_index_to_byte_index(1) # => 1"},
{"lineNum":" 2912","line":"  # \"hello\".char_index_to_byte_index(5) # => 5"},
{"lineNum":" 2913","line":"  # \"ããã«ã¡ã¯\".char_index_to_byte_index(1) # => 3"},
{"lineNum":" 2914","line":"  # \"ããã«ã¡ã¯\".char_index_to_byte_index(5) # => 15"},
{"lineNum":" 2915","line":"  # ```"},
{"lineNum":" 2916","line":"  def char_index_to_byte_index(index)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2917","line":"    if ascii_only?"},
{"lineNum":" 2918","line":"      return 0 <= index <= bytesize ? index : nil"},
{"lineNum":" 2919","line":"    end"},
{"lineNum":" 2920","line":""},
{"lineNum":" 2921","line":"    size = each_byte_index_and_char_index do |byte_index, char_index|"},
{"lineNum":" 2922","line":"      return byte_index if index == char_index","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2923","line":"    end"},
{"lineNum":" 2924","line":"    return @bytesize if index == size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2925","line":"    nil"},
{"lineNum":" 2926","line":"  end"},
{"lineNum":" 2927","line":""},
{"lineNum":" 2928","line":"  # Returns the char index of a byte index, or `nil` if out of bounds."},
{"lineNum":" 2929","line":"  #"},
{"lineNum":" 2930","line":"  # It is valid to pass `#bytesize` to *index*, and in this case the answer"},
{"lineNum":" 2931","line":"  # will be the size of this string."},
{"lineNum":" 2932","line":"  def byte_index_to_char_index(index)"},
{"lineNum":" 2933","line":"    if ascii_only?"},
{"lineNum":" 2934","line":"      return 0 <= index <= bytesize ? index : nil"},
{"lineNum":" 2935","line":"    end"},
{"lineNum":" 2936","line":""},
{"lineNum":" 2937","line":"    size = each_byte_index_and_char_index do |byte_index, char_index|"},
{"lineNum":" 2938","line":"      return char_index if index == byte_index","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2939","line":"    end"},
{"lineNum":" 2940","line":"    return size if index == @bytesize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2941","line":"    nil"},
{"lineNum":" 2942","line":"  end"},
{"lineNum":" 2943","line":""},
{"lineNum":" 2944","line":"  # Returns `true` if the string contains *search*."},
{"lineNum":" 2945","line":"  #"},
{"lineNum":" 2946","line":"  # ```"},
{"lineNum":" 2947","line":"  # \"Team\".includes?(\'i\')            # => false"},
{"lineNum":" 2948","line":"  # \"Dysfunctional\".includes?(\"fun\") # => true"},
{"lineNum":" 2949","line":"  # ```"},
{"lineNum":" 2950","line":"  def includes?(search : Char | String)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2951","line":"    !!index(search)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2952","line":"  end"},
{"lineNum":" 2953","line":""},
{"lineNum":" 2954","line":"  # Makes an array by splitting the string on any amount of ASCII whitespace"},
{"lineNum":" 2955","line":"  # characters (and removing that whitespace)."},
{"lineNum":" 2956","line":"  #"},
{"lineNum":" 2957","line":"  # If *limit* is present, up to *limit* new strings will be created, with the"},
{"lineNum":" 2958","line":"  # entire remainder added to the last string."},
{"lineNum":" 2959","line":"  #"},
{"lineNum":" 2960","line":"  # ```"},
{"lineNum":" 2961","line":"  # old_pond = \""},
{"lineNum":" 2962","line":"  #   Old pond"},
{"lineNum":" 2963","line":"  #   a frog leaps in"},
{"lineNum":" 2964","line":"  #   water\'s sound"},
{"lineNum":" 2965","line":"  # \""},
{"lineNum":" 2966","line":"  # old_pond.split    # => [\"Old\", \"pond\", \"a\", \"frog\", \"leaps\", \"in\", \"water\'s\", \"sound\"]"},
{"lineNum":" 2967","line":"  # old_pond.split(3) # => [\"Old\", \"pond\", \"a frog leaps in\\n  water\'s sound\\n\"]"},
{"lineNum":" 2968","line":"  # ```"},
{"lineNum":" 2969","line":"  def split(limit : Int32? = nil)"},
{"lineNum":" 2970","line":"    ary = Array(String).new"},
{"lineNum":" 2971","line":"    split(limit) do |string|"},
{"lineNum":" 2972","line":"      ary << string"},
{"lineNum":" 2973","line":"    end"},
{"lineNum":" 2974","line":"    ary"},
{"lineNum":" 2975","line":"  end"},
{"lineNum":" 2976","line":""},
{"lineNum":" 2977","line":"  # Splits the string after any amount of ASCII whitespace characters and yields"},
{"lineNum":" 2978","line":"  # each non-whitespace part to a block."},
{"lineNum":" 2979","line":"  #"},
{"lineNum":" 2980","line":"  # If *limit* is present, up to *limit* new strings will be created, with the"},
{"lineNum":" 2981","line":"  # entire remainder added to the last string."},
{"lineNum":" 2982","line":"  #"},
{"lineNum":" 2983","line":"  # ```"},
{"lineNum":" 2984","line":"  # ary = [] of String"},
{"lineNum":" 2985","line":"  # old_pond = \""},
{"lineNum":" 2986","line":"  #   Old pond"},
{"lineNum":" 2987","line":"  #   a frog leaps in"},
{"lineNum":" 2988","line":"  #   water\'s sound"},
{"lineNum":" 2989","line":"  # \""},
{"lineNum":" 2990","line":"  #"},
{"lineNum":" 2991","line":"  # old_pond.split { |s| ary << s }"},
{"lineNum":" 2992","line":"  # ary # => [\"Old\", \"pond\", \"a\", \"frog\", \"leaps\", \"in\", \"water\'s\", \"sound\"]"},
{"lineNum":" 2993","line":"  # ary.clear"},
{"lineNum":" 2994","line":"  #"},
{"lineNum":" 2995","line":"  # old_pond.split(3) { |s| ary << s }"},
{"lineNum":" 2996","line":"  # ary # => [\"Old\", \"pond\", \"a frog leaps in\\n  water\'s sound\\n\"]"},
{"lineNum":" 2997","line":"  # ```"},
{"lineNum":" 2998","line":"  def split(limit : Int32? = nil, &block : String -> _)"},
{"lineNum":" 2999","line":"    if limit && limit <= 1"},
{"lineNum":" 3000","line":"      yield self"},
{"lineNum":" 3001","line":"      return"},
{"lineNum":" 3002","line":"    end"},
{"lineNum":" 3003","line":""},
{"lineNum":" 3004","line":"    yielded = 0"},
{"lineNum":" 3005","line":"    single_byte_optimizable = ascii_only?"},
{"lineNum":" 3006","line":"    index = 0"},
{"lineNum":" 3007","line":"    i = 0"},
{"lineNum":" 3008","line":"    looking_for_space = false"},
{"lineNum":" 3009","line":"    limit_reached = false"},
{"lineNum":" 3010","line":"    while i < bytesize"},
{"lineNum":" 3011","line":"      if looking_for_space"},
{"lineNum":" 3012","line":"        while i < bytesize"},
{"lineNum":" 3013","line":"          c = to_unsafe[i]"},
{"lineNum":" 3014","line":"          i += 1"},
{"lineNum":" 3015","line":"          if c.unsafe_chr.ascii_whitespace?"},
{"lineNum":" 3016","line":"            piece_bytesize = i - 1 - index"},
{"lineNum":" 3017","line":"            piece_size = single_byte_optimizable ? piece_bytesize : 0"},
{"lineNum":" 3018","line":"            yield String.new(to_unsafe + index, piece_bytesize, piece_size)"},
{"lineNum":" 3019","line":"            yielded += 1"},
{"lineNum":" 3020","line":"            looking_for_space = false"},
{"lineNum":" 3021","line":""},
{"lineNum":" 3022","line":"            if limit && yielded + 1 == limit"},
{"lineNum":" 3023","line":"              limit_reached = true"},
{"lineNum":" 3024","line":"            end"},
{"lineNum":" 3025","line":""},
{"lineNum":" 3026","line":"            break"},
{"lineNum":" 3027","line":"          end"},
{"lineNum":" 3028","line":"        end"},
{"lineNum":" 3029","line":"      else"},
{"lineNum":" 3030","line":"        while i < bytesize"},
{"lineNum":" 3031","line":"          c = to_unsafe[i]"},
{"lineNum":" 3032","line":"          i += 1"},
{"lineNum":" 3033","line":"          unless c.unsafe_chr.ascii_whitespace?"},
{"lineNum":" 3034","line":"            index = i - 1"},
{"lineNum":" 3035","line":"            looking_for_space = true"},
{"lineNum":" 3036","line":"            break"},
{"lineNum":" 3037","line":"          end"},
{"lineNum":" 3038","line":"        end"},
{"lineNum":" 3039","line":""},
{"lineNum":" 3040","line":"        break if limit_reached"},
{"lineNum":" 3041","line":"      end"},
{"lineNum":" 3042","line":"    end"},
{"lineNum":" 3043","line":"    if looking_for_space"},
{"lineNum":" 3044","line":"      piece_bytesize = bytesize - index"},
{"lineNum":" 3045","line":"      piece_size = single_byte_optimizable ? piece_bytesize : 0"},
{"lineNum":" 3046","line":"      yield String.new(to_unsafe + index, piece_bytesize, piece_size)"},
{"lineNum":" 3047","line":"    end"},
{"lineNum":" 3048","line":"  end"},
{"lineNum":" 3049","line":""},
{"lineNum":" 3050","line":"  # Makes an `Array` by splitting the string on the given character *separator*"},
{"lineNum":" 3051","line":"  # (and removing that character)."},
{"lineNum":" 3052","line":"  #"},
{"lineNum":" 3053","line":"  # If *limit* is present, up to *limit* new strings will be created,"},
{"lineNum":" 3054","line":"  # with the entire remainder added to the last string."},
{"lineNum":" 3055","line":"  #"},
{"lineNum":" 3056","line":"  # If *remove_empty* is `true`, any empty strings are removed from the result."},
{"lineNum":" 3057","line":"  #"},
{"lineNum":" 3058","line":"  # ```"},
{"lineNum":" 3059","line":"  # \"foo,,bar,baz\".split(\',\')                     # => [\"foo\", \"\", \"bar\", \"baz\"]"},
{"lineNum":" 3060","line":"  # \"foo,,bar,baz\".split(\',\', remove_empty: true) # => [\"foo\", \"bar\", \"baz\"]"},
{"lineNum":" 3061","line":"  # \"foo,bar,baz\".split(\',\', 2)                   # => [\"foo\", \"bar,baz\"]"},
{"lineNum":" 3062","line":"  # ```"},
{"lineNum":" 3063","line":"  def split(separator : Char, limit = nil, *, remove_empty = false)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3064","line":"    ary = Array(String).new"},
{"lineNum":" 3065","line":"    split(separator, limit, remove_empty: remove_empty) do |string|"},
{"lineNum":" 3066","line":"      ary << string","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 3067","line":"    end"},
{"lineNum":" 3068","line":"    ary"},
{"lineNum":" 3069","line":"  end"},
{"lineNum":" 3070","line":""},
{"lineNum":" 3071","line":"  # Splits the string after each character *separator* and yields each part to a block."},
{"lineNum":" 3072","line":"  #"},
{"lineNum":" 3073","line":"  # If *limit* is present, up to *limit* new strings will be created,"},
{"lineNum":" 3074","line":"  # with the entire remainder added to the last string."},
{"lineNum":" 3075","line":"  #"},
{"lineNum":" 3076","line":"  # If *remove_empty* is `true`, any empty strings are not yielded."},
{"lineNum":" 3077","line":"  #"},
{"lineNum":" 3078","line":"  # ```"},
{"lineNum":" 3079","line":"  # ary = [] of String"},
{"lineNum":" 3080","line":"  #"},
{"lineNum":" 3081","line":"  # \"foo,,bar,baz\".split(\',\') { |string| ary << string }"},
{"lineNum":" 3082","line":"  # ary # => [\"foo\", \"\", \"bar\", \"baz\"]"},
{"lineNum":" 3083","line":"  # ary.clear"},
{"lineNum":" 3084","line":"  #"},
{"lineNum":" 3085","line":"  # \"foo,,bar,baz\".split(\',\', remove_empty: true) { |string| ary << string }"},
{"lineNum":" 3086","line":"  # ary # => [\"foo\", \"bar\", \"baz\"]"},
{"lineNum":" 3087","line":"  # ary.clear"},
{"lineNum":" 3088","line":"  #"},
{"lineNum":" 3089","line":"  # \"foo,bar,baz\".split(\',\', 2) { |string| ary << string }"},
{"lineNum":" 3090","line":"  # ary # => [\"foo\", \"bar,baz\"]"},
{"lineNum":" 3091","line":"  # ```"},
{"lineNum":" 3092","line":"  def split(separator : Char, limit = nil, *, remove_empty = false, &block : String -> _)"},
{"lineNum":" 3093","line":"    if empty?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3094","line":"      yield \"\" unless remove_empty"},
{"lineNum":" 3095","line":"      return"},
{"lineNum":" 3096","line":"    end"},
{"lineNum":" 3097","line":""},
{"lineNum":" 3098","line":"    if limit && limit <= 1"},
{"lineNum":" 3099","line":"      yield self"},
{"lineNum":" 3100","line":"      return"},
{"lineNum":" 3101","line":"    end"},
{"lineNum":" 3102","line":""},
{"lineNum":" 3103","line":"    yielded = 0"},
{"lineNum":" 3104","line":"    byte_offset = 0"},
{"lineNum":" 3105","line":""},
{"lineNum":" 3106","line":"    reader = Char::Reader.new(self)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 3107","line":"    reader.each do |char|"},
{"lineNum":" 3108","line":"      if char == separator","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3109","line":"        piece_bytesize = reader.pos - byte_offset"},
{"lineNum":" 3110","line":"        yield String.new(to_unsafe + byte_offset, piece_bytesize) unless remove_empty && piece_bytesize == 0"},
{"lineNum":" 3111","line":"        yielded += 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3112","line":"        byte_offset = reader.pos + reader.current_char_width","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3113","line":"        break if limit && yielded + 1 == limit"},
{"lineNum":" 3114","line":"      end"},
{"lineNum":" 3115","line":"    end"},
{"lineNum":" 3116","line":""},
{"lineNum":" 3117","line":"    piece_bytesize = bytesize - byte_offset"},
{"lineNum":" 3118","line":"    return if remove_empty && piece_bytesize == 0"},
{"lineNum":" 3119","line":"    yield String.new(to_unsafe + byte_offset, piece_bytesize)"},
{"lineNum":" 3120","line":"  end"},
{"lineNum":" 3121","line":""},
{"lineNum":" 3122","line":"  # Makes an `Array` by splitting the string on *separator* (and removing instances of *separator*)."},
{"lineNum":" 3123","line":"  #"},
{"lineNum":" 3124","line":"  # If *limit* is present, the array will be limited to *limit* items and"},
{"lineNum":" 3125","line":"  # the final item will contain the remainder of the string."},
{"lineNum":" 3126","line":"  #"},
{"lineNum":" 3127","line":"  # If *separator* is an empty string (`\"\"`), the string will be separated into one-character strings."},
{"lineNum":" 3128","line":"  #"},
{"lineNum":" 3129","line":"  # If *remove_empty* is `true`, any empty strings are removed from the result."},
{"lineNum":" 3130","line":"  #"},
{"lineNum":" 3131","line":"  # ```"},
{"lineNum":" 3132","line":"  # long_river_name = \"Mississippi\""},
{"lineNum":" 3133","line":"  # long_river_name.split(\"ss\")                    # => [\"Mi\", \"i\", \"ippi\"]"},
{"lineNum":" 3134","line":"  # long_river_name.split(\"i\")                     # => [\"M\", \"ss\", \"ss\", \"pp\", \"\"]"},
{"lineNum":" 3135","line":"  # long_river_name.split(\"i\", remove_empty: true) # => [\"M\", \"ss\", \"ss\", \"pp\"]"},
{"lineNum":" 3136","line":"  # long_river_name.split(\"\")                      # => [\"M\", \"i\", \"s\", \"s\", \"i\", \"s\", \"s\", \"i\", \"p\", \"p\", \"i\"]"},
{"lineNum":" 3137","line":"  # ```"},
{"lineNum":" 3138","line":"  def split(separator : String, limit = nil, *, remove_empty = false)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3139","line":"    ary = Array(String).new"},
{"lineNum":" 3140","line":"    split(separator, limit, remove_empty: remove_empty) do |string|"},
{"lineNum":" 3141","line":"      ary << string","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 3142","line":"    end"},
{"lineNum":" 3143","line":"    ary"},
{"lineNum":" 3144","line":"  end"},
{"lineNum":" 3145","line":""},
{"lineNum":" 3146","line":"  # Splits the string after each string *separator* and yields each part to a block."},
{"lineNum":" 3147","line":"  #"},
{"lineNum":" 3148","line":"  # If *limit* is present, the array will be limited to *limit* items and"},
{"lineNum":" 3149","line":"  # the final item will contain the remainder of the string."},
{"lineNum":" 3150","line":"  #"},
{"lineNum":" 3151","line":"  # If *separator* is an empty string (`\"\"`), the string will be separated into one-character strings."},
{"lineNum":" 3152","line":"  #"},
{"lineNum":" 3153","line":"  # If *remove_empty* is `true`, any empty strings are removed from the result."},
{"lineNum":" 3154","line":"  #"},
{"lineNum":" 3155","line":"  # ```"},
{"lineNum":" 3156","line":"  # ary = [] of String"},
{"lineNum":" 3157","line":"  # long_river_name = \"Mississippi\""},
{"lineNum":" 3158","line":"  #"},
{"lineNum":" 3159","line":"  # long_river_name.split(\"ss\") { |s| ary << s }"},
{"lineNum":" 3160","line":"  # ary # => [\"Mi\", \"i\", \"ippi\"]"},
{"lineNum":" 3161","line":"  # ary.clear"},
{"lineNum":" 3162","line":"  #"},
{"lineNum":" 3163","line":"  # long_river_name.split(\"i\") { |s| ary << s }"},
{"lineNum":" 3164","line":"  # ary # => [\"M\", \"ss\", \"ss\", \"pp\", \"\"]"},
{"lineNum":" 3165","line":"  # ary.clear"},
{"lineNum":" 3166","line":"  #"},
{"lineNum":" 3167","line":"  # long_river_name.split(\"i\", remove_empty: true) { |s| ary << s }"},
{"lineNum":" 3168","line":"  # ary # => [\"M\", \"ss\", \"ss\", \"pp\"]"},
{"lineNum":" 3169","line":"  # ary.clear"},
{"lineNum":" 3170","line":"  #"},
{"lineNum":" 3171","line":"  # long_river_name.split(\"\") { |s| ary << s }"},
{"lineNum":" 3172","line":"  # ary # => [\"M\", \"i\", \"s\", \"s\", \"i\", \"s\", \"s\", \"i\", \"p\", \"p\", \"i\"]"},
{"lineNum":" 3173","line":"  # ```"},
{"lineNum":" 3174","line":"  def split(separator : String, limit = nil, *, remove_empty = false, &block : String -> _)"},
{"lineNum":" 3175","line":"    if empty?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3176","line":"      yield \"\" unless remove_empty"},
{"lineNum":" 3177","line":"      return"},
{"lineNum":" 3178","line":"    end"},
{"lineNum":" 3179","line":""},
{"lineNum":" 3180","line":"    if limit && limit <= 1"},
{"lineNum":" 3181","line":"      yield self"},
{"lineNum":" 3182","line":"      return"},
{"lineNum":" 3183","line":"    end"},
{"lineNum":" 3184","line":""},
{"lineNum":" 3185","line":"    if separator.empty?"},
{"lineNum":" 3186","line":"      split_by_empty_separator(limit) do |string|"},
{"lineNum":" 3187","line":"        yield string"},
{"lineNum":" 3188","line":"      end"},
{"lineNum":" 3189","line":"      return"},
{"lineNum":" 3190","line":"    end"},
{"lineNum":" 3191","line":""},
{"lineNum":" 3192","line":"    yielded = 0"},
{"lineNum":" 3193","line":"    byte_offset = 0"},
{"lineNum":" 3194","line":"    separator_bytesize = separator.bytesize"},
{"lineNum":" 3195","line":""},
{"lineNum":" 3196","line":"    single_byte_optimizable = ascii_only?"},
{"lineNum":" 3197","line":""},
{"lineNum":" 3198","line":"    i = 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3199","line":"    stop = bytesize - separator.bytesize + 1"},
{"lineNum":" 3200","line":"    while i < stop","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 3201","line":"      if (to_unsafe + i).memcmp(separator.to_unsafe, separator_bytesize) == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3202","line":"        piece_bytesize = i - byte_offset"},
{"lineNum":" 3203","line":"        piece_size = single_byte_optimizable ? piece_bytesize : 0"},
{"lineNum":" 3204","line":"        unless remove_empty && piece_bytesize == 0"},
{"lineNum":" 3205","line":"          yield String.new(to_unsafe + byte_offset, piece_bytesize, piece_size)"},
{"lineNum":" 3206","line":"        end"},
{"lineNum":" 3207","line":"        yielded += 1","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 3208","line":"        byte_offset = i + separator_bytesize","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3209","line":"        i += separator_bytesize - 1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3210","line":"        break if limit && yielded + 1 == limit"},
{"lineNum":" 3211","line":"      end"},
{"lineNum":" 3212","line":"      i += 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3213","line":"    end"},
{"lineNum":" 3214","line":""},
{"lineNum":" 3215","line":"    piece_bytesize = bytesize - byte_offset"},
{"lineNum":" 3216","line":"    return if remove_empty && piece_bytesize == 0"},
{"lineNum":" 3217","line":"    piece_size = single_byte_optimizable ? piece_bytesize : 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3218","line":"    yield String.new(to_unsafe + byte_offset, piece_bytesize, piece_size)"},
{"lineNum":" 3219","line":"  end"},
{"lineNum":" 3220","line":""},
{"lineNum":" 3221","line":"  # Splits the string after each regex *separator* and yields each part to a block."},
{"lineNum":" 3222","line":"  #"},
{"lineNum":" 3223","line":"  # If *limit* is present, the array will be limited to *limit* items and"},
{"lineNum":" 3224","line":"  # the final item will contain the remainder of the string."},
{"lineNum":" 3225","line":"  #"},
{"lineNum":" 3226","line":"  # If *separator* is an empty regex (`//`), the string will be separated into one-character strings."},
{"lineNum":" 3227","line":"  #"},
{"lineNum":" 3228","line":"  # If *remove_empty* is `true`, any empty strings are removed from the result."},
{"lineNum":" 3229","line":"  #"},
{"lineNum":" 3230","line":"  # ```"},
{"lineNum":" 3231","line":"  # ary = [] of String"},
{"lineNum":" 3232","line":"  # long_river_name = \"Mississippi\""},
{"lineNum":" 3233","line":"  #"},
{"lineNum":" 3234","line":"  # long_river_name.split(/s+/) { |s| ary << s }"},
{"lineNum":" 3235","line":"  # ary # => [\"Mi\", \"i\", \"ippi\"]"},
{"lineNum":" 3236","line":"  # ary.clear"},
{"lineNum":" 3237","line":"  #"},
{"lineNum":" 3238","line":"  # long_river_name.split(//) { |s| ary << s }"},
{"lineNum":" 3239","line":"  # ary # => [\"M\", \"i\", \"s\", \"s\", \"i\", \"s\", \"s\", \"i\", \"p\", \"p\", \"i\"]"},
{"lineNum":" 3240","line":"  # ```"},
{"lineNum":" 3241","line":"  def split(separator : Regex, limit = nil, *, remove_empty = false)"},
{"lineNum":" 3242","line":"    ary = Array(String).new"},
{"lineNum":" 3243","line":"    split(separator, limit, remove_empty: remove_empty) do |string|"},
{"lineNum":" 3244","line":"      ary << string"},
{"lineNum":" 3245","line":"    end"},
{"lineNum":" 3246","line":"    ary"},
{"lineNum":" 3247","line":"  end"},
{"lineNum":" 3248","line":""},
{"lineNum":" 3249","line":"  # Makes an `Array` by splitting the string on *separator* (and removing instances of *separator*)."},
{"lineNum":" 3250","line":"  #"},
{"lineNum":" 3251","line":"  # If *limit* is present, the array will be limited to *limit* items and"},
{"lineNum":" 3252","line":"  # the final item will contain the remainder of the string."},
{"lineNum":" 3253","line":"  #"},
{"lineNum":" 3254","line":"  # If *separator* is an empty regex (`//`), the string will be separated into one-character strings."},
{"lineNum":" 3255","line":"  #"},
{"lineNum":" 3256","line":"  # If *remove_empty* is `true`, any empty strings are removed from the result."},
{"lineNum":" 3257","line":"  #"},
{"lineNum":" 3258","line":"  # ```"},
{"lineNum":" 3259","line":"  # long_river_name = \"Mississippi\""},
{"lineNum":" 3260","line":"  # long_river_name.split(/s+/) # => [\"Mi\", \"i\", \"ippi\"]"},
{"lineNum":" 3261","line":"  # long_river_name.split(//)   # => [\"M\", \"i\", \"s\", \"s\", \"i\", \"s\", \"s\", \"i\", \"p\", \"p\", \"i\"]"},
{"lineNum":" 3262","line":"  # ```"},
{"lineNum":" 3263","line":"  def split(separator : Regex, limit = nil, *, remove_empty = false, &block : String -> _)"},
{"lineNum":" 3264","line":"    if empty?"},
{"lineNum":" 3265","line":"      yield \"\" unless remove_empty"},
{"lineNum":" 3266","line":"      return"},
{"lineNum":" 3267","line":"    end"},
{"lineNum":" 3268","line":""},
{"lineNum":" 3269","line":"    if limit && limit <= 1"},
{"lineNum":" 3270","line":"      yield self"},
{"lineNum":" 3271","line":"      return"},
{"lineNum":" 3272","line":"    end"},
{"lineNum":" 3273","line":""},
{"lineNum":" 3274","line":"    if separator.source.empty?"},
{"lineNum":" 3275","line":"      split_by_empty_separator(limit) do |string|"},
{"lineNum":" 3276","line":"        yield string"},
{"lineNum":" 3277","line":"      end"},
{"lineNum":" 3278","line":"      return"},
{"lineNum":" 3279","line":"    end"},
{"lineNum":" 3280","line":""},
{"lineNum":" 3281","line":"    count = 0"},
{"lineNum":" 3282","line":"    match_offset = slice_offset = 0"},
{"lineNum":" 3283","line":""},
{"lineNum":" 3284","line":"    while match = separator.match_at_byte_index(self, match_offset)"},
{"lineNum":" 3285","line":"      index = match.byte_begin(0)"},
{"lineNum":" 3286","line":"      match_bytesize = match[0].bytesize"},
{"lineNum":" 3287","line":"      next_offset = index + match_bytesize"},
{"lineNum":" 3288","line":""},
{"lineNum":" 3289","line":"      if next_offset == slice_offset"},
{"lineNum":" 3290","line":"        match_offset = next_offset + char_bytesize_at(next_offset)"},
{"lineNum":" 3291","line":"      else"},
{"lineNum":" 3292","line":"        slice_size = index - slice_offset"},
{"lineNum":" 3293","line":""},
{"lineNum":" 3294","line":"        yield byte_slice(slice_offset, slice_size) unless remove_empty && slice_size == 0"},
{"lineNum":" 3295","line":"        count += 1"},
{"lineNum":" 3296","line":""},
{"lineNum":" 3297","line":"        1.upto(match.size) do |i|"},
{"lineNum":" 3298","line":"          if group = match[i]?"},
{"lineNum":" 3299","line":"            yield group"},
{"lineNum":" 3300","line":"          end"},
{"lineNum":" 3301","line":"        end"},
{"lineNum":" 3302","line":""},
{"lineNum":" 3303","line":"        slice_offset = match_offset = next_offset"},
{"lineNum":" 3304","line":"      end"},
{"lineNum":" 3305","line":""},
{"lineNum":" 3306","line":"      break if limit && count + 1 == limit"},
{"lineNum":" 3307","line":"      break if match_offset >= bytesize"},
{"lineNum":" 3308","line":"    end"},
{"lineNum":" 3309","line":""},
{"lineNum":" 3310","line":"    yield byte_slice(slice_offset) unless remove_empty && slice_offset == bytesize"},
{"lineNum":" 3311","line":"  end"},
{"lineNum":" 3312","line":""},
{"lineNum":" 3313","line":"  private def split_by_empty_separator(limit, &block : String -> _)"},
{"lineNum":" 3314","line":"    yielded = 0"},
{"lineNum":" 3315","line":""},
{"lineNum":" 3316","line":"    each_char do |c|"},
{"lineNum":" 3317","line":"      yield c.to_s","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3318","line":"      yielded += 1"},
{"lineNum":" 3319","line":"      break if limit && yielded + 1 == limit"},
{"lineNum":" 3320","line":"    end"},
{"lineNum":" 3321","line":""},
{"lineNum":" 3322","line":"    if limit && yielded != size"},
{"lineNum":" 3323","line":"      yield self[yielded..-1]"},
{"lineNum":" 3324","line":"      yielded += 1"},
{"lineNum":" 3325","line":"    end"},
{"lineNum":" 3326","line":"  end"},
{"lineNum":" 3327","line":""},
{"lineNum":" 3328","line":"  def lines(chomp = true)"},
{"lineNum":" 3329","line":"    lines = [] of String"},
{"lineNum":" 3330","line":"    each_line(chomp: chomp) do |line|"},
{"lineNum":" 3331","line":"      lines << line"},
{"lineNum":" 3332","line":"    end"},
{"lineNum":" 3333","line":"    lines"},
{"lineNum":" 3334","line":"  end"},
{"lineNum":" 3335","line":""},
{"lineNum":" 3336","line":"  # Splits the string after each newline and yields each line to a block."},
{"lineNum":" 3337","line":"  #"},
{"lineNum":" 3338","line":"  # ```"},
{"lineNum":" 3339","line":"  # haiku = \"the first cold shower"},
{"lineNum":" 3340","line":"  # even the monkey seems to want"},
{"lineNum":" 3341","line":"  # a little coat of straw\""},
{"lineNum":" 3342","line":"  # haiku.each_line do |stanza|"},
{"lineNum":" 3343","line":"  #   puts stanza.upcase"},
{"lineNum":" 3344","line":"  # end"},
{"lineNum":" 3345","line":"  # # => THE FIRST COLD SHOWER"},
{"lineNum":" 3346","line":"  # # => EVEN THE MONKEY SEEMS TO WANT"},
{"lineNum":" 3347","line":"  # # => A LITTLE COAT OF STRAW"},
{"lineNum":" 3348","line":"  # ```"},
{"lineNum":" 3349","line":"  def each_line(chomp = true) : Nil"},
{"lineNum":" 3350","line":"    return if empty?"},
{"lineNum":" 3351","line":""},
{"lineNum":" 3352","line":"    offset = 0"},
{"lineNum":" 3353","line":""},
{"lineNum":" 3354","line":"    while byte_index = byte_index(\'\\n\'.ord.to_u8, offset)"},
{"lineNum":" 3355","line":"      count = byte_index - offset + 1"},
{"lineNum":" 3356","line":"      if chomp"},
{"lineNum":" 3357","line":"        count -= 1"},
{"lineNum":" 3358","line":"        if offset + count > 0 && to_unsafe[offset + count - 1] === \'\\r\'"},
{"lineNum":" 3359","line":"          count -= 1"},
{"lineNum":" 3360","line":"        end"},
{"lineNum":" 3361","line":"      end"},
{"lineNum":" 3362","line":""},
{"lineNum":" 3363","line":"      yield unsafe_byte_slice_string(offset, count)"},
{"lineNum":" 3364","line":"      offset = byte_index + 1"},
{"lineNum":" 3365","line":"    end"},
{"lineNum":" 3366","line":""},
{"lineNum":" 3367","line":"    unless offset == bytesize"},
{"lineNum":" 3368","line":"      yield unsafe_byte_slice_string(offset)"},
{"lineNum":" 3369","line":"    end"},
{"lineNum":" 3370","line":"  end"},
{"lineNum":" 3371","line":""},
{"lineNum":" 3372","line":"  # Returns an `Iterator` which yields each line of this string (see `String#each_line`)."},
{"lineNum":" 3373","line":"  def each_line(chomp = true)"},
{"lineNum":" 3374","line":"    LineIterator.new(self, chomp)"},
{"lineNum":" 3375","line":"  end"},
{"lineNum":" 3376","line":""},
{"lineNum":" 3377","line":"  # Converts camelcase boundaries to underscores."},
{"lineNum":" 3378","line":"  #"},
{"lineNum":" 3379","line":"  # ```"},
{"lineNum":" 3380","line":"  # \"DoesWhatItSaysOnTheTin\".underscore # => \"does_what_it_says_on_the_tin\""},
{"lineNum":" 3381","line":"  # \"PartyInTheUSA\".underscore          # => \"party_in_the_usa\""},
{"lineNum":" 3382","line":"  # \"HTTP_CLIENT\".underscore            # => \"http_client\""},
{"lineNum":" 3383","line":"  # \"3.14IsPi\".underscore               # => \"3.14_is_pi\""},
{"lineNum":" 3384","line":"  # ```"},
{"lineNum":" 3385","line":"  def underscore"},
{"lineNum":" 3386","line":"    first = true"},
{"lineNum":" 3387","line":"    last_is_downcase = false"},
{"lineNum":" 3388","line":"    last_is_upcase = false"},
{"lineNum":" 3389","line":"    last_is_digit = false"},
{"lineNum":" 3390","line":"    mem = nil","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3391","line":""},
{"lineNum":" 3392","line":"    String.build(bytesize + 10) do |str|"},
{"lineNum":" 3393","line":"      each_char do |char|"},
{"lineNum":" 3394","line":"        digit = \'0\' <= char <= \'9\'"},
{"lineNum":" 3395","line":"        downcase = \'a\' <= char <= \'z\' || digit"},
{"lineNum":" 3396","line":"        upcase = \'A\' <= char <= \'Z\'"},
{"lineNum":" 3397","line":""},
{"lineNum":" 3398","line":"        if first","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3399","line":"          str << char.downcase","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3400","line":"        elsif last_is_downcase && upcase","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3401","line":"          if mem","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3402","line":"            # This is the case of A1Bcd, we need to put \'mem\' (not to need to convert as downcase"},
{"lineNum":" 3403","line":"            #                       ^"},
{"lineNum":" 3404","line":"            # because \'mem\' is digit surely) before putting this char as downcase."},
{"lineNum":" 3405","line":"            str << mem"},
{"lineNum":" 3406","line":"            mem = nil"},
{"lineNum":" 3407","line":"          end"},
{"lineNum":" 3408","line":"          # This is the case of AbcDe, we need to put an underscore before the \'D\'"},
{"lineNum":" 3409","line":"          #                        ^"},
{"lineNum":" 3410","line":"          str << \'_\'"},
{"lineNum":" 3411","line":"          str << char.downcase","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3412","line":"        elsif (last_is_upcase || last_is_digit) && (upcase || digit)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3413","line":"          # This is the case of 1) A1Bcd, 2) A1BCd or 3) A1B_cd:if the next char is upcase (case 1) we need"},
{"lineNum":" 3414","line":"          #                          ^         ^           ^"},
{"lineNum":" 3415","line":"          # 1) we need to append this char as downcase"},
{"lineNum":" 3416","line":"          # 2) we need to append an underscore and then the char as downcase, so we save this char"},
{"lineNum":" 3417","line":"          #    in \'mem\' and decide later"},
{"lineNum":" 3418","line":"          # 3) we need to append this char as downcase and then a single underscore"},
{"lineNum":" 3419","line":"          if mem"},
{"lineNum":" 3420","line":"            # case 2"},
{"lineNum":" 3421","line":"            str << mem.downcase","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3422","line":"          end"},
{"lineNum":" 3423","line":"          mem = char","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3424","line":"        else"},
{"lineNum":" 3425","line":"          if mem"},
{"lineNum":" 3426","line":"            if char == \'_\'","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3427","line":"              # case 3"},
{"lineNum":" 3428","line":"            elsif last_is_upcase && downcase","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3429","line":"              # case 1"},
{"lineNum":" 3430","line":"              str << \'_\'"},
{"lineNum":" 3431","line":"            end"},
{"lineNum":" 3432","line":"            str << mem.downcase","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3433","line":"            mem = nil","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3434","line":"          end"},
{"lineNum":" 3435","line":""},
{"lineNum":" 3436","line":"          str << char.downcase","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3437","line":"        end"},
{"lineNum":" 3438","line":""},
{"lineNum":" 3439","line":"        last_is_downcase = downcase"},
{"lineNum":" 3440","line":"        last_is_upcase = upcase"},
{"lineNum":" 3441","line":"        last_is_digit = digit"},
{"lineNum":" 3442","line":"        first = false"},
{"lineNum":" 3443","line":"      end"},
{"lineNum":" 3444","line":""},
{"lineNum":" 3445","line":"      str << mem.downcase if mem","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3446","line":"    end"},
{"lineNum":" 3447","line":"  end"},
{"lineNum":" 3448","line":""},
{"lineNum":" 3449","line":"  # Converts underscores to camelcase boundaries."},
{"lineNum":" 3450","line":"  #"},
{"lineNum":" 3451","line":"  # ```"},
{"lineNum":" 3452","line":"  # \"eiffel_tower\".camelcase # => \"EiffelTower\""},
{"lineNum":" 3453","line":"  # ```"},
{"lineNum":" 3454","line":"  def camelcase"},
{"lineNum":" 3455","line":"    return self if empty?"},
{"lineNum":" 3456","line":""},
{"lineNum":" 3457","line":"    first = true"},
{"lineNum":" 3458","line":"    last_is_underscore = false"},
{"lineNum":" 3459","line":""},
{"lineNum":" 3460","line":"    String.build(bytesize) do |str|"},
{"lineNum":" 3461","line":"      each_char do |char|"},
{"lineNum":" 3462","line":"        if first"},
{"lineNum":" 3463","line":"          str << char.upcase"},
{"lineNum":" 3464","line":"        elsif char == \'_\'"},
{"lineNum":" 3465","line":"          last_is_underscore = true"},
{"lineNum":" 3466","line":"        elsif last_is_underscore"},
{"lineNum":" 3467","line":"          str << char.upcase"},
{"lineNum":" 3468","line":"          last_is_underscore = false"},
{"lineNum":" 3469","line":"        else"},
{"lineNum":" 3470","line":"          str << char"},
{"lineNum":" 3471","line":"        end"},
{"lineNum":" 3472","line":"        first = false"},
{"lineNum":" 3473","line":"      end"},
{"lineNum":" 3474","line":"    end"},
{"lineNum":" 3475","line":"  end"},
{"lineNum":" 3476","line":""},
{"lineNum":" 3477","line":"  # Reverses the order of characters in the string."},
{"lineNum":" 3478","line":"  #"},
{"lineNum":" 3479","line":"  # ```"},
{"lineNum":" 3480","line":"  # \"Argentina\".reverse # => \"anitnegrA\""},
{"lineNum":" 3481","line":"  # \"racecar\".reverse   # => \"racecar\""},
{"lineNum":" 3482","line":"  # ```"},
{"lineNum":" 3483","line":"  def reverse"},
{"lineNum":" 3484","line":"    return self if bytesize <= 1"},
{"lineNum":" 3485","line":""},
{"lineNum":" 3486","line":"    if ascii_only?"},
{"lineNum":" 3487","line":"      String.new(bytesize) do |buffer|"},
{"lineNum":" 3488","line":"        bytesize.times do |i|"},
{"lineNum":" 3489","line":"          buffer[i] = self.to_unsafe[bytesize - i - 1]"},
{"lineNum":" 3490","line":"        end"},
{"lineNum":" 3491","line":"        {@bytesize, @length}"},
{"lineNum":" 3492","line":"      end"},
{"lineNum":" 3493","line":"    else"},
{"lineNum":" 3494","line":"      # Iterate grpahemes to reverse the string,"},
{"lineNum":" 3495","line":"      # so combining characters are placed correctly"},
{"lineNum":" 3496","line":"      String.new(bytesize) do |buffer|"},
{"lineNum":" 3497","line":"        buffer += bytesize"},
{"lineNum":" 3498","line":"        scan(/\\X/) do |match|"},
{"lineNum":" 3499","line":"          grapheme = match[0]"},
{"lineNum":" 3500","line":"          buffer -= grapheme.bytesize"},
{"lineNum":" 3501","line":"          buffer.copy_from(grapheme.to_unsafe, grapheme.bytesize)"},
{"lineNum":" 3502","line":"        end"},
{"lineNum":" 3503","line":"        {@bytesize, @length}"},
{"lineNum":" 3504","line":"      end"},
{"lineNum":" 3505","line":"    end"},
{"lineNum":" 3506","line":"  end"},
{"lineNum":" 3507","line":""},
{"lineNum":" 3508","line":"  # Adds instances of *char* to right of the string until it is at least size of *len*."},
{"lineNum":" 3509","line":"  #"},
{"lineNum":" 3510","line":"  # ```"},
{"lineNum":" 3511","line":"  # \"Purple\".ljust(8)      # => \"Purple  \""},
{"lineNum":" 3512","line":"  # \"Purple\".ljust(8, \'-\') # => \"Purple--\""},
{"lineNum":" 3513","line":"  # \"Aubergine\".ljust(8)   # => \"Aubergine\""},
{"lineNum":" 3514","line":"  # ```"},
{"lineNum":" 3515","line":"  def ljust(len, char : Char = \' \')"},
{"lineNum":" 3516","line":"    just len, char, true"},
{"lineNum":" 3517","line":"  end"},
{"lineNum":" 3518","line":""},
{"lineNum":" 3519","line":"  # Adds instances of *char* to left of the string until it is at least size of *len*."},
{"lineNum":" 3520","line":"  #"},
{"lineNum":" 3521","line":"  # ```"},
{"lineNum":" 3522","line":"  # \"Purple\".rjust(8)      # => \"  Purple\""},
{"lineNum":" 3523","line":"  # \"Purple\".rjust(8, \'-\') # => \"--Purple\""},
{"lineNum":" 3524","line":"  # \"Aubergine\".rjust(8)   # => \"Aubergine\""},
{"lineNum":" 3525","line":"  # ```"},
{"lineNum":" 3526","line":"  def rjust(len, char : Char = \' \')"},
{"lineNum":" 3527","line":"    just len, char, false"},
{"lineNum":" 3528","line":"  end"},
{"lineNum":" 3529","line":""},
{"lineNum":" 3530","line":"  private def just(len, char, left)"},
{"lineNum":" 3531","line":"    return self if size >= len","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3532","line":""},
{"lineNum":" 3533","line":"    bytes, count = String.char_bytes_and_bytesize(char)"},
{"lineNum":" 3534","line":""},
{"lineNum":" 3535","line":"    difference = len - size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3536","line":"    new_bytesize = bytesize + difference * count"},
{"lineNum":" 3537","line":""},
{"lineNum":" 3538","line":"    String.new(new_bytesize) do |buffer|"},
{"lineNum":" 3539","line":"      if left"},
{"lineNum":" 3540","line":"        buffer.copy_from(to_unsafe, bytesize)"},
{"lineNum":" 3541","line":"        buffer += bytesize"},
{"lineNum":" 3542","line":"      end"},
{"lineNum":" 3543","line":""},
{"lineNum":" 3544","line":"      if count == 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3545","line":"        Intrinsics.memset(buffer.as(Void*), char.ord.to_u8, difference.to_u32, 0_u32, false)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3546","line":"        buffer += difference"},
{"lineNum":" 3547","line":"      else"},
{"lineNum":" 3548","line":"        difference.times do"},
{"lineNum":" 3549","line":"          buffer.copy_from(bytes.to_unsafe, count)"},
{"lineNum":" 3550","line":"          buffer += count"},
{"lineNum":" 3551","line":"        end"},
{"lineNum":" 3552","line":"      end"},
{"lineNum":" 3553","line":""},
{"lineNum":" 3554","line":"      unless left"},
{"lineNum":" 3555","line":"        buffer.copy_from(to_unsafe, bytesize)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3556","line":"      end"},
{"lineNum":" 3557","line":""},
{"lineNum":" 3558","line":"      {new_bytesize, len}"},
{"lineNum":" 3559","line":"    end"},
{"lineNum":" 3560","line":"  end"},
{"lineNum":" 3561","line":""},
{"lineNum":" 3562","line":"  # Returns the successor of the string. The successor is calculated"},
{"lineNum":" 3563","line":"  # by incrementing characters starting from the rightmost alphanumeric"},
{"lineNum":" 3564","line":"  # (or the rightmost character if there are no alphanumerics) in the string."},
{"lineNum":" 3565","line":"  # Incrementing a digit always results in another digit, and incrementing"},
{"lineNum":" 3566","line":"  # a letter results in another letter of the same case."},
{"lineNum":" 3567","line":"  #"},
{"lineNum":" 3568","line":"  # If the increment generates a \"carry\", the character to the left of it is"},
{"lineNum":" 3569","line":"  # incremented. This process repeats until there is no carry,"},
{"lineNum":" 3570","line":"  # adding an additional character if necessary."},
{"lineNum":" 3571","line":"  #"},
{"lineNum":" 3572","line":"  # ```"},
{"lineNum":" 3573","line":"  # \"abcd\".succ      # => \"abce\""},
{"lineNum":" 3574","line":"  # \"THX1138\".succ   # => \"THX1139\""},
{"lineNum":" 3575","line":"  # \"((koala))\".succ # => \"((koalb))\""},
{"lineNum":" 3576","line":"  # \"1999zzz\".succ   # => \"2000aaa\""},
{"lineNum":" 3577","line":"  # \"ZZZ9999\".succ   # => \"AAAA0000\""},
{"lineNum":" 3578","line":"  # \"***\".succ       # => \"**+\""},
{"lineNum":" 3579","line":"  # ```"},
{"lineNum":" 3580","line":"  def succ"},
{"lineNum":" 3581","line":"    return self if empty?"},
{"lineNum":" 3582","line":""},
{"lineNum":" 3583","line":"    chars = self.chars"},
{"lineNum":" 3584","line":""},
{"lineNum":" 3585","line":"    carry = nil"},
{"lineNum":" 3586","line":"    last_alnum = 0"},
{"lineNum":" 3587","line":"    index = size - 1"},
{"lineNum":" 3588","line":""},
{"lineNum":" 3589","line":"    while index >= 0"},
{"lineNum":" 3590","line":"      s = chars[index]"},
{"lineNum":" 3591","line":"      if s.ascii_alphanumeric?"},
{"lineNum":" 3592","line":"        carry = 0"},
{"lineNum":" 3593","line":"        if (\'0\' <= s && s < \'9\') ||"},
{"lineNum":" 3594","line":"           (\'a\' <= s && s < \'z\') ||"},
{"lineNum":" 3595","line":"           (\'A\' <= s && s < \'Z\')"},
{"lineNum":" 3596","line":"          chars[index] = s.succ"},
{"lineNum":" 3597","line":"          break"},
{"lineNum":" 3598","line":"        elsif s == \'9\'"},
{"lineNum":" 3599","line":"          chars[index] = \'0\'"},
{"lineNum":" 3600","line":"          carry = \'1\'"},
{"lineNum":" 3601","line":"        elsif s == \'z\'"},
{"lineNum":" 3602","line":"          chars[index] = carry = \'a\'"},
{"lineNum":" 3603","line":"        elsif s == \'Z\'"},
{"lineNum":" 3604","line":"          chars[index] = carry = \'A\'"},
{"lineNum":" 3605","line":"        end"},
{"lineNum":" 3606","line":""},
{"lineNum":" 3607","line":"        last_alnum = index"},
{"lineNum":" 3608","line":"      end"},
{"lineNum":" 3609","line":"      index -= 1"},
{"lineNum":" 3610","line":"    end"},
{"lineNum":" 3611","line":""},
{"lineNum":" 3612","line":"    if carry.nil? # there were no alphanumeric chars"},
{"lineNum":" 3613","line":"      chars[size - 1] = chars[size - 1].succ"},
{"lineNum":" 3614","line":"    end"},
{"lineNum":" 3615","line":""},
{"lineNum":" 3616","line":"    if carry.is_a?(Char) && index < 0 # we still have a carry and already reached the beginning"},
{"lineNum":" 3617","line":"      chars.insert(last_alnum, carry)"},
{"lineNum":" 3618","line":"    end"},
{"lineNum":" 3619","line":""},
{"lineNum":" 3620","line":"    String.build(chars.size) do |str|"},
{"lineNum":" 3621","line":"      chars.each do |char|"},
{"lineNum":" 3622","line":"        str << char"},
{"lineNum":" 3623","line":"      end"},
{"lineNum":" 3624","line":"    end"},
{"lineNum":" 3625","line":"  end"},
{"lineNum":" 3626","line":""},
{"lineNum":" 3627","line":"  # Finds match of *regex*, starting at *pos*."},
{"lineNum":" 3628","line":"  def match(regex : Regex, pos = 0) : Regex::MatchData?"},
{"lineNum":" 3629","line":"    match = regex.match self, pos"},
{"lineNum":" 3630","line":"    $~ = match"},
{"lineNum":" 3631","line":"    match"},
{"lineNum":" 3632","line":"  end"},
{"lineNum":" 3633","line":""},
{"lineNum":" 3634","line":"  # Searches the string for instances of *pattern*,"},
{"lineNum":" 3635","line":"  # yielding a `Regex::MatchData` for each match."},
{"lineNum":" 3636","line":"  def scan(pattern : Regex)"},
{"lineNum":" 3637","line":"    byte_offset = 0"},
{"lineNum":" 3638","line":""},
{"lineNum":" 3639","line":"    while match = pattern.match_at_byte_index(self, byte_offset)"},
{"lineNum":" 3640","line":"      index = match.byte_begin(0)"},
{"lineNum":" 3641","line":"      $~ = match"},
{"lineNum":" 3642","line":"      yield match"},
{"lineNum":" 3643","line":"      match_bytesize = match[0].bytesize"},
{"lineNum":" 3644","line":"      match_bytesize += 1 if match_bytesize == 0"},
{"lineNum":" 3645","line":"      byte_offset = index + match_bytesize"},
{"lineNum":" 3646","line":"    end"},
{"lineNum":" 3647","line":""},
{"lineNum":" 3648","line":"    self"},
{"lineNum":" 3649","line":"  end"},
{"lineNum":" 3650","line":""},
{"lineNum":" 3651","line":"  # Searches the string for instances of *pattern*,"},
{"lineNum":" 3652","line":"  # returning an `Array` of `Regex::MatchData` for each match."},
{"lineNum":" 3653","line":"  def scan(pattern : Regex)"},
{"lineNum":" 3654","line":"    matches = [] of Regex::MatchData"},
{"lineNum":" 3655","line":"    scan(pattern) do |match|"},
{"lineNum":" 3656","line":"      matches << match"},
{"lineNum":" 3657","line":"    end"},
{"lineNum":" 3658","line":"    matches"},
{"lineNum":" 3659","line":"  end"},
{"lineNum":" 3660","line":""},
{"lineNum":" 3661","line":"  # Searches the string for instances of *pattern*,"},
{"lineNum":" 3662","line":"  # yielding the matched string for each match."},
{"lineNum":" 3663","line":"  def scan(pattern : String)"},
{"lineNum":" 3664","line":"    return self if pattern.empty?"},
{"lineNum":" 3665","line":"    index = 0"},
{"lineNum":" 3666","line":"    while index = byte_index(pattern, index)"},
{"lineNum":" 3667","line":"      yield pattern"},
{"lineNum":" 3668","line":"      index += pattern.bytesize"},
{"lineNum":" 3669","line":"    end"},
{"lineNum":" 3670","line":"    self"},
{"lineNum":" 3671","line":"  end"},
{"lineNum":" 3672","line":""},
{"lineNum":" 3673","line":"  # Searches the string for instances of *pattern*,"},
{"lineNum":" 3674","line":"  # returning an array of the matched string for each match."},
{"lineNum":" 3675","line":"  def scan(pattern : String)"},
{"lineNum":" 3676","line":"    matches = [] of String"},
{"lineNum":" 3677","line":"    scan(pattern) do |match|"},
{"lineNum":" 3678","line":"      matches << match"},
{"lineNum":" 3679","line":"    end"},
{"lineNum":" 3680","line":"    matches"},
{"lineNum":" 3681","line":"  end"},
{"lineNum":" 3682","line":""},
{"lineNum":" 3683","line":"  # Yields each character in the string to the block."},
{"lineNum":" 3684","line":"  #"},
{"lineNum":" 3685","line":"  # ```"},
{"lineNum":" 3686","line":"  # array = [] of Char"},
{"lineNum":" 3687","line":"  # \"abâ\".each_char do |char|"},
{"lineNum":" 3688","line":"  #   array << char"},
{"lineNum":" 3689","line":"  # end"},
{"lineNum":" 3690","line":"  # array # => [\'a\', \'b\', \'â\']"},
{"lineNum":" 3691","line":"  # ```"},
{"lineNum":" 3692","line":"  def each_char : Nil"},
{"lineNum":" 3693","line":"    if ascii_only?","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 3694","line":"      each_byte do |byte|"},
{"lineNum":" 3695","line":"        yield (byte < 0x80 ? byte.unsafe_chr : Char::REPLACEMENT)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 3696","line":"      end"},
{"lineNum":" 3697","line":"    else"},
{"lineNum":" 3698","line":"      Char::Reader.new(self).each do |char|","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":" 3699","line":"        yield char"},
{"lineNum":" 3700","line":"      end"},
{"lineNum":" 3701","line":"    end"},
{"lineNum":" 3702","line":"  end"},
{"lineNum":" 3703","line":""},
{"lineNum":" 3704","line":"  # Returns an `Iterator` over each character in the string."},
{"lineNum":" 3705","line":"  #"},
{"lineNum":" 3706","line":"  # ```"},
{"lineNum":" 3707","line":"  # chars = \"abâ\".each_char"},
{"lineNum":" 3708","line":"  # chars.next # => \'a\'"},
{"lineNum":" 3709","line":"  # chars.next # => \'b\'"},
{"lineNum":" 3710","line":"  # chars.next # => \'â\'"},
{"lineNum":" 3711","line":"  # ```"},
{"lineNum":" 3712","line":"  def each_char"},
{"lineNum":" 3713","line":"    CharIterator.new(Char::Reader.new(self))"},
{"lineNum":" 3714","line":"  end"},
{"lineNum":" 3715","line":""},
{"lineNum":" 3716","line":"  # Yields each character and its index in the string to the block."},
{"lineNum":" 3717","line":"  #"},
{"lineNum":" 3718","line":"  # ```"},
{"lineNum":" 3719","line":"  # array = [] of Tuple(Char, Int32)"},
{"lineNum":" 3720","line":"  # \"abâ\".each_char_with_index do |char, index|"},
{"lineNum":" 3721","line":"  #   array << {char, index}"},
{"lineNum":" 3722","line":"  # end"},
{"lineNum":" 3723","line":"  # array # => [{\'a\', 0}, {\'b\', 1}, {\'â\', 2}]"},
{"lineNum":" 3724","line":"  # ```"},
{"lineNum":" 3725","line":"  def each_char_with_index"},
{"lineNum":" 3726","line":"    i = 0"},
{"lineNum":" 3727","line":"    each_char do |char|"},
{"lineNum":" 3728","line":"      yield char, i"},
{"lineNum":" 3729","line":"      i += 1"},
{"lineNum":" 3730","line":"    end"},
{"lineNum":" 3731","line":"  end"},
{"lineNum":" 3732","line":""},
{"lineNum":" 3733","line":"  # Returns an `Array` of all characters in the string."},
{"lineNum":" 3734","line":"  #"},
{"lineNum":" 3735","line":"  # ```"},
{"lineNum":" 3736","line":"  # \"abâ\".chars # => [\'a\', \'b\', \'â\']"},
{"lineNum":" 3737","line":"  # ```"},
{"lineNum":" 3738","line":"  def chars"},
{"lineNum":" 3739","line":"    chars = Array(Char).new(@length > 0 ? @length : bytesize)"},
{"lineNum":" 3740","line":"    each_char do |char|"},
{"lineNum":" 3741","line":"      chars << char"},
{"lineNum":" 3742","line":"    end"},
{"lineNum":" 3743","line":"    chars"},
{"lineNum":" 3744","line":"  end"},
{"lineNum":" 3745","line":""},
{"lineNum":" 3746","line":"  # Yields each codepoint to the block."},
{"lineNum":" 3747","line":"  #"},
{"lineNum":" 3748","line":"  # ```"},
{"lineNum":" 3749","line":"  # array = [] of Int32"},
{"lineNum":" 3750","line":"  # \"abâ\".each_codepoint do |codepoint|"},
{"lineNum":" 3751","line":"  #   array << codepoint"},
{"lineNum":" 3752","line":"  # end"},
{"lineNum":" 3753","line":"  # array # => [97, 98, 9731]"},
{"lineNum":" 3754","line":"  # ```"},
{"lineNum":" 3755","line":"  #"},
{"lineNum":" 3756","line":"  # See also: `Char#ord`."},
{"lineNum":" 3757","line":"  def each_codepoint"},
{"lineNum":" 3758","line":"    each_char do |char|"},
{"lineNum":" 3759","line":"      yield char.ord"},
{"lineNum":" 3760","line":"    end"},
{"lineNum":" 3761","line":"  end"},
{"lineNum":" 3762","line":""},
{"lineNum":" 3763","line":"  # Returns an `Iterator` for each codepoint."},
{"lineNum":" 3764","line":"  #"},
{"lineNum":" 3765","line":"  # ```"},
{"lineNum":" 3766","line":"  # codepoints = \"abâ\".each_codepoint"},
{"lineNum":" 3767","line":"  # codepoints.next # => 97"},
{"lineNum":" 3768","line":"  # codepoints.next # => 98"},
{"lineNum":" 3769","line":"  # codepoints.next # => 9731"},
{"lineNum":" 3770","line":"  # ```"},
{"lineNum":" 3771","line":"  #"},
{"lineNum":" 3772","line":"  # See also: `Char#ord`."},
{"lineNum":" 3773","line":"  def each_codepoint"},
{"lineNum":" 3774","line":"    each_char.map &.ord"},
{"lineNum":" 3775","line":"  end"},
{"lineNum":" 3776","line":""},
{"lineNum":" 3777","line":"  # Returns an `Array` of the codepoints that make the string."},
{"lineNum":" 3778","line":"  #"},
{"lineNum":" 3779","line":"  # ```"},
{"lineNum":" 3780","line":"  # \"abâ\".codepoints # => [97, 98, 9731]"},
{"lineNum":" 3781","line":"  # ```"},
{"lineNum":" 3782","line":"  #"},
{"lineNum":" 3783","line":"  # See also: `Char#ord`."},
{"lineNum":" 3784","line":"  def codepoints"},
{"lineNum":" 3785","line":"    codepoints = Array(Int32).new(@length > 0 ? @length : bytesize)"},
{"lineNum":" 3786","line":"    each_codepoint do |codepoint|"},
{"lineNum":" 3787","line":"      codepoints << codepoint"},
{"lineNum":" 3788","line":"    end"},
{"lineNum":" 3789","line":"    codepoints"},
{"lineNum":" 3790","line":"  end"},
{"lineNum":" 3791","line":""},
{"lineNum":" 3792","line":"  # Yields each byte in the string to the block."},
{"lineNum":" 3793","line":"  #"},
{"lineNum":" 3794","line":"  # ```"},
{"lineNum":" 3795","line":"  # array = [] of UInt8"},
{"lineNum":" 3796","line":"  # \"abâ\".each_byte do |byte|"},
{"lineNum":" 3797","line":"  #   array << byte"},
{"lineNum":" 3798","line":"  # end"},
{"lineNum":" 3799","line":"  # array # => [97, 98, 226, 152, 131]"},
{"lineNum":" 3800","line":"  # ```"},
{"lineNum":" 3801","line":"  def each_byte"},
{"lineNum":" 3802","line":"    to_slice.each do |byte|"},
{"lineNum":" 3803","line":"      yield byte"},
{"lineNum":" 3804","line":"    end"},
{"lineNum":" 3805","line":"    nil"},
{"lineNum":" 3806","line":"  end"},
{"lineNum":" 3807","line":""},
{"lineNum":" 3808","line":"  # Returns an `Iterator` over each byte in the string."},
{"lineNum":" 3809","line":"  #"},
{"lineNum":" 3810","line":"  # ```"},
{"lineNum":" 3811","line":"  # bytes = \"abâ\".each_byte"},
{"lineNum":" 3812","line":"  # bytes.next # => 97"},
{"lineNum":" 3813","line":"  # bytes.next # => 98"},
{"lineNum":" 3814","line":"  # bytes.next # => 226"},
{"lineNum":" 3815","line":"  # bytes.next # => 152"},
{"lineNum":" 3816","line":"  # bytes.next # => 131"},
{"lineNum":" 3817","line":"  # ```"},
{"lineNum":" 3818","line":"  def each_byte"},
{"lineNum":" 3819","line":"    to_slice.each"},
{"lineNum":" 3820","line":"  end"},
{"lineNum":" 3821","line":""},
{"lineNum":" 3822","line":"  # Returns this string\'s bytes as an `Array(UInt8)`."},
{"lineNum":" 3823","line":"  #"},
{"lineNum":" 3824","line":"  # ```"},
{"lineNum":" 3825","line":"  # \"hello\".bytes # => [104, 101, 108, 108, 111]"},
{"lineNum":" 3826","line":"  # \"ä½ å¥½\".bytes    # => [228, 189, 160, 229, 165, 189]"},
{"lineNum":" 3827","line":"  # ```"},
{"lineNum":" 3828","line":"  def bytes"},
{"lineNum":" 3829","line":"    Array.new(bytesize) { |i| to_unsafe[i] }"},
{"lineNum":" 3830","line":"  end"},
{"lineNum":" 3831","line":""},
{"lineNum":" 3832","line":"  def inspect(io)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3833","line":"    dump_or_inspect(io) do |char, error|"},
{"lineNum":" 3834","line":"      inspect_char(char, error, io)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3835","line":"    end"},
{"lineNum":" 3836","line":"  end"},
{"lineNum":" 3837","line":""},
{"lineNum":" 3838","line":"  def pretty_print(pp)"},
{"lineNum":" 3839","line":"    pp.text(inspect)"},
{"lineNum":" 3840","line":"  end"},
{"lineNum":" 3841","line":""},
{"lineNum":" 3842","line":"  def inspect_unquoted"},
{"lineNum":" 3843","line":"    String.build do |io|"},
{"lineNum":" 3844","line":"      inspect_unquoted(io)"},
{"lineNum":" 3845","line":"    end"},
{"lineNum":" 3846","line":"  end"},
{"lineNum":" 3847","line":""},
{"lineNum":" 3848","line":"  def inspect_unquoted(io)"},
{"lineNum":" 3849","line":"    dump_or_inspect_unquoted(io) do |char, error|"},
{"lineNum":" 3850","line":"      inspect_char(char, error, io)"},
{"lineNum":" 3851","line":"    end"},
{"lineNum":" 3852","line":"  end"},
{"lineNum":" 3853","line":""},
{"lineNum":" 3854","line":"  def dump"},
{"lineNum":" 3855","line":"    String.build do |io|"},
{"lineNum":" 3856","line":"      dump io"},
{"lineNum":" 3857","line":"    end"},
{"lineNum":" 3858","line":"  end"},
{"lineNum":" 3859","line":""},
{"lineNum":" 3860","line":"  def dump(io)"},
{"lineNum":" 3861","line":"    dump_or_inspect(io) do |char, error|"},
{"lineNum":" 3862","line":"      dump_char(char, error, io)"},
{"lineNum":" 3863","line":"    end"},
{"lineNum":" 3864","line":"  end"},
{"lineNum":" 3865","line":""},
{"lineNum":" 3866","line":"  def dump_unquoted"},
{"lineNum":" 3867","line":"    String.build do |io|"},
{"lineNum":" 3868","line":"      dump_unquoted(io)"},
{"lineNum":" 3869","line":"    end"},
{"lineNum":" 3870","line":"  end"},
{"lineNum":" 3871","line":""},
{"lineNum":" 3872","line":"  def dump_unquoted(io)"},
{"lineNum":" 3873","line":"    dump_or_inspect_unquoted(io) do |char, error|"},
{"lineNum":" 3874","line":"      dump_char(char, error, io)"},
{"lineNum":" 3875","line":"    end"},
{"lineNum":" 3876","line":"  end"},
{"lineNum":" 3877","line":""},
{"lineNum":" 3878","line":"  private def dump_or_inspect(io)"},
{"lineNum":" 3879","line":"    io << \"\\\"\""},
{"lineNum":" 3880","line":"    dump_or_inspect_unquoted(io) do |char, error|"},
{"lineNum":" 3881","line":"      yield char, error"},
{"lineNum":" 3882","line":"    end"},
{"lineNum":" 3883","line":"    io << \"\\\"\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3884","line":"  end"},
{"lineNum":" 3885","line":""},
{"lineNum":" 3886","line":"  private def dump_or_inspect_unquoted(io)"},
{"lineNum":" 3887","line":"    reader = Char::Reader.new(self)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 3888","line":"    while reader.has_next?","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 3889","line":"      current_char = reader.current_char"},
{"lineNum":" 3890","line":"      case current_char"},
{"lineNum":" 3891","line":"      when \'\"\'  then io << \"\\\\\\\"\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3892","line":"      when \'\\\\\' then io << \"\\\\\\\\\""},
{"lineNum":" 3893","line":"      when \'\\b\' then io << \"\\\\b\""},
{"lineNum":" 3894","line":"      when \'\\e\' then io << \"\\\\e\""},
{"lineNum":" 3895","line":"      when \'\\f\' then io << \"\\\\f\""},
{"lineNum":" 3896","line":"      when \'\\n\' then io << \"\\\\n\""},
{"lineNum":" 3897","line":"      when \'\\r\' then io << \"\\\\r\""},
{"lineNum":" 3898","line":"      when \'\\t\' then io << \"\\\\t\""},
{"lineNum":" 3899","line":"      when \'\\v\' then io << \"\\\\v\""},
{"lineNum":" 3900","line":"      when \'#\'"},
{"lineNum":" 3901","line":"        current_char = reader.next_char","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3902","line":"        if current_char == \'{\'","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3903","line":"          io << \"\\\\\\#{\""},
{"lineNum":" 3904","line":"          reader.next_char","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3905","line":"          next"},
{"lineNum":" 3906","line":"        else"},
{"lineNum":" 3907","line":"          io << \'#\'"},
{"lineNum":" 3908","line":"          next"},
{"lineNum":" 3909","line":"        end"},
{"lineNum":" 3910","line":"      else"},
{"lineNum":" 3911","line":"        if reader.error","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3912","line":"          reader.current_char_width.times do |i|"},
{"lineNum":" 3913","line":"            yield \'\\0\', to_unsafe[reader.pos + i]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3914","line":"          end"},
{"lineNum":" 3915","line":"        else"},
{"lineNum":" 3916","line":"          yield current_char, nil"},
{"lineNum":" 3917","line":"        end"},
{"lineNum":" 3918","line":"      end"},
{"lineNum":" 3919","line":"      reader.next_char","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3920","line":"    end"},
{"lineNum":" 3921","line":"  end"},
{"lineNum":" 3922","line":""},
{"lineNum":" 3923","line":"  private def inspect_char(char, error, io)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3924","line":"    dump_or_inspect_char char, error, io do"},
{"lineNum":" 3925","line":"      char.ascii_control?"},
{"lineNum":" 3926","line":"    end"},
{"lineNum":" 3927","line":"  end"},
{"lineNum":" 3928","line":""},
{"lineNum":" 3929","line":"  private def dump_char(char, error, io)"},
{"lineNum":" 3930","line":"    dump_or_inspect_char(char, error, io) do"},
{"lineNum":" 3931","line":"      char.ascii_control? || char.ord >= 0x80"},
{"lineNum":" 3932","line":"    end"},
{"lineNum":" 3933","line":"  end"},
{"lineNum":" 3934","line":""},
{"lineNum":" 3935","line":"  private def dump_or_inspect_char(char, error, io)"},
{"lineNum":" 3936","line":"    if error","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3937","line":"      dump_hex(error, io)"},
{"lineNum":" 3938","line":"    elsif yield"},
{"lineNum":" 3939","line":"      dump_unicode(char, io)"},
{"lineNum":" 3940","line":"    else"},
{"lineNum":" 3941","line":"      io << char"},
{"lineNum":" 3942","line":"    end"},
{"lineNum":" 3943","line":"  end"},
{"lineNum":" 3944","line":""},
{"lineNum":" 3945","line":"  private def dump_hex(error, io)"},
{"lineNum":" 3946","line":"    io << \"\\\\x\""},
{"lineNum":" 3947","line":"    io << \"0\" if error < 16","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3948","line":"    error.to_s(16, io, upcase: true)"},
{"lineNum":" 3949","line":"  end"},
{"lineNum":" 3950","line":""},
{"lineNum":" 3951","line":"  private def dump_unicode(char, io)"},
{"lineNum":" 3952","line":"    io << \"\\\\u\""},
{"lineNum":" 3953","line":"    io << \"0\" if char.ord < 4096","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3954","line":"    io << \"0\" if char.ord < 256","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3955","line":"    io << \"0\" if char.ord < 16","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3956","line":"    char.ord.to_s(16, io)"},
{"lineNum":" 3957","line":"    io << \"\""},
{"lineNum":" 3958","line":"  end"},
{"lineNum":" 3959","line":""},
{"lineNum":" 3960","line":"  def starts_with?(str : String)"},
{"lineNum":" 3961","line":"    return false if str.bytesize > bytesize","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 3962","line":"    to_unsafe.memcmp(str.to_unsafe, str.bytesize) == 0","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 3963","line":"  end"},
{"lineNum":" 3964","line":""},
{"lineNum":" 3965","line":"  def starts_with?(char : Char)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3966","line":"    each_char do |c|"},
{"lineNum":" 3967","line":"      return c == char"},
{"lineNum":" 3968","line":"    end"},
{"lineNum":" 3969","line":""},
{"lineNum":" 3970","line":"    false"},
{"lineNum":" 3971","line":"  end"},
{"lineNum":" 3972","line":""},
{"lineNum":" 3973","line":"  def ends_with?(str : String)"},
{"lineNum":" 3974","line":"    return false if str.bytesize > bytesize"},
{"lineNum":" 3975","line":"    (to_unsafe + bytesize - str.bytesize).memcmp(str.to_unsafe, str.bytesize) == 0"},
{"lineNum":" 3976","line":"  end"},
{"lineNum":" 3977","line":""},
{"lineNum":" 3978","line":"  def ends_with?(char : Char)"},
{"lineNum":" 3979","line":"    return false unless bytesize > 0","class":"lineNoCov","hits":"0","possible_hits":"27",},
{"lineNum":" 3980","line":""},
{"lineNum":" 3981","line":"    if char.ascii? || ascii_only?"},
{"lineNum":" 3982","line":"      return to_unsafe[bytesize - 1] == char.ord","class":"lineNoCov","hits":"0","possible_hits":"47",},
{"lineNum":" 3983","line":"    end"},
{"lineNum":" 3984","line":""},
{"lineNum":" 3985","line":"    bytes, count = String.char_bytes_and_bytesize(char)"},
{"lineNum":" 3986","line":"    return false if bytesize < count"},
{"lineNum":" 3987","line":""},
{"lineNum":" 3988","line":"    count.times do |i|"},
{"lineNum":" 3989","line":"      return false unless to_unsafe[bytesize - count + i] == bytes[i]"},
{"lineNum":" 3990","line":"    end"},
{"lineNum":" 3991","line":""},
{"lineNum":" 3992","line":"    true"},
{"lineNum":" 3993","line":"  end"},
{"lineNum":" 3994","line":""},
{"lineNum":" 3995","line":"  # Interpolates *other* into the string using `Kernel#sprintf`."},
{"lineNum":" 3996","line":"  #"},
{"lineNum":" 3997","line":"  # ```"},
{"lineNum":" 3998","line":"  # \"Party like it\'s %d!!!\" % 1999 # => \"Party like it\'s 1999!!!\""},
{"lineNum":" 3999","line":"  # ```"},
{"lineNum":" 4000","line":"  def %(other)"},
{"lineNum":" 4001","line":"    sprintf self, other"},
{"lineNum":" 4002","line":"  end"},
{"lineNum":" 4003","line":""},
{"lineNum":" 4004","line":"  # See `Object#hash(hasher)`"},
{"lineNum":" 4005","line":"  def hash(hasher)"},
{"lineNum":" 4006","line":"    hasher.string(self)"},
{"lineNum":" 4007","line":"  end"},
{"lineNum":" 4008","line":""},
{"lineNum":" 4009","line":"  # Returns the number of unicode codepoints in this string."},
{"lineNum":" 4010","line":"  #"},
{"lineNum":" 4011","line":"  # ```"},
{"lineNum":" 4012","line":"  # \"hello\".size # => 5"},
{"lineNum":" 4013","line":"  # \"ä½ å¥½\".size    # => 2"},
{"lineNum":" 4014","line":"  # ```"},
{"lineNum":" 4015","line":"  def size"},
{"lineNum":" 4016","line":"    if @length > 0 || @bytesize == 0","class":"lineNoCov","hits":"0","possible_hits":"31",},
{"lineNum":" 4017","line":"      return @length"},
{"lineNum":" 4018","line":"    end"},
{"lineNum":" 4019","line":""},
{"lineNum":" 4020","line":"    @length = each_byte_index_and_char_index { }","class":"lineNoCov","hits":"0","possible_hits":"32",},
{"lineNum":" 4021","line":"  end"},
{"lineNum":" 4022","line":""},
{"lineNum":" 4023","line":"  # Returns `true` if this String is comprised in its entirety"},
{"lineNum":" 4024","line":"  # by ASCII characters."},
{"lineNum":" 4025","line":"  #"},
{"lineNum":" 4026","line":"  # ```"},
{"lineNum":" 4027","line":"  # \"hello\".ascii_only? # => true"},
{"lineNum":" 4028","line":"  # \"ä½ å¥½\".ascii_only?    # => false"},
{"lineNum":" 4029","line":"  # ```"},
{"lineNum":" 4030","line":"  def ascii_only?","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":" 4031","line":"    @bytesize == size","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 4032","line":"  end"},
{"lineNum":" 4033","line":""},
{"lineNum":" 4034","line":"  # Returns `true` if this String is encoded correctly"},
{"lineNum":" 4035","line":"  # according to the UTF-8 encoding."},
{"lineNum":" 4036","line":"  def valid_encoding?"},
{"lineNum":" 4037","line":"    reader = Char::Reader.new(self)"},
{"lineNum":" 4038","line":"    while reader.has_next?"},
{"lineNum":" 4039","line":"      return false if reader.error"},
{"lineNum":" 4040","line":"      reader.next_char"},
{"lineNum":" 4041","line":"    end"},
{"lineNum":" 4042","line":"    true"},
{"lineNum":" 4043","line":"  end"},
{"lineNum":" 4044","line":""},
{"lineNum":" 4045","line":"  # Returns a String where bytes that are invalid in the"},
{"lineNum":" 4046","line":"  # UTF-8 encoding are replaced with *replacement*."},
{"lineNum":" 4047","line":"  def scrub(replacement = Char::REPLACEMENT) : String"},
{"lineNum":" 4048","line":"    # If the string is valid we have a chance of returning self"},
{"lineNum":" 4049","line":"    # to avoid creating a new string"},
{"lineNum":" 4050","line":"    result = nil"},
{"lineNum":" 4051","line":""},
{"lineNum":" 4052","line":"    reader = Char::Reader.new(self)"},
{"lineNum":" 4053","line":"    while reader.has_next?"},
{"lineNum":" 4054","line":"      if reader.error"},
{"lineNum":" 4055","line":"        unless result"},
{"lineNum":" 4056","line":"          result = String::Builder.new(bytesize)"},
{"lineNum":" 4057","line":"          result.write(to_slice[0, reader.pos])"},
{"lineNum":" 4058","line":"        end"},
{"lineNum":" 4059","line":"        result << replacement"},
{"lineNum":" 4060","line":"      else"},
{"lineNum":" 4061","line":"        result << reader.current_char if result"},
{"lineNum":" 4062","line":"      end"},
{"lineNum":" 4063","line":"      reader.next_char"},
{"lineNum":" 4064","line":"    end"},
{"lineNum":" 4065","line":""},
{"lineNum":" 4066","line":"    result ? result.to_s : self"},
{"lineNum":" 4067","line":"  end"},
{"lineNum":" 4068","line":""},
{"lineNum":" 4069","line":"  protected def char_bytesize_at(byte_index)"},
{"lineNum":" 4070","line":"    first = unsafe_byte_at(byte_index)"},
{"lineNum":" 4071","line":""},
{"lineNum":" 4072","line":"    if first < 0x80","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":" 4073","line":"      return 1"},
{"lineNum":" 4074","line":"    end"},
{"lineNum":" 4075","line":""},
{"lineNum":" 4076","line":"    if first < 0xc2","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":" 4077","line":"      return 1"},
{"lineNum":" 4078","line":"    end"},
{"lineNum":" 4079","line":""},
{"lineNum":" 4080","line":"    second = unsafe_byte_at(byte_index + 1)"},
{"lineNum":" 4081","line":"    if (second & 0xc0) != 0x80","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":" 4082","line":"      return 1"},
{"lineNum":" 4083","line":"    end"},
{"lineNum":" 4084","line":""},
{"lineNum":" 4085","line":"    if first < 0xe0","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":" 4086","line":"      return 2"},
{"lineNum":" 4087","line":"    end"},
{"lineNum":" 4088","line":""},
{"lineNum":" 4089","line":"    third = unsafe_byte_at(byte_index + 2)"},
{"lineNum":" 4090","line":"    if (third & 0xc0) != 0x80","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":" 4091","line":"      return 2"},
{"lineNum":" 4092","line":"    end"},
{"lineNum":" 4093","line":""},
{"lineNum":" 4094","line":"    if first < 0xf0","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":" 4095","line":"      return 3"},
{"lineNum":" 4096","line":"    end"},
{"lineNum":" 4097","line":""},
{"lineNum":" 4098","line":"    if first == 0xf0 && second < 0x90"},
{"lineNum":" 4099","line":"      return 3"},
{"lineNum":" 4100","line":"    end"},
{"lineNum":" 4101","line":""},
{"lineNum":" 4102","line":"    if first == 0xf4 && second >= 0x90","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":" 4103","line":"      return 3"},
{"lineNum":" 4104","line":"    end"},
{"lineNum":" 4105","line":""},
{"lineNum":" 4106","line":"    return 4"},
{"lineNum":" 4107","line":"  end"},
{"lineNum":" 4108","line":""},
{"lineNum":" 4109","line":"  protected def size_known?"},
{"lineNum":" 4110","line":"    @bytesize == 0 || @length > 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 4111","line":"  end"},
{"lineNum":" 4112","line":""},
{"lineNum":" 4113","line":"  protected def each_byte_index_and_char_index"},
{"lineNum":" 4114","line":"    byte_index = 0"},
{"lineNum":" 4115","line":"    char_index = 0"},
{"lineNum":" 4116","line":""},
{"lineNum":" 4117","line":"    while byte_index < bytesize","class":"lineNoCov","hits":"0","possible_hits":"68",},
{"lineNum":" 4118","line":"      yield byte_index, char_index"},
{"lineNum":" 4119","line":"      byte_index += char_bytesize_at(byte_index)","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":" 4120","line":"      char_index += 1"},
{"lineNum":" 4121","line":"    end"},
{"lineNum":" 4122","line":""},
{"lineNum":" 4123","line":"    char_index"},
{"lineNum":" 4124","line":"  end"},
{"lineNum":" 4125","line":""},
{"lineNum":" 4126","line":"  def clone"},
{"lineNum":" 4127","line":"    self"},
{"lineNum":" 4128","line":"  end"},
{"lineNum":" 4129","line":""},
{"lineNum":" 4130","line":"  def dup"},
{"lineNum":" 4131","line":"    self"},
{"lineNum":" 4132","line":"  end"},
{"lineNum":" 4133","line":""},
{"lineNum":" 4134","line":"  def to_s"},
{"lineNum":" 4135","line":"    self"},
{"lineNum":" 4136","line":"  end"},
{"lineNum":" 4137","line":""},
{"lineNum":" 4138","line":"  def to_s(io)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 4139","line":"    io.write_utf8(to_slice)","class":"lineNoCov","hits":"0","possible_hits":"212",},
{"lineNum":" 4140","line":"  end"},
{"lineNum":" 4141","line":""},
{"lineNum":" 4142","line":"  # Returns the underlying bytes of this String in an **unsafe** way."},
{"lineNum":" 4143","line":"  #"},
{"lineNum":" 4144","line":"  # The returned slice is read-only."},
{"lineNum":" 4145","line":"  def to_slice : Bytes"},
{"lineNum":" 4146","line":"    Slice.new(to_unsafe, bytesize, read_only: true)","class":"lineNoCov","hits":"0","possible_hits":"82",},
{"lineNum":" 4147","line":"  end"},
{"lineNum":" 4148","line":""},
{"lineNum":" 4149","line":"  # Returns a pointer to the underlying bytes of this String."},
{"lineNum":" 4150","line":"  def to_unsafe : UInt8*","class":"lineNoCov","hits":"0","possible_hits":"185",},
{"lineNum":" 4151","line":"    pointerof(@c)"},
{"lineNum":" 4152","line":"  end"},
{"lineNum":" 4153","line":""},
{"lineNum":" 4154","line":"  def unsafe_byte_slice(byte_offset, count)"},
{"lineNum":" 4155","line":"    Slice.new(to_unsafe + byte_offset, count, read_only: true)"},
{"lineNum":" 4156","line":"  end"},
{"lineNum":" 4157","line":""},
{"lineNum":" 4158","line":"  def unsafe_byte_slice(byte_offset)"},
{"lineNum":" 4159","line":"    Slice.new(to_unsafe + byte_offset, bytesize - byte_offset, read_only: true)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 4160","line":"  end"},
{"lineNum":" 4161","line":""},
{"lineNum":" 4162","line":"  protected def unsafe_byte_slice_string(byte_offset)"},
{"lineNum":" 4163","line":"    String.new(unsafe_byte_slice(byte_offset))"},
{"lineNum":" 4164","line":"  end"},
{"lineNum":" 4165","line":""},
{"lineNum":" 4166","line":"  protected def unsafe_byte_slice_string(byte_offset, count)"},
{"lineNum":" 4167","line":"    String.new(unsafe_byte_slice(byte_offset, count))"},
{"lineNum":" 4168","line":"  end"},
{"lineNum":" 4169","line":""},
{"lineNum":" 4170","line":"  protected def self.char_bytes_and_bytesize(char : Char)"},
{"lineNum":" 4171","line":"    bytes = uninitialized UInt8[4]"},
{"lineNum":" 4172","line":""},
{"lineNum":" 4173","line":"    bytesize = 0"},
{"lineNum":" 4174","line":"    char.each_byte do |byte|"},
{"lineNum":" 4175","line":"      bytes[bytesize] = byte"},
{"lineNum":" 4176","line":"      bytesize += 1"},
{"lineNum":" 4177","line":"    end"},
{"lineNum":" 4178","line":""},
{"lineNum":" 4179","line":"    {bytes, bytesize}"},
{"lineNum":" 4180","line":"  end"},
{"lineNum":" 4181","line":""},
{"lineNum":" 4182","line":"  # Raises an `ArgumentError` if `self` has null bytes. Returns `self` otherwise."},
{"lineNum":" 4183","line":"  #"},
{"lineNum":" 4184","line":"  # This method should sometimes be called before passing a `String` to a C function."},
{"lineNum":" 4185","line":"  def check_no_null_byte"},
{"lineNum":" 4186","line":"    raise ArgumentError.new(\"String contains null byte\") if byte_index(0)","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":" 4187","line":"    self"},
{"lineNum":" 4188","line":"  end"},
{"lineNum":" 4189","line":""},
{"lineNum":" 4190","line":"  # :nodoc:"},
{"lineNum":" 4191","line":"  def self.check_capacity_in_bounds(capacity)"},
{"lineNum":" 4192","line":"    if capacity < 0","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":" 4193","line":"      raise ArgumentError.new(\"Negative capacity\")","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":" 4194","line":"    end"},
{"lineNum":" 4195","line":""},
{"lineNum":" 4196","line":"    if capacity.to_u64 > (UInt32::MAX - HEADER_SIZE - 1)","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":" 4197","line":"      raise ArgumentError.new(\"Capacity too big\")","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 4198","line":"    end"},
{"lineNum":" 4199","line":"  end"},
{"lineNum":" 4200","line":""},
{"lineNum":" 4201","line":"  private class CharIterator"},
{"lineNum":" 4202","line":"    include Iterator(Char)"},
{"lineNum":" 4203","line":""},
{"lineNum":" 4204","line":"    @reader : Char::Reader"},
{"lineNum":" 4205","line":"    @end : Bool"},
{"lineNum":" 4206","line":""},
{"lineNum":" 4207","line":"    def initialize(@reader, @end = false)"},
{"lineNum":" 4208","line":"      check_empty"},
{"lineNum":" 4209","line":"    end"},
{"lineNum":" 4210","line":""},
{"lineNum":" 4211","line":"    def next"},
{"lineNum":" 4212","line":"      return stop if @end"},
{"lineNum":" 4213","line":""},
{"lineNum":" 4214","line":"      value = @reader.current_char"},
{"lineNum":" 4215","line":"      @reader.next_char"},
{"lineNum":" 4216","line":"      @end = true unless @reader.has_next?"},
{"lineNum":" 4217","line":""},
{"lineNum":" 4218","line":"      value"},
{"lineNum":" 4219","line":"    end"},
{"lineNum":" 4220","line":""},
{"lineNum":" 4221","line":"    def rewind"},
{"lineNum":" 4222","line":"      @reader.pos = 0"},
{"lineNum":" 4223","line":"      @end = false"},
{"lineNum":" 4224","line":"      check_empty"},
{"lineNum":" 4225","line":"      self"},
{"lineNum":" 4226","line":"    end"},
{"lineNum":" 4227","line":""},
{"lineNum":" 4228","line":"    private def check_empty"},
{"lineNum":" 4229","line":"      @end = true if @reader.string.bytesize == 0"},
{"lineNum":" 4230","line":"    end"},
{"lineNum":" 4231","line":"  end"},
{"lineNum":" 4232","line":""},
{"lineNum":" 4233","line":"  private class LineIterator"},
{"lineNum":" 4234","line":"    include Iterator(String)"},
{"lineNum":" 4235","line":""},
{"lineNum":" 4236","line":"    def initialize(@string : String, @chomp : Bool)"},
{"lineNum":" 4237","line":"      @offset = 0"},
{"lineNum":" 4238","line":"      @end = false"},
{"lineNum":" 4239","line":"    end"},
{"lineNum":" 4240","line":""},
{"lineNum":" 4241","line":"    def next"},
{"lineNum":" 4242","line":"      return stop if @end"},
{"lineNum":" 4243","line":""},
{"lineNum":" 4244","line":"      byte_index = @string.byte_index(\'\\n\'.ord.to_u8, @offset)"},
{"lineNum":" 4245","line":"      if byte_index"},
{"lineNum":" 4246","line":"        count = byte_index - @offset + 1"},
{"lineNum":" 4247","line":"        if @chomp"},
{"lineNum":" 4248","line":"          count -= 1"},
{"lineNum":" 4249","line":"          if @offset + count > 0 && @string.to_unsafe[@offset + count - 1] === \'\\r\'"},
{"lineNum":" 4250","line":"            count -= 1"},
{"lineNum":" 4251","line":"          end"},
{"lineNum":" 4252","line":"        end"},
{"lineNum":" 4253","line":""},
{"lineNum":" 4254","line":"        value = @string.unsafe_byte_slice_string(@offset, count)"},
{"lineNum":" 4255","line":"        @offset = byte_index + 1"},
{"lineNum":" 4256","line":"      else"},
{"lineNum":" 4257","line":"        if @offset == @string.bytesize"},
{"lineNum":" 4258","line":"          value = stop"},
{"lineNum":" 4259","line":"        else"},
{"lineNum":" 4260","line":"          value = @string.unsafe_byte_slice_string(@offset)"},
{"lineNum":" 4261","line":"        end"},
{"lineNum":" 4262","line":"        @end = true"},
{"lineNum":" 4263","line":"      end"},
{"lineNum":" 4264","line":""},
{"lineNum":" 4265","line":"      value"},
{"lineNum":" 4266","line":"    end"},
{"lineNum":" 4267","line":""},
{"lineNum":" 4268","line":"    def rewind"},
{"lineNum":" 4269","line":"      @offset = 0"},
{"lineNum":" 4270","line":"      @end = false"},
{"lineNum":" 4271","line":"      self"},
{"lineNum":" 4272","line":"    end"},
{"lineNum":" 4273","line":"  end"},
{"lineNum":" 4274","line":"end"},
{"lineNum":" 4275","line":""},
{"lineNum":" 4276","line":"require \"./string/formatter\""},
{"lineNum":" 4277","line":"require \"./string/builder\""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 219, "covered" : 0,};
var merged_data = [];
