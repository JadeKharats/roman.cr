var data = {lines:[
{"lineNum":"    1","line":"require \"./printer/*\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# Float::Printer is based on Grisu3 algorithm described in the 2004 paper"},
{"lineNum":"    4","line":"# \"Printing Floating-Point Numbers Quickly and Accurately with Integers\" by"},
{"lineNum":"    5","line":"# Florian Loitsch."},
{"lineNum":"    6","line":"module Float::Printer"},
{"lineNum":"    7","line":"  extend self"},
{"lineNum":"    8","line":"  BUFFER_SIZE = 128"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"  # Converts Float *v* to a string representation and prints it onto *io*"},
{"lineNum":"   11","line":"  #"},
{"lineNum":"   12","line":"  # It is used by `Float64#to_s` and it is probably not necessary to use"},
{"lineNum":"   13","line":"  # this directly."},
{"lineNum":"   14","line":"  def print(v : Float64 | Float32, io : IO)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   15","line":"    d = IEEE.to_uint(v)"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    if IEEE.sign(d) < 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   18","line":"      io << \'-\'"},
{"lineNum":"   19","line":"      v = -v"},
{"lineNum":"   20","line":"    end"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    if v == 0.0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   23","line":"      io << \"0.0\""},
{"lineNum":"   24","line":"    elsif IEEE.special?(d)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"      if IEEE.inf?(d)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"        io << \"Infinity\""},
{"lineNum":"   27","line":"      else"},
{"lineNum":"   28","line":"        io << \"NaN\""},
{"lineNum":"   29","line":"      end"},
{"lineNum":"   30","line":"    else"},
{"lineNum":"   31","line":"      internal(v, io)"},
{"lineNum":"   32","line":"    end"},
{"lineNum":"   33","line":"  end"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  private def internal(v : Float64 | Float32, io : IO)"},
{"lineNum":"   36","line":"    buffer = StaticArray(UInt8, BUFFER_SIZE).new(0_u8)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"    success, decimal_exponent, length = Grisu3.grisu3(v, buffer.to_unsafe)"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    unless success"},
{"lineNum":"   40","line":"      # grisu3 does not work for ~0.5% of floats"},
{"lineNum":"   41","line":"      # when this happens, fallback to another, slower approach"},
{"lineNum":"   42","line":"      if v.class == Float64"},
{"lineNum":"   43","line":"        LibC.snprintf(buffer.to_unsafe, BUFFER_SIZE, \"%.17g\", v)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"      else"},
{"lineNum":"   45","line":"        LibC.snprintf(buffer.to_unsafe, BUFFER_SIZE, \"%g\", v)"},
{"lineNum":"   46","line":"      end"},
{"lineNum":"   47","line":"      len = LibC.strlen(buffer)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"      io.write_utf8 buffer.to_slice[0, len]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   49","line":"      return"},
{"lineNum":"   50","line":"    end"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    point = decimal_exponent + length"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    exp = point"},
{"lineNum":"   55","line":"    exp_mode = point > 15 || point < -3"},
{"lineNum":"   56","line":"    point = 1 if exp_mode","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    # add leading zero"},
{"lineNum":"   59","line":"    io << \'0\' if point < 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    i = 0"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    # add integer part digits"},
{"lineNum":"   64","line":"    if decimal_exponent > 0 && !exp_mode"},
{"lineNum":"   65","line":"      # whole number but not big enough to be exp form"},
{"lineNum":"   66","line":"      io.write_utf8 buffer.to_slice[i, length - i]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"      i = length","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"      (point - length).times { io << \'0\' }"},
{"lineNum":"   69","line":"    elsif i < point"},
{"lineNum":"   70","line":"      io.write_utf8 buffer.to_slice[i, point - i]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"      i = point"},
{"lineNum":"   72","line":"    end"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    io << \'.\'"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    # add leading zeros after point"},
{"lineNum":"   77","line":"    if point < 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"      (-point).times { io << \'0\' }"},
{"lineNum":"   79","line":"    end"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    # add fractional part digits"},
{"lineNum":"   82","line":"    io.write_utf8 buffer.to_slice[i, length - i]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"    i = length"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    # print trailing 0 if whole number or exp notation of power of ten"},
{"lineNum":"   86","line":"    if (decimal_exponent >= 0 && !exp_mode) || (exp != point && length == 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"      io << \'0\'"},
{"lineNum":"   88","line":"    end"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    # exp notation"},
{"lineNum":"   91","line":"    if exp != point","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"      io << \'e\'"},
{"lineNum":"   93","line":"      io << \'+\' if exp > 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   94","line":"      (exp - 1).to_s(io)"},
{"lineNum":"   95","line":"    end"},
{"lineNum":"   96","line":"  end"},
{"lineNum":"   97","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 19, "covered" : 0,};
var merged_data = [];
