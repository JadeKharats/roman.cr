var data = {lines:[
{"lineNum":"    1","line":"{% skip_file() unless flag?(:linux) %}"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"require \"c/unistd\""},
{"lineNum":"    4","line":"require \"c/sys/syscall\""},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"module Crystal::System::Random"},
{"lineNum":"    7","line":"  @@initialized = false"},
{"lineNum":"    8","line":"  @@getrandom_available = false"},
{"lineNum":"    9","line":"  @@urandom : File?"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  private def self.init"},
{"lineNum":"   12","line":"    @@initialized = true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    if sys_getrandom(Bytes.new(16)) >= 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   15","line":"      @@getrandom_available = true","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   16","line":"    else"},
{"lineNum":"   17","line":"      urandom = File.open(\"/dev/urandom\", \"r\")"},
{"lineNum":"   18","line":"      return unless urandom.stat.chardev?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"      urandom.close_on_exec = true"},
{"lineNum":"   21","line":"      urandom.sync = true # don\'t buffer bytes"},
{"lineNum":"   22","line":"      @@urandom = urandom","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   23","line":"    end"},
{"lineNum":"   24","line":"  end"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"  # Reads n random bytes using the Linux `getrandom(2)` syscall."},
{"lineNum":"   27","line":"  def self.random_bytes(buf : Bytes) : Nil"},
{"lineNum":"   28","line":"    init unless @@initialized","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    if @@getrandom_available","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":"      getrandom(buf)"},
{"lineNum":"   32","line":"    elsif urandom = @@urandom","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"      urandom.read_fully(buf)"},
{"lineNum":"   34","line":"    else"},
{"lineNum":"   35","line":"      raise \"Failed to access secure source to generate random bytes!\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":"    end"},
{"lineNum":"   37","line":"  end"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"  def self.next_u : UInt8"},
{"lineNum":"   40","line":"    init unless @@initialized"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    if @@getrandom_available"},
{"lineNum":"   43","line":"      buf = uninitialized UInt8[1]"},
{"lineNum":"   44","line":"      getrandom(buf.to_slice)"},
{"lineNum":"   45","line":"      buf.unsafe_as(UInt8)"},
{"lineNum":"   46","line":"    elsif urandom = @@urandom"},
{"lineNum":"   47","line":"      urandom.read_byte.not_nil!"},
{"lineNum":"   48","line":"    else"},
{"lineNum":"   49","line":"      raise \"Failed to access secure source to generate random bytes!\""},
{"lineNum":"   50","line":"    end"},
{"lineNum":"   51","line":"  end"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"  # Reads n random bytes using the Linux `getrandom(2)` syscall."},
{"lineNum":"   54","line":"  private def self.getrandom(buf)"},
{"lineNum":"   55","line":"    # getrandom(2) may only read up to 256 bytes at once without being"},
{"lineNum":"   56","line":"    # interrupted or returning early"},
{"lineNum":"   57","line":"    chunk_size = 256"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    while buf.size > 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"      if buf.size < chunk_size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"        chunk_size = buf.size"},
{"lineNum":"   62","line":"      end"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"      read_bytes = sys_getrandom(buf[0, chunk_size])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"      raise Errno.new(\"getrandom\") if read_bytes == -1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"      buf += read_bytes"},
{"lineNum":"   68","line":"    end"},
{"lineNum":"   69","line":"  end"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"  # Low-level wrapper for the `getrandom(2)` syscall, returns the number of"},
{"lineNum":"   72","line":"  # bytes read or `-1` if an error occured (or the syscall isn\'t available)"},
{"lineNum":"   73","line":"  # and sets `Errno.value`."},
{"lineNum":"   74","line":"  #"},
{"lineNum":"   75","line":"  # We use the kernel syscall instead of the `getrandom` C function so any"},
{"lineNum":"   76","line":"  # binary compiled for Linux will always use getrandom if the kernel is 3.17+"},
{"lineNum":"   77","line":"  # and silently fallback to read from /dev/urandom if not (so it\'s more"},
{"lineNum":"   78","line":"  # portable)."},
{"lineNum":"   79","line":"  private def self.sys_getrandom(buf : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"    loop do"},
{"lineNum":"   81","line":"      read_bytes = LibC.syscall(LibC::SYS_getrandom, buf, LibC::SizeT.new(buf.size), 0)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":"      if read_bytes < 0 && (Errno.value == Errno::EINTR || Errno.value == Errno::EAGAIN)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"        Fiber.yield","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"      else"},
{"lineNum":"   85","line":"        return read_bytes"},
{"lineNum":"   86","line":"      end"},
{"lineNum":"   87","line":"    end"},
{"lineNum":"   88","line":"  end"},
{"lineNum":"   89","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 17, "covered" : 0,};
var merged_data = [];
