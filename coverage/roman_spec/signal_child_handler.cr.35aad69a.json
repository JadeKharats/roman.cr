var data = {lines:[
{"lineNum":"    1","line":"require \"c/sys/wait\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# :nodoc:"},
{"lineNum":"    4","line":"# Singleton that handles `SIG_CHLD` and queues events for `Process#waitpid`."},
{"lineNum":"    5","line":"# `Process.waitpid` uses this class for nonblocking operation."},
{"lineNum":"    6","line":"class Event::SignalChildHandler"},
{"lineNum":"    7","line":"  def self.instance : self"},
{"lineNum":"    8","line":"    @@instance ||= begin","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"    9","line":"      Signal.setup_default_handlers","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   10","line":"      new"},
{"lineNum":"   11","line":"    end"},
{"lineNum":"   12","line":"  end"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"  alias ChanType = Channel::Buffered(Process::Status?)"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"  def initialize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   17","line":"    @pending = Hash(LibC::PidT, Process::Status).new","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   18","line":"    @waiting = Hash(LibC::PidT, ChanType).new","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   19","line":"  end"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"  def after_fork"},
{"lineNum":"   22","line":"    @pending.clear"},
{"lineNum":"   23","line":"    @waiting.each { |pid, chan| chan.send(nil) }"},
{"lineNum":"   24","line":"    @waiting.clear"},
{"lineNum":"   25","line":"  end"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"  def trigger"},
{"lineNum":"   28","line":"    loop do"},
{"lineNum":"   29","line":"      pid = LibC.waitpid(-1, out exit_code, LibC::WNOHANG)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   30","line":"      case pid"},
{"lineNum":"   31","line":"      when 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"        return nil"},
{"lineNum":"   33","line":"      when -1"},
{"lineNum":"   34","line":"        raise Errno.new(\"waitpid\") unless Errno.value == Errno::ECHILD","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":"        return nil"},
{"lineNum":"   36","line":"      else"},
{"lineNum":"   37","line":"        status = Process::Status.new exit_code"},
{"lineNum":"   38","line":"        send_pending pid, status"},
{"lineNum":"   39","line":"      end"},
{"lineNum":"   40","line":"    end"},
{"lineNum":"   41","line":"  end"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"  private def send_pending(pid, status)"},
{"lineNum":"   44","line":"    # BUG: needs mutexes with threads"},
{"lineNum":"   45","line":"    if chan = @waiting[pid]?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   46","line":"      chan.send status","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   47","line":"      @waiting.delete pid","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"    else"},
{"lineNum":"   49","line":"      @pending[pid] = status"},
{"lineNum":"   50","line":"    end"},
{"lineNum":"   51","line":"  end"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"  # Returns a future that sends a `Process::Status` or raises after forking."},
{"lineNum":"   54","line":"  def waitpid(pid : LibC::PidT)"},
{"lineNum":"   55","line":"    chan = ChanType.new(1)"},
{"lineNum":"   56","line":"    # BUG: needs mutexes with threads"},
{"lineNum":"   57","line":"    if status = @pending[pid]?"},
{"lineNum":"   58","line":"      chan.send status"},
{"lineNum":"   59","line":"      @pending.delete pid"},
{"lineNum":"   60","line":"    else"},
{"lineNum":"   61","line":"      @waiting[pid] = chan"},
{"lineNum":"   62","line":"    end"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    lazy do"},
{"lineNum":"   65","line":"      chan.receive || raise Channel::ClosedError.new(\"waitpid channel closed after forking\")"},
{"lineNum":"   66","line":"    end"},
{"lineNum":"   67","line":"  end"},
{"lineNum":"   68","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 11, "covered" : 0,};
var merged_data = [];
