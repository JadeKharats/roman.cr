var data = {lines:[
{"lineNum":"    1","line":"require \"fiber\""},
{"lineNum":"    2","line":"require \"./concurrent/*\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"# Blocks the current fiber for the specified number of seconds."},
{"lineNum":"    5","line":"#"},
{"lineNum":"    6","line":"# While this fiber is waiting this time other ready-to-execute"},
{"lineNum":"    7","line":"# fibers might start their execution."},
{"lineNum":"    8","line":"def sleep(seconds : Number)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    9","line":"  if seconds < 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   10","line":"    raise ArgumentError.new \"Sleep seconds must be positive\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   11","line":"  end"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"  Fiber.sleep(seconds)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   14","line":"end"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"# Blocks the current Fiber for the specified time span."},
{"lineNum":"   17","line":"#"},
{"lineNum":"   18","line":"# While this fiber is waiting this time other ready-to-execute"},
{"lineNum":"   19","line":"# fibers might start their execution."},
{"lineNum":"   20","line":"def sleep(time : Time::Span)"},
{"lineNum":"   21","line":"  sleep(time.total_seconds)"},
{"lineNum":"   22","line":"end"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"# Blocks the current fiber forever."},
{"lineNum":"   25","line":"#"},
{"lineNum":"   26","line":"# Meanwhile, other ready-to-execute fibers might start their execution."},
{"lineNum":"   27","line":"def sleep"},
{"lineNum":"   28","line":"  Scheduler.reschedule"},
{"lineNum":"   29","line":"end"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"# Spawns a new fiber."},
{"lineNum":"   32","line":"#"},
{"lineNum":"   33","line":"# The newly created fiber doesn\'t run as soon as spawned."},
{"lineNum":"   34","line":"#"},
{"lineNum":"   35","line":"# Example:"},
{"lineNum":"   36","line":"# ```"},
{"lineNum":"   37","line":"# # Write \"1\" every 1 second and \"2\" every 2 seconds for 6 seconds."},
{"lineNum":"   38","line":"#"},
{"lineNum":"   39","line":"# ch = Channel(Nil).new"},
{"lineNum":"   40","line":"#"},
{"lineNum":"   41","line":"# spawn do"},
{"lineNum":"   42","line":"#   6.times do"},
{"lineNum":"   43","line":"#     sleep 1"},
{"lineNum":"   44","line":"#     puts 1"},
{"lineNum":"   45","line":"#   end"},
{"lineNum":"   46","line":"#   ch.send(nil)"},
{"lineNum":"   47","line":"# end"},
{"lineNum":"   48","line":"#"},
{"lineNum":"   49","line":"# spawn do"},
{"lineNum":"   50","line":"#   3.times do"},
{"lineNum":"   51","line":"#     sleep 2"},
{"lineNum":"   52","line":"#     puts 2"},
{"lineNum":"   53","line":"#   end"},
{"lineNum":"   54","line":"#   ch.send(nil)"},
{"lineNum":"   55","line":"# end"},
{"lineNum":"   56","line":"#"},
{"lineNum":"   57","line":"# 2.times { ch.receive }"},
{"lineNum":"   58","line":"# ```"},
{"lineNum":"   59","line":"def spawn(*, name : String? = nil, &block)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"  fiber = Fiber.new(name, &block)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"  Scheduler.enqueue fiber","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":"  fiber"},
{"lineNum":"   63","line":"end"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"# Spawns a fiber by first creating a `Proc`, passing the *call*\'s"},
{"lineNum":"   66","line":"# expressions to it, and letting the `Proc` finally invoke the *call*."},
{"lineNum":"   67","line":"#"},
{"lineNum":"   68","line":"# Compare this:"},
{"lineNum":"   69","line":"#"},
{"lineNum":"   70","line":"# ```"},
{"lineNum":"   71","line":"# i = 0"},
{"lineNum":"   72","line":"# while i < 5"},
{"lineNum":"   73","line":"#   spawn { print(i) }"},
{"lineNum":"   74","line":"#   i += 1"},
{"lineNum":"   75","line":"# end"},
{"lineNum":"   76","line":"# Fiber.yield"},
{"lineNum":"   77","line":"# # Output: 55555"},
{"lineNum":"   78","line":"# ```"},
{"lineNum":"   79","line":"#"},
{"lineNum":"   80","line":"# To this:"},
{"lineNum":"   81","line":"#"},
{"lineNum":"   82","line":"# ```"},
{"lineNum":"   83","line":"# i = 0"},
{"lineNum":"   84","line":"# while i < 5"},
{"lineNum":"   85","line":"#   spawn print(i)"},
{"lineNum":"   86","line":"#   i += 1"},
{"lineNum":"   87","line":"# end"},
{"lineNum":"   88","line":"# Fiber.yield"},
{"lineNum":"   89","line":"# # Output: 01234"},
{"lineNum":"   90","line":"# ```"},
{"lineNum":"   91","line":"#"},
{"lineNum":"   92","line":"# This is because in the first case all spawned fibers refer to"},
{"lineNum":"   93","line":"# the same local variable, while in the second example copies of"},
{"lineNum":"   94","line":"# *i* are passed to a `Proc` that eventually invokes the call."},
{"lineNum":"   95","line":"macro spawn(call, *, name = nil)"},
{"lineNum":"   96","line":"  {% if call.is_a?(Call) %}"},
{"lineNum":"   97","line":"    ->("},
{"lineNum":"   98","line":"      {% for arg, i in call.args %}"},
{"lineNum":"   99","line":"        __arg{{i}} : typeof({{arg}}),"},
{"lineNum":"  100","line":"      {% end %}"},
{"lineNum":"  101","line":"      {% if call.named_args %}"},
{"lineNum":"  102","line":"        {% for narg, i in call.named_args %}"},
{"lineNum":"  103","line":"          __narg{{i}} : typeof({{narg.value}}),"},
{"lineNum":"  104","line":"        {% end %}"},
{"lineNum":"  105","line":"      {% end %}"},
{"lineNum":"  106","line":"      ) {"},
{"lineNum":"  107","line":"      spawn(name: {{name}}) do"},
{"lineNum":"  108","line":"        {{call.name}}("},
{"lineNum":"  109","line":"          {% for arg, i in call.args %}"},
{"lineNum":"  110","line":"            __arg{{i}},"},
{"lineNum":"  111","line":"          {% end %}"},
{"lineNum":"  112","line":"          {% if call.named_args %}"},
{"lineNum":"  113","line":"            {% for narg, i in call.named_args %}"},
{"lineNum":"  114","line":"              {{narg.name}}: __narg{{i}},"},
{"lineNum":"  115","line":"            {% end %}"},
{"lineNum":"  116","line":"          {% end %}"},
{"lineNum":"  117","line":"        )"},
{"lineNum":"  118","line":"      end"},
{"lineNum":"  119","line":"    {% if call.named_args %}"},
{"lineNum":"  120","line":"      }.call({{*call.args}}, {{*call.named_args.map(&.value)}})"},
{"lineNum":"  121","line":"    {% else %}"},
{"lineNum":"  122","line":"      }.call({{*call.args}})"},
{"lineNum":"  123","line":"    {% end %}"},
{"lineNum":"  124","line":"  {% else %}"},
{"lineNum":"  125","line":"    spawn do"},
{"lineNum":"  126","line":"      {{call}}"},
{"lineNum":"  127","line":"    end"},
{"lineNum":"  128","line":"  {% end %}"},
{"lineNum":"  129","line":"end"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"macro parallel(*jobs)"},
{"lineNum":"  132","line":"  %channel = Channel(Nil).new"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  {% for job, i in jobs %}"},
{"lineNum":"  135","line":"    %ret{i} = uninitialized typeof({{job}})"},
{"lineNum":"  136","line":"    spawn do"},
{"lineNum":"  137","line":"      begin"},
{"lineNum":"  138","line":"        %ret{i} = {{job}}"},
{"lineNum":"  139","line":"      ensure"},
{"lineNum":"  140","line":"        %channel.send nil"},
{"lineNum":"  141","line":"      end"},
{"lineNum":"  142","line":"    end"},
{"lineNum":"  143","line":"  {% end %}"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"  {{ jobs.size }}.times { %channel.receive }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  {"},
{"lineNum":"  148","line":"    {% for job, i in jobs %}"},
{"lineNum":"  149","line":"      %ret{i},"},
{"lineNum":"  150","line":"    {% end %}"},
{"lineNum":"  151","line":"  }"},
{"lineNum":"  152","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:20:30", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
