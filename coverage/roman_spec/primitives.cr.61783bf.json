var data = {lines:[
{"lineNum":"    1","line":"# Methods defined here are primitives because they either:"},
{"lineNum":"    2","line":"# * can\'t be expressed in Crystal (need to be expressed in LLVM). For example unary"},
{"lineNum":"    3","line":"#   and binary math operators fall into this category."},
{"lineNum":"    4","line":"# * should always be inlined with an LLVM instruction for performance reasons, even"},
{"lineNum":"    5","line":"#   in non-release builds. An example of this is `Char#ord`, which could be implemented"},
{"lineNum":"    6","line":"#   in Crystal by assigning `self` to a variable and casting a pointer to it to `Int32`,"},
{"lineNum":"    7","line":"#   and then reading back the value."},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"class Object"},
{"lineNum":"   10","line":"  # Returns the **runtime** `Class` of an object."},
{"lineNum":"   11","line":"  #"},
{"lineNum":"   12","line":"  # ```"},
{"lineNum":"   13","line":"  # 1.class       # => Int32"},
{"lineNum":"   14","line":"  # \"hello\".class # => String"},
{"lineNum":"   15","line":"  # ```"},
{"lineNum":"   16","line":"  #"},
{"lineNum":"   17","line":"  # Compare it with `typeof`, which returns the **compile-time** type of an object:"},
{"lineNum":"   18","line":"  #"},
{"lineNum":"   19","line":"  # ```"},
{"lineNum":"   20","line":"  # random_value = rand # => 0.627423"},
{"lineNum":"   21","line":"  # value = random_value < 0.5 ? 1 : \"hello\""},
{"lineNum":"   22","line":"  # value         # => \"hello\""},
{"lineNum":"   23","line":"  # value.class   # => String"},
{"lineNum":"   24","line":"  # typeof(value) # => Int32 | String"},
{"lineNum":"   25","line":"  # ```"},
{"lineNum":"   26","line":"  @[Primitive(:class)]"},
{"lineNum":"   27","line":"  def class"},
{"lineNum":"   28","line":"  end"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"  # :nodoc:"},
{"lineNum":"   31","line":"  @[Primitive(:object_crystal_type_id)]"},
{"lineNum":"   32","line":"  def crystal_type_id : Int32"},
{"lineNum":"   33","line":"  end"},
{"lineNum":"   34","line":"end"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"class Reference","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   37","line":"  # Returns a `UInt64` that uniquely identifies this object."},
{"lineNum":"   38","line":"  #"},
{"lineNum":"   39","line":"  # The returned value is the memory address of this object."},
{"lineNum":"   40","line":"  #"},
{"lineNum":"   41","line":"  # ```"},
{"lineNum":"   42","line":"  # string = \"hello\""},
{"lineNum":"   43","line":"  # string.object_id # => 4460249568"},
{"lineNum":"   44","line":"  #"},
{"lineNum":"   45","line":"  # pointer = Pointer(String).new(string.object_id)"},
{"lineNum":"   46","line":"  # string2 = pointer.as(String)"},
{"lineNum":"   47","line":"  # string2.object_id == string.object_id # => true"},
{"lineNum":"   48","line":"  # ```"},
{"lineNum":"   49","line":"  @[Primitive(:object_id)]"},
{"lineNum":"   50","line":"  def object_id : UInt64"},
{"lineNum":"   51","line":"  end"},
{"lineNum":"   52","line":"end"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"class Class"},
{"lineNum":"   55","line":"  # :nodoc:"},
{"lineNum":"   56","line":"  @[Primitive(:class_crystal_instance_type_id)]"},
{"lineNum":"   57","line":"  def crystal_instance_type_id : Int32"},
{"lineNum":"   58","line":"  end"},
{"lineNum":"   59","line":"end"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"struct Bool"},
{"lineNum":"   62","line":"  # Returns `true` if `self` is equal to *other*."},
{"lineNum":"   63","line":"  @[Primitive(:binary)]"},
{"lineNum":"   64","line":"  def ==(other : Bool) : Bool"},
{"lineNum":"   65","line":"  end"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"  # Returns `true` if `self` is not equal to *other*."},
{"lineNum":"   68","line":"  @[Primitive(:binary)]"},
{"lineNum":"   69","line":"  def !=(other : Bool) : Bool"},
{"lineNum":"   70","line":"  end"},
{"lineNum":"   71","line":"end"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"struct Char"},
{"lineNum":"   74","line":"  # Returns the codepoint of this char."},
{"lineNum":"   75","line":"  #"},
{"lineNum":"   76","line":"  # The codepoint is the integer representation."},
{"lineNum":"   77","line":"  # The Universal Coded Character Set (UCS) standard, commonly known as Unicode,"},
{"lineNum":"   78","line":"  # assigns names and meanings to numbers, these numbers are called codepoints."},
{"lineNum":"   79","line":"  #"},
{"lineNum":"   80","line":"  # For values below and including 127 this matches the ASCII codes"},
{"lineNum":"   81","line":"  # and thus its byte representation."},
{"lineNum":"   82","line":"  #"},
{"lineNum":"   83","line":"  # ```"},
{"lineNum":"   84","line":"  # \'a\'.ord      # => 97"},
{"lineNum":"   85","line":"  # \'\\0\'.ord     # => 0"},
{"lineNum":"   86","line":"  # \'\\u007f\'.ord # => 127"},
{"lineNum":"   87","line":"  # \'â˜ƒ\'.ord      # => 9731"},
{"lineNum":"   88","line":"  # ```"},
{"lineNum":"   89","line":"  @[Primitive(:cast)]"},
{"lineNum":"   90","line":"  def ord : Int32"},
{"lineNum":"   91","line":"  end"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"  {% for op, desc in {"},
{"lineNum":"   94","line":"                       \"==\" => \"equal to\","},
{"lineNum":"   95","line":"                       \"!=\" => \"not equal to\","},
{"lineNum":"   96","line":"                       \"<\"  => \"less than\","},
{"lineNum":"   97","line":"                       \"<=\" => \"less than or equal to\","},
{"lineNum":"   98","line":"                       \">\"  => \"greater than\","},
{"lineNum":"   99","line":"                       \">=\" => \"greater than or equal to\","},
{"lineNum":"  100","line":"                     } %}"},
{"lineNum":"  101","line":"    # Returns `true` if `self`\'s codepoint is {{desc.id}} *other*\'s codepoint."},
{"lineNum":"  102","line":"    @[Primitive(:binary)]"},
{"lineNum":"  103","line":"    def {{op.id}}(other : Char) : Bool"},
{"lineNum":"  104","line":"    end"},
{"lineNum":"  105","line":"  {% end %}"},
{"lineNum":"  106","line":"end"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"struct Symbol"},
{"lineNum":"  109","line":"  # Returns `true` if `self` is equal to *other*."},
{"lineNum":"  110","line":"  @[Primitive(:binary)]"},
{"lineNum":"  111","line":"  def ==(other : Symbol) : Bool"},
{"lineNum":"  112","line":"  end"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"  # Returns `true` if `self` is not equal to *other*."},
{"lineNum":"  115","line":"  @[Primitive(:binary)]"},
{"lineNum":"  116","line":"  def !=(other : Symbol) : Bool"},
{"lineNum":"  117","line":"  end"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"  # Returns a unique number for this symbol."},
{"lineNum":"  120","line":"  @[Primitive(:cast)]"},
{"lineNum":"  121","line":"  def to_i : Int32"},
{"lineNum":"  122","line":"  end"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  # Returns the symbol\'s name as a String."},
{"lineNum":"  125","line":"  #"},
{"lineNum":"  126","line":"  # ```"},
{"lineNum":"  127","line":"  # :foo.to_s           # => \"foo\""},
{"lineNum":"  128","line":"  # :\"hello world\".to_s # => \"hello world\""},
{"lineNum":"  129","line":"  # ```"},
{"lineNum":"  130","line":"  @[Primitive(:symbol_to_s)]"},
{"lineNum":"  131","line":"  def to_s : String"},
{"lineNum":"  132","line":"  end"},
{"lineNum":"  133","line":"end"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"struct Pointer(T)"},
{"lineNum":"  136","line":"  # Allocates `size * sizeof(T)` bytes from the system\'s heap initialized"},
{"lineNum":"  137","line":"  # to zero and returns a pointer to the first byte from that memory."},
{"lineNum":"  138","line":"  # The memory is allocated by the `GC`, so when there are"},
{"lineNum":"  139","line":"  # no pointers to this memory, it will be automatically freed."},
{"lineNum":"  140","line":"  #"},
{"lineNum":"  141","line":"  # ```"},
{"lineNum":"  142","line":"  # # Allocate memory for an Int32: 4 bytes"},
{"lineNum":"  143","line":"  # ptr = Pointer(Int32).malloc(1_u64)"},
{"lineNum":"  144","line":"  # ptr.value # => 0"},
{"lineNum":"  145","line":"  #"},
{"lineNum":"  146","line":"  # # Allocate memory for 10 Int32: 40 bytes"},
{"lineNum":"  147","line":"  # ptr = Pointer(Int32).malloc(10_u64)"},
{"lineNum":"  148","line":"  # ptr[0] # => 0"},
{"lineNum":"  149","line":"  # # ..."},
{"lineNum":"  150","line":"  # ptr[9] # => 0"},
{"lineNum":"  151","line":"  # ```"},
{"lineNum":"  152","line":"  @[Primitive(:pointer_malloc)]"},
{"lineNum":"  153","line":"  def self.malloc(size : UInt64)"},
{"lineNum":"  154","line":"  end"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"  # Returns a pointer that points to the given memory address."},
{"lineNum":"  157","line":"  # This doesn\'t allocate memory."},
{"lineNum":"  158","line":"  #"},
{"lineNum":"  159","line":"  # ```"},
{"lineNum":"  160","line":"  # ptr = Pointer(Int32).new(5678_u64)"},
{"lineNum":"  161","line":"  # ptr.address # => 5678"},
{"lineNum":"  162","line":"  # ```"},
{"lineNum":"  163","line":"  @[Primitive(:pointer_new)]"},
{"lineNum":"  164","line":"  def self.new(address : UInt64)"},
{"lineNum":"  165","line":"  end"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"  # Gets the value pointed by this pointer."},
{"lineNum":"  168","line":"  #"},
{"lineNum":"  169","line":"  # ```"},
{"lineNum":"  170","line":"  # ptr = Pointer(Int32).malloc(4)"},
{"lineNum":"  171","line":"  # ptr.value = 42"},
{"lineNum":"  172","line":"  # ptr.value # => 42"},
{"lineNum":"  173","line":"  # ```"},
{"lineNum":"  174","line":"  @[Primitive(:pointer_get)]"},
{"lineNum":"  175","line":"  def value : T"},
{"lineNum":"  176","line":"  end"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"  # Sets the value pointed by this pointer."},
{"lineNum":"  179","line":"  #"},
{"lineNum":"  180","line":"  # ```"},
{"lineNum":"  181","line":"  # ptr = Pointer(Int32).malloc(4)"},
{"lineNum":"  182","line":"  # ptr.value = 42"},
{"lineNum":"  183","line":"  # ptr.value # => 42"},
{"lineNum":"  184","line":"  # ```"},
{"lineNum":"  185","line":"  @[Primitive(:pointer_set)]"},
{"lineNum":"  186","line":"  def value=(value : T)"},
{"lineNum":"  187","line":"  end"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  # Returns the address of this pointer."},
{"lineNum":"  190","line":"  #"},
{"lineNum":"  191","line":"  # ```"},
{"lineNum":"  192","line":"  # ptr = Pointer(Int32).new(1234)"},
{"lineNum":"  193","line":"  # ptr.address # => 1234"},
{"lineNum":"  194","line":"  # ```"},
{"lineNum":"  195","line":"  @[Primitive(:pointer_address)]"},
{"lineNum":"  196","line":"  def address : UInt64"},
{"lineNum":"  197","line":"  end"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"  # Tries to change the size of the allocation pointed to by this pointer to *size*,"},
{"lineNum":"  200","line":"  # and returns that pointer."},
{"lineNum":"  201","line":"  #"},
{"lineNum":"  202","line":"  # Since the space after the end of the block may be in use, realloc may find it"},
{"lineNum":"  203","line":"  # necessary to copy the block to a new address where more free space is available."},
{"lineNum":"  204","line":"  # The value of realloc is the new address of the block."},
{"lineNum":"  205","line":"  # If the block needs to be moved, realloc copies the old contents."},
{"lineNum":"  206","line":"  #"},
{"lineNum":"  207","line":"  # Remember to always assign the value of realloc."},
{"lineNum":"  208","line":"  #"},
{"lineNum":"  209","line":"  # ```"},
{"lineNum":"  210","line":"  # ptr = Pointer.malloc(4) { |i| i + 1 } # [1, 2, 3, 4]"},
{"lineNum":"  211","line":"  # ptr = ptr.realloc(8_u8)"},
{"lineNum":"  212","line":"  # ptr # [1, 2, 3, 4, 0, 0, 0, 0]"},
{"lineNum":"  213","line":"  # ```"},
{"lineNum":"  214","line":"  @[Primitive(:pointer_realloc)]"},
{"lineNum":"  215","line":"  def realloc(size : UInt64) : self"},
{"lineNum":"  216","line":"  end"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"  # Returns a new pointer whose address is this pointer\'s address"},
{"lineNum":"  219","line":"  # incremented by `other * sizeof(T)`."},
{"lineNum":"  220","line":"  #"},
{"lineNum":"  221","line":"  # ```"},
{"lineNum":"  222","line":"  # ptr = Pointer(Int32).new(1234)"},
{"lineNum":"  223","line":"  # ptr.address # => 1234"},
{"lineNum":"  224","line":"  #"},
{"lineNum":"  225","line":"  # # An Int32 occupies four bytes"},
{"lineNum":"  226","line":"  # ptr2 = ptr + 1_u64"},
{"lineNum":"  227","line":"  # ptr2.address # => 1238"},
{"lineNum":"  228","line":"  # ```"},
{"lineNum":"  229","line":"  @[Primitive(:pointer_add)]"},
{"lineNum":"  230","line":"  def +(offset : Int64) : self"},
{"lineNum":"  231","line":"  end"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"  # Returns how many T elements are there between this pointer and *other*."},
{"lineNum":"  234","line":"  # That is, this is `(self.address - other.address) / sizeof(T)`."},
{"lineNum":"  235","line":"  #"},
{"lineNum":"  236","line":"  # ```"},
{"lineNum":"  237","line":"  # ptr1 = Pointer(Int32).malloc(4)"},
{"lineNum":"  238","line":"  # ptr2 = ptr1 + 2"},
{"lineNum":"  239","line":"  # ptr2 - ptr1 # => 2"},
{"lineNum":"  240","line":"  # ```"},
{"lineNum":"  241","line":"  @[Primitive(:pointer_diff)]"},
{"lineNum":"  242","line":"  def -(other : self) : Int64"},
{"lineNum":"  243","line":"  end"},
{"lineNum":"  244","line":"end"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"struct Proc"},
{"lineNum":"  247","line":"  # Invokes this `Proc` and returns the result."},
{"lineNum":"  248","line":"  #"},
{"lineNum":"  249","line":"  # ```"},
{"lineNum":"  250","line":"  # add = ->(x : Int32, y : Int32) { x + y }"},
{"lineNum":"  251","line":"  # add.call(1, 2) # => 3"},
{"lineNum":"  252","line":"  # ```"},
{"lineNum":"  253","line":"  @[Primitive(:proc_call)]"},
{"lineNum":"  254","line":"  @[Raises]"},
{"lineNum":"  255","line":"  def call(*args : *T) : R"},
{"lineNum":"  256","line":"  end"},
{"lineNum":"  257","line":"end"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"# All `Number` methods are defined on concrete structs (for example `Int32`, `UInt8`, etc.),"},
{"lineNum":"  260","line":"# never on `Number`, `Int` or `Float` because we don\'t want to handle a primitive for"},
{"lineNum":"  261","line":"# other types that could extend these types (for example `BigInt`): if we do that"},
{"lineNum":"  262","line":"# a compiler crash will happen."},
{"lineNum":"  263","line":"#"},
{"lineNum":"  264","line":"# A similar logic is applied to method arguments: they are always concrete, to avoid"},
{"lineNum":"  265","line":"# unintentionally handling a `BigInt` and have a crash. We also can\'t have an argument"},
{"lineNum":"  266","line":"# be a union, because the codegen primitives always consider primitive types, never"},
{"lineNum":"  267","line":"# unions."},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"{% begin %}"},
{"lineNum":"  270","line":"  {% ints = %w(Int8 Int16 Int32 Int64 Int128 UInt8 UInt16 UInt32 UInt64 UInt128) %}"},
{"lineNum":"  271","line":"  {% floats = %w(Float32 Float64) %}"},
{"lineNum":"  272","line":"  {% nums = %w(Int8 Int16 Int32 Int64 Int128 UInt8 UInt16 UInt32 UInt64 UInt128 Float32 Float64) %}"},
{"lineNum":"  273","line":"  {% binaries = {\"+\" => \"adding\", \"-\" => \"subtracting\", \"*\" => \"multiplying\", \"/\" => \"dividing\"} %}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"  {% for num in nums %}"},
{"lineNum":"  276","line":"    struct {{num.id}}"},
{"lineNum":"  277","line":"      {% for name, type in {"},
{"lineNum":"  278","line":"                             to_i: Int32, to_u: UInt32, to_f: Float64,"},
{"lineNum":"  279","line":"                             to_i8: Int8, to_i16: Int16, to_i32: Int32, to_i64: Int64, to_i128: Int128,"},
{"lineNum":"  280","line":"                             to_u8: UInt8, to_u16: UInt16, to_u32: UInt32, to_u64: UInt64, to_u128: UInt128,"},
{"lineNum":"  281","line":"                             to_f32: Float32, to_f64: Float64,"},
{"lineNum":"  282","line":"                           } %}"},
{"lineNum":"  283","line":"        # Returns `self` converted to `{{type}}`."},
{"lineNum":"  284","line":"        @[Primitive(:cast)]"},
{"lineNum":"  285","line":"        def {{name.id}} : {{type}}"},
{"lineNum":"  286","line":"        end"},
{"lineNum":"  287","line":"      {% end %}"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"      {% for num2 in nums %}"},
{"lineNum":"  290","line":"        {% for op, desc in {"},
{"lineNum":"  291","line":"                             \"==\" => \"equal to\","},
{"lineNum":"  292","line":"                             \"!=\" => \"not equal to\","},
{"lineNum":"  293","line":"                             \"<\"  => \"less than\","},
{"lineNum":"  294","line":"                             \"<=\" => \"less than or equal to\","},
{"lineNum":"  295","line":"                             \">\"  => \"greater than\","},
{"lineNum":"  296","line":"                             \">=\" => \"greater than or equal to\","},
{"lineNum":"  297","line":"                           } %}"},
{"lineNum":"  298","line":"          # Returns `true` if `self` is {{desc.id}} *other*."},
{"lineNum":"  299","line":"          @[Primitive(:binary)]"},
{"lineNum":"  300","line":"          def {{op.id}}(other : {{num2.id}}) : Bool"},
{"lineNum":"  301","line":"          end"},
{"lineNum":"  302","line":"        {% end %}"},
{"lineNum":"  303","line":"      {% end %}"},
{"lineNum":"  304","line":"    end"},
{"lineNum":"  305","line":"  {% end %}"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"  {% for int in ints %}"},
{"lineNum":"  308","line":"    struct {{int.id}}"},
{"lineNum":"  309","line":"      # Returns a `Char` that has the unicode codepoint of `self`,"},
{"lineNum":"  310","line":"      # without checking if this integer is in the range valid for"},
{"lineNum":"  311","line":"      # chars (`0..0x10ffff`)."},
{"lineNum":"  312","line":"      #"},
{"lineNum":"  313","line":"      # You should never use this method unless `chr` turns out to"},
{"lineNum":"  314","line":"      # be a bottleneck."},
{"lineNum":"  315","line":"      #"},
{"lineNum":"  316","line":"      # ```"},
{"lineNum":"  317","line":"      # 97.unsafe_chr # => \'a\'"},
{"lineNum":"  318","line":"      # ```"},
{"lineNum":"  319","line":"      @[Primitive(:cast)]"},
{"lineNum":"  320","line":"      def unsafe_chr : Char"},
{"lineNum":"  321","line":"      end"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"      {% for int2 in ints %}"},
{"lineNum":"  324","line":"        {% for op, desc in binaries %}"},
{"lineNum":"  325","line":"          {% if op != \"/\" %}"},
{"lineNum":"  326","line":"            # Returns the result of {{desc.id}} `self` and *other*."},
{"lineNum":"  327","line":"            @[Primitive(:binary)]"},
{"lineNum":"  328","line":"            def {{op.id}}(other : {{int2.id}}) : self"},
{"lineNum":"  329","line":"            end"},
{"lineNum":"  330","line":"          {% end %}"},
{"lineNum":"  331","line":"        {% end %}"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"        # Returns the result of performing a bitwise OR of `self`\'s and *other*\'s bits."},
{"lineNum":"  334","line":"        @[Primitive(:binary)]"},
{"lineNum":"  335","line":"        def |(other : {{int2.id}}) : self"},
{"lineNum":"  336","line":"        end"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"        # Returns the result of performing a bitwise AND of `self`\'s and *other*\'s bits."},
{"lineNum":"  339","line":"        @[Primitive(:binary)]"},
{"lineNum":"  340","line":"        def &(other : {{int2.id}}) : self"},
{"lineNum":"  341","line":"        end"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"        # Returns the result of performing a bitwise XOR of `self`\'s and *other*\'s bits."},
{"lineNum":"  344","line":"        @[Primitive(:binary)]"},
{"lineNum":"  345","line":"        def ^(other : {{int2.id}}) : self"},
{"lineNum":"  346","line":"        end"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"        # :nodoc:"},
{"lineNum":"  349","line":"        @[Primitive(:binary)]"},
{"lineNum":"  350","line":"        def unsafe_shl(other : {{int2.id}}) : self"},
{"lineNum":"  351","line":"        end"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"        # :nodoc:"},
{"lineNum":"  354","line":"        @[Primitive(:binary)]"},
{"lineNum":"  355","line":"        def unsafe_shr(other : {{int2.id}}) : self"},
{"lineNum":"  356","line":"        end"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"        # :nodoc:"},
{"lineNum":"  359","line":"        @[Primitive(:binary)]"},
{"lineNum":"  360","line":"        def unsafe_div(other : {{int2.id}}) : self"},
{"lineNum":"  361","line":"        end"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"        # :nodoc:"},
{"lineNum":"  364","line":"        @[Primitive(:binary)]"},
{"lineNum":"  365","line":"        def unsafe_mod(other : {{int2.id}}) : self"},
{"lineNum":"  366","line":"        end"},
{"lineNum":"  367","line":"      {% end %}"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"      {% for float in floats %}"},
{"lineNum":"  370","line":"        {% for op, desc in binaries %}"},
{"lineNum":"  371","line":"          # Returns the result of {{desc.id}} `self` and *other*."},
{"lineNum":"  372","line":"          @[Primitive(:binary)]"},
{"lineNum":"  373","line":"          def {{op.id}}(other : {{float.id}}) : {{float.id}}"},
{"lineNum":"  374","line":"          end"},
{"lineNum":"  375","line":"        {% end %}"},
{"lineNum":"  376","line":"      {% end %}"},
{"lineNum":"  377","line":"    end"},
{"lineNum":"  378","line":"  {% end %}"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"  {% for float in floats %}"},
{"lineNum":"  381","line":"    struct {{float.id}}"},
{"lineNum":"  382","line":"      {% for num in nums %}"},
{"lineNum":"  383","line":"        {% for op, desc in binaries %}"},
{"lineNum":"  384","line":"          # Returns the result of {{desc.id}} `self` and *other*."},
{"lineNum":"  385","line":"          @[Primitive(:binary)]"},
{"lineNum":"  386","line":"          def {{op.id}}(other : {{num.id}}) : self"},
{"lineNum":"  387","line":"          end"},
{"lineNum":"  388","line":"        {% end %}"},
{"lineNum":"  389","line":"      {% end %}"},
{"lineNum":"  390","line":"    end"},
{"lineNum":"  391","line":"  {% end %}"},
{"lineNum":"  392","line":"{% end %}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 1, "covered" : 0,};
var merged_data = [];
