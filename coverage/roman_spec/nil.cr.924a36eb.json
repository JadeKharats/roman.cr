var data = {lines:[
{"lineNum":"    1","line":"# The `Nil` type has only one possible value: `nil`."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# `nil` is commonly used to represent the absence of a value."},
{"lineNum":"    4","line":"# For example, `String#index` returns the position of the character or `nil` if it\'s not"},
{"lineNum":"    5","line":"# in the string:"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# ```"},
{"lineNum":"    8","line":"# str = \"Hello world\""},
{"lineNum":"    9","line":"# str.index \'e\' # => 1"},
{"lineNum":"   10","line":"# str.index \'a\' # => nil"},
{"lineNum":"   11","line":"# ```"},
{"lineNum":"   12","line":"#"},
{"lineNum":"   13","line":"# In the above example, trying to invoke a method on the returned value will"},
{"lineNum":"   14","line":"# give a compile time error unless both `Int32` and `Nil` define that method:"},
{"lineNum":"   15","line":"#"},
{"lineNum":"   16","line":"# ```"},
{"lineNum":"   17","line":"# str = \"Hello world\""},
{"lineNum":"   18","line":"# idx = str.index \'e\'"},
{"lineNum":"   19","line":"# idx + 1 # Error: undefined method \'+\' for Nil"},
{"lineNum":"   20","line":"# ```"},
{"lineNum":"   21","line":"#"},
{"lineNum":"   22","line":"# The language and the standard library provide short, readable, easy ways to deal with `nil`,"},
{"lineNum":"   23","line":"# such as `Object#try` and `Object#not_nil!`:"},
{"lineNum":"   24","line":"#"},
{"lineNum":"   25","line":"# ```"},
{"lineNum":"   26","line":"# str = \"Hello world\""},
{"lineNum":"   27","line":"#"},
{"lineNum":"   28","line":"# # The index of \'e\' in str or 0 if not found"},
{"lineNum":"   29","line":"# idx1 = str.index(\'e\') || 0"},
{"lineNum":"   30","line":"#"},
{"lineNum":"   31","line":"# idx2 = str.index(\'a\')"},
{"lineNum":"   32","line":"# if idx2"},
{"lineNum":"   33","line":"#   # Compiles: idx2 can\'t be nil here"},
{"lineNum":"   34","line":"#   idx2 + 1"},
{"lineNum":"   35","line":"# end"},
{"lineNum":"   36","line":"#"},
{"lineNum":"   37","line":"# # Tell the compiler that we are sure the returned"},
{"lineNum":"   38","line":"# # value is not nil: raises a runtime exception"},
{"lineNum":"   39","line":"# # if our assumption doesn\'t hold."},
{"lineNum":"   40","line":"# idx3 = str.index(\'o\').not_nil!"},
{"lineNum":"   41","line":"# ```"},
{"lineNum":"   42","line":"struct Nil"},
{"lineNum":"   43","line":"  # Returns `0_u64`. Even though `Nil` is not a `Reference` type, it is usually"},
{"lineNum":"   44","line":"  # mixed with them to form nilable types so it\'s useful to have an"},
{"lineNum":"   45","line":"  # object id for `nil`."},
{"lineNum":"   46","line":"  def object_id"},
{"lineNum":"   47","line":"    0_u64"},
{"lineNum":"   48","line":"  end"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"  # :nodoc:"},
{"lineNum":"   51","line":"  def crystal_type_id"},
{"lineNum":"   52","line":"    0"},
{"lineNum":"   53","line":"  end"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"  # Returns `true`: `Nil` has only one singleton value: `nil`."},
{"lineNum":"   56","line":"  def ==(other : Nil)"},
{"lineNum":"   57","line":"    true"},
{"lineNum":"   58","line":"  end"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"  # Returns `true`: `Nil` has only one singleton value: `nil`."},
{"lineNum":"   61","line":"  def same?(other : Nil)"},
{"lineNum":"   62","line":"    true"},
{"lineNum":"   63","line":"  end"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"  # Returns `false`."},
{"lineNum":"   66","line":"  def same?(other : Reference)"},
{"lineNum":"   67","line":"    false"},
{"lineNum":"   68","line":"  end"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"  # See `Object#hash(hasher)`"},
{"lineNum":"   71","line":"  def hash(hasher)"},
{"lineNum":"   72","line":"    hasher.nil"},
{"lineNum":"   73","line":"  end"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"  # Returns an empty string."},
{"lineNum":"   76","line":"  def to_s"},
{"lineNum":"   77","line":"    \"\""},
{"lineNum":"   78","line":"  end"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  # Doesn\'t write anything to the given `IO`."},
{"lineNum":"   81","line":"  def to_s(io : IO)"},
{"lineNum":"   82","line":"    # Nothing to do"},
{"lineNum":"   83","line":"  end"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"  # Returns `\"nil\"`."},
{"lineNum":"   86","line":"  def inspect"},
{"lineNum":"   87","line":"    \"nil\""},
{"lineNum":"   88","line":"  end"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"  # Writes `\"nil\"` to the given `IO`."},
{"lineNum":"   91","line":"  def inspect(io)"},
{"lineNum":"   92","line":"    io << \"nil\""},
{"lineNum":"   93","line":"  end"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"  # Doesn\'t yield to the block."},
{"lineNum":"   96","line":"  #"},
{"lineNum":"   97","line":"  # See also: `Object#try`."},
{"lineNum":"   98","line":"  def try(&block)"},
{"lineNum":"   99","line":"    self"},
{"lineNum":"  100","line":"  end"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"  # Raises an exception."},
{"lineNum":"  103","line":"  #"},
{"lineNum":"  104","line":"  # See also: `Object#not_nil!`."},
{"lineNum":"  105","line":"  def not_nil!","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"    raise \"Nil assertion failed\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"  end"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"  def clone"},
{"lineNum":"  110","line":"    self"},
{"lineNum":"  111","line":"  end"},
{"lineNum":"  112","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
