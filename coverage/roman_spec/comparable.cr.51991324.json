var data = {lines:[
{"lineNum":"    1","line":"# The `Comparable` mixin is used by classes whose objects may be ordered."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Including types must provide an `<=>` method, which compares the receiver against"},
{"lineNum":"    4","line":"# another object, returning `-1`, `0`, or `+1` depending on whether the receiver is less than,"},
{"lineNum":"    5","line":"# equal to, or greater than the other object."},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# `Comparable` uses `<=>` to implement the conventional comparison operators (`<`, `<=`, `==`, `>=`, and `>`)."},
{"lineNum":"    8","line":"module Comparable(T)"},
{"lineNum":"    9","line":"  # Compares this object to *other* based on the receiver’s `<=>` method, returning `true` if it returns `-1`."},
{"lineNum":"   10","line":"  def <(other : T)"},
{"lineNum":"   11","line":"    (self <=> other) < 0"},
{"lineNum":"   12","line":"  end"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"  # Compares this object to *other* based on the receiver’s `<=>` method, returning `true` if it returns `-1` or `0`."},
{"lineNum":"   15","line":"  def <=(other : T)"},
{"lineNum":"   16","line":"    (self <=> other) <= 0"},
{"lineNum":"   17","line":"  end"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"  # Compares this object to *other* based on the receiver’s `<=>` method, returning `true` if it returns `0`."},
{"lineNum":"   20","line":"  # Also returns `true` if this and *other* are the same object."},
{"lineNum":"   21","line":"  def ==(other : T)"},
{"lineNum":"   22","line":"    if self.is_a?(Reference)"},
{"lineNum":"   23","line":"      # Need to do two different comparisons because the compiler doesn\'t yet"},
{"lineNum":"   24","line":"      # restrict something like `other.is_a?(Reference) || other.is_a?(Nil)`."},
{"lineNum":"   25","line":"      # See #2461"},
{"lineNum":"   26","line":"      return true if other.is_a?(Reference) && self.same?(other)"},
{"lineNum":"   27","line":"      return true if other.is_a?(Nil) && self.same?(other)"},
{"lineNum":"   28","line":"    end"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    (self <=> other) == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   31","line":"  end"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"  # Compares this object to *other* based on the receiver’s `<=>` method, returning `true` if it returns `1`."},
{"lineNum":"   34","line":"  def >(other : T)"},
{"lineNum":"   35","line":"    (self <=> other) > 0"},
{"lineNum":"   36","line":"  end"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"  # Compares this object to *other* based on the receiver’s `<=>` method, returning `true` if it returns `1` or `0`."},
{"lineNum":"   39","line":"  def >=(other : T)"},
{"lineNum":"   40","line":"    (self <=> other) >= 0","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   41","line":"  end"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"  # Comparison operator. Returns `0` if the two objects are equal,"},
{"lineNum":"   44","line":"  # a negative number if this object is considered less than *other*,"},
{"lineNum":"   45","line":"  # or a positive number otherwise."},
{"lineNum":"   46","line":"  #"},
{"lineNum":"   47","line":"  # Subclasses define this method to provide class-specific ordering."},
{"lineNum":"   48","line":"  #"},
{"lineNum":"   49","line":"  # ```"},
{"lineNum":"   50","line":"  # # Sort in a descending way"},
{"lineNum":"   51","line":"  # [4, 7, 2].sort { |x, y| y <=> x } # => [7, 4, 2]"},
{"lineNum":"   52","line":"  # ```"},
{"lineNum":"   53","line":"  abstract def <=>(other : T)"},
{"lineNum":"   54","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
