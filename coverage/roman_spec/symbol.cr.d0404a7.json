var data = {lines:[
{"lineNum":"    1","line":"# A symbol is a constant that is identified by a name without you having to give"},
{"lineNum":"    2","line":"# it a numeric value."},
{"lineNum":"    3","line":"#"},
{"lineNum":"    4","line":"# ```"},
{"lineNum":"    5","line":"# :hello"},
{"lineNum":"    6","line":"# :welcome"},
{"lineNum":"    7","line":"# :\"123\""},
{"lineNum":"    8","line":"# :\"symbol with spaces\""},
{"lineNum":"    9","line":"# ```"},
{"lineNum":"   10","line":"#"},
{"lineNum":"   11","line":"# Internally a symbol is represented as an `Int32`, so it\'s very efficient."},
{"lineNum":"   12","line":"#"},
{"lineNum":"   13","line":"# You can\'t dynamically create symbols. When you compile your program, each symbol"},
{"lineNum":"   14","line":"# gets assigned a unique number."},
{"lineNum":"   15","line":"struct Symbol"},
{"lineNum":"   16","line":"  include Comparable(Symbol)"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"  # See `Object#hash(hasher)`"},
{"lineNum":"   19","line":"  def hash(hasher)"},
{"lineNum":"   20","line":"    hasher.symbol(self)"},
{"lineNum":"   21","line":"  end"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"  # Compares symbol with other based on `String#<=>` method. Returns `-1`, `0`"},
{"lineNum":"   24","line":"  # or `+1` depending on whether symbol is less than, equal to,"},
{"lineNum":"   25","line":"  # or greater than *other*."},
{"lineNum":"   26","line":"  #"},
{"lineNum":"   27","line":"  # See `String#<=>` for more information."},
{"lineNum":"   28","line":"  def <=>(other : Symbol)"},
{"lineNum":"   29","line":"    to_s <=> other.to_s"},
{"lineNum":"   30","line":"  end"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"  # Returns the symbol literal representation as a string."},
{"lineNum":"   33","line":"  #"},
{"lineNum":"   34","line":"  # ```"},
{"lineNum":"   35","line":"  # :crystal.inspect # => \":crystal\""},
{"lineNum":"   36","line":"  # ```"},
{"lineNum":"   37","line":"  def inspect(io : IO)"},
{"lineNum":"   38","line":"    io << \":\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    value = to_s"},
{"lineNum":"   41","line":"    if Symbol.needs_quotes?(value)"},
{"lineNum":"   42","line":"      value.inspect(io)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"    else"},
{"lineNum":"   44","line":"      value.to_s(io)"},
{"lineNum":"   45","line":"    end"},
{"lineNum":"   46","line":"  end"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"  # Appends the symbol\'s name to the passed `IO`."},
{"lineNum":"   49","line":"  #"},
{"lineNum":"   50","line":"  # ```"},
{"lineNum":"   51","line":"  # :crystal.to_s # => \"crystal\""},
{"lineNum":"   52","line":"  # ```"},
{"lineNum":"   53","line":"  def to_s(io : IO)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"    io << to_s"},
{"lineNum":"   55","line":"  end"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"  # Determines if a string needs to be quoted to be used for a symbol."},
{"lineNum":"   58","line":"  #"},
{"lineNum":"   59","line":"  # ```"},
{"lineNum":"   60","line":"  # Symbol.needs_quotes? \"string\"      # => false"},
{"lineNum":"   61","line":"  # Symbol.needs_quotes? \"long string\" # => true"},
{"lineNum":"   62","line":"  # ```"},
{"lineNum":"   63","line":"  def self.needs_quotes?(string) : Bool"},
{"lineNum":"   64","line":"    case string"},
{"lineNum":"   65","line":"    when \"+\", \"-\", \"*\", \"/\", \"==\", \"<\", \"<=\", \">\", \">=\", \"!\", \"!=\", \"=~\", \"!~\""},
{"lineNum":"   66","line":"      # Nothing"},
{"lineNum":"   67","line":"    when \"&\", \"|\", \"^\", \"~\", \"**\", \">>\", \"<<\", \"%\", \"[]\", \"<=>\", \"===\", \"[]?\", \"[]=\""},
{"lineNum":"   68","line":"      # Nothing"},
{"lineNum":"   69","line":"    else"},
{"lineNum":"   70","line":"      string.each_char_with_index do |char, i|"},
{"lineNum":"   71","line":"        if i == 0 && char.ascii_number?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   72","line":"          return true"},
{"lineNum":"   73","line":"        end"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        case char"},
{"lineNum":"   76","line":"        when .ascii_alphanumeric?, \'_\'"},
{"lineNum":"   77","line":"          # Nothing"},
{"lineNum":"   78","line":"        else"},
{"lineNum":"   79","line":"          return true"},
{"lineNum":"   80","line":"        end"},
{"lineNum":"   81","line":"      end"},
{"lineNum":"   82","line":"    end"},
{"lineNum":"   83","line":"    false"},
{"lineNum":"   84","line":"  end"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"  def clone"},
{"lineNum":"   87","line":"    self"},
{"lineNum":"   88","line":"  end"},
{"lineNum":"   89","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
