var data = {lines:[
{"lineNum":"    1","line":"require \"c/signal\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    2","line":"require \"c/unistd\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"# :nodoc:"},
{"lineNum":"    5","line":"# Singleton that runs Signal events (libevent2) in it\'s own Fiber."},
{"lineNum":"    6","line":"class Event::SignalHandler"},
{"lineNum":"    7","line":"  def self.add_handler(*args)"},
{"lineNum":"    8","line":"    instance.add_handler *args"},
{"lineNum":"    9","line":"  end"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"  def self.del_handler(signal)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   12","line":"    @@instance.try &.del_handler(signal)"},
{"lineNum":"   13","line":"  end"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"  def self.after_fork"},
{"lineNum":"   16","line":"    @@instance.try &.after_fork"},
{"lineNum":"   17","line":"  end"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"  # finish processing signals"},
{"lineNum":"   20","line":"  def self.close","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   21","line":"    @@instance.try &.close"},
{"lineNum":"   22","line":"    @@instance = nil","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   23","line":"  end"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"  private def self.instance"},
{"lineNum":"   26","line":"    @@instance ||= new","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   27","line":"  end"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"  @read_pipe : IO::FileDescriptor"},
{"lineNum":"   30","line":"  @write_pipe : IO::FileDescriptor"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"  @@write_pipe : IO::FileDescriptor?"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"  def initialize","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":"    @callbacks = Hash(Signal, (Signal ->)).new","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   36","line":"    @read_pipe, @write_pipe = IO.pipe","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"    @@write_pipe = @write_pipe","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    spawn_reader"},
{"lineNum":"   40","line":"  end"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"  # :nodoc:"},
{"lineNum":"   43","line":"  def run","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"    read_pipe = @read_pipe"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    loop do"},
{"lineNum":"   47","line":"      sig = read_pipe.read_bytes(Int32)"},
{"lineNum":"   48","line":"      handle_signal Signal.new(sig)"},
{"lineNum":"   49","line":"    end"},
{"lineNum":"   50","line":"  end"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"  def after_fork"},
{"lineNum":"   53","line":"    close"},
{"lineNum":"   54","line":"    @read_pipe, @write_pipe = IO.pipe"},
{"lineNum":"   55","line":"    @@write_pipe = @write_pipe"},
{"lineNum":"   56","line":"    spawn_reader"},
{"lineNum":"   57","line":"  end"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"  def close"},
{"lineNum":"   60","line":"    # Close writer only: reader will give EOF"},
{"lineNum":"   61","line":"    @write_pipe.close"},
{"lineNum":"   62","line":"  end"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"  def add_handler(signal : Signal, callback)"},
{"lineNum":"   65","line":"    @callbacks[signal] = callback"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    LibC.signal signal.value, ->(sig : Int32) do","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"      @@write_pipe.not_nil!.write_bytes sig"},
{"lineNum":"   69","line":"      nil"},
{"lineNum":"   70","line":"    end"},
{"lineNum":"   71","line":"  end"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  def del_handler(signal : Signal)"},
{"lineNum":"   74","line":"    if callback = @callbacks[signal]?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"      @callbacks.delete signal"},
{"lineNum":"   76","line":"    end"},
{"lineNum":"   77","line":"  end"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"  private def handle_signal(sig)"},
{"lineNum":"   80","line":"    if callback = @callbacks[sig]?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   81","line":"      callback.call sig"},
{"lineNum":"   82","line":"    else"},
{"lineNum":"   83","line":"      raise \"Missing #{sig} callback\"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   84","line":"    end"},
{"lineNum":"   85","line":"  rescue ex"},
{"lineNum":"   86","line":"    ex.inspect_with_backtrace STDERR","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"    STDERR.puts \"FATAL ERROR: uncaught signal #{sig} exception, exiting\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"    STDERR.flush","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"    LibC._exit 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"  end"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  private def spawn_reader","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"    spawn { run }"},
{"lineNum":"   94","line":"  end"},
{"lineNum":"   95","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 19, "covered" : 0,};
var merged_data = [];
