var data = {lines:[
{"lineNum":"    1","line":"require \"comparable\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"# A `Char` represents a [Unicode](http://en.wikipedia.org/wiki/Unicode) [code point](http://en.wikipedia.org/wiki/Code_point)."},
{"lineNum":"    4","line":"# It occupies 32 bits."},
{"lineNum":"    5","line":"#"},
{"lineNum":"    6","line":"# It is created by enclosing an UTF-8 character in single quotes."},
{"lineNum":"    7","line":"#"},
{"lineNum":"    8","line":"# ```"},
{"lineNum":"    9","line":"# \'a\'"},
{"lineNum":"   10","line":"# \'z\'"},
{"lineNum":"   11","line":"# \'0\'"},
{"lineNum":"   12","line":"# \'_\'"},
{"lineNum":"   13","line":"# \'あ\'"},
{"lineNum":"   14","line":"# ```"},
{"lineNum":"   15","line":"#"},
{"lineNum":"   16","line":"# You can use a backslash to denote some characters:"},
{"lineNum":"   17","line":"#"},
{"lineNum":"   18","line":"# ```"},
{"lineNum":"   19","line":"# \'\\\'\' # single quote"},
{"lineNum":"   20","line":"# \'\\\\\' # backslash"},
{"lineNum":"   21","line":"# \'\\e\' # escape"},
{"lineNum":"   22","line":"# \'\\f\' # form feed"},
{"lineNum":"   23","line":"# \'\\n\' # newline"},
{"lineNum":"   24","line":"# \'\\r\' # carriage return"},
{"lineNum":"   25","line":"# \'\\t\' # tab"},
{"lineNum":"   26","line":"# \'\\v\' # vertical tab"},
{"lineNum":"   27","line":"# ```"},
{"lineNum":"   28","line":"#","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   29","line":"# You can use a backslash followed by at most three digits to denote a code point written in octal:"},
{"lineNum":"   30","line":"#"},
{"lineNum":"   31","line":"# ```"},
{"lineNum":"   32","line":"# \'\\101\' # == \'A\'"},
{"lineNum":"   33","line":"# \'\\123\' # == \'S\'"},
{"lineNum":"   34","line":"# \'\\12\'  # == \'\\n\'"},
{"lineNum":"   35","line":"# \'\\1\'   # code point 1"},
{"lineNum":"   36","line":"# ```"},
{"lineNum":"   37","line":"#"},
{"lineNum":"   38","line":"# You can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:"},
{"lineNum":"   39","line":"#"},
{"lineNum":"   40","line":"# ```"},
{"lineNum":"   41","line":"# \'\\u0041\' # == \'A\'"},
{"lineNum":"   42","line":"# ```"},
{"lineNum":"   43","line":"#"},
{"lineNum":"   44","line":"# Or you can use curly braces and specify up to four hexadecimal numbers:"},
{"lineNum":"   45","line":"#"},
{"lineNum":"   46","line":"# ```"},
{"lineNum":"   47","line":"# \'\\u{41}\' # == \'A\'"},
{"lineNum":"   48","line":"# ```"},
{"lineNum":"   49","line":"struct Char"},
{"lineNum":"   50","line":"  include Comparable(Char)"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"  # The character representing the end of a C string."},
{"lineNum":"   53","line":"  ZERO = \'\\0\'"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"  # The maximum character."},
{"lineNum":"   56","line":"  MAX = 0x10ffff.unsafe_chr"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"  # The maximum valid codepoint for a character."},
{"lineNum":"   59","line":"  MAX_CODEPOINT = 0x10ffff"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  # The replacement character, used on invalid utf-8 byte sequences"},
{"lineNum":"   62","line":"  REPLACEMENT = \'\\ufffd\'"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"  # Returns the difference of the codepoint values of this char and *other*."},
{"lineNum":"   65","line":"  #"},
{"lineNum":"   66","line":"  # ```"},
{"lineNum":"   67","line":"  # \'a\' - \'a\' # => 0"},
{"lineNum":"   68","line":"  # \'b\' - \'a\' # => 1"},
{"lineNum":"   69","line":"  # \'c\' - \'a\' # => 2"},
{"lineNum":"   70","line":"  # ```"},
{"lineNum":"   71","line":"  def -(other : Char)"},
{"lineNum":"   72","line":"    ord - other.ord"},
{"lineNum":"   73","line":"  end"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"  # Concatenates this char and *string*."},
{"lineNum":"   76","line":"  #"},
{"lineNum":"   77","line":"  # ```"},
{"lineNum":"   78","line":"  # \'f\' + \"oo\" # => \"foo\""},
{"lineNum":"   79","line":"  # ```"},
{"lineNum":"   80","line":"  def +(str : String)"},
{"lineNum":"   81","line":"    bytesize = str.bytesize + self.bytesize"},
{"lineNum":"   82","line":"    String.new(bytesize) do |buffer|"},
{"lineNum":"   83","line":"      count = 0"},
{"lineNum":"   84","line":"      each_byte do |byte|"},
{"lineNum":"   85","line":"        buffer[count] = byte"},
{"lineNum":"   86","line":"        count += 1"},
{"lineNum":"   87","line":"      end"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"      (buffer + count).copy_from(str.to_unsafe, str.bytesize)"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"      {bytesize, str.size + 1}"},
{"lineNum":"   92","line":"    end"},
{"lineNum":"   93","line":"  end"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"  # Returns a char that has this char\'s codepoint plus *other*."},
{"lineNum":"   96","line":"  #"},
{"lineNum":"   97","line":"  # ```"},
{"lineNum":"   98","line":"  # \'a\' + 1 # => \'b\'"},
{"lineNum":"   99","line":"  # \'a\' + 2 # => \'c\'"},
{"lineNum":"  100","line":"  # ```"},
{"lineNum":"  101","line":"  def +(other : Int) : Char","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  102","line":"    (ord + other).chr"},
{"lineNum":"  103","line":"  end"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"  # Returns a char that has this char\'s codepoint minus *other*."},
{"lineNum":"  106","line":"  #"},
{"lineNum":"  107","line":"  # ```"},
{"lineNum":"  108","line":"  # \'c\' - 1 # => \'b\'"},
{"lineNum":"  109","line":"  # \'c\' - 2 # => \'a\'"},
{"lineNum":"  110","line":"  # ```"},
{"lineNum":"  111","line":"  def -(other : Int) : Char"},
{"lineNum":"  112","line":"    (ord - other).chr"},
{"lineNum":"  113","line":"  end"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"  # Implements the comparison operator."},
{"lineNum":"  116","line":"  #"},
{"lineNum":"  117","line":"  # ```"},
{"lineNum":"  118","line":"  # \'a\' <=> \'c\' # => -2"},
{"lineNum":"  119","line":"  # ```"},
{"lineNum":"  120","line":"  def <=>(other : Char)"},
{"lineNum":"  121","line":"    self - other"},
{"lineNum":"  122","line":"  end"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  # Returns `true` if this char is an ASCII character"},
{"lineNum":"  125","line":"  # (codepoint is in (0..127))"},
{"lineNum":"  126","line":"  def ascii?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"    ord < 128"},
{"lineNum":"  128","line":"  end"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"  # Returns `true` if this char is an ASCII number in specified base."},
{"lineNum":"  131","line":"  #"},
{"lineNum":"  132","line":"  # Base can be from 0 to 36 with digits from \'0\' to \'9\' and \'a\' to \'z\' or \'A\' to \'Z\'."},
{"lineNum":"  133","line":"  #"},
{"lineNum":"  134","line":"  # ```"},
{"lineNum":"  135","line":"  # \'4\'.ascii_number?     # => true"},
{"lineNum":"  136","line":"  # \'z\'.ascii_number?     # => false"},
{"lineNum":"  137","line":"  # \'z\'.ascii_number?(36) # => true"},
{"lineNum":"  138","line":"  # ```"},
{"lineNum":"  139","line":"  def ascii_number?(base : Int = 10)"},
{"lineNum":"  140","line":"    !!to_i?(base)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  141","line":"  end"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"  # Returns `true` if this char is a number according to unicode."},
{"lineNum":"  144","line":"  #"},
{"lineNum":"  145","line":"  # ```"},
{"lineNum":"  146","line":"  # \'1\'.number? # => true"},
{"lineNum":"  147","line":"  # \'a\'.number? # => false"},
{"lineNum":"  148","line":"  # ```"},
{"lineNum":"  149","line":"  def number?"},
{"lineNum":"  150","line":"    ascii? ? ascii_number? : Unicode.number?(self)"},
{"lineNum":"  151","line":"  end"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"  # Returns `true` if this char is a lowercase ASCII letter."},
{"lineNum":"  154","line":"  #"},
{"lineNum":"  155","line":"  # ```"},
{"lineNum":"  156","line":"  # \'c\'.ascii_lowercase? # => true"},
{"lineNum":"  157","line":"  # \'ç\'.lowercase?       # => true"},
{"lineNum":"  158","line":"  # \'G\'.ascii_lowercase? # => false"},
{"lineNum":"  159","line":"  # \'.\'.ascii_lowercase? # => false"},
{"lineNum":"  160","line":"  # ```"},
{"lineNum":"  161","line":"  def ascii_lowercase?"},
{"lineNum":"  162","line":"    \'a\' <= self <= \'z\'"},
{"lineNum":"  163","line":"  end"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"  # Returns `true` if this char is a lowercase letter."},
{"lineNum":"  166","line":"  #"},
{"lineNum":"  167","line":"  # ```"},
{"lineNum":"  168","line":"  # \'c\'.lowercase? # => true"},
{"lineNum":"  169","line":"  # \'ç\'.lowercase? # => true"},
{"lineNum":"  170","line":"  # \'G\'.lowercase? # => false"},
{"lineNum":"  171","line":"  # \'.\'.lowercase? # => false"},
{"lineNum":"  172","line":"  # ```"},
{"lineNum":"  173","line":"  def lowercase?"},
{"lineNum":"  174","line":"    ascii? ? ascii_lowercase? : Unicode.lowercase?(self)"},
{"lineNum":"  175","line":"  end"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"  # Returns `true` if this char is an ASCII uppercase letter."},
{"lineNum":"  178","line":"  #"},
{"lineNum":"  179","line":"  # ```"},
{"lineNum":"  180","line":"  # \'H\'.ascii_uppercase? # => true"},
{"lineNum":"  181","line":"  # \'Á\'.ascii_uppercase? # => false"},
{"lineNum":"  182","line":"  # \'c\'.ascii_uppercase? # => false"},
{"lineNum":"  183","line":"  # \'.\'.ascii_uppercase? # => false"},
{"lineNum":"  184","line":"  # ```"},
{"lineNum":"  185","line":"  def ascii_uppercase?"},
{"lineNum":"  186","line":"    \'A\' <= self <= \'Z\'"},
{"lineNum":"  187","line":"  end"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"  # Returns `true` if this char is an uppercase letter."},
{"lineNum":"  190","line":"  #"},
{"lineNum":"  191","line":"  # ```"},
{"lineNum":"  192","line":"  # \'H\'.uppercase? # => true"},
{"lineNum":"  193","line":"  # \'Á\'.uppercase? # => true"},
{"lineNum":"  194","line":"  # \'c\'.uppercase? # => false"},
{"lineNum":"  195","line":"  # \'.\'.uppercase? # => false"},
{"lineNum":"  196","line":"  # ```"},
{"lineNum":"  197","line":"  def uppercase?"},
{"lineNum":"  198","line":"    ascii? ? ascii_uppercase? : Unicode.uppercase?(self)"},
{"lineNum":"  199","line":"  end"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"  # Returns `true` if this char is an ASCII letter (\'a\' to \'z\', \'A\' to \'Z\')."},
{"lineNum":"  202","line":"  #"},
{"lineNum":"  203","line":"  # ```"},
{"lineNum":"  204","line":"  # \'c\'.ascii_letter? # => true"},
{"lineNum":"  205","line":"  # \'á\'.ascii_letter? # => false"},
{"lineNum":"  206","line":"  # \'8\'.ascii_letter? # => false"},
{"lineNum":"  207","line":"  # ```"},
{"lineNum":"  208","line":"  def ascii_letter?"},
{"lineNum":"  209","line":"    ascii_lowercase? || ascii_uppercase?"},
{"lineNum":"  210","line":"  end"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"  # Returns `true` if this char is a letter."},
{"lineNum":"  213","line":"  #"},
{"lineNum":"  214","line":"  # ```"},
{"lineNum":"  215","line":"  # \'c\'.letter? # => true"},
{"lineNum":"  216","line":"  # \'á\'.letter? # => true"},
{"lineNum":"  217","line":"  # \'8\'.letter? # => false"},
{"lineNum":"  218","line":"  # ```"},
{"lineNum":"  219","line":"  def letter?"},
{"lineNum":"  220","line":"    ascii? ? ascii_letter? : Unicode.letter?(self)"},
{"lineNum":"  221","line":"  end"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"  # Returns `true` if this char is an ASCII letter or number (\'0\' to \'9\', \'a\' to \'z\', \'A\' to \'Z\')."},
{"lineNum":"  224","line":"  #"},
{"lineNum":"  225","line":"  # ```"},
{"lineNum":"  226","line":"  # \'c\'.ascii_alphanumeric? # => true"},
{"lineNum":"  227","line":"  # \'8\'.ascii_alphanumeric? # => true"},
{"lineNum":"  228","line":"  # \'.\'.ascii_alphanumeric? # => false"},
{"lineNum":"  229","line":"  # ```"},
{"lineNum":"  230","line":"  def ascii_alphanumeric?"},
{"lineNum":"  231","line":"    ascii_letter? || ascii_number?"},
{"lineNum":"  232","line":"  end"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"  # Returns `true` if this char is a letter or a number according to unicode."},
{"lineNum":"  235","line":"  #"},
{"lineNum":"  236","line":"  # ```"},
{"lineNum":"  237","line":"  # \'c\'.alphanumeric? # => true"},
{"lineNum":"  238","line":"  # \'8\'.alphanumeric? # => true"},
{"lineNum":"  239","line":"  # \'.\'.alphanumeric? # => false"},
{"lineNum":"  240","line":"  # ```"},
{"lineNum":"  241","line":"  def alphanumeric?"},
{"lineNum":"  242","line":"    letter? || number?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"  end"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"  # Returns `true` if this char is an ASCII whitespace."},
{"lineNum":"  246","line":"  #"},
{"lineNum":"  247","line":"  # ```"},
{"lineNum":"  248","line":"  # \' \'.ascii_whitespace?  # => true","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  249","line":"  # \'\\t\'.ascii_whitespace? # => true"},
{"lineNum":"  250","line":"  # \'b\'.ascii_whitespace?  # => false"},
{"lineNum":"  251","line":"  # ```"},
{"lineNum":"  252","line":"  def ascii_whitespace?","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"    self == \' \' || 9 <= ord <= 13"},
{"lineNum":"  254","line":"  end"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"  # Returns `true` if this char is a whitespace according to unicode."},
{"lineNum":"  257","line":"  #"},
{"lineNum":"  258","line":"  # ```"},
{"lineNum":"  259","line":"  # \' \'.whitespace?  # => true"},
{"lineNum":"  260","line":"  # \'\\t\'.whitespace? # => true"},
{"lineNum":"  261","line":"  # \'b\'.whitespace?  # => false"},
{"lineNum":"  262","line":"  # ```"},
{"lineNum":"  263","line":"  def whitespace?"},
{"lineNum":"  264","line":"    ascii? ? ascii_whitespace? : Unicode.whitespace?(self)"},
{"lineNum":"  265","line":"  end"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"  # Returns `true` if this char is an ASCII hex digit (\'0\' to \'9\', \'a\' to \'z\', \'A\' to \'Z\')."},
{"lineNum":"  268","line":"  #"},
{"lineNum":"  269","line":"  # ```"},
{"lineNum":"  270","line":"  # \'5\'.hex? # => true"},
{"lineNum":"  271","line":"  # \'a\'.hex? # => true"},
{"lineNum":"  272","line":"  # \'F\'.hex? # => true"},
{"lineNum":"  273","line":"  # \'g\'.hex? # => false"},
{"lineNum":"  274","line":"  # ```"},
{"lineNum":"  275","line":"  def hex?"},
{"lineNum":"  276","line":"    ascii_number? 16"},
{"lineNum":"  277","line":"  end"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"  # Returns `true` if this char is matched by the given *sets*."},
{"lineNum":"  280","line":"  #"},
{"lineNum":"  281","line":"  # Each parameter defines a set, the character is matched against"},
{"lineNum":"  282","line":"  # the intersection of those, in other words it needs to"},
{"lineNum":"  283","line":"  # match all sets."},
{"lineNum":"  284","line":"  #"},
{"lineNum":"  285","line":"  # If a set starts with a ^, it is negated. The sequence c1-c2"},
{"lineNum":"  286","line":"  # means all characters between and including c1 and c2"},
{"lineNum":"  287","line":"  # and is known as a range."},
{"lineNum":"  288","line":"  #"},
{"lineNum":"  289","line":"  # The backslash character \\ can be used to escape ^ or - and"},
{"lineNum":"  290","line":"  # is otherwise ignored unless it appears at the end of a range"},
{"lineNum":"  291","line":"  # or the end of a a set."},
{"lineNum":"  292","line":"  #"},
{"lineNum":"  293","line":"  # ```"},
{"lineNum":"  294","line":"  # \'l\'.in_set? \"lo\"          # => true"},
{"lineNum":"  295","line":"  # \'l\'.in_set? \"lo\", \"o\"     # => false"},
{"lineNum":"  296","line":"  # \'l\'.in_set? \"hello\", \"^l\" # => false"},
{"lineNum":"  297","line":"  # \'l\'.in_set? \"j-m\"         # => true"},
{"lineNum":"  298","line":"  #"},
{"lineNum":"  299","line":"  # \'^\'.in_set? \"\\\\^aeiou\" # => true"},
{"lineNum":"  300","line":"  # \'-\'.in_set? \"a\\\\-eo\"   # => true"},
{"lineNum":"  301","line":"  #"},
{"lineNum":"  302","line":"  # \'\\\\\'.in_set? \"\\\\\"    # => true"},
{"lineNum":"  303","line":"  # \'\\\\\'.in_set? \"\\\\A\"   # => false"},
{"lineNum":"  304","line":"  # \'\\\\\'.in_set? \"X-\\\\w\" # => true"},
{"lineNum":"  305","line":"  # ```"},
{"lineNum":"  306","line":"  def in_set?(*sets : String)"},
{"lineNum":"  307","line":"    if sets.size > 1"},
{"lineNum":"  308","line":"      return sets.all? { |set| in_set?(set) }"},
{"lineNum":"  309","line":"    end"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    set = sets.first"},
{"lineNum":"  312","line":"    not_negated = true"},
{"lineNum":"  313","line":"    range = false"},
{"lineNum":"  314","line":"    previous = nil"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"    set.each_char do |char|"},
{"lineNum":"  317","line":"      case char"},
{"lineNum":"  318","line":"      when \'^\'"},
{"lineNum":"  319","line":"        unless previous # beginning of set"},
{"lineNum":"  320","line":"          not_negated = false"},
{"lineNum":"  321","line":"          previous = char"},
{"lineNum":"  322","line":"          next"},
{"lineNum":"  323","line":"        end"},
{"lineNum":"  324","line":"      when \'-\'"},
{"lineNum":"  325","line":"        if previous && previous != \'\\\\\'"},
{"lineNum":"  326","line":"          range = true"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"          if previous == \'^\' # ^- at the beginning"},
{"lineNum":"  329","line":"            previous = \'^\'"},
{"lineNum":"  330","line":"            not_negated = true"},
{"lineNum":"  331","line":"          end"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"          next"},
{"lineNum":"  334","line":"        else # at the beginning of the set or escaped"},
{"lineNum":"  335","line":"          return not_negated if self == char"},
{"lineNum":"  336","line":"        end"},
{"lineNum":"  337","line":"      end"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"      if range && previous"},
{"lineNum":"  340","line":"        raise ArgumentError.new \"Invalid range #{previous}-#{char}\" if previous > char"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"        return not_negated if previous <= self <= char"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"        range = false"},
{"lineNum":"  345","line":"      elsif char != \'\\\\\'"},
{"lineNum":"  346","line":"        return not_negated if self == char"},
{"lineNum":"  347","line":"      end"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"      previous = char"},
{"lineNum":"  350","line":"    end"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    return not_negated if range && self == \'-\'"},
{"lineNum":"  353","line":"    return not_negated if previous == \'\\\\\' && self == previous"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    !not_negated"},
{"lineNum":"  356","line":"  end"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"  # Returns the downcase equivalent of this char."},
{"lineNum":"  359","line":"  #"},
{"lineNum":"  360","line":"  # Note that this only works for characters whose downcase"},
{"lineNum":"  361","line":"  # equivalent yields a single codepoint. There are a few"},
{"lineNum":"  362","line":"  # characters, like \'İ\', than when downcased result in multiple"},
{"lineNum":"  363","line":"  # characters (in this case: \'I\' and the dot mark)."},
{"lineNum":"  364","line":"  #"},
{"lineNum":"  365","line":"  # For a more correct method see the method that receives a block."},
{"lineNum":"  366","line":"  #"},
{"lineNum":"  367","line":"  # ```"},
{"lineNum":"  368","line":"  # \'Z\'.downcase # => \'z\'"},
{"lineNum":"  369","line":"  # \'x\'.downcase # => \'x\'"},
{"lineNum":"  370","line":"  # \'.\'.downcase # => \'.\'"},
{"lineNum":"  371","line":"  # ```"},
{"lineNum":"  372","line":"  def downcase(options = Unicode::CaseOptions::None)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  373","line":"    Unicode.downcase(self, options)"},
{"lineNum":"  374","line":"  end"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"  # Yields each char for the downcase equivalent of this char."},
{"lineNum":"  377","line":"  #"},
{"lineNum":"  378","line":"  # This method takes into account the possibility that an downcase"},
{"lineNum":"  379","line":"  # version of a char might result in multiple chars, like for"},
{"lineNum":"  380","line":"  # \'İ\', which results in \'i\' and a dot mark."},
{"lineNum":"  381","line":"  def downcase(options = Unicode::CaseOptions::None)"},
{"lineNum":"  382","line":"    Unicode.downcase(self, options) { |char| yield char }"},
{"lineNum":"  383","line":"  end"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"  # Returns the upcase equivalent of this char."},
{"lineNum":"  386","line":"  #"},
{"lineNum":"  387","line":"  # Note that this only works for characters whose upcase"},
{"lineNum":"  388","line":"  # equivalent yields a single codepoint. There are a few"},
{"lineNum":"  389","line":"  # characters, like \'ﬄ\', than when upcased result in multiple"},
{"lineNum":"  390","line":"  # characters (in this case: \'F\', \'F\', \'L\')."},
{"lineNum":"  391","line":"  #"},
{"lineNum":"  392","line":"  # For a more correct method see the method that receives a block."},
{"lineNum":"  393","line":"  #"},
{"lineNum":"  394","line":"  # ```"},
{"lineNum":"  395","line":"  # \'z\'.upcase # => \'Z\'"},
{"lineNum":"  396","line":"  # \'X\'.upcase # => \'X\'"},
{"lineNum":"  397","line":"  # \'.\'.upcase # => \'.\'"},
{"lineNum":"  398","line":"  # ```"},
{"lineNum":"  399","line":"  def upcase(options = Unicode::CaseOptions::None)"},
{"lineNum":"  400","line":"    Unicode.upcase(self, options)"},
{"lineNum":"  401","line":"  end"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"  # Yields each char for the upcase equivalent of this char."},
{"lineNum":"  404","line":"  #"},
{"lineNum":"  405","line":"  # This method takes into account the possibility that an upcase"},
{"lineNum":"  406","line":"  # version of a char might result in multiple chars, like for"},
{"lineNum":"  407","line":"  # \'ﬄ\', which results in \'F\', \'F\' and \'L\'."},
{"lineNum":"  408","line":"  #"},
{"lineNum":"  409","line":"  # ```"},
{"lineNum":"  410","line":"  # \'z\'.upcase { |v| puts v } # prints \'Z\'"},
{"lineNum":"  411","line":"  # \'ﬄ\'.upcase { |v| puts v } # prints \'F\', \'F\', \'L\'"},
{"lineNum":"  412","line":"  # ```"},
{"lineNum":"  413","line":"  def upcase(options = Unicode::CaseOptions::None)"},
{"lineNum":"  414","line":"    Unicode.upcase(self, options) { |char| yield char }"},
{"lineNum":"  415","line":"  end"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"  # See `Object#hash(hasher)`"},
{"lineNum":"  418","line":"  def hash(hasher)"},
{"lineNum":"  419","line":"    hasher.char(self)"},
{"lineNum":"  420","line":"  end"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"  # Returns a Char that is one codepoint bigger than this char\'s codepoint."},
{"lineNum":"  423","line":"  #"},
{"lineNum":"  424","line":"  # ```"},
{"lineNum":"  425","line":"  # \'a\'.succ # => \'b\'"},
{"lineNum":"  426","line":"  # \'あ\'.succ # => \'ぃ\'"},
{"lineNum":"  427","line":"  # ```"},
{"lineNum":"  428","line":"  #"},
{"lineNum":"  429","line":"  # This method allows creating a `Range` of chars."},
{"lineNum":"  430","line":"  def succ"},
{"lineNum":"  431","line":"    (ord + 1).chr"},
{"lineNum":"  432","line":"  end"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"  # Returns a Char that is one codepoint smaller than this char\'s codepoint."},
{"lineNum":"  435","line":"  #"},
{"lineNum":"  436","line":"  # ```"},
{"lineNum":"  437","line":"  # \'b\'.pred # => \'a\'"},
{"lineNum":"  438","line":"  # \'ぃ\'.pred # => \'あ\'"},
{"lineNum":"  439","line":"  # ```"},
{"lineNum":"  440","line":"  def pred"},
{"lineNum":"  441","line":"    (ord - 1).chr"},
{"lineNum":"  442","line":"  end"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"  # Returns `true` if this char is an ASCII control character."},
{"lineNum":"  445","line":"  #"},
{"lineNum":"  446","line":"  # ```"},
{"lineNum":"  447","line":"  # (\'\\u0000\'..\'\\u0019\').each do |char|"},
{"lineNum":"  448","line":"  #   char.control? # => true"},
{"lineNum":"  449","line":"  # end"},
{"lineNum":"  450","line":"  #"},
{"lineNum":"  451","line":"  # (\'\\u007F\'..\'\\u009F\').each do |char|"},
{"lineNum":"  452","line":"  #   char.control? # => true"},
{"lineNum":"  453","line":"  # end"},
{"lineNum":"  454","line":"  # ```"},
{"lineNum":"  455","line":"  def ascii_control?"},
{"lineNum":"  456","line":"    ord < 0x20 || (0x7F <= ord <= 0x9F)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  457","line":"  end"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"  # Returns `true` if this char is a control character according to unicode."},
{"lineNum":"  460","line":"  def control?"},
{"lineNum":"  461","line":"    ascii? ? ascii_control? : Unicode.control?(self)"},
{"lineNum":"  462","line":"  end"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"  # Returns `true` if this is char is a mark character according to unicode."},
{"lineNum":"  465","line":"  def mark?"},
{"lineNum":"  466","line":"    Unicode.mark?(self)"},
{"lineNum":"  467","line":"  end"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"  # Returns this char as a string that contains a char literal."},
{"lineNum":"  470","line":"  #"},
{"lineNum":"  471","line":"  # ```"},
{"lineNum":"  472","line":"  # \'a\'.inspect      # => \"\'a\'\""},
{"lineNum":"  473","line":"  # \'\\t\'.inspect     # => \"\'\\\\t\'\""},
{"lineNum":"  474","line":"  # \'あ\'.inspect      # => \"\'あ\'\""},
{"lineNum":"  475","line":"  # \'\\u0012\'.inspect # => \"\'\\\\u{12}\'\""},
{"lineNum":"  476","line":"  # ```"},
{"lineNum":"  477","line":"  def inspect"},
{"lineNum":"  478","line":"    dump_or_inspect do |io|"},
{"lineNum":"  479","line":"      if ascii_control?"},
{"lineNum":"  480","line":"        io << \"\\\\u{\""},
{"lineNum":"  481","line":"        ord.to_s(16, io)"},
{"lineNum":"  482","line":"        io << \"}\""},
{"lineNum":"  483","line":"      else"},
{"lineNum":"  484","line":"        to_s(io)"},
{"lineNum":"  485","line":"      end"},
{"lineNum":"  486","line":"    end"},
{"lineNum":"  487","line":"  end"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"  # Appends this char as a string that contains a char literal to the given `IO`."},
{"lineNum":"  490","line":"  #"},
{"lineNum":"  491","line":"  # See also: `#inspect`."},
{"lineNum":"  492","line":"  def inspect(io)"},
{"lineNum":"  493","line":"    io << inspect"},
{"lineNum":"  494","line":"  end"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"  # Returns this char as a string that contains a char literal as written in Crystal,"},
{"lineNum":"  497","line":"  # with characters with a codepoint greater than `0x79` written as `\\u{...}`."},
{"lineNum":"  498","line":"  #"},
{"lineNum":"  499","line":"  # ```"},
{"lineNum":"  500","line":"  # \'a\'.dump      # => \"\'a\'\""},
{"lineNum":"  501","line":"  # \'\\t\'.dump     # => \"\'\\\\t\'\""},
{"lineNum":"  502","line":"  # \'あ\'.dump      # => \"\'\\\\u{3042}\'\""},
{"lineNum":"  503","line":"  # \'\\u0012\'.dump # => \"\'\\\\u{12}\'\""},
{"lineNum":"  504","line":"  # ```"},
{"lineNum":"  505","line":"  def dump","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  506","line":"    dump_or_inspect do |io|"},
{"lineNum":"  507","line":"      if ascii_control? || ord >= 0x80"},
{"lineNum":"  508","line":"        io << \"\\\\u{\""},
{"lineNum":"  509","line":"        ord.to_s(16, io)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  510","line":"        io << \"}\""},
{"lineNum":"  511","line":"      else"},
{"lineNum":"  512","line":"        to_s(io)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  513","line":"      end"},
{"lineNum":"  514","line":"    end"},
{"lineNum":"  515","line":"  end"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"  # Appends this char as a string that contains a char literal to the given `IO`."},
{"lineNum":"  518","line":"  #"},
{"lineNum":"  519","line":"  # See also: `#dump`."},
{"lineNum":"  520","line":"  def dump(io)"},
{"lineNum":"  521","line":"    io << \'\\\'\'"},
{"lineNum":"  522","line":"    io << dump"},
{"lineNum":"  523","line":"    io << \'\\\'\'"},
{"lineNum":"  524","line":"  end"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"  private def dump_or_inspect"},
{"lineNum":"  527","line":"    case self"},
{"lineNum":"  528","line":"    when \'\\\'\' then \"\'\\\\\'\'\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  529","line":"    when \'\\\\\' then \"\'\\\\\\\\\'\""},
{"lineNum":"  530","line":"    when \'\\e\' then \"\'\\\\e\'\""},
{"lineNum":"  531","line":"    when \'\\f\' then \"\'\\\\f\'\""},
{"lineNum":"  532","line":"    when \'\\n\' then \"\'\\\\n\'\""},
{"lineNum":"  533","line":"    when \'\\r\' then \"\'\\\\r\'\""},
{"lineNum":"  534","line":"    when \'\\t\' then \"\'\\\\t\'\""},
{"lineNum":"  535","line":"    when \'\\v\' then \"\'\\\\v\'\""},
{"lineNum":"  536","line":"    else"},
{"lineNum":"  537","line":"      String.build do |io|"},
{"lineNum":"  538","line":"        io << \'\\\'\'"},
{"lineNum":"  539","line":"        yield io"},
{"lineNum":"  540","line":"        io << \'\\\'\'"},
{"lineNum":"  541","line":"      end"},
{"lineNum":"  542","line":"    end"},
{"lineNum":"  543","line":"  end"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"  # Returns the integer value of this char if it\'s an ASCII char denoting a digit"},
{"lineNum":"  546","line":"  # in *base*, raises otherwise."},
{"lineNum":"  547","line":"  #"},
{"lineNum":"  548","line":"  # ```"},
{"lineNum":"  549","line":"  # \'1\'.to_i     # => 1"},
{"lineNum":"  550","line":"  # \'8\'.to_i     # => 8"},
{"lineNum":"  551","line":"  # \'c\'.to_i     # raises ArgumentError"},
{"lineNum":"  552","line":"  # \'1\'.to_i(16) # => 1"},
{"lineNum":"  553","line":"  # \'a\'.to_i(16) # => 10"},
{"lineNum":"  554","line":"  # \'f\'.to_i(16) # => 15"},
{"lineNum":"  555","line":"  # \'z\'.to_i(16) # raises ArgumentError"},
{"lineNum":"  556","line":"  # ```"},
{"lineNum":"  557","line":"  def to_i(base : Int = 10) : Int32"},
{"lineNum":"  558","line":"    to_i?(base) || raise ArgumentError.new(\"Invalid integer: #{self}\")"},
{"lineNum":"  559","line":"  end"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"  # Returns the integer value of this char if it\'s an ASCII char denoting a digit"},
{"lineNum":"  562","line":"  # in *base*, `nil` otherwise."},
{"lineNum":"  563","line":"  #"},
{"lineNum":"  564","line":"  # ```"},
{"lineNum":"  565","line":"  # \'1\'.to_i     # => 1"},
{"lineNum":"  566","line":"  # \'8\'.to_i     # => 8"},
{"lineNum":"  567","line":"  # \'c\'.to_i     # raises ArgumentError"},
{"lineNum":"  568","line":"  # \'1\'.to_i(16) # => 1"},
{"lineNum":"  569","line":"  # \'a\'.to_i(16) # => 10"},
{"lineNum":"  570","line":"  # \'f\'.to_i(16) # => 15"},
{"lineNum":"  571","line":"  # \'z\'.to_i(16) # raises ArgumentError"},
{"lineNum":"  572","line":"  # ```"},
{"lineNum":"  573","line":"  def to_i?(base : Int = 10) : Int32?"},
{"lineNum":"  574","line":"    raise ArgumentError.new \"Invalid base #{base}, expected 2 to 36\" unless 2 <= base <= 36"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"    if base == 10"},
{"lineNum":"  577","line":"      return unless \'0\' <= self <= \'9\'"},
{"lineNum":"  578","line":"      self - \'0\'"},
{"lineNum":"  579","line":"    else"},
{"lineNum":"  580","line":"      ord = ord()"},
{"lineNum":"  581","line":"      if 0 <= ord < 256"},
{"lineNum":"  582","line":"        digit = String::CHAR_TO_DIGIT.to_unsafe[ord]"},
{"lineNum":"  583","line":"        return if digit == -1 || digit >= base"},
{"lineNum":"  584","line":"        digit.to_i32"},
{"lineNum":"  585","line":"      end"},
{"lineNum":"  586","line":"    end"},
{"lineNum":"  587","line":"  end"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"  # Same as `to_i`."},
{"lineNum":"  590","line":"  def to_i32(base : Int = 10) : Int32"},
{"lineNum":"  591","line":"    to_i(base)"},
{"lineNum":"  592","line":"  end"},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"  # Same as `to_i?`."},
{"lineNum":"  595","line":"  def to_i32?(base : Int = 10) : Int32?"},
{"lineNum":"  596","line":"    to_i?(base)"},
{"lineNum":"  597","line":"  end"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"  {% for type in %w(i8 i16 i64 u8 u16 u32 u64) %}"},
{"lineNum":"  600","line":"    # See also: `to_i`."},
{"lineNum":"  601","line":"    def to_{{type.id}}(base : Int = 10)"},
{"lineNum":"  602","line":"      to_i(base).to_{{type.id}}"},
{"lineNum":"  603","line":"    end"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"    # See also: `to_i?`."},
{"lineNum":"  606","line":"    def to_{{type.id}}?(base : Int = 10)"},
{"lineNum":"  607","line":"      to_i?(base).try &.to_{{type.id}}"},
{"lineNum":"  608","line":"    end"},
{"lineNum":"  609","line":"  {% end %}"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"  # Returns the integer value of this char as a float if it\'s an ASCII char denoting a digit,"},
{"lineNum":"  612","line":"  # raises otherwise."},
{"lineNum":"  613","line":"  #"},
{"lineNum":"  614","line":"  # ```"},
{"lineNum":"  615","line":"  # \'1\'.to_i # => 1.0"},
{"lineNum":"  616","line":"  # \'8\'.to_i # => 8.0"},
{"lineNum":"  617","line":"  # \'c\'.to_i # raises ArgumentError"},
{"lineNum":"  618","line":"  # ```"},
{"lineNum":"  619","line":"  def to_f"},
{"lineNum":"  620","line":"    to_f64"},
{"lineNum":"  621","line":"  end"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"  # Returns the integer value of this char as a float if it\'s an ASCII char denoting a digit,"},
{"lineNum":"  624","line":"  # `nil` otherwise."},
{"lineNum":"  625","line":"  #"},
{"lineNum":"  626","line":"  # ```"},
{"lineNum":"  627","line":"  # \'1\'.to_i # => 1.0"},
{"lineNum":"  628","line":"  # \'8\'.to_i # => 8.0"},
{"lineNum":"  629","line":"  # \'c\'.to_i # raises ArgumentError"},
{"lineNum":"  630","line":"  # ```"},
{"lineNum":"  631","line":"  def to_f?"},
{"lineNum":"  632","line":"    to_f64?"},
{"lineNum":"  633","line":"  end"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"  # See also: `to_f`."},
{"lineNum":"  636","line":"  def to_f32"},
{"lineNum":"  637","line":"    to_i.to_f32"},
{"lineNum":"  638","line":"  end"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"  # See also: `to_f?`."},
{"lineNum":"  641","line":"  def to_f32?"},
{"lineNum":"  642","line":"    to_i?.try &.to_f32"},
{"lineNum":"  643","line":"  end"},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"  # Same as `to_f`."},
{"lineNum":"  646","line":"  def to_f64"},
{"lineNum":"  647","line":"    to_i.to_f64"},
{"lineNum":"  648","line":"  end"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"  # Same as `to_f?`."},
{"lineNum":"  651","line":"  def to_f64?"},
{"lineNum":"  652","line":"    to_i?.try &.to_f64"},
{"lineNum":"  653","line":"  end"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"  # Yields each of the bytes of this char as encoded by UTF-8."},
{"lineNum":"  656","line":"  #"},
{"lineNum":"  657","line":"  # ```"},
{"lineNum":"  658","line":"  # puts \"\'a\'\""},
{"lineNum":"  659","line":"  # \'a\'.each_byte do |byte|"},
{"lineNum":"  660","line":"  #   puts byte"},
{"lineNum":"  661","line":"  # end"},
{"lineNum":"  662","line":"  # puts"},
{"lineNum":"  663","line":"  #"},
{"lineNum":"  664","line":"  # puts \"\'あ\'\""},
{"lineNum":"  665","line":"  # \'あ\'.each_byte do |byte|"},
{"lineNum":"  666","line":"  #   puts byte"},
{"lineNum":"  667","line":"  # end"},
{"lineNum":"  668","line":"  # ```"},
{"lineNum":"  669","line":"  #"},
{"lineNum":"  670","line":"  # Output:"},
{"lineNum":"  671","line":"  #"},
{"lineNum":"  672","line":"  # ```text"},
{"lineNum":"  673","line":"  # \'a\'"},
{"lineNum":"  674","line":"  # 97"},
{"lineNum":"  675","line":"  #"},
{"lineNum":"  676","line":"  # \'あ\'"},
{"lineNum":"  677","line":"  # 227"},
{"lineNum":"  678","line":"  # 129"},
{"lineNum":"  679","line":"  # 130"},
{"lineNum":"  680","line":"  # ```"},
{"lineNum":"  681","line":"  def each_byte : Nil"},
{"lineNum":"  682","line":"    # See http://en.wikipedia.org/wiki/UTF-8#Sample_code"},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"    c = ord"},
{"lineNum":"  685","line":"    if c < 0x80","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  686","line":"      # 0xxxxxxx"},
{"lineNum":"  687","line":"      yield c.to_u8"},
{"lineNum":"  688","line":"    elsif c <= 0x7ff"},
{"lineNum":"  689","line":"      # 110xxxxx  10xxxxxx"},
{"lineNum":"  690","line":"      yield (0xc0 | c >> 6).to_u8","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  691","line":"      yield (0x80 | c & 0x3f).to_u8"},
{"lineNum":"  692","line":"    elsif c <= 0xffff"},
{"lineNum":"  693","line":"      # 1110xxxx  10xxxxxx  10xxxxxx"},
{"lineNum":"  694","line":"      yield (0xe0 | (c >> 12)).to_u8","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  695","line":"      yield (0x80 | ((c >> 6) & 0x3f)).to_u8","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  696","line":"      yield (0x80 | (c & 0x3f)).to_u8"},
{"lineNum":"  697","line":"    elsif c <= MAX_CODEPOINT"},
{"lineNum":"  698","line":"      # 11110xxx  10xxxxxx  10xxxxxx  10xxxxxx"},
{"lineNum":"  699","line":"      yield (0xf0 | (c >> 18)).to_u8","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  700","line":"      yield (0x80 | ((c >> 12) & 0x3f)).to_u8","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  701","line":"      yield (0x80 | ((c >> 6) & 0x3f)).to_u8","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  702","line":"      yield (0x80 | (c & 0x3f)).to_u8"},
{"lineNum":"  703","line":"    else"},
{"lineNum":"  704","line":"      raise InvalidByteSequenceError.new(\"Invalid char value #{dump}\")","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  705","line":"    end"},
{"lineNum":"  706","line":"  end"},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"  # Returns the number of UTF-8 bytes in this char."},
{"lineNum":"  709","line":"  #"},
{"lineNum":"  710","line":"  # ```"},
{"lineNum":"  711","line":"  # \'a\'.bytesize # => 1"},
{"lineNum":"  712","line":"  # \'好\'.bytesize # => 3"},
{"lineNum":"  713","line":"  # ```"},
{"lineNum":"  714","line":"  def bytesize"},
{"lineNum":"  715","line":"    # See http://en.wikipedia.org/wiki/UTF-8#Sample_code"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"    c = ord"},
{"lineNum":"  718","line":"    if c < 0x80"},
{"lineNum":"  719","line":"      # 0xxxxxxx"},
{"lineNum":"  720","line":"      1"},
{"lineNum":"  721","line":"    elsif c <= 0x7ff"},
{"lineNum":"  722","line":"      # 110xxxxx  10xxxxxx"},
{"lineNum":"  723","line":"      2"},
{"lineNum":"  724","line":"    elsif c <= 0xffff"},
{"lineNum":"  725","line":"      # 1110xxxx  10xxxxxx  10xxxxxx"},
{"lineNum":"  726","line":"      3"},
{"lineNum":"  727","line":"    elsif c <= MAX_CODEPOINT"},
{"lineNum":"  728","line":"      # 11110xxx  10xxxxxx  10xxxxxx  10xxxxxx"},
{"lineNum":"  729","line":"      4"},
{"lineNum":"  730","line":"    else"},
{"lineNum":"  731","line":"      raise InvalidByteSequenceError.new(\"Invalid char value #{dump}\")"},
{"lineNum":"  732","line":"    end"},
{"lineNum":"  733","line":"  end"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"  # Returns this char bytes as encoded by UTF-8, as an `Array(UInt8)`."},
{"lineNum":"  736","line":"  #"},
{"lineNum":"  737","line":"  # ```"},
{"lineNum":"  738","line":"  # \'a\'.bytes # => [97]"},
{"lineNum":"  739","line":"  # \'あ\'.bytes # => [227, 129, 130]"},
{"lineNum":"  740","line":"  # ```"},
{"lineNum":"  741","line":"  def bytes"},
{"lineNum":"  742","line":"    bytes = [] of UInt8"},
{"lineNum":"  743","line":"    each_byte do |byte|"},
{"lineNum":"  744","line":"      bytes << byte"},
{"lineNum":"  745","line":"    end"},
{"lineNum":"  746","line":"    bytes"},
{"lineNum":"  747","line":"  end"},
{"lineNum":"  748","line":""},
{"lineNum":"  749","line":"  # Returns this char as a string containing this char as a single character."},
{"lineNum":"  750","line":"  #"},
{"lineNum":"  751","line":"  # ```"},
{"lineNum":"  752","line":"  # \'a\'.to_s # => \"a\""},
{"lineNum":"  753","line":"  # \'あ\'.to_s # => \"あ\""},
{"lineNum":"  754","line":"  # ```"},
{"lineNum":"  755","line":"  def to_s","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  756","line":"    String.new(4) do |buffer|"},
{"lineNum":"  757","line":"      appender = buffer.appender"},
{"lineNum":"  758","line":"      each_byte { |byte| appender << byte }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  759","line":"      {appender.size, 1}"},
{"lineNum":"  760","line":"    end"},
{"lineNum":"  761","line":"  end"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"  # Appends this char to the given `IO`."},
{"lineNum":"  764","line":"  #"},
{"lineNum":"  765","line":"  # This appends this char\'s bytes as encoded by UTF-8 to the given `IO`."},
{"lineNum":"  766","line":"  def to_s(io : IO)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  767","line":"    if ascii?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  768","line":"      byte = ord.to_u8","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"      # Optimization: writing a slice is much slower than writing a byte"},
{"lineNum":"  771","line":"      if io.@encoding","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  772","line":"        io.write_utf8 Slice.new(pointerof(byte), 1)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  773","line":"      else"},
{"lineNum":"  774","line":"        io.write_byte byte","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  775","line":"      end"},
{"lineNum":"  776","line":"    else"},
{"lineNum":"  777","line":"      chars = uninitialized UInt8[4]"},
{"lineNum":"  778","line":"      i = 0"},
{"lineNum":"  779","line":"      each_byte do |byte|"},
{"lineNum":"  780","line":"        chars[i] = byte"},
{"lineNum":"  781","line":"        i += 1","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  782","line":"      end"},
{"lineNum":"  783","line":"      io.write_utf8 chars.to_slice[0, i]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  784","line":"    end"},
{"lineNum":"  785","line":"  end"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"  # Returns `true` if the codepoint is equal to *byte* ignoring the type."},
{"lineNum":"  788","line":"  #"},
{"lineNum":"  789","line":"  # ```"},
{"lineNum":"  790","line":"  # \'c\'.ord       # => 99"},
{"lineNum":"  791","line":"  # \'c\' === 99_u8 # => true"},
{"lineNum":"  792","line":"  # \'c\' === 99    # => true"},
{"lineNum":"  793","line":"  # \'z\' === 99    # => false"},
{"lineNum":"  794","line":"  # ```"},
{"lineNum":"  795","line":"  def ===(byte : Int)"},
{"lineNum":"  796","line":"    ord === byte"},
{"lineNum":"  797","line":"  end"},
{"lineNum":"  798","line":""},
{"lineNum":"  799","line":"  def clone"},
{"lineNum":"  800","line":"    self"},
{"lineNum":"  801","line":"  end"},
{"lineNum":"  802","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 31, "covered" : 0,};
var merged_data = [];
