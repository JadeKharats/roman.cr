var data = {lines:[
{"lineNum":"    1","line":"require \"c/fcntl\""},
{"lineNum":"    2","line":"require \"c/stdio\""},
{"lineNum":"    3","line":"require \"c/stdlib\""},
{"lineNum":"    4","line":"require \"c/sys/stat\""},
{"lineNum":"    5","line":"require \"c/unistd\""},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"class File < IO::FileDescriptor"},
{"lineNum":"    8","line":"  # The file/directory separator character. `\'/\'` in Unix, `\'\\\\\'` in Windows."},
{"lineNum":"    9","line":"  SEPARATOR = {% if flag?(:windows) %}"},
{"lineNum":"   10","line":"    \'\\\\\'","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   11","line":"  {% else %}"},
{"lineNum":"   12","line":"    \'/\'"},
{"lineNum":"   13","line":"  {% end %}"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"  # The file/directory separator string. `\"/\"` in Unix, `\"\\\\\"` in Windows."},
{"lineNum":"   16","line":"  SEPARATOR_STRING = {% if flag?(:windows) %}"},
{"lineNum":"   17","line":"    \"\\\\\""},
{"lineNum":"   18","line":"  {% else %}"},
{"lineNum":"   19","line":"    \"/\""},
{"lineNum":"   20","line":"  {% end %}"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"  # :nodoc:"},
{"lineNum":"   23","line":"  DEFAULT_CREATE_MODE = LibC::S_IRUSR | LibC::S_IWUSR | LibC::S_IRGRP | LibC::S_IROTH"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"  def initialize(filename : String, mode = \"r\", perm = DEFAULT_CREATE_MODE, encoding = nil, invalid = nil)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   26","line":"    oflag = open_flag(mode) | LibC::O_CLOEXEC","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    fd = LibC.open(filename.check_no_null_byte, oflag, perm)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   29","line":"    if fd < 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"      raise Errno.new(\"Error opening file \'#{filename}\' with mode \'#{mode}\'\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":"    end"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    @path = filename","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"    self.set_encoding(encoding, invalid: invalid) if encoding"},
{"lineNum":"   35","line":"    super(fd, blocking: true)"},
{"lineNum":"   36","line":"  end"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"  protected def open_flag(mode)"},
{"lineNum":"   39","line":"    if mode.size == 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   40","line":"      raise \"Invalid access mode #{mode}\""},
{"lineNum":"   41","line":"    end"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    m = 0"},
{"lineNum":"   44","line":"    o = 0"},
{"lineNum":"   45","line":"    case mode[0]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"    when \'r\'","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   47","line":"      m = LibC::O_RDONLY"},
{"lineNum":"   48","line":"    when \'w\'"},
{"lineNum":"   49","line":"      m = LibC::O_WRONLY"},
{"lineNum":"   50","line":"      o = LibC::O_CREAT | LibC::O_TRUNC"},
{"lineNum":"   51","line":"    when \'a\'"},
{"lineNum":"   52","line":"      m = LibC::O_WRONLY"},
{"lineNum":"   53","line":"      o = LibC::O_CREAT | LibC::O_APPEND"},
{"lineNum":"   54","line":"    else"},
{"lineNum":"   55","line":"      raise \"Invalid access mode #{mode}\""},
{"lineNum":"   56","line":"    end"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    case mode.size"},
{"lineNum":"   59","line":"    when 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"      # Nothing"},
{"lineNum":"   61","line":"    when 2"},
{"lineNum":"   62","line":"      case mode[1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"      when \'+\'","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"        m = LibC::O_RDWR"},
{"lineNum":"   65","line":"      when \'b\'"},
{"lineNum":"   66","line":"        # Nothing"},
{"lineNum":"   67","line":"      else"},
{"lineNum":"   68","line":"        raise \"Invalid access mode #{mode}\""},
{"lineNum":"   69","line":"      end"},
{"lineNum":"   70","line":"    else"},
{"lineNum":"   71","line":"      raise \"Invalid access mode #{mode}\""},
{"lineNum":"   72","line":"    end"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    oflag = m | o"},
{"lineNum":"   75","line":"  end"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  getter path : String"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"  # Returns a `File::Stat` object for the file given by *path* or raises"},
{"lineNum":"   80","line":"  # `Errno` in case of an error. In case of a symbolic link"},
{"lineNum":"   81","line":"  # it is followed and information about the target is returned."},
{"lineNum":"   82","line":"  #"},
{"lineNum":"   83","line":"  # ```"},
{"lineNum":"   84","line":"  # File.write(\"foo\", \"foo\")"},
{"lineNum":"   85","line":"  # File.stat(\"foo\").size  # => 3"},
{"lineNum":"   86","line":"  # File.stat(\"foo\").mtime # => 2015-09-23 06:24:19 UTC"},
{"lineNum":"   87","line":"  # ```"},
{"lineNum":"   88","line":"  def self.stat(path) : Stat"},
{"lineNum":"   89","line":"    if LibC.stat(path.check_no_null_byte, out stat) != 0"},
{"lineNum":"   90","line":"      raise Errno.new(\"Unable to get stat for \'#{path}\'\")"},
{"lineNum":"   91","line":"    end"},
{"lineNum":"   92","line":"    Stat.new(stat)"},
{"lineNum":"   93","line":"  end"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"  # Returns a `File::Stat` object for the file given by *path* or raises"},
{"lineNum":"   96","line":"  # `Errno` in case of an error. In case of a symbolic link"},
{"lineNum":"   97","line":"  # information about it is returned."},
{"lineNum":"   98","line":"  #"},
{"lineNum":"   99","line":"  # ```"},
{"lineNum":"  100","line":"  # File.write(\"foo\", \"foo\")"},
{"lineNum":"  101","line":"  # File.lstat(\"foo\").size  # => 3"},
{"lineNum":"  102","line":"  # File.lstat(\"foo\").mtime # => 2015-09-23 06:24:19 UTC"},
{"lineNum":"  103","line":"  # ```"},
{"lineNum":"  104","line":"  def self.lstat(path) : Stat"},
{"lineNum":"  105","line":"    if LibC.lstat(path.check_no_null_byte, out stat) != 0"},
{"lineNum":"  106","line":"      raise Errno.new(\"Unable to get lstat for \'#{path}\'\")"},
{"lineNum":"  107","line":"    end"},
{"lineNum":"  108","line":"    Stat.new(stat)"},
{"lineNum":"  109","line":"  end"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"  # Returns `true` if *path* exists else returns `false`"},
{"lineNum":"  112","line":"  #"},
{"lineNum":"  113","line":"  # ```"},
{"lineNum":"  114","line":"  # File.delete(\"foo\") if File.exists?(\"foo\")"},
{"lineNum":"  115","line":"  # File.exists?(\"foo\") # => false"},
{"lineNum":"  116","line":"  # File.write(\"foo\", \"foo\")"},
{"lineNum":"  117","line":"  # File.exists?(\"foo\") # => true"},
{"lineNum":"  118","line":"  # ```"},
{"lineNum":"  119","line":"  def self.exists?(path) : Bool"},
{"lineNum":"  120","line":"    accessible?(path, LibC::F_OK)"},
{"lineNum":"  121","line":"  end"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"  # Returns `true` if the file at *path* is empty, otherwise returns `false`."},
{"lineNum":"  124","line":"  # Raises `Errno` if the file at *path* does not exist."},
{"lineNum":"  125","line":"  #"},
{"lineNum":"  126","line":"  # ```"},
{"lineNum":"  127","line":"  # File.write(\"foo\", \"\")"},
{"lineNum":"  128","line":"  # File.empty?(\"foo\") # => true"},
{"lineNum":"  129","line":"  # File.write(\"foo\", \"foo\")"},
{"lineNum":"  130","line":"  # File.empty?(\"foo\") # => false"},
{"lineNum":"  131","line":"  # ```"},
{"lineNum":"  132","line":"  def self.empty?(path) : Bool"},
{"lineNum":"  133","line":"    begin"},
{"lineNum":"  134","line":"      stat(path).size == 0"},
{"lineNum":"  135","line":"    rescue Errno"},
{"lineNum":"  136","line":"      raise Errno.new(\"Error determining size of \'#{path}\'\")"},
{"lineNum":"  137","line":"    end"},
{"lineNum":"  138","line":"  end"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  # Returns `true` if *path* is readable by the real user id of this process else returns `false`."},
{"lineNum":"  141","line":"  #"},
{"lineNum":"  142","line":"  # ```"},
{"lineNum":"  143","line":"  # File.write(\"foo\", \"foo\")"},
{"lineNum":"  144","line":"  # File.readable?(\"foo\") # => true"},
{"lineNum":"  145","line":"  # ```"},
{"lineNum":"  146","line":"  def self.readable?(path) : Bool"},
{"lineNum":"  147","line":"    accessible?(path, LibC::R_OK)"},
{"lineNum":"  148","line":"  end"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"  # Returns `true` if *path* is writable by the real user id of this process else returns `false`."},
{"lineNum":"  151","line":"  #"},
{"lineNum":"  152","line":"  # ```"},
{"lineNum":"  153","line":"  # File.write(\"foo\", \"foo\")"},
{"lineNum":"  154","line":"  # File.writable?(\"foo\") # => true"},
{"lineNum":"  155","line":"  # ```"},
{"lineNum":"  156","line":"  def self.writable?(path) : Bool"},
{"lineNum":"  157","line":"    accessible?(path, LibC::W_OK)"},
{"lineNum":"  158","line":"  end"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"  # Returns `true` if *path* is executable by the real user id of this process else returns `false`."},
{"lineNum":"  161","line":"  #"},
{"lineNum":"  162","line":"  # ```"},
{"lineNum":"  163","line":"  # File.write(\"foo\", \"foo\")"},
{"lineNum":"  164","line":"  # File.executable?(\"foo\") # => false"},
{"lineNum":"  165","line":"  # ```"},
{"lineNum":"  166","line":"  def self.executable?(path) : Bool"},
{"lineNum":"  167","line":"    accessible?(path, LibC::X_OK)"},
{"lineNum":"  168","line":"  end"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"  # Convenience method to avoid code on LibC.access calls. Not meant to be called by users of this class."},
{"lineNum":"  171","line":"  private def self.accessible?(path, flag)"},
{"lineNum":"  172","line":"    LibC.access(path.check_no_null_byte, flag) == 0"},
{"lineNum":"  173","line":"  end"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"  # Returns `true` if given *path* exists and is a file."},
{"lineNum":"  176","line":"  #"},
{"lineNum":"  177","line":"  # ```"},
{"lineNum":"  178","line":"  # File.write(\"foo\", \"\")"},
{"lineNum":"  179","line":"  # Dir.mkdir(\"dir1\")"},
{"lineNum":"  180","line":"  # File.file?(\"foo\")    # => true"},
{"lineNum":"  181","line":"  # File.file?(\"dir1\")   # => false"},
{"lineNum":"  182","line":"  # File.file?(\"foobar\") # => false"},
{"lineNum":"  183","line":"  # ```","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  184","line":"  def self.file?(path) : Bool"},
{"lineNum":"  185","line":"    if LibC.stat(path.check_no_null_byte, out stat) != 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  186","line":"      if Errno.value == Errno::ENOENT","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"        return false"},
{"lineNum":"  188","line":"      else"},
{"lineNum":"  189","line":"        raise Errno.new(\"stat\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"      end"},
{"lineNum":"  191","line":"    end"},
{"lineNum":"  192","line":"    File::Stat.new(stat).file?"},
{"lineNum":"  193","line":"  end"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"  # Returns `true` if the given *path* exists and is a directory."},
{"lineNum":"  196","line":"  #"},
{"lineNum":"  197","line":"  # ```"},
{"lineNum":"  198","line":"  # File.write(\"foo\", \"\")"},
{"lineNum":"  199","line":"  # Dir.mkdir(\"dir2\")"},
{"lineNum":"  200","line":"  # File.directory?(\"foo\")    # => false"},
{"lineNum":"  201","line":"  # File.directory?(\"dir2\")   # => true"},
{"lineNum":"  202","line":"  # File.directory?(\"foobar\") # => false"},
{"lineNum":"  203","line":"  # ```"},
{"lineNum":"  204","line":"  def self.directory?(path) : Bool"},
{"lineNum":"  205","line":"    Dir.exists?(path)"},
{"lineNum":"  206","line":"  end"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"  # Returns all components of the given *path* except the last one."},
{"lineNum":"  209","line":"  #"},
{"lineNum":"  210","line":"  # ```"},
{"lineNum":"  211","line":"  # File.dirname(\"/foo/bar/file.cr\") # => \"/foo/bar\""},
{"lineNum":"  212","line":"  # ```"},
{"lineNum":"  213","line":"  def self.dirname(path) : String"},
{"lineNum":"  214","line":"    path.check_no_null_byte"},
{"lineNum":"  215","line":"    index = path.rindex SEPARATOR"},
{"lineNum":"  216","line":"    if index"},
{"lineNum":"  217","line":"      if index == 0"},
{"lineNum":"  218","line":"        SEPARATOR_STRING"},
{"lineNum":"  219","line":"      else"},
{"lineNum":"  220","line":"        path[0, index]"},
{"lineNum":"  221","line":"      end"},
{"lineNum":"  222","line":"    else"},
{"lineNum":"  223","line":"      \".\""},
{"lineNum":"  224","line":"    end"},
{"lineNum":"  225","line":"  end"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"  # Returns the last component of the given *path*."},
{"lineNum":"  228","line":"  #"},
{"lineNum":"  229","line":"  # ```"},
{"lineNum":"  230","line":"  # File.basename(\"/foo/bar/file.cr\") # => \"file.cr\""},
{"lineNum":"  231","line":"  # ```"},
{"lineNum":"  232","line":"  def self.basename(path) : String"},
{"lineNum":"  233","line":"    return \"\" if path.bytesize == 0"},
{"lineNum":"  234","line":"    return SEPARATOR_STRING if path == SEPARATOR_STRING"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"    path.check_no_null_byte"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    last = path.size - 1"},
{"lineNum":"  239","line":"    last -= 1 if path[last] == SEPARATOR"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    index = path.rindex SEPARATOR, last"},
{"lineNum":"  242","line":"    if index"},
{"lineNum":"  243","line":"      path[index + 1, last - index]"},
{"lineNum":"  244","line":"    else"},
{"lineNum":"  245","line":"      path"},
{"lineNum":"  246","line":"    end"},
{"lineNum":"  247","line":"  end"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"  # Returns the last component of the given *path*."},
{"lineNum":"  250","line":"  #"},
{"lineNum":"  251","line":"  # If *suffix* is present at the end of *path*, it is removed."},
{"lineNum":"  252","line":"  #"},
{"lineNum":"  253","line":"  # ```"},
{"lineNum":"  254","line":"  # File.basename(\"/foo/bar/file.cr\", \".cr\") # => \"file\""},
{"lineNum":"  255","line":"  # ```"},
{"lineNum":"  256","line":"  def self.basename(path, suffix) : String"},
{"lineNum":"  257","line":"    suffix.check_no_null_byte"},
{"lineNum":"  258","line":"    basename(path).chomp(suffix)"},
{"lineNum":"  259","line":"  end"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"  # Changes the owner of the specified file."},
{"lineNum":"  262","line":"  #"},
{"lineNum":"  263","line":"  # ```"},
{"lineNum":"  264","line":"  # File.chown(\"/foo/bar/baz.cr\", 1001, 100)"},
{"lineNum":"  265","line":"  # File.chown(\"/foo/bar\", gid: 100)"},
{"lineNum":"  266","line":"  # ```"},
{"lineNum":"  267","line":"  #"},
{"lineNum":"  268","line":"  # Unless *follow_symlinks* is set to `true`, then the owner symlink itself will"},
{"lineNum":"  269","line":"  # be changed, otherwise the owner of the symlink destination file will be"},
{"lineNum":"  270","line":"  # changed. For example, assuming symlinks as `foo -> bar -> baz`:"},
{"lineNum":"  271","line":"  #"},
{"lineNum":"  272","line":"  # ```"},
{"lineNum":"  273","line":"  # File.chown(\"foo\", gid: 100)                        # changes foo\'s gid"},
{"lineNum":"  274","line":"  # File.chown(\"foo\", gid: 100, follow_symlinks: true) # changes baz\'s gid"},
{"lineNum":"  275","line":"  # ```"},
{"lineNum":"  276","line":"  def self.chown(path, uid : Int? = -1, gid : Int = -1, follow_symlinks = false)"},
{"lineNum":"  277","line":"    ret = if !follow_symlinks && symlink?(path)"},
{"lineNum":"  278","line":"            LibC.lchown(path, uid, gid)"},
{"lineNum":"  279","line":"          else"},
{"lineNum":"  280","line":"            LibC.chown(path, uid, gid)"},
{"lineNum":"  281","line":"          end"},
{"lineNum":"  282","line":"    raise Errno.new(\"Error changing owner of \'#{path}\'\") if ret == -1"},
{"lineNum":"  283","line":"  end"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"  # Changes the permissions of the specified file."},
{"lineNum":"  286","line":"  #"},
{"lineNum":"  287","line":"  # Symlinks are dereferenced, so that only the permissions of the symlink"},
{"lineNum":"  288","line":"  # destination are changed, never the permissions of the symlink itself."},
{"lineNum":"  289","line":"  #"},
{"lineNum":"  290","line":"  # ```"},
{"lineNum":"  291","line":"  # File.chmod(\"foo\", 0o755)"},
{"lineNum":"  292","line":"  # File.stat(\"foo\").perm # => 0o755"},
{"lineNum":"  293","line":"  #"},
{"lineNum":"  294","line":"  # File.chmod(\"foo\", 0o700)"},
{"lineNum":"  295","line":"  # File.stat(\"foo\").perm # => 0o700"},
{"lineNum":"  296","line":"  # ```"},
{"lineNum":"  297","line":"  def self.chmod(path, mode : Int)"},
{"lineNum":"  298","line":"    if LibC.chmod(path, mode) == -1"},
{"lineNum":"  299","line":"      raise Errno.new(\"Error changing permissions of \'#{path}\'\")"},
{"lineNum":"  300","line":"    end"},
{"lineNum":"  301","line":"  end"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"  # Delete the file at *path*. Deleting non-existent file will raise an exception."},
{"lineNum":"  304","line":"  #"},
{"lineNum":"  305","line":"  # ```"},
{"lineNum":"  306","line":"  # File.write(\"foo\", \"\")"},
{"lineNum":"  307","line":"  # File.delete(\"./foo\")"},
{"lineNum":"  308","line":"  # File.delete(\"./bar\") # raises Errno (No such file or directory)"},
{"lineNum":"  309","line":"  # ```"},
{"lineNum":"  310","line":"  def self.delete(path)"},
{"lineNum":"  311","line":"    err = LibC.unlink(path.check_no_null_byte)"},
{"lineNum":"  312","line":"    if err == -1"},
{"lineNum":"  313","line":"      raise Errno.new(\"Error deleting file \'#{path}\'\")"},
{"lineNum":"  314","line":"    end"},
{"lineNum":"  315","line":"  end"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"  # Returns *filename*\'s extension, or an empty string if it has no extension."},
{"lineNum":"  318","line":"  #"},
{"lineNum":"  319","line":"  # ```"},
{"lineNum":"  320","line":"  # File.extname(\"foo.cr\") # => \".cr\""},
{"lineNum":"  321","line":"  # ```"},
{"lineNum":"  322","line":"  def self.extname(filename) : String"},
{"lineNum":"  323","line":"    filename.check_no_null_byte"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"    dot_index = filename.rindex(\'.\')"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    if dot_index && dot_index != filename.size - 1 && filename[dot_index - 1] != SEPARATOR"},
{"lineNum":"  328","line":"      filename[dot_index, filename.size - dot_index]"},
{"lineNum":"  329","line":"    else"},
{"lineNum":"  330","line":"      \"\""},
{"lineNum":"  331","line":"    end"},
{"lineNum":"  332","line":"  end"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"  # Converts *path* to an absolute path. Relative paths are"},
{"lineNum":"  335","line":"  # referenced from the current working directory of the process unless"},
{"lineNum":"  336","line":"  # *dir* is given, in which case it will be used as the starting point."},
{"lineNum":"  337","line":"  #"},
{"lineNum":"  338","line":"  # ```"},
{"lineNum":"  339","line":"  # File.expand_path(\"foo\")             # => \"/home/.../foo\""},
{"lineNum":"  340","line":"  # File.expand_path(\"~/crystal/foo\")   # => \"/home/crystal/foo\""},
{"lineNum":"  341","line":"  # File.expand_path(\"baz\", \"/foo/bar\") # => \"/foo/bar/baz\""},
{"lineNum":"  342","line":"  # ```"},
{"lineNum":"  343","line":"  def self.expand_path(path, dir = nil) : String"},
{"lineNum":"  344","line":"    path.check_no_null_byte"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"    if path.starts_with?(\'~\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  347","line":"      home = ENV[\"HOME\"]"},
{"lineNum":"  348","line":"      home = home.chomp(\'/\') unless home == \"/\""},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"      if path.size >= 2 && path[1] == SEPARATOR","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  351","line":"        path = home + path[1..-1]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  352","line":"      elsif path.size < 2","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  353","line":"        return home"},
{"lineNum":"  354","line":"      end"},
{"lineNum":"  355","line":"    end"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"    unless path.starts_with?(SEPARATOR)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  358","line":"      dir = dir ? expand_path(dir) : Dir.current"},
{"lineNum":"  359","line":"      path = \"#{dir}#{SEPARATOR}#{path}\"","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  360","line":"    end"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"    parts = path.split(SEPARATOR)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  363","line":"    items = [] of String"},
{"lineNum":"  364","line":"    parts.each do |part|"},
{"lineNum":"  365","line":"      case part"},
{"lineNum":"  366","line":"      when \"\", \".\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  367","line":"        # Nothing"},
{"lineNum":"  368","line":"      when \"..\""},
{"lineNum":"  369","line":"        items.pop?"},
{"lineNum":"  370","line":"      else"},
{"lineNum":"  371","line":"        items << part","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  372","line":"      end"},
{"lineNum":"  373","line":"    end"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"    String.build do |str|"},
{"lineNum":"  376","line":"      {% if !flag?(:windows) %}"},
{"lineNum":"  377","line":"        str << SEPARATOR_STRING"},
{"lineNum":"  378","line":"      {% end %}"},
{"lineNum":"  379","line":"      items.join SEPARATOR_STRING, str"},
{"lineNum":"  380","line":"    end"},
{"lineNum":"  381","line":"  end"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"  # Resolves the real path of *path* by following symbolic links."},
{"lineNum":"  384","line":"  def self.real_path(path) : String"},
{"lineNum":"  385","line":"    real_path_ptr = LibC.realpath(path, nil)"},
{"lineNum":"  386","line":"    raise Errno.new(\"Error resolving real path of #{path}\") unless real_path_ptr"},
{"lineNum":"  387","line":"    String.new(real_path_ptr).tap { LibC.free(real_path_ptr.as(Void*)) }"},
{"lineNum":"  388","line":"  end"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"  # Creates a new link (also known as a hard link) at *new_path* to an existing file"},
{"lineNum":"  391","line":"  # given by *old_path*."},
{"lineNum":"  392","line":"  def self.link(old_path, new_path)"},
{"lineNum":"  393","line":"    ret = LibC.link(old_path.check_no_null_byte, new_path.check_no_null_byte)"},
{"lineNum":"  394","line":"    raise Errno.new(\"Error creating link from #{old_path} to #{new_path}\") if ret != 0"},
{"lineNum":"  395","line":"    ret"},
{"lineNum":"  396","line":"  end"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"  # Creates a symbolic link at *new_path* to an existing file given by *old_path."},
{"lineNum":"  399","line":"  def self.symlink(old_path, new_path)"},
{"lineNum":"  400","line":"    ret = LibC.symlink(old_path.check_no_null_byte, new_path.check_no_null_byte)"},
{"lineNum":"  401","line":"    raise Errno.new(\"Error creating symlink from #{old_path} to #{new_path}\") if ret != 0"},
{"lineNum":"  402","line":"    ret"},
{"lineNum":"  403","line":"  end"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"  # Returns `true` if the *path* is a symbolic link."},
{"lineNum":"  406","line":"  def self.symlink?(path) : Bool"},
{"lineNum":"  407","line":"    if LibC.lstat(path.check_no_null_byte, out stat) != 0"},
{"lineNum":"  408","line":"      if Errno.value == Errno::ENOENT"},
{"lineNum":"  409","line":"        return false"},
{"lineNum":"  410","line":"      else"},
{"lineNum":"  411","line":"        raise Errno.new(\"stat\")"},
{"lineNum":"  412","line":"      end"},
{"lineNum":"  413","line":"    end"},
{"lineNum":"  414","line":"    (stat.st_mode & LibC::S_IFMT) == LibC::S_IFLNK"},
{"lineNum":"  415","line":"  end"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"  # Opens the file named by *filename*. If a file is being created, its initial"},
{"lineNum":"  418","line":"  # permissions may be set using the *perm* parameter."},
{"lineNum":"  419","line":"  def self.open(filename, mode = \"r\", perm = DEFAULT_CREATE_MODE, encoding = nil, invalid = nil) : self"},
{"lineNum":"  420","line":"    new filename, mode, perm, encoding, invalid"},
{"lineNum":"  421","line":"  end"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"  # Opens the file named by *filename*. If a file is being created, its initial"},
{"lineNum":"  424","line":"  # permissions may be set using the *perm* parameter. Then given block will be passed the opened"},
{"lineNum":"  425","line":"  # file as an argument, the file will be automatically closed when the block returns."},
{"lineNum":"  426","line":"  def self.open(filename, mode = \"r\", perm = DEFAULT_CREATE_MODE, encoding = nil, invalid = nil)"},
{"lineNum":"  427","line":"    file = new filename, mode, perm, encoding, invalid"},
{"lineNum":"  428","line":"    begin"},
{"lineNum":"  429","line":"      yield file","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  430","line":"    ensure"},
{"lineNum":"  431","line":"      file.close","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  432","line":"    end"},
{"lineNum":"  433","line":"  end"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"  # Returns the content of *filename* as a string."},
{"lineNum":"  436","line":"  #"},
{"lineNum":"  437","line":"  # ```"},
{"lineNum":"  438","line":"  # File.write(\"bar\", \"foo\")"},
{"lineNum":"  439","line":"  # File.read(\"bar\") # => \"foo\""},
{"lineNum":"  440","line":"  # ```"},
{"lineNum":"  441","line":"  def self.read(filename, encoding = nil, invalid = nil) : String"},
{"lineNum":"  442","line":"    open(filename, \"r\") do |file|"},
{"lineNum":"  443","line":"      if encoding"},
{"lineNum":"  444","line":"        file.set_encoding(encoding, invalid: invalid)"},
{"lineNum":"  445","line":"        file.gets_to_end"},
{"lineNum":"  446","line":"      else"},
{"lineNum":"  447","line":"        # We try to read a string with an initialize capacity"},
{"lineNum":"  448","line":"        # equal to the file\'s size, but the size might not be"},
{"lineNum":"  449","line":"        # correct or even be zero (for example for /proc files)"},
{"lineNum":"  450","line":"        size = file.size.to_i"},
{"lineNum":"  451","line":"        size = 256 if size == 0"},
{"lineNum":"  452","line":"        String.build(size) do |io|"},
{"lineNum":"  453","line":"          IO.copy(file, io)"},
{"lineNum":"  454","line":"        end"},
{"lineNum":"  455","line":"      end"},
{"lineNum":"  456","line":"    end"},
{"lineNum":"  457","line":"  end"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"  # Yields each line in *filename* to the given block."},
{"lineNum":"  460","line":"  #"},
{"lineNum":"  461","line":"  # ```"},
{"lineNum":"  462","line":"  # File.write(\"foobar\", \"foo\\nbar\")"},
{"lineNum":"  463","line":"  #"},
{"lineNum":"  464","line":"  # array = [] of String"},
{"lineNum":"  465","line":"  # File.each_line(\"foobar\") do |line|"},
{"lineNum":"  466","line":"  #   array << line"},
{"lineNum":"  467","line":"  # end"},
{"lineNum":"  468","line":"  # array # => [\"foo\", \"bar\"]"},
{"lineNum":"  469","line":"  # ```"},
{"lineNum":"  470","line":"  def self.each_line(filename, encoding = nil, invalid = nil, chomp = true)"},
{"lineNum":"  471","line":"    open(filename, \"r\", encoding: encoding, invalid: invalid) do |file|"},
{"lineNum":"  472","line":"      file.each_line(chomp: chomp) do |line|"},
{"lineNum":"  473","line":"        yield line"},
{"lineNum":"  474","line":"      end"},
{"lineNum":"  475","line":"    end"},
{"lineNum":"  476","line":"  end"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"  # Returns an `Iterator` for each line in *filename*."},
{"lineNum":"  479","line":"  def self.each_line(filename, encoding = nil, invalid = nil, chomp = true)"},
{"lineNum":"  480","line":"    open(filename, \"r\", encoding: encoding, invalid: invalid).each_line(chomp: chomp)"},
{"lineNum":"  481","line":"  end"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"  # Returns all lines in *filename* as an array of strings."},
{"lineNum":"  484","line":"  #"},
{"lineNum":"  485","line":"  # ```"},
{"lineNum":"  486","line":"  # File.write(\"foobar\", \"foo\\nbar\")"},
{"lineNum":"  487","line":"  # File.read_lines(\"foobar\") # => [\"foo\", \"bar\"]"},
{"lineNum":"  488","line":"  # ```"},
{"lineNum":"  489","line":"  def self.read_lines(filename, encoding = nil, invalid = nil, chomp = true) : Array(String)"},
{"lineNum":"  490","line":"    lines = [] of String"},
{"lineNum":"  491","line":"    each_line(filename, encoding: encoding, invalid: invalid, chomp: chomp) do |line|"},
{"lineNum":"  492","line":"      lines << line","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  493","line":"    end"},
{"lineNum":"  494","line":"    lines"},
{"lineNum":"  495","line":"  end"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"  # Write the given *content* to *filename*."},
{"lineNum":"  498","line":"  #"},
{"lineNum":"  499","line":"  # An existing file will be overwritten, else a file will be created."},
{"lineNum":"  500","line":"  #"},
{"lineNum":"  501","line":"  # ```"},
{"lineNum":"  502","line":"  # File.write(\"foo\", \"bar\")"},
{"lineNum":"  503","line":"  # ```"},
{"lineNum":"  504","line":"  #"},
{"lineNum":"  505","line":"  # NOTE: If the content is a `Slice(UInt8)`, those bytes will be written."},
{"lineNum":"  506","line":"  # If it\'s an `IO`, all bytes from the `IO` will be written."},
{"lineNum":"  507","line":"  # Otherwise, the string representation of *content* will be written"},
{"lineNum":"  508","line":"  # (the result of invoking `to_s` on *content*)."},
{"lineNum":"  509","line":"  def self.write(filename, content, perm = DEFAULT_CREATE_MODE, encoding = nil, invalid = nil)"},
{"lineNum":"  510","line":"    open(filename, \"w\", perm, encoding: encoding, invalid: invalid) do |file|"},
{"lineNum":"  511","line":"      case content"},
{"lineNum":"  512","line":"      when Bytes"},
{"lineNum":"  513","line":"        file.write(content)"},
{"lineNum":"  514","line":"      when IO"},
{"lineNum":"  515","line":"        IO.copy(content, file)"},
{"lineNum":"  516","line":"      else"},
{"lineNum":"  517","line":"        file.print(content)"},
{"lineNum":"  518","line":"      end"},
{"lineNum":"  519","line":"    end"},
{"lineNum":"  520","line":"  end"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"  # Returns a new string formed by joining the strings using `File::SEPARATOR`."},
{"lineNum":"  523","line":"  #"},
{"lineNum":"  524","line":"  # ```"},
{"lineNum":"  525","line":"  # File.join(\"foo\", \"bar\", \"baz\")       # => \"foo/bar/baz\""},
{"lineNum":"  526","line":"  # File.join(\"foo/\", \"/bar/\", \"/baz\")   # => \"foo/bar/baz\""},
{"lineNum":"  527","line":"  # File.join(\"/foo/\", \"/bar/\", \"/baz/\") # => \"/foo/bar/baz/\""},
{"lineNum":"  528","line":"  # ```"},
{"lineNum":"  529","line":"  def self.join(*parts) : String","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  530","line":"    join parts"},
{"lineNum":"  531","line":"  end"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"  # Returns a new string formed by joining the strings using `File::SEPARATOR`."},
{"lineNum":"  534","line":"  #"},
{"lineNum":"  535","line":"  # ```"},
{"lineNum":"  536","line":"  # File.join({\"foo\", \"bar\", \"baz\"})       # => \"foo/bar/baz\""},
{"lineNum":"  537","line":"  # File.join({\"foo/\", \"/bar/\", \"/baz\"})   # => \"foo/bar/baz\""},
{"lineNum":"  538","line":"  # File.join([\"/foo/\", \"/bar/\", \"/baz/\"]) # => \"/foo/bar/baz/\""},
{"lineNum":"  539","line":"  # ```"},
{"lineNum":"  540","line":"  def self.join(parts : Array | Tuple) : String"},
{"lineNum":"  541","line":"    String.build do |str|"},
{"lineNum":"  542","line":"      parts.each_with_index do |part, index|"},
{"lineNum":"  543","line":"        part.check_no_null_byte"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"        str << SEPARATOR if index > 0"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"        byte_start = 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  548","line":"        byte_count = part.bytesize"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"        if index > 0 && part.starts_with?(SEPARATOR)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  551","line":"          byte_start += 1"},
{"lineNum":"  552","line":"          byte_count -= 1"},
{"lineNum":"  553","line":"        end"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"        if index != parts.size - 1 && part.ends_with?(SEPARATOR)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  556","line":"          byte_count -= 1"},
{"lineNum":"  557","line":"        end"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"        str.write part.unsafe_byte_slice(byte_start, byte_count)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  560","line":"      end"},
{"lineNum":"  561","line":"    end"},
{"lineNum":"  562","line":"  end"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"  # Returns the size of *filename* bytes."},
{"lineNum":"  565","line":"  def self.size(filename) : UInt64"},
{"lineNum":"  566","line":"    stat(filename.check_no_null_byte).size"},
{"lineNum":"  567","line":"  end"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"  # Moves *old_filename* to *new_filename*."},
{"lineNum":"  570","line":"  #"},
{"lineNum":"  571","line":"  # ```"},
{"lineNum":"  572","line":"  # File.write(\"afile\", \"foo\")"},
{"lineNum":"  573","line":"  # File.exists?(\"afile\") # => true"},
{"lineNum":"  574","line":"  #"},
{"lineNum":"  575","line":"  # File.rename(\"afile\", \"afile.cr\")"},
{"lineNum":"  576","line":"  # File.exists?(\"afile\")    # => false"},
{"lineNum":"  577","line":"  # File.exists?(\"afile.cr\") # => true"},
{"lineNum":"  578","line":"  # ```"},
{"lineNum":"  579","line":"  def self.rename(old_filename, new_filename)"},
{"lineNum":"  580","line":"    code = LibC.rename(old_filename.check_no_null_byte, new_filename.check_no_null_byte)"},
{"lineNum":"  581","line":"    if code != 0"},
{"lineNum":"  582","line":"      raise Errno.new(\"Error renaming file \'#{old_filename}\' to \'#{new_filename}\'\")"},
{"lineNum":"  583","line":"    end"},
{"lineNum":"  584","line":"    code"},
{"lineNum":"  585","line":"  end"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"  # Sets the access and modification times of *filename*."},
{"lineNum":"  588","line":"  def self.utime(atime : Time, mtime : Time, filename : String) : Nil"},
{"lineNum":"  589","line":"    timevals = uninitialized LibC::Timeval[2]"},
{"lineNum":"  590","line":"    timevals[0] = to_timeval(atime)"},
{"lineNum":"  591","line":"    timevals[1] = to_timeval(mtime)"},
{"lineNum":"  592","line":"    ret = LibC.utimes(filename, timevals)"},
{"lineNum":"  593","line":"    if ret != 0"},
{"lineNum":"  594","line":"      raise Errno.new(\"Error setting time to file \'#{filename}\'\")"},
{"lineNum":"  595","line":"    end"},
{"lineNum":"  596","line":"  end"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"  # Attempts to set the access and modification times of the file named"},
{"lineNum":"  599","line":"  # in the *filename* parameter to the value given in *time*."},
{"lineNum":"  600","line":"  #"},
{"lineNum":"  601","line":"  # If the file does not exist, it will be created."},
{"lineNum":"  602","line":"  def self.touch(filename : String, time : Time = Time.now)"},
{"lineNum":"  603","line":"    open(filename, \"a\") { } unless exists?(filename)"},
{"lineNum":"  604","line":"    utime time, time, filename"},
{"lineNum":"  605","line":"  end"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"  private def self.to_timeval(time : Time)"},
{"lineNum":"  608","line":"    t = uninitialized LibC::Timeval"},
{"lineNum":"  609","line":"    t.tv_sec = typeof(t.tv_sec).new(time.to_local.epoch)"},
{"lineNum":"  610","line":"    t.tv_usec = typeof(t.tv_usec).new(0)"},
{"lineNum":"  611","line":"    t"},
{"lineNum":"  612","line":"  end"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"  # Return the size in bytes of the currently opened file."},
{"lineNum":"  615","line":"  def size"},
{"lineNum":"  616","line":"    stat.size"},
{"lineNum":"  617","line":"  end"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"  # Truncates the file to the specified *size*. Requires that the current file is opened"},
{"lineNum":"  620","line":"  # for writing."},
{"lineNum":"  621","line":"  def truncate(size = 0)"},
{"lineNum":"  622","line":"    flush"},
{"lineNum":"  623","line":"    code = LibC.ftruncate(fd, size)"},
{"lineNum":"  624","line":"    if code != 0"},
{"lineNum":"  625","line":"      raise Errno.new(\"Error truncating file \'#{path}\'\")"},
{"lineNum":"  626","line":"    end"},
{"lineNum":"  627","line":"    code"},
{"lineNum":"  628","line":"  end"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"  # Yields an `IO` to read a section inside this file."},
{"lineNum":"  631","line":"  # Mutliple sections can be read concurrently."},
{"lineNum":"  632","line":"  def read_at(offset, bytesize, &block)"},
{"lineNum":"  633","line":"    self_bytesize = self.size"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"    unless 0 <= offset <= self_bytesize"},
{"lineNum":"  636","line":"      raise ArgumentError.new(\"Offset out of bounds\")"},
{"lineNum":"  637","line":"    end"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"    if bytesize < 0"},
{"lineNum":"  640","line":"      raise ArgumentError.new(\"Negative bytesize\")"},
{"lineNum":"  641","line":"    end"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"    unless 0 <= offset + bytesize <= self_bytesize"},
{"lineNum":"  644","line":"      raise ArgumentError.new(\"Bytesize out of bounds\")"},
{"lineNum":"  645","line":"    end"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"    io = PReader.new(fd, offset, bytesize)"},
{"lineNum":"  648","line":"    yield io ensure io.close"},
{"lineNum":"  649","line":"  end"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"  def inspect(io)"},
{"lineNum":"  652","line":"    io << \"#<File:\" << @path"},
{"lineNum":"  653","line":"    io << \" (closed)\" if closed?"},
{"lineNum":"  654","line":"    io << \">\""},
{"lineNum":"  655","line":"    io"},
{"lineNum":"  656","line":"  end"},
{"lineNum":"  657","line":"end"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"require \"./file/*\""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:57:27", "instrumented" : 34, "covered" : 0,};
var merged_data = [];
