var data = {lines:[
{"lineNum":"    1","line":"# An `Array` is an ordered, integer-indexed collection of objects of type T."},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Array indexing starts at 0. A negative index is assumed to be"},
{"lineNum":"    4","line":"# relative to the end of the array: -1 indicates the last element,"},
{"lineNum":"    5","line":"# -2 is the next to last element, and so on."},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"# An `Array` can be created using the usual `new` method (several are provided), or with an array literal:"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# ```"},
{"lineNum":"   10","line":"# Array(Int32).new  # => []"},
{"lineNum":"   11","line":"# [1, 2, 3]         # Array(Int32)"},
{"lineNum":"   12","line":"# [1, \"hello\", \'x\'] # Array(Int32 | String | Char)"},
{"lineNum":"   13","line":"# ```"},
{"lineNum":"   14","line":"#"},
{"lineNum":"   15","line":"# An `Array` can have mixed types, meaning T will be a union of types, but these are determined"},
{"lineNum":"   16","line":"# when the array is created, either by specifying T or by using an array literal. In the latter"},
{"lineNum":"   17","line":"# case, T will be set to the union of the array literal elements\' types."},
{"lineNum":"   18","line":"#"},
{"lineNum":"   19","line":"# When creating an empty array you must always specify T:"},
{"lineNum":"   20","line":"#"},
{"lineNum":"   21","line":"# ```"},
{"lineNum":"   22","line":"# [] of Int32 # same as Array(Int32)"},
{"lineNum":"   23","line":"# []          # syntax error"},
{"lineNum":"   24","line":"# ```"},
{"lineNum":"   25","line":"#"},
{"lineNum":"   26","line":"# An `Array` is implemented using an internal buffer of some capacity"},
{"lineNum":"   27","line":"# and is reallocated when elements are pushed to it when more capacity"},
{"lineNum":"   28","line":"# is needed. This is normally known as a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array)."},
{"lineNum":"   29","line":"#"},
{"lineNum":"   30","line":"# You can use a special array literal syntax with other types too, as long as they define an argless"},
{"lineNum":"   31","line":"# `new` method and a `<<` method. `Set` is one such type:"},
{"lineNum":"   32","line":"#"},
{"lineNum":"   33","line":"# ```"},
{"lineNum":"   34","line":"# set = Set{1, 2, 3} # => Set{1, 2, 3}"},
{"lineNum":"   35","line":"# set.class          # => Set(Int32)"},
{"lineNum":"   36","line":"# ```"},
{"lineNum":"   37","line":"#"},
{"lineNum":"   38","line":"# The above is the same as this:"},
{"lineNum":"   39","line":"#"},
{"lineNum":"   40","line":"# ```"},
{"lineNum":"   41","line":"# set = Set(typeof(1, 2, 3)).new"},
{"lineNum":"   42","line":"# set << 1"},
{"lineNum":"   43","line":"# set << 2"},
{"lineNum":"   44","line":"# set << 3"},
{"lineNum":"   45","line":"# ```"},
{"lineNum":"   46","line":"class Array(T)"},
{"lineNum":"   47","line":"  include Indexable(T)"},
{"lineNum":"   48","line":"  include Comparable(Array)"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"  # Returns the number of elements in the array."},
{"lineNum":"   51","line":"  #"},
{"lineNum":"   52","line":"  # ```"},
{"lineNum":"   53","line":"  # [:foo, :bar].size # => 2"},
{"lineNum":"   54","line":"  # ```"},
{"lineNum":"   55","line":"  getter size : Int32"},
{"lineNum":"   56","line":"  @capacity : Int32"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"  # Creates a new empty Array."},
{"lineNum":"   59","line":"  def initialize","class":"lineNoCov","hits":"0","possible_hits":"61",},
{"lineNum":"   60","line":"    @size = 0","class":"lineNoCov","hits":"0","possible_hits":"61",},
{"lineNum":"   61","line":"    @capacity = 0","class":"lineNoCov","hits":"0","possible_hits":"61",},
{"lineNum":"   62","line":"    @buffer = Pointer(T).null","class":"lineNoCov","hits":"0","possible_hits":"61",},
{"lineNum":"   63","line":"  end"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"  # Creates a new empty `Array` backed by a buffer that is initially"},
{"lineNum":"   66","line":"  # `initial_capacity` big."},
{"lineNum":"   67","line":"  #"},
{"lineNum":"   68","line":"  # The *initial_capacity* is useful to avoid unnecessary reallocations"},
{"lineNum":"   69","line":"  # of the internal buffer in case of growth. If you have an estimate"},
{"lineNum":"   70","line":"  # of the maximum number of elements an array will hold, the array should"},
{"lineNum":"   71","line":"  # be initialized with that capacity for improved performance."},
{"lineNum":"   72","line":"  #"},
{"lineNum":"   73","line":"  # ```"},
{"lineNum":"   74","line":"  # ary = Array(Int32).new(5)"},
{"lineNum":"   75","line":"  # ary.size # => 0"},
{"lineNum":"   76","line":"  # ```"},
{"lineNum":"   77","line":"  def initialize(initial_capacity : Int)","class":"lineNoCov","hits":"0","possible_hits":"40",},
{"lineNum":"   78","line":"    if initial_capacity < 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   79","line":"      raise ArgumentError.new(\"Negative array size: #{initial_capacity}\")","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   80","line":"    end"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    @size = 0","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   83","line":"    @capacity = initial_capacity.to_i","class":"lineNoCov","hits":"0","possible_hits":"36",},
{"lineNum":"   84","line":"    if initial_capacity == 0","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   85","line":"      @buffer = Pointer(T).null"},
{"lineNum":"   86","line":"    else"},
{"lineNum":"   87","line":"      @buffer = Pointer(T).malloc(initial_capacity)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"    end"},
{"lineNum":"   89","line":"  end"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"  # Creates a new `Array` of the given *size* filled with the same *value* in each position."},
{"lineNum":"   92","line":"  #"},
{"lineNum":"   93","line":"  # ```"},
{"lineNum":"   94","line":"  # Array.new(3, \'a\') # => [\'a\', \'a\', \'a\']"},
{"lineNum":"   95","line":"  #"},
{"lineNum":"   96","line":"  # ary = Array.new(3, [1])"},
{"lineNum":"   97","line":"  # ary # => [[1], [1], [1]]"},
{"lineNum":"   98","line":"  # ary[0][0] = 2"},
{"lineNum":"   99","line":"  # ary # => [[2], [2], [2]]"},
{"lineNum":"  100","line":"  # ```"},
{"lineNum":"  101","line":"  def initialize(size : Int, value : T)"},
{"lineNum":"  102","line":"    if size < 0"},
{"lineNum":"  103","line":"      raise ArgumentError.new(\"Negative array size: #{size}\")"},
{"lineNum":"  104","line":"    end","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    @size = size.to_i"},
{"lineNum":"  107","line":"    @capacity = size.to_i"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    if size == 0"},
{"lineNum":"  110","line":"      @buffer = Pointer(T).null"},
{"lineNum":"  111","line":"    else"},
{"lineNum":"  112","line":"      @buffer = Pointer(T).malloc(size, value)"},
{"lineNum":"  113","line":"    end"},
{"lineNum":"  114","line":"  end"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"  # Creates a new `Array` of the given *size* and invokes the given block once"},
{"lineNum":"  117","line":"  # for each index of `self`, assigning the block\'s value in that index."},
{"lineNum":"  118","line":"  #"},
{"lineNum":"  119","line":"  # ```"},
{"lineNum":"  120","line":"  # Array.new(3) { |i| (i + 1) ** 2 } # => [1, 4, 9]"},
{"lineNum":"  121","line":"  #"},
{"lineNum":"  122","line":"  # ary = Array.new(3) { [1] }"},
{"lineNum":"  123","line":"  # ary # => [[1], [1], [1]]"},
{"lineNum":"  124","line":"  # ary[0][0] = 2"},
{"lineNum":"  125","line":"  # ary # => [[2], [1], [1]]"},
{"lineNum":"  126","line":"  # ```"},
{"lineNum":"  127","line":"  def self.new(size : Int, &block : Int32 -> T)"},
{"lineNum":"  128","line":"    Array(T).build(size) do |buffer|"},
{"lineNum":"  129","line":"      size.to_i.times do |i|"},
{"lineNum":"  130","line":"        buffer[i] = yield i"},
{"lineNum":"  131","line":"      end"},
{"lineNum":"  132","line":"      size"},
{"lineNum":"  133","line":"    end"},
{"lineNum":"  134","line":"  end"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"  # Creates a new `Array`, allocating an internal buffer with the given *capacity*,"},
{"lineNum":"  137","line":"  # and yielding that buffer. The given block must return the desired size of the array."},
{"lineNum":"  138","line":"  #"},
{"lineNum":"  139","line":"  # This method is **unsafe**, but is usually used to initialize the buffer"},
{"lineNum":"  140","line":"  # by passing it to a C function."},
{"lineNum":"  141","line":"  #"},
{"lineNum":"  142","line":"  # ```"},
{"lineNum":"  143","line":"  # Array.build(3) do |buffer|"},
{"lineNum":"  144","line":"  #   LibSome.fill_buffer_and_return_number_of_elements_filled(buffer)"},
{"lineNum":"  145","line":"  # end"},
{"lineNum":"  146","line":"  # ```"},
{"lineNum":"  147","line":"  def self.build(capacity : Int) : self"},
{"lineNum":"  148","line":"    ary = Array(T).new(capacity)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  149","line":"    ary.size = (yield ary.to_unsafe).to_i"},
{"lineNum":"  150","line":"    ary"},
{"lineNum":"  151","line":"  end"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"  # Equality. Returns `true` if each element in `self` is equal to each"},
{"lineNum":"  154","line":"  # corresponding element in *other*."},
{"lineNum":"  155","line":"  #"},
{"lineNum":"  156","line":"  # ```"},
{"lineNum":"  157","line":"  # ary = [1, 2, 3]"},
{"lineNum":"  158","line":"  # ary == [1, 2, 3] # => true"},
{"lineNum":"  159","line":"  # ary == [2, 3]    # => false"},
{"lineNum":"  160","line":"  # ```"},
{"lineNum":"  161","line":"  def ==(other : Array)"},
{"lineNum":"  162","line":"    equals?(other) { |x, y| x == y }"},
{"lineNum":"  163","line":"  end"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"  # :nodoc:"},
{"lineNum":"  166","line":"  def ==(other)"},
{"lineNum":"  167","line":"    false"},
{"lineNum":"  168","line":"  end"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"  # Combined comparison operator. Returns *0* if `self` equals *other*, *1* if"},
{"lineNum":"  171","line":"  # `self` is greater than *other* and *-1* if `self` is smaller than *other*."},
{"lineNum":"  172","line":"  #"},
{"lineNum":"  173","line":"  # It compares the elements of both arrays in the same position using the"},
{"lineNum":"  174","line":"  # `<=>` operator.  As soon as one of such comparisons returns a non-zero"},
{"lineNum":"  175","line":"  # value, that result is the return value of the comparison."},
{"lineNum":"  176","line":"  #"},
{"lineNum":"  177","line":"  # If all elements are equal, the comparison is based on the size of the arrays."},
{"lineNum":"  178","line":"  #"},
{"lineNum":"  179","line":"  # ```"},
{"lineNum":"  180","line":"  # [8] <=> [1, 2, 3] # => 1"},
{"lineNum":"  181","line":"  # [2] <=> [4, 2, 3] # => -1"},
{"lineNum":"  182","line":"  # [1, 2] <=> [1, 2] # => 0"},
{"lineNum":"  183","line":"  # ```"},
{"lineNum":"  184","line":"  def <=>(other : Array)"},
{"lineNum":"  185","line":"    min_size = Math.min(size, other.size)"},
{"lineNum":"  186","line":"    0.upto(min_size - 1) do |i|"},
{"lineNum":"  187","line":"      n = @buffer[i] <=> other.to_unsafe[i]"},
{"lineNum":"  188","line":"      return n if n != 0"},
{"lineNum":"  189","line":"    end"},
{"lineNum":"  190","line":"    size <=> other.size"},
{"lineNum":"  191","line":"  end"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"  # Set intersection: returns a new `Array` containing elements common to `self`"},
{"lineNum":"  194","line":"  # and *other*, excluding any duplicates. The order is preserved from `self`."},
{"lineNum":"  195","line":"  #"},
{"lineNum":"  196","line":"  # ```"},
{"lineNum":"  197","line":"  # [1, 1, 3, 5] & [1, 2, 3]               # => [ 1, 3 ]"},
{"lineNum":"  198","line":"  # [\'a\', \'b\', \'b\', \'z\'] & [\'a\', \'b\', \'c\'] # => [ \'a\', \'b\' ]"},
{"lineNum":"  199","line":"  # ```"},
{"lineNum":"  200","line":"  #"},
{"lineNum":"  201","line":"  # See also: `#uniq`."},
{"lineNum":"  202","line":"  def &(other : Array(U)) forall U"},
{"lineNum":"  203","line":"    return Array(T).new if self.empty? || other.empty?"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    hash = other.to_lookup_hash"},
{"lineNum":"  206","line":"    hash_size = hash.size"},
{"lineNum":"  207","line":"    Array(T).build(Math.min(size, other.size)) do |buffer|"},
{"lineNum":"  208","line":"      i = 0"},
{"lineNum":"  209","line":"      each do |obj|"},
{"lineNum":"  210","line":"        hash.delete(obj)"},
{"lineNum":"  211","line":"        new_hash_size = hash.size"},
{"lineNum":"  212","line":"        if hash_size != new_hash_size"},
{"lineNum":"  213","line":"          hash_size = new_hash_size"},
{"lineNum":"  214","line":"          buffer[i] = obj"},
{"lineNum":"  215","line":"          i += 1"},
{"lineNum":"  216","line":"        end"},
{"lineNum":"  217","line":"      end"},
{"lineNum":"  218","line":"      i"},
{"lineNum":"  219","line":"    end"},
{"lineNum":"  220","line":"  end"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"  # Set union: returns a new `Array` by joining `self` with *other*, excluding"},
{"lineNum":"  223","line":"  # any duplicates, and preserving the order from `self`."},
{"lineNum":"  224","line":"  #"},
{"lineNum":"  225","line":"  # ```"},
{"lineNum":"  226","line":"  # [\"a\", \"b\", \"c\"] | [\"c\", \"d\", \"a\"] # => [ \"a\", \"b\", \"c\", \"d\" ]"},
{"lineNum":"  227","line":"  # ```"},
{"lineNum":"  228","line":"  #"},
{"lineNum":"  229","line":"  # See also: `#uniq`."},
{"lineNum":"  230","line":"  def |(other : Array(U)) forall U"},
{"lineNum":"  231","line":"    Array(T | U).build(size + other.size) do |buffer|"},
{"lineNum":"  232","line":"      hash = Hash(T, Bool).new"},
{"lineNum":"  233","line":"      i = 0"},
{"lineNum":"  234","line":"      each do |obj|"},
{"lineNum":"  235","line":"        unless hash.has_key?(obj)"},
{"lineNum":"  236","line":"          buffer[i] = obj"},
{"lineNum":"  237","line":"          hash[obj] = true"},
{"lineNum":"  238","line":"          i += 1"},
{"lineNum":"  239","line":"        end"},
{"lineNum":"  240","line":"      end"},
{"lineNum":"  241","line":"      other.each do |obj|"},
{"lineNum":"  242","line":"        unless hash.has_key?(obj)"},
{"lineNum":"  243","line":"          buffer[i] = obj"},
{"lineNum":"  244","line":"          hash[obj] = true"},
{"lineNum":"  245","line":"          i += 1"},
{"lineNum":"  246","line":"        end"},
{"lineNum":"  247","line":"      end"},
{"lineNum":"  248","line":"      i"},
{"lineNum":"  249","line":"    end"},
{"lineNum":"  250","line":"  end"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"  # Concatenation. Returns a new `Array` built by concatenating `self` and *other*."},
{"lineNum":"  253","line":"  # The type of the new array is the union of the types of both the original arrays."},
{"lineNum":"  254","line":"  #"},
{"lineNum":"  255","line":"  # ```","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"  256","line":"  # [1, 2] + [\"a\"]  # => [1,2,\"a\"] of (Int32 | String)"},
{"lineNum":"  257","line":"  # [1, 2] + [2, 3] # => [1,2,2,3]"},
{"lineNum":"  258","line":"  # ```"},
{"lineNum":"  259","line":"  def +(other : Array(U)) forall U","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  260","line":"    new_size = size + other.size"},
{"lineNum":"  261","line":"    Array(T | U).build(new_size) do |buffer|"},
{"lineNum":"  262","line":"      buffer.copy_from(@buffer, size)"},
{"lineNum":"  263","line":"      (buffer + size).copy_from(other.to_unsafe, other.size)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  264","line":"      new_size"},
{"lineNum":"  265","line":"    end"},
{"lineNum":"  266","line":"  end"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"  # Difference. Returns a new `Array` that is a copy of `self`, removing any items"},
{"lineNum":"  269","line":"  # that appear in *other*. The order of `self` is preserved."},
{"lineNum":"  270","line":"  #"},
{"lineNum":"  271","line":"  # ```"},
{"lineNum":"  272","line":"  # [1, 2, 3] - [2, 1] # => [3]"},
{"lineNum":"  273","line":"  # ```"},
{"lineNum":"  274","line":"  def -(other : Array(U)) forall U"},
{"lineNum":"  275","line":"    ary = Array(T).new(Math.max(size - other.size, 0))"},
{"lineNum":"  276","line":"    hash = other.to_lookup_hash"},
{"lineNum":"  277","line":"    each do |obj|"},
{"lineNum":"  278","line":"      ary << obj unless hash.has_key?(obj)"},
{"lineNum":"  279","line":"    end"},
{"lineNum":"  280","line":"    ary"},
{"lineNum":"  281","line":"  end"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"  # Repetition: Returns a new `Array` built by concatenating *times* copies of `self`."},
{"lineNum":"  284","line":"  #"},
{"lineNum":"  285","line":"  # ```"},
{"lineNum":"  286","line":"  # [\"a\", \"b\", \"c\"] * 2 # => [ \"a\", \"b\", \"c\", \"a\", \"b\", \"c\" ]"},
{"lineNum":"  287","line":"  # ```"},
{"lineNum":"  288","line":"  def *(times : Int)"},
{"lineNum":"  289","line":"    ary = Array(T).new(size * times)"},
{"lineNum":"  290","line":"    times.times do"},
{"lineNum":"  291","line":"      ary.concat(self)"},
{"lineNum":"  292","line":"    end"},
{"lineNum":"  293","line":"    ary"},
{"lineNum":"  294","line":"  end"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"  # Append. Alias for `push`."},
{"lineNum":"  297","line":"  #"},
{"lineNum":"  298","line":"  # ```"},
{"lineNum":"  299","line":"  # a = [1, 2]"},
{"lineNum":"  300","line":"  # a << 3 # => [1,2,3]"},
{"lineNum":"  301","line":"  # ```"},
{"lineNum":"  302","line":"  def <<(value : T)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  303","line":"    push(value)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  304","line":"  end"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"  # Sets the given value at the given index."},
{"lineNum":"  307","line":"  #"},
{"lineNum":"  308","line":"  # Negative indices can be used to start counting from the end of the array."},
{"lineNum":"  309","line":"  # Raises `IndexError` if trying to set an element outside the array\'s range."},
{"lineNum":"  310","line":"  #"},
{"lineNum":"  311","line":"  # ```"},
{"lineNum":"  312","line":"  # ary = [1, 2, 3]"},
{"lineNum":"  313","line":"  # ary[0] = 5"},
{"lineNum":"  314","line":"  # p ary # => [5,2,3]"},
{"lineNum":"  315","line":"  #"},
{"lineNum":"  316","line":"  # ary[3] = 5 # raises IndexError"},
{"lineNum":"  317","line":"  # ```"},
{"lineNum":"  318","line":"  @[AlwaysInline]"},
{"lineNum":"  319","line":"  def []=(index : Int, value : T)"},
{"lineNum":"  320","line":"    index = check_index_out_of_bounds index","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  321","line":"    @buffer[index] = value"},
{"lineNum":"  322","line":"  end"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"  # Replaces a subrange with a single value. All elements in the range"},
{"lineNum":"  325","line":"  # `index...index+count` are removed and replaced by a single element"},
{"lineNum":"  326","line":"  # *value*."},
{"lineNum":"  327","line":"  #"},
{"lineNum":"  328","line":"  # If *count* is zero, *value* is inserted at *index*."},
{"lineNum":"  329","line":"  #"},
{"lineNum":"  330","line":"  # Negative values of *index* count from the end of the array."},
{"lineNum":"  331","line":"  #"},
{"lineNum":"  332","line":"  # ```"},
{"lineNum":"  333","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  334","line":"  # a[1, 3] = 6"},
{"lineNum":"  335","line":"  # a # => [1, 6, 5]"},
{"lineNum":"  336","line":"  #"},
{"lineNum":"  337","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  338","line":"  # a[1, 0] = 6"},
{"lineNum":"  339","line":"  # a # => [1, 6, 2, 3, 4, 5]"},
{"lineNum":"  340","line":"  # ```"},
{"lineNum":"  341","line":"  def []=(index : Int, count : Int, value : T)"},
{"lineNum":"  342","line":"    raise ArgumentError.new \"Negative count: #{count}\" if count < 0"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    index = check_index_out_of_bounds index"},
{"lineNum":"  345","line":"    count = index + count <= size ? count : size - index"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"    case count"},
{"lineNum":"  348","line":"    when 0"},
{"lineNum":"  349","line":"      insert index, value"},
{"lineNum":"  350","line":"    when 1"},
{"lineNum":"  351","line":"      @buffer[index] = value"},
{"lineNum":"  352","line":"    else"},
{"lineNum":"  353","line":"      diff = count - 1"},
{"lineNum":"  354","line":"      (@buffer + index + 1).move_from(@buffer + index + count, size - index - count)"},
{"lineNum":"  355","line":"      (@buffer + @size - diff).clear(diff)"},
{"lineNum":"  356","line":"      @buffer[index] = value"},
{"lineNum":"  357","line":"      @size -= diff"},
{"lineNum":"  358","line":"    end","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"    value"},
{"lineNum":"  361","line":"  end"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"  # Replaces a subrange with a single value."},
{"lineNum":"  364","line":"  #"},
{"lineNum":"  365","line":"  # ```"},
{"lineNum":"  366","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  367","line":"  # a[1..3] = 6"},
{"lineNum":"  368","line":"  # a # => [1, 6, 5]"},
{"lineNum":"  369","line":"  #"},
{"lineNum":"  370","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  371","line":"  # a[1...1] = 6"},
{"lineNum":"  372","line":"  # a # => [1, 6, 2, 3, 4, 5]"},
{"lineNum":"  373","line":"  # ```"},
{"lineNum":"  374","line":"  def []=(range : Range(Int, Int), value : T)"},
{"lineNum":"  375","line":"    self[*Indexable.range_to_index_and_count(range, size)] = value"},
{"lineNum":"  376","line":"  end"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"  # Replaces a subrange with the elements of the given array."},
{"lineNum":"  379","line":"  #"},
{"lineNum":"  380","line":"  # ```"},
{"lineNum":"  381","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  382","line":"  # a[1, 3] = [6, 7, 8]"},
{"lineNum":"  383","line":"  # a # => [1, 6, 7, 8, 5]"},
{"lineNum":"  384","line":"  #"},
{"lineNum":"  385","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  386","line":"  # a[1, 3] = [6, 7]"},
{"lineNum":"  387","line":"  # a # => [1, 6, 7, 5]"},
{"lineNum":"  388","line":"  #"},
{"lineNum":"  389","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  390","line":"  # a[1, 3] = [6, 7, 8, 9, 10]"},
{"lineNum":"  391","line":"  # a # => [1, 6, 7, 8, 9, 10, 5]"},
{"lineNum":"  392","line":"  # ```"},
{"lineNum":"  393","line":"  def []=(index : Int, count : Int, values : Array(T))"},
{"lineNum":"  394","line":"    raise ArgumentError.new \"Negative count: #{count}\" if count < 0"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"    index = check_index_out_of_bounds index"},
{"lineNum":"  397","line":"    count = index + count <= size ? count : size - index"},
{"lineNum":"  398","line":"    diff = values.size - count"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"    if diff == 0"},
{"lineNum":"  401","line":"      # Replace values directly"},
{"lineNum":"  402","line":"      (@buffer + index).copy_from(values.to_unsafe, values.size)"},
{"lineNum":"  403","line":"    elsif diff < 0"},
{"lineNum":"  404","line":"      # Need to shrink"},
{"lineNum":"  405","line":"      diff = -diff"},
{"lineNum":"  406","line":"      (@buffer + index).copy_from(values.to_unsafe, values.size)"},
{"lineNum":"  407","line":"      (@buffer + index + values.size).move_from(@buffer + index + count, size - index - count)"},
{"lineNum":"  408","line":"      (@buffer + @size - diff).clear(diff)"},
{"lineNum":"  409","line":"      @size -= diff"},
{"lineNum":"  410","line":"    else"},
{"lineNum":"  411","line":"      # Need to grow"},
{"lineNum":"  412","line":"      resize_to_capacity(Math.pw2ceil(@size + diff))"},
{"lineNum":"  413","line":"      (@buffer + index + values.size).move_from(@buffer + index + count, size - index - count)"},
{"lineNum":"  414","line":"      (@buffer + index).copy_from(values.to_unsafe, values.size)"},
{"lineNum":"  415","line":"      @size += diff"},
{"lineNum":"  416","line":"    end"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    values"},
{"lineNum":"  419","line":"  end"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"  # Replaces a subrange with the elements of the given array."},
{"lineNum":"  422","line":"  #"},
{"lineNum":"  423","line":"  # ```"},
{"lineNum":"  424","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  425","line":"  # a[1..3] = [6, 7, 8]"},
{"lineNum":"  426","line":"  # a # => [1, 6, 7, 8, 5]"},
{"lineNum":"  427","line":"  #"},
{"lineNum":"  428","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  429","line":"  # a[1..3] = [6, 7]"},
{"lineNum":"  430","line":"  # a # => [1, 6, 7, 5]"},
{"lineNum":"  431","line":"  #"},
{"lineNum":"  432","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  433","line":"  # a[1..3] = [6, 7, 8, 9, 10]"},
{"lineNum":"  434","line":"  # a # => [1, 6, 7, 8, 9, 10, 5]"},
{"lineNum":"  435","line":"  # ```"},
{"lineNum":"  436","line":"  def []=(range : Range(Int, Int), values : Array(T))"},
{"lineNum":"  437","line":"    self[*Indexable.range_to_index_and_count(range, size)] = values"},
{"lineNum":"  438","line":"  end"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"  # Returns all elements that are within the given range."},
{"lineNum":"  441","line":"  #"},
{"lineNum":"  442","line":"  # Negative indices count backward from the end of the array (-1 is the last"},
{"lineNum":"  443","line":"  # element). Additionally, an empty array is returned when the starting index"},
{"lineNum":"  444","line":"  # for an element range is at the end of the array."},
{"lineNum":"  445","line":"  #"},
{"lineNum":"  446","line":"  # Raises `IndexError` if the starting index is out of range."},
{"lineNum":"  447","line":"  #"},
{"lineNum":"  448","line":"  # ```"},
{"lineNum":"  449","line":"  # a = [\"a\", \"b\", \"c\", \"d\", \"e\"]"},
{"lineNum":"  450","line":"  # a[1..3]    # => [\"b\", \"c\", \"d\"]"},
{"lineNum":"  451","line":"  # a[4..7]    # => [\"e\"]"},
{"lineNum":"  452","line":"  # a[6..10]   # raise IndexError"},
{"lineNum":"  453","line":"  # a[5..10]   # => []"},
{"lineNum":"  454","line":"  # a[-2...-1] # => [\"d\"]"},
{"lineNum":"  455","line":"  # ```"},
{"lineNum":"  456","line":"  def [](range : Range(Int, Int))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  457","line":"    self[*Indexable.range_to_index_and_count(range, size)]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  458","line":"  end"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"  # Returns count or less (if there aren\'t enough) elements starting at the"},
{"lineNum":"  461","line":"  # given start index."},
{"lineNum":"  462","line":"  #"},
{"lineNum":"  463","line":"  # Negative indices count backward from the end of the array (-1 is the last"},
{"lineNum":"  464","line":"  # element). Additionally, an empty array is returned when the starting index"},
{"lineNum":"  465","line":"  # for an element range is at the end of the array."},
{"lineNum":"  466","line":"  #"},
{"lineNum":"  467","line":"  # Raises `IndexError` if the starting index is out of range."},
{"lineNum":"  468","line":"  #"},
{"lineNum":"  469","line":"  # ```"},
{"lineNum":"  470","line":"  # a = [\"a\", \"b\", \"c\", \"d\", \"e\"]"},
{"lineNum":"  471","line":"  # a[-3, 3] # => [\"c\", \"d\", \"e\"]"},
{"lineNum":"  472","line":"  # a[6, 1]  # raise IndexError"},
{"lineNum":"  473","line":"  # a[1, 2]  # => [\"b\", \"c\"]"},
{"lineNum":"  474","line":"  # a[5, 1]  # => []"},
{"lineNum":"  475","line":"  # ```"},
{"lineNum":"  476","line":"  def [](start : Int, count : Int)"},
{"lineNum":"  477","line":"    raise ArgumentError.new \"Negative count: #{count}\" if count < 0"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"    if start == size","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  480","line":"      return Array(T).new"},
{"lineNum":"  481","line":"    end"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"    start += size if start < 0"},
{"lineNum":"  484","line":"    raise IndexError.new unless 0 <= start <= size"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"    if count == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  487","line":"      return Array(T).new"},
{"lineNum":"  488","line":"    end"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"    count = Math.min(count, size - start)"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    Array(T).build(count) do |buffer|"},
{"lineNum":"  493","line":"      buffer.copy_from(@buffer + start, count)"},
{"lineNum":"  494","line":"      count"},
{"lineNum":"  495","line":"    end"},
{"lineNum":"  496","line":"  end"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"  @[AlwaysInline]"},
{"lineNum":"  499","line":"  def unsafe_at(index : Int)"},
{"lineNum":"  500","line":"    @buffer[index]"},
{"lineNum":"  501","line":"  end"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"  # Removes all elements from self."},
{"lineNum":"  504","line":"  #"},
{"lineNum":"  505","line":"  # ```"},
{"lineNum":"  506","line":"  # a = [\"a\", \"b\", \"c\", \"d\", \"e\"]"},
{"lineNum":"  507","line":"  # a.clear # => []"},
{"lineNum":"  508","line":"  # ```"},
{"lineNum":"  509","line":"  def clear","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  510","line":"    @buffer.clear(@size)"},
{"lineNum":"  511","line":"    @size = 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  512","line":"    self"},
{"lineNum":"  513","line":"  end"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"  # Returns a new `Array` that has `self`\'s elements cloned."},
{"lineNum":"  516","line":"  # That is, it returns a deep copy of `self`."},
{"lineNum":"  517","line":"  #"},
{"lineNum":"  518","line":"  # Use `#dup` if you want a shallow copy."},
{"lineNum":"  519","line":"  #"},
{"lineNum":"  520","line":"  # ```"},
{"lineNum":"  521","line":"  # ary = [[1, 2], [3, 4]]"},
{"lineNum":"  522","line":"  # ary2 = ary.clone"},
{"lineNum":"  523","line":"  # ary[0][0] = 5"},
{"lineNum":"  524","line":"  # ary  # => [[5, 2], [3, 4]]"},
{"lineNum":"  525","line":"  # ary2 # => [[1, 2], [3, 4]]"},
{"lineNum":"  526","line":"  #"},
{"lineNum":"  527","line":"  # ary2 << [7, 8]"},
{"lineNum":"  528","line":"  # ary  # => [[5, 2], [3, 4]]"},
{"lineNum":"  529","line":"  # ary2 # => [[1, 2], [3, 4], [7, 8]]"},
{"lineNum":"  530","line":"  # ```"},
{"lineNum":"  531","line":"  def clone"},
{"lineNum":"  532","line":"    Array(T).new(size) { |i| @buffer[i].clone.as(T) }"},
{"lineNum":"  533","line":"  end"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"  # Returns a copy of `self` with all `nil` elements removed."},
{"lineNum":"  536","line":"  #"},
{"lineNum":"  537","line":"  # ```"},
{"lineNum":"  538","line":"  # [\"a\", nil, \"b\", nil, \"c\", nil].compact # => [\"a\", \"b\", \"c\"]"},
{"lineNum":"  539","line":"  # ```"},
{"lineNum":"  540","line":"  def compact"},
{"lineNum":"  541","line":"    compact_map &.itself"},
{"lineNum":"  542","line":"  end"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"  # Removes all `nil` elements from `self` and returns `self`."},
{"lineNum":"  545","line":"  #"},
{"lineNum":"  546","line":"  # ```"},
{"lineNum":"  547","line":"  # ary = [\"a\", nil, \"b\", nil, \"c\"]"},
{"lineNum":"  548","line":"  # ary.compact!"},
{"lineNum":"  549","line":"  # ary # => [\"a\", \"b\", \"c\"]"},
{"lineNum":"  550","line":"  # ```"},
{"lineNum":"  551","line":"  def compact!"},
{"lineNum":"  552","line":"    reject! &.nil?"},
{"lineNum":"  553","line":"  end"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"  # Appends the elements of *other* to `self`, and returns `self`."},
{"lineNum":"  556","line":"  #"},
{"lineNum":"  557","line":"  # ```"},
{"lineNum":"  558","line":"  # ary = [\"a\", \"b\"]"},
{"lineNum":"  559","line":"  # ary.concat([\"c\", \"d\"])"},
{"lineNum":"  560","line":"  # ary # => [\"a\", \"b\", \"c\", \"d\"]"},
{"lineNum":"  561","line":"  # ```"},
{"lineNum":"  562","line":"  def concat(other : Array)"},
{"lineNum":"  563","line":"    other_size = other.size"},
{"lineNum":"  564","line":"    new_size = size + other_size"},
{"lineNum":"  565","line":"    if new_size > @capacity"},
{"lineNum":"  566","line":"      resize_to_capacity(Math.pw2ceil(new_size))"},
{"lineNum":"  567","line":"    end"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"    (@buffer + @size).copy_from(other.to_unsafe, other_size)"},
{"lineNum":"  570","line":"    @size += other_size"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"    self"},
{"lineNum":"  573","line":"  end"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"  # ditto"},
{"lineNum":"  576","line":"  def concat(other : Enumerable)"},
{"lineNum":"  577","line":"    left_before_resize = @capacity - @size"},
{"lineNum":"  578","line":"    len = @size"},
{"lineNum":"  579","line":"    buf = @buffer + len"},
{"lineNum":"  580","line":"    other.each do |elem|"},
{"lineNum":"  581","line":"      if left_before_resize == 0"},
{"lineNum":"  582","line":"        double_capacity"},
{"lineNum":"  583","line":"        left_before_resize = @capacity - len"},
{"lineNum":"  584","line":"        buf = @buffer + len"},
{"lineNum":"  585","line":"      end"},
{"lineNum":"  586","line":"      buf.value = elem"},
{"lineNum":"  587","line":"      buf += 1"},
{"lineNum":"  588","line":"      len += 1"},
{"lineNum":"  589","line":"      left_before_resize -= 1"},
{"lineNum":"  590","line":"    end"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    @size = len"},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"    self"},
{"lineNum":"  595","line":"  end"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"  # Removes all items from `self` that are equal to *obj*."},
{"lineNum":"  598","line":"  #"},
{"lineNum":"  599","line":"  # Returns the last found element that was equal to *obj*,"},
{"lineNum":"  600","line":"  # if any, or `nil` if not found."},
{"lineNum":"  601","line":"  #"},
{"lineNum":"  602","line":"  # ```"},
{"lineNum":"  603","line":"  # a = [\"a\", \"b\", \"b\", \"b\", \"c\"]"},
{"lineNum":"  604","line":"  # a.delete(\"b\") # => \"b\""},
{"lineNum":"  605","line":"  # a             # => [\"a\", \"c\"]"},
{"lineNum":"  606","line":"  #"},
{"lineNum":"  607","line":"  # a.delete(\"x\") # => nil"},
{"lineNum":"  608","line":"  # a             # => [\"a\", \"c\"]"},
{"lineNum":"  609","line":"  # ```"},
{"lineNum":"  610","line":"  def delete(obj)"},
{"lineNum":"  611","line":"    internal_delete { |e| e == obj }[1]"},
{"lineNum":"  612","line":"  end"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"  # Removes the element at *index*, returning that element."},
{"lineNum":"  615","line":"  # Raises `IndexError` if *index* is out of range."},
{"lineNum":"  616","line":"  #"},
{"lineNum":"  617","line":"  # ```"},
{"lineNum":"  618","line":"  # a = [\"ant\", \"bat\", \"cat\", \"dog\"]"},
{"lineNum":"  619","line":"  # a.delete_at(2)  # => \"cat\""},
{"lineNum":"  620","line":"  # a               # => [\"ant\", \"bat\", \"dog\"]"},
{"lineNum":"  621","line":"  # a.delete_at(99) # raises IndexError"},
{"lineNum":"  622","line":"  # ```"},
{"lineNum":"  623","line":"  def delete_at(index : Int)"},
{"lineNum":"  624","line":"    index = check_index_out_of_bounds index"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"    elem = @buffer[index]"},
{"lineNum":"  627","line":"    (@buffer + index).move_from(@buffer + index + 1, size - index - 1)","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  628","line":"    @size -= 1","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  629","line":"    (@buffer + @size).clear"},
{"lineNum":"  630","line":"    elem"},
{"lineNum":"  631","line":"  end"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"  # Removes all elements within the given *range*."},
{"lineNum":"  634","line":"  # Returns an array of the removed elements with the original order of `self` preserved."},
{"lineNum":"  635","line":"  # Raises `IndexError` if the index is out of range."},
{"lineNum":"  636","line":"  #"},
{"lineNum":"  637","line":"  # ```"},
{"lineNum":"  638","line":"  # a = [\"ant\", \"bat\", \"cat\", \"dog\"]"},
{"lineNum":"  639","line":"  # a.delete_at(1..2)    # => [\"bat\", \"cat\"]"},
{"lineNum":"  640","line":"  # a                    # => [\"ant\", \"dog\"]"},
{"lineNum":"  641","line":"  # a.delete_at(99..100) # raises IndexError"},
{"lineNum":"  642","line":"  # ```"},
{"lineNum":"  643","line":"  def delete_at(range : Range(Int, Int))"},
{"lineNum":"  644","line":"    index, count = Indexable.range_to_index_and_count(range, self.size)"},
{"lineNum":"  645","line":"    delete_at(index, count)"},
{"lineNum":"  646","line":"  end"},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"  # Removes *count* elements from `self` starting at *index*."},
{"lineNum":"  649","line":"  # If the size of `self` is less than *count*, removes values to the end of the array without error."},
{"lineNum":"  650","line":"  # Returns an array of the removed elements with the original order of `self` preserved."},
{"lineNum":"  651","line":"  # Raises `IndexError` if *index* is out of range."},
{"lineNum":"  652","line":"  #"},
{"lineNum":"  653","line":"  # ```"},
{"lineNum":"  654","line":"  # a = [\"ant\", \"bat\", \"cat\", \"dog\"]"},
{"lineNum":"  655","line":"  # a.delete_at(1, 2)  # => [\"bat\", \"cat\"]"},
{"lineNum":"  656","line":"  # a                  # => [\"ant\", \"dog\"]"},
{"lineNum":"  657","line":"  # a.delete_at(99, 1) # raises IndexError"},
{"lineNum":"  658","line":"  # ```"},
{"lineNum":"  659","line":"  def delete_at(index : Int, count : Int)"},
{"lineNum":"  660","line":"    val = self[index, count]"},
{"lineNum":"  661","line":"    count = index + count <= size ? count : size - index"},
{"lineNum":"  662","line":"    (@buffer + index).move_from(@buffer + index + count, size - index - count)"},
{"lineNum":"  663","line":"    @size -= count"},
{"lineNum":"  664","line":"    (@buffer + @size).clear(count)"},
{"lineNum":"  665","line":"    val"},
{"lineNum":"  666","line":"  end"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"  # Returns a new `Array` that has exactly `self`\'s elements."},
{"lineNum":"  669","line":"  # That is, it returns a shallow copy of `self`."},
{"lineNum":"  670","line":"  #"},
{"lineNum":"  671","line":"  # Use `#clone` if you want a deep copy."},
{"lineNum":"  672","line":"  #"},
{"lineNum":"  673","line":"  # ```"},
{"lineNum":"  674","line":"  # ary = [[1, 2], [3, 4]]"},
{"lineNum":"  675","line":"  # ary2 = ary.dup"},
{"lineNum":"  676","line":"  # ary[0][0] = 5"},
{"lineNum":"  677","line":"  # ary  # => [[5, 2], [3, 4]]"},
{"lineNum":"  678","line":"  # ary2 # => [[5, 2], [3, 4]]"},
{"lineNum":"  679","line":"  #"},
{"lineNum":"  680","line":"  # ary2 << [7, 8]"},
{"lineNum":"  681","line":"  # ary  # => [[5, 2], [3, 4]]"},
{"lineNum":"  682","line":"  # ary2 # => [[5, 2], [3, 4], [7, 8]]"},
{"lineNum":"  683","line":"  # ```"},
{"lineNum":"  684","line":"  def dup","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  685","line":"    Array(T).build(@capacity) do |buffer|"},
{"lineNum":"  686","line":"      buffer.copy_from(@buffer, size)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  687","line":"      size"},
{"lineNum":"  688","line":"    end"},
{"lineNum":"  689","line":"  end"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"  # Yields each index of `self` to the given block and then assigns"},
{"lineNum":"  692","line":"  # the block\'s value in that position. Returns `self`."},
{"lineNum":"  693","line":"  #"},
{"lineNum":"  694","line":"  # ```"},
{"lineNum":"  695","line":"  # a = [1, 2, 3, 4]"},
{"lineNum":"  696","line":"  # a.fill { |i| i * i } # => [0, 1, 4, 9]"},
{"lineNum":"  697","line":"  # ```"},
{"lineNum":"  698","line":"  def fill"},
{"lineNum":"  699","line":"    each_index { |i| @buffer[i] = yield i }"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"    self"},
{"lineNum":"  702","line":"  end"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"  # Yields each index of `self`, starting at *from*, to the given block and then assigns"},
{"lineNum":"  705","line":"  # the block\'s value in that position. Returns `self`."},
{"lineNum":"  706","line":"  #"},
{"lineNum":"  707","line":"  # Negative values of *from* count from the end of the array."},
{"lineNum":"  708","line":"  #"},
{"lineNum":"  709","line":"  # Raises `IndexError` if *from* is outside the array range."},
{"lineNum":"  710","line":"  #"},
{"lineNum":"  711","line":"  # ```"},
{"lineNum":"  712","line":"  # a = [1, 2, 3, 4]"},
{"lineNum":"  713","line":"  # a.fill(2) { |i| i * i } # => [1, 2, 4, 9]"},
{"lineNum":"  714","line":"  # ```"},
{"lineNum":"  715","line":"  def fill(from : Int)"},
{"lineNum":"  716","line":"    from += size if from < 0"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"    raise IndexError.new unless 0 <= from < size"},
{"lineNum":"  719","line":""},
{"lineNum":"  720","line":"    from.upto(size - 1) { |i| @buffer[i] = yield i }"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"    self"},
{"lineNum":"  723","line":"  end"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"  # Yields each index of `self`, starting at *from* and just *count* times,"},
{"lineNum":"  726","line":"  # to the given block and then assigns the block\'s value in that position. Returns `self`."},
{"lineNum":"  727","line":"  #"},
{"lineNum":"  728","line":"  # Negative values of *from* count from the end of the array."},
{"lineNum":"  729","line":"  #"},
{"lineNum":"  730","line":"  # Raises `IndexError` if *from* is outside the array range."},
{"lineNum":"  731","line":"  #"},
{"lineNum":"  732","line":"  # Has no effect if *count* is zero or negative."},
{"lineNum":"  733","line":"  #"},
{"lineNum":"  734","line":"  # ```"},
{"lineNum":"  735","line":"  # a = [1, 2, 3, 4, 5, 6]"},
{"lineNum":"  736","line":"  # a.fill(2, 2) { |i| i * i } # => [1, 2, 4, 9, 5, 6]"},
{"lineNum":"  737","line":"  # ```"},
{"lineNum":"  738","line":"  def fill(from : Int, count : Int)"},
{"lineNum":"  739","line":"    return self if count <= 0"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"    from += size if from < 0"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"    raise IndexError.new unless 0 <= from < size && from + count <= size"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"    from.upto(from + count - 1) { |i| @buffer[i] = yield i }"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"    self"},
{"lineNum":"  748","line":"  end"},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"  # Yields each index of `self`, in the given *range*, to the given block and then assigns"},
{"lineNum":"  751","line":"  # the block\'s value in that position. Returns `self`."},
{"lineNum":"  752","line":"  #"},
{"lineNum":"  753","line":"  # ```"},
{"lineNum":"  754","line":"  # a = [1, 2, 3, 4, 5, 6]"},
{"lineNum":"  755","line":"  # a.fill(2..3) { |i| i * i } # => [1, 2, 4, 9, 5, 6]"},
{"lineNum":"  756","line":"  # ```"},
{"lineNum":"  757","line":"  def fill(range : Range(Int, Int))"},
{"lineNum":"  758","line":"    fill(*Indexable.range_to_index_and_count(range, size)) do |i|"},
{"lineNum":"  759","line":"      yield i"},
{"lineNum":"  760","line":"    end"},
{"lineNum":"  761","line":"  end"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"  # Replaces every element in `self` with the given *value*. Returns `self`."},
{"lineNum":"  764","line":"  #"},
{"lineNum":"  765","line":"  # ```"},
{"lineNum":"  766","line":"  # a = [1, 2, 3]"},
{"lineNum":"  767","line":"  # a.fill(9) # => [9, 9, 9]"},
{"lineNum":"  768","line":"  # ```"},
{"lineNum":"  769","line":"  def fill(value : T)"},
{"lineNum":"  770","line":"    fill { value }"},
{"lineNum":"  771","line":"  end"},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"  # Replaces every element in `self`, starting at *from*, with the given *value*. Returns `self`."},
{"lineNum":"  774","line":"  #"},
{"lineNum":"  775","line":"  # Negative values of *from* count from the end of the array."},
{"lineNum":"  776","line":"  #"},
{"lineNum":"  777","line":"  # ```"},
{"lineNum":"  778","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  779","line":"  # a.fill(9, 2) # => [1, 2, 9, 9, 9]"},
{"lineNum":"  780","line":"  # ```"},
{"lineNum":"  781","line":"  def fill(value : T, from : Int)"},
{"lineNum":"  782","line":"    fill(from) { value }"},
{"lineNum":"  783","line":"  end"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"  # Replaces every element in `self`, starting at *from* and only *count* times,"},
{"lineNum":"  786","line":"  # with the given *value*. Returns `self`."},
{"lineNum":"  787","line":"  #"},
{"lineNum":"  788","line":"  # Negative values of *from* count from the end of the array."},
{"lineNum":"  789","line":"  #"},
{"lineNum":"  790","line":"  # ```"},
{"lineNum":"  791","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  792","line":"  # a.fill(9, 2, 2) # => [1, 2, 9, 9, 5]"},
{"lineNum":"  793","line":"  # ```"},
{"lineNum":"  794","line":"  def fill(value : T, from : Int, count : Int)"},
{"lineNum":"  795","line":"    fill(from, count) { value }"},
{"lineNum":"  796","line":"  end"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"  # Replaces every element in *range* with *value*. Returns `self`."},
{"lineNum":"  799","line":"  #"},
{"lineNum":"  800","line":"  # Negative values of *from* count from the end of the array."},
{"lineNum":"  801","line":"  #"},
{"lineNum":"  802","line":"  # ```"},
{"lineNum":"  803","line":"  # a = [1, 2, 3, 4, 5]"},
{"lineNum":"  804","line":"  # a.fill(9, 2..3) # => [1, 2, 9, 9, 5]"},
{"lineNum":"  805","line":"  # ```"},
{"lineNum":"  806","line":"  def fill(value : T, range : Range(Int, Int))"},
{"lineNum":"  807","line":"    fill(range) { value }"},
{"lineNum":"  808","line":"  end"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"  # Returns the first *n* elements of the array."},
{"lineNum":"  811","line":"  #"},
{"lineNum":"  812","line":"  # ```"},
{"lineNum":"  813","line":"  # [1, 2, 3].first(2) # => [1, 2]"},
{"lineNum":"  814","line":"  # [1, 2, 3].first(4) # => [1, 2, 3]"},
{"lineNum":"  815","line":"  # ```"},
{"lineNum":"  816","line":"  def first(n : Int)"},
{"lineNum":"  817","line":"    self[0, n]"},
{"lineNum":"  818","line":"  end"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"  # Insert *object* before the element at *index* and shifting successive elements, if any."},
{"lineNum":"  821","line":"  # Returns `self`."},
{"lineNum":"  822","line":"  #"},
{"lineNum":"  823","line":"  # Negative values of *index* count from the end of the array."},
{"lineNum":"  824","line":"  #"},
{"lineNum":"  825","line":"  # ```"},
{"lineNum":"  826","line":"  # a = [\"a\", \"b\", \"c\"]"},
{"lineNum":"  827","line":"  # a.insert(0, \"x\")  # => [\"x\", \"a\", \"b\", \"c\"]"},
{"lineNum":"  828","line":"  # a.insert(2, \"y\")  # => [\"x\", \"a\", \"y\", \"b\", \"c\"]"},
{"lineNum":"  829","line":"  # a.insert(-1, \"z\") # => [\"x\", \"a\", \"y\", \"b\", \"c\", \"z\"]"},
{"lineNum":"  830","line":"  # ```"},
{"lineNum":"  831","line":"  def insert(index : Int, object : T)"},
{"lineNum":"  832","line":"    check_needs_resize"},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"    if index < 0"},
{"lineNum":"  835","line":"      index += size + 1"},
{"lineNum":"  836","line":"    end"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"    unless 0 <= index <= size"},
{"lineNum":"  839","line":"      raise IndexError.new"},
{"lineNum":"  840","line":"    end"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"    (@buffer + index + 1).move_from(@buffer + index, size - index)"},
{"lineNum":"  843","line":"    @buffer[index] = object"},
{"lineNum":"  844","line":"    @size += 1"},
{"lineNum":"  845","line":"    self"},
{"lineNum":"  846","line":"  end"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"  # :nodoc:"},
{"lineNum":"  849","line":"  def inspect(io : IO)"},
{"lineNum":"  850","line":"    to_s io"},
{"lineNum":"  851","line":"  end"},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"  # Returns the last *n* elements of the array."},
{"lineNum":"  854","line":"  #"},
{"lineNum":"  855","line":"  # ```"},
{"lineNum":"  856","line":"  # [1, 2, 3].last(2) # => [2, 3]"},
{"lineNum":"  857","line":"  # [1, 2, 3].last(4) # => [1, 2, 3]"},
{"lineNum":"  858","line":"  # ```"},
{"lineNum":"  859","line":"  def last(n : Int)"},
{"lineNum":"  860","line":"    if n < @size"},
{"lineNum":"  861","line":"      self[@size - n, n]"},
{"lineNum":"  862","line":"    else"},
{"lineNum":"  863","line":"      dup"},
{"lineNum":"  864","line":"    end"},
{"lineNum":"  865","line":"  end"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"  # :nodoc:"},
{"lineNum":"  868","line":"  protected def size=(size : Int)"},
{"lineNum":"  869","line":"    @size = size.to_i","class":"lineNoCov","hits":"0","possible_hits":"39",},
{"lineNum":"  870","line":"  end"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"  # Optimized version of `Enumerable#map`."},
{"lineNum":"  873","line":"  def map(&block : T -> U) forall U"},
{"lineNum":"  874","line":"    Array(U).new(size) { |i| yield @buffer[i] }"},
{"lineNum":"  875","line":"  end"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"  # Invokes the given block for each element of `self`, replacing the element"},
{"lineNum":"  878","line":"  # with the value returned by the block. Returns `self`."},
{"lineNum":"  879","line":"  #"},
{"lineNum":"  880","line":"  # ```"},
{"lineNum":"  881","line":"  # a = [1, 2, 3]"},
{"lineNum":"  882","line":"  # a.map! { |x| x * x }"},
{"lineNum":"  883","line":"  # a # => [1, 4, 9]"},
{"lineNum":"  884","line":"  # ```"},
{"lineNum":"  885","line":"  def map!"},
{"lineNum":"  886","line":"    @buffer.map!(size) { |e| yield e }"},
{"lineNum":"  887","line":"    self"},
{"lineNum":"  888","line":"  end"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"  # Modifies `self`, keeping only the elements in the collection for which the"},
{"lineNum":"  891","line":"  # passed block returns `true`. Returns `self`."},
{"lineNum":"  892","line":"  #"},
{"lineNum":"  893","line":"  # See also: `Array#select`."},
{"lineNum":"  894","line":"  def select!"},
{"lineNum":"  895","line":"    reject! { |elem| !yield(elem) }"},
{"lineNum":"  896","line":"  end"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"  # Modifies `self`, deleting the elements in the collection for which the"},
{"lineNum":"  899","line":"  # passed block returns `true`. Returns `self`."},
{"lineNum":"  900","line":"  #"},
{"lineNum":"  901","line":"  # See also: `Array#reject`."},
{"lineNum":"  902","line":"  def reject!"},
{"lineNum":"  903","line":"    internal_delete { |e| yield e }"},
{"lineNum":"  904","line":"    self"},
{"lineNum":"  905","line":"  end"},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"  # `reject!` and `delete` implementation: returns a tuple {x, y}"},
{"lineNum":"  908","line":"  # with x being self/nil (modified, not modified)"},
{"lineNum":"  909","line":"  # and y being the last matching element, or nil"},
{"lineNum":"  910","line":"  private def internal_delete"},
{"lineNum":"  911","line":"    i1 = 0"},
{"lineNum":"  912","line":"    i2 = 0"},
{"lineNum":"  913","line":"    match = nil"},
{"lineNum":"  914","line":"    while i1 < @size"},
{"lineNum":"  915","line":"      e = @buffer[i1]"},
{"lineNum":"  916","line":"      if yield e"},
{"lineNum":"  917","line":"        match = e"},
{"lineNum":"  918","line":"      else"},
{"lineNum":"  919","line":"        if i1 != i2"},
{"lineNum":"  920","line":"          @buffer[i2] = e"},
{"lineNum":"  921","line":"        end"},
{"lineNum":"  922","line":"        i2 += 1"},
{"lineNum":"  923","line":"      end"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"      i1 += 1"},
{"lineNum":"  926","line":"    end"},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"    if i2 != i1"},
{"lineNum":"  929","line":"      count = i1 - i2"},
{"lineNum":"  930","line":"      @size -= count"},
{"lineNum":"  931","line":"      (@buffer + @size).clear(count)"},
{"lineNum":"  932","line":"      {self, match}"},
{"lineNum":"  933","line":"    else"},
{"lineNum":"  934","line":"      {nil, match}"},
{"lineNum":"  935","line":"    end"},
{"lineNum":"  936","line":"  end"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"  # Optimized version of `Enumerable#map_with_index`."},
{"lineNum":"  939","line":"  def map_with_index(&block : T, Int32 -> U) forall U"},
{"lineNum":"  940","line":"    Array(U).new(size) { |i| yield @buffer[i], i }"},
{"lineNum":"  941","line":"  end"},
{"lineNum":"  942","line":""},
{"lineNum":"  943","line":"  # Like `map_with_index`, but mutates `self` instead of allocating a new object."},
{"lineNum":"  944","line":"  def map_with_index!(&block : (T, Int32) -> T)"},
{"lineNum":"  945","line":"    to_unsafe.map_with_index!(size) { |e, i| yield e, i }"},
{"lineNum":"  946","line":"    self"},
{"lineNum":"  947","line":"  end"},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"  # Returns an `Array` with all possible permutations of *size*."},
{"lineNum":"  950","line":"  #"},
{"lineNum":"  951","line":"  # ```"},
{"lineNum":"  952","line":"  # a = [1, 2, 3]"},
{"lineNum":"  953","line":"  # a.permutations    # => [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"},
{"lineNum":"  954","line":"  # a.permutations(1) # => [[1],[2],[3]]"},
{"lineNum":"  955","line":"  # a.permutations(2) # => [[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]]"},
{"lineNum":"  956","line":"  # a.permutations(3) # => [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"},
{"lineNum":"  957","line":"  # a.permutations(0) # => [[]]"},
{"lineNum":"  958","line":"  # a.permutations(4) # => []"},
{"lineNum":"  959","line":"  # ```"},
{"lineNum":"  960","line":"  def permutations(size : Int = self.size)"},
{"lineNum":"  961","line":"    ary = [] of Array(T)"},
{"lineNum":"  962","line":"    each_permutation(size) do |a|"},
{"lineNum":"  963","line":"      ary << a"},
{"lineNum":"  964","line":"    end"},
{"lineNum":"  965","line":"    ary"},
{"lineNum":"  966","line":"  end"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"  # Yields each possible permutation of *size* of `self`."},
{"lineNum":"  969","line":"  #"},
{"lineNum":"  970","line":"  # ```"},
{"lineNum":"  971","line":"  # a = [1, 2, 3]"},
{"lineNum":"  972","line":"  # sums = [] of Int32"},
{"lineNum":"  973","line":"  # a.each_permutation(2) { |p| sums << p.sum } # => nil"},
{"lineNum":"  974","line":"  # sums                                        # => [3, 4, 3, 5, 4, 5]"},
{"lineNum":"  975","line":"  # ```"},
{"lineNum":"  976","line":"  #"},
{"lineNum":"  977","line":"  # By default, a new array is created and yielded for each permutation."},
{"lineNum":"  978","line":"  # If *reuse* is given, the array can be reused: if *reuse* is"},
{"lineNum":"  979","line":"  # an `Array`, this array will be reused; if *reuse* if truthy,"},
{"lineNum":"  980","line":"  # the method will create a new array and reuse it. This can be"},
{"lineNum":"  981","line":"  # used to prevent many memory allocations when each slice of"},
{"lineNum":"  982","line":"  # interest is to be used in a read-only fashion."},
{"lineNum":"  983","line":"  def each_permutation(size : Int = self.size, reuse = false) : Nil"},
{"lineNum":"  984","line":"    n = self.size"},
{"lineNum":"  985","line":"    return if size > n"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"    raise ArgumentError.new(\"Size must be positive\") if size < 0"},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"    reuse = check_reuse(reuse, size)"},
{"lineNum":"  990","line":"    pool = self.dup"},
{"lineNum":"  991","line":"    cycles = (n - size + 1..n).to_a.reverse!"},
{"lineNum":"  992","line":"    yield pool_slice(pool, size, reuse)"},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"    while true"},
{"lineNum":"  995","line":"      stop = true"},
{"lineNum":"  996","line":"      i = size - 1"},
{"lineNum":"  997","line":"      while i >= 0"},
{"lineNum":"  998","line":"        ci = (cycles[i] -= 1)"},
{"lineNum":"  999","line":"        if ci == 0"},
{"lineNum":" 1000","line":"          e = pool[i]"},
{"lineNum":" 1001","line":"          (i + 1).upto(n - 1) { |j| pool[j - 1] = pool[j] }"},
{"lineNum":" 1002","line":"          pool[n - 1] = e"},
{"lineNum":" 1003","line":"          cycles[i] = n - i"},
{"lineNum":" 1004","line":"        else"},
{"lineNum":" 1005","line":"          pool.swap i, -ci"},
{"lineNum":" 1006","line":"          yield pool_slice(pool, size, reuse)"},
{"lineNum":" 1007","line":"          stop = false"},
{"lineNum":" 1008","line":"          break"},
{"lineNum":" 1009","line":"        end"},
{"lineNum":" 1010","line":"        i -= 1"},
{"lineNum":" 1011","line":"      end"},
{"lineNum":" 1012","line":""},
{"lineNum":" 1013","line":"      return if stop"},
{"lineNum":" 1014","line":"    end"},
{"lineNum":" 1015","line":"  end"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"  # Returns an `Iterator` over each possible permutation of *size* of `self`."},
{"lineNum":" 1018","line":"  #"},
{"lineNum":" 1019","line":"  # ```"},
{"lineNum":" 1020","line":"  # iter = [1, 2, 3].each_permutation"},
{"lineNum":" 1021","line":"  # iter.next # => [1, 2, 3]"},
{"lineNum":" 1022","line":"  # iter.next # => [1, 3, 2]"},
{"lineNum":" 1023","line":"  # iter.next # => [2, 1, 3]"},
{"lineNum":" 1024","line":"  # iter.next # => [2, 3, 1]"},
{"lineNum":" 1025","line":"  # iter.next # => [3, 1, 2]"},
{"lineNum":" 1026","line":"  # iter.next # => [3, 2, 1]"},
{"lineNum":" 1027","line":"  # iter.next # => #<Iterator::Stop>"},
{"lineNum":" 1028","line":"  # ```"},
{"lineNum":" 1029","line":"  #"},
{"lineNum":" 1030","line":"  # By default, a new array is created and returned for each permutation."},
{"lineNum":" 1031","line":"  # If *reuse* is given, the array can be reused: if *reuse* is"},
{"lineNum":" 1032","line":"  # an `Array`, this array will be reused; if *reuse* if truthy,"},
{"lineNum":" 1033","line":"  # the method will create a new array and reuse it. This can be"},
{"lineNum":" 1034","line":"  # used to prevent many memory allocations when each slice of"},
{"lineNum":" 1035","line":"  # interest is to be used in a read-only fashion."},
{"lineNum":" 1036","line":"  def each_permutation(size : Int = self.size, reuse = false)"},
{"lineNum":" 1037","line":"    raise ArgumentError.new(\"Size must be positive\") if size < 0"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"    PermutationIterator.new(self, size.to_i, reuse)"},
{"lineNum":" 1040","line":"  end"},
{"lineNum":" 1041","line":""},
{"lineNum":" 1042","line":"  def combinations(size : Int = self.size)"},
{"lineNum":" 1043","line":"    ary = [] of Array(T)"},
{"lineNum":" 1044","line":"    each_combination(size) do |a|"},
{"lineNum":" 1045","line":"      ary << a"},
{"lineNum":" 1046","line":"    end"},
{"lineNum":" 1047","line":"    ary"},
{"lineNum":" 1048","line":"  end"},
{"lineNum":" 1049","line":""},
{"lineNum":" 1050","line":"  def each_combination(size : Int = self.size, reuse = false) : Nil"},
{"lineNum":" 1051","line":"    n = self.size"},
{"lineNum":" 1052","line":"    return if size > n"},
{"lineNum":" 1053","line":"    raise ArgumentError.new(\"Size must be positive\") if size < 0"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"    reuse = check_reuse(reuse, size)"},
{"lineNum":" 1056","line":"    copy = self.dup"},
{"lineNum":" 1057","line":"    pool = self.dup"},
{"lineNum":" 1058","line":""},
{"lineNum":" 1059","line":"    indices = (0...size).to_a"},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"    yield pool_slice(pool, size, reuse)"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"    while true"},
{"lineNum":" 1064","line":"      stop = true"},
{"lineNum":" 1065","line":"      i = size - 1"},
{"lineNum":" 1066","line":"      while i >= 0"},
{"lineNum":" 1067","line":"        if indices[i] != i + n - size"},
{"lineNum":" 1068","line":"          stop = false"},
{"lineNum":" 1069","line":"          break"},
{"lineNum":" 1070","line":"        end"},
{"lineNum":" 1071","line":"        i -= 1"},
{"lineNum":" 1072","line":"      end"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"      return if stop"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"      indices[i] += 1"},
{"lineNum":" 1077","line":"      pool[i] = copy[indices[i]]"},
{"lineNum":" 1078","line":""},
{"lineNum":" 1079","line":"      (i + 1).upto(size - 1) do |j|"},
{"lineNum":" 1080","line":"        indices[j] = indices[j - 1] + 1"},
{"lineNum":" 1081","line":"        pool[j] = copy[indices[j]]"},
{"lineNum":" 1082","line":"      end"},
{"lineNum":" 1083","line":""},
{"lineNum":" 1084","line":"      yield pool_slice(pool, size, reuse)"},
{"lineNum":" 1085","line":"    end"},
{"lineNum":" 1086","line":"  end"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"  private def each_combination_piece(pool, size, reuse)"},
{"lineNum":" 1089","line":"    if reuse"},
{"lineNum":" 1090","line":"      reuse.clear"},
{"lineNum":" 1091","line":"      size.times { |i| reuse << pool[i] }"},
{"lineNum":" 1092","line":"      reuse"},
{"lineNum":" 1093","line":"    else"},
{"lineNum":" 1094","line":"      pool[0, size]"},
{"lineNum":" 1095","line":"    end"},
{"lineNum":" 1096","line":"  end"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"  def each_combination(size : Int = self.size, reuse = false)"},
{"lineNum":" 1099","line":"    raise ArgumentError.new(\"Size must be positive\") if size < 0"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"    CombinationIterator.new(self, size.to_i, reuse)"},
{"lineNum":" 1102","line":"  end"},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"  private def check_reuse(reuse, size)"},
{"lineNum":" 1105","line":"    if reuse"},
{"lineNum":" 1106","line":"      unless reuse.is_a?(Array)"},
{"lineNum":" 1107","line":"        reuse = typeof(self).new(size)"},
{"lineNum":" 1108","line":"      end"},
{"lineNum":" 1109","line":"    else"},
{"lineNum":" 1110","line":"      reuse = nil"},
{"lineNum":" 1111","line":"    end"},
{"lineNum":" 1112","line":"    reuse"},
{"lineNum":" 1113","line":"  end"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"  # Returns a new `Array` that is a one-dimensional flattening of `self` (recursively)."},
{"lineNum":" 1116","line":"  #"},
{"lineNum":" 1117","line":"  # That is, for every element that is an array or an iterator, extract its elements into the new array."},
{"lineNum":" 1118","line":"  #"},
{"lineNum":" 1119","line":"  # ```"},
{"lineNum":" 1120","line":"  # s = [1, 2, 3]          # => [1, 2, 3]"},
{"lineNum":" 1121","line":"  # t = [4, 5, 6, [7, 8]]  # => [4, 5, 6, [7, 8]]"},
{"lineNum":" 1122","line":"  # u = [9, [10, 11].each] # => [9, #<Indexable::ItemIterator>]"},
{"lineNum":" 1123","line":"  # a = [s, t, u, 12, 13]  # => [[1, 2, 3], [4, 5, 6, [7, 8]], 9, #<Indexable::ItemIterator>, 12, 13]"},
{"lineNum":" 1124","line":"  # a.flatten              # => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"},
{"lineNum":" 1125","line":"  # ```"},
{"lineNum":" 1126","line":"  def flatten"},
{"lineNum":" 1127","line":"    FlattenHelper(typeof(FlattenHelper.element_type(self))).flatten(self)"},
{"lineNum":" 1128","line":"  end"},
{"lineNum":" 1129","line":""},
{"lineNum":" 1130","line":"  def repeated_combinations(size : Int = self.size)"},
{"lineNum":" 1131","line":"    ary = [] of Array(T)"},
{"lineNum":" 1132","line":"    each_repeated_combination(size) do |a|"},
{"lineNum":" 1133","line":"      ary << a"},
{"lineNum":" 1134","line":"    end"},
{"lineNum":" 1135","line":"    ary"},
{"lineNum":" 1136","line":"  end"},
{"lineNum":" 1137","line":""},
{"lineNum":" 1138","line":"  def each_repeated_combination(size : Int = self.size, reuse = false) : Nil"},
{"lineNum":" 1139","line":"    n = self.size"},
{"lineNum":" 1140","line":"    return if size > n && n == 0"},
{"lineNum":" 1141","line":"    raise ArgumentError.new(\"Size must be positive\") if size < 0"},
{"lineNum":" 1142","line":""},
{"lineNum":" 1143","line":"    reuse = check_reuse(reuse, size)"},
{"lineNum":" 1144","line":"    copy = self.dup"},
{"lineNum":" 1145","line":"    indices = Array.new(size, 0)"},
{"lineNum":" 1146","line":"    pool = indices.map { |i| copy[i] }"},
{"lineNum":" 1147","line":""},
{"lineNum":" 1148","line":"    yield pool_slice(pool, size, reuse)"},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"    while true"},
{"lineNum":" 1151","line":"      stop = true"},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"      i = size - 1"},
{"lineNum":" 1154","line":"      while i >= 0"},
{"lineNum":" 1155","line":"        if indices[i] != n - 1"},
{"lineNum":" 1156","line":"          stop = false"},
{"lineNum":" 1157","line":"          break"},
{"lineNum":" 1158","line":"        end"},
{"lineNum":" 1159","line":"        i -= 1"},
{"lineNum":" 1160","line":"      end"},
{"lineNum":" 1161","line":"      return if stop"},
{"lineNum":" 1162","line":""},
{"lineNum":" 1163","line":"      ii = indices[i] + 1"},
{"lineNum":" 1164","line":"      tmp = copy[ii]"},
{"lineNum":" 1165","line":"      indices.fill(i, size - i) { ii }"},
{"lineNum":" 1166","line":"      pool.fill(i, size - i) { tmp }"},
{"lineNum":" 1167","line":""},
{"lineNum":" 1168","line":"      yield pool_slice(pool, size, reuse)"},
{"lineNum":" 1169","line":"    end"},
{"lineNum":" 1170","line":"  end"},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":"  def each_repeated_combination(size : Int = self.size, reuse = false)"},
{"lineNum":" 1173","line":"    raise ArgumentError.new(\"Size must be positive\") if size < 0"},
{"lineNum":" 1174","line":""},
{"lineNum":" 1175","line":"    RepeatedCombinationIterator.new(self, size.to_i, reuse)"},
{"lineNum":" 1176","line":"  end"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"  def self.product(arrays)"},
{"lineNum":" 1179","line":"    result = [] of Array(typeof(arrays.first.first))"},
{"lineNum":" 1180","line":"    each_product(arrays) do |product|"},
{"lineNum":" 1181","line":"      result << product"},
{"lineNum":" 1182","line":"    end"},
{"lineNum":" 1183","line":"    result"},
{"lineNum":" 1184","line":"  end"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"  def self.product(*arrays : Array)"},
{"lineNum":" 1187","line":"    product(arrays.to_a)"},
{"lineNum":" 1188","line":"  end"},
{"lineNum":" 1189","line":""},
{"lineNum":" 1190","line":"  def self.each_product(arrays : Array(Array), reuse = false)"},
{"lineNum":" 1191","line":"    lens = arrays.map &.size"},
{"lineNum":" 1192","line":"    return if lens.any? &.==(0)"},
{"lineNum":" 1193","line":""},
{"lineNum":" 1194","line":"    pool = arrays.map &.first"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"    n = arrays.size"},
{"lineNum":" 1197","line":"    indices = Array.new(n, 0)"},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"    if reuse"},
{"lineNum":" 1200","line":"      unless reuse.is_a?(Array)"},
{"lineNum":" 1201","line":"        reuse = typeof(pool).new(n)"},
{"lineNum":" 1202","line":"      end"},
{"lineNum":" 1203","line":"    else"},
{"lineNum":" 1204","line":"      reuse = nil"},
{"lineNum":" 1205","line":"    end"},
{"lineNum":" 1206","line":""},
{"lineNum":" 1207","line":"    yield pool_slice(pool, n, reuse)"},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"    while true"},
{"lineNum":" 1210","line":"      i = n - 1"},
{"lineNum":" 1211","line":"      indices[i] += 1"},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":"      while indices[i] >= lens[i]"},
{"lineNum":" 1214","line":"        indices[i] = 0"},
{"lineNum":" 1215","line":"        pool[i] = arrays[i][indices[i]]"},
{"lineNum":" 1216","line":"        i -= 1"},
{"lineNum":" 1217","line":"        return if i < 0"},
{"lineNum":" 1218","line":"        indices[i] += 1"},
{"lineNum":" 1219","line":"      end"},
{"lineNum":" 1220","line":"      pool[i] = arrays[i][indices[i]]"},
{"lineNum":" 1221","line":"      yield pool_slice(pool, n, reuse)"},
{"lineNum":" 1222","line":"    end"},
{"lineNum":" 1223","line":"  end"},
{"lineNum":" 1224","line":""},
{"lineNum":" 1225","line":"  def self.each_product(*arrays : Array, reuse = false)"},
{"lineNum":" 1226","line":"    each_product(arrays.to_a, reuse: reuse) do |result|"},
{"lineNum":" 1227","line":"      yield result"},
{"lineNum":" 1228","line":"    end"},
{"lineNum":" 1229","line":"  end"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"  def repeated_permutations(size : Int = self.size)"},
{"lineNum":" 1232","line":"    ary = [] of Array(T)"},
{"lineNum":" 1233","line":"    each_repeated_permutation(size) do |a|"},
{"lineNum":" 1234","line":"      ary << a"},
{"lineNum":" 1235","line":"    end"},
{"lineNum":" 1236","line":"    ary"},
{"lineNum":" 1237","line":"  end"},
{"lineNum":" 1238","line":""},
{"lineNum":" 1239","line":"  def each_repeated_permutation(size : Int = self.size, reuse = false) : Nil"},
{"lineNum":" 1240","line":"    n = self.size"},
{"lineNum":" 1241","line":"    return if size != 0 && n == 0"},
{"lineNum":" 1242","line":"    raise ArgumentError.new(\"Size must be positive\") if size < 0"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"    if size == 0"},
{"lineNum":" 1245","line":"      yield([] of T)"},
{"lineNum":" 1246","line":"    else"},
{"lineNum":" 1247","line":"      Array.each_product(Array.new(size, self), reuse: reuse) { |r| yield r }"},
{"lineNum":" 1248","line":"    end"},
{"lineNum":" 1249","line":"  end"},
{"lineNum":" 1250","line":""},
{"lineNum":" 1251","line":"  # Removes the last value from `self`, at index *size - 1*."},
{"lineNum":" 1252","line":"  # This method returns the removed value."},
{"lineNum":" 1253","line":"  # Raises `IndexError` if array is of 0 size."},
{"lineNum":" 1254","line":"  #"},
{"lineNum":" 1255","line":"  # ```"},
{"lineNum":" 1256","line":"  # a = [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1257","line":"  # a.pop # => \"c\""},
{"lineNum":" 1258","line":"  # a     # => [\"a\", \"b\"]"},
{"lineNum":" 1259","line":"  # ```"},
{"lineNum":" 1260","line":"  def pop"},
{"lineNum":" 1261","line":"    pop { raise IndexError.new }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1262","line":"  end"},
{"lineNum":" 1263","line":""},
{"lineNum":" 1264","line":"  # Removes the last value from `self`."},
{"lineNum":" 1265","line":"  # If the array is empty, the given block is called."},
{"lineNum":" 1266","line":"  #"},
{"lineNum":" 1267","line":"  # ```"},
{"lineNum":" 1268","line":"  # a = [1]"},
{"lineNum":" 1269","line":"  # a.pop { \"Testing\" } # => 1"},
{"lineNum":" 1270","line":"  # a.pop { \"Testing\" } # => \"Testing\""},
{"lineNum":" 1271","line":"  # ```"},
{"lineNum":" 1272","line":"  def pop"},
{"lineNum":" 1273","line":"    if @size == 0","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1274","line":"      yield"},
{"lineNum":" 1275","line":"    else"},
{"lineNum":" 1276","line":"      @size -= 1","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1277","line":"      value = @buffer[@size]","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1278","line":"      (@buffer + @size).clear"},
{"lineNum":" 1279","line":"      value"},
{"lineNum":" 1280","line":"    end"},
{"lineNum":" 1281","line":"  end"},
{"lineNum":" 1282","line":""},
{"lineNum":" 1283","line":"  # Removes the last *n* values from `self`, at index *size - 1*."},
{"lineNum":" 1284","line":"  # This method returns an array of the removed values, with the original order preserved."},
{"lineNum":" 1285","line":"  #"},
{"lineNum":" 1286","line":"  # If *n* is greater than the size of `self`, all values will be removed from `self`"},
{"lineNum":" 1287","line":"  # without raising an error."},
{"lineNum":" 1288","line":"  #"},
{"lineNum":" 1289","line":"  # ```"},
{"lineNum":" 1290","line":"  # a = [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1291","line":"  # a.pop(2) # => [\"b\", \"c\"]"},
{"lineNum":" 1292","line":"  # a        # => [\"a\"]"},
{"lineNum":" 1293","line":"  #"},
{"lineNum":" 1294","line":"  # a = [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1295","line":"  # a.pop(4) # => [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1296","line":"  # a        # => []"},
{"lineNum":" 1297","line":"  # ```"},
{"lineNum":" 1298","line":"  def pop(n : Int)"},
{"lineNum":" 1299","line":"    if n < 0"},
{"lineNum":" 1300","line":"      raise ArgumentError.new(\"Can\'t pop negative count\")"},
{"lineNum":" 1301","line":"    end"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"    n = Math.min(n, @size)"},
{"lineNum":" 1304","line":"    ary = Array(T).new(n) { |i| @buffer[@size - n + i] }"},
{"lineNum":" 1305","line":""},
{"lineNum":" 1306","line":"    @size -= n"},
{"lineNum":" 1307","line":"    (@buffer + @size).clear(n)"},
{"lineNum":" 1308","line":""},
{"lineNum":" 1309","line":"    ary"},
{"lineNum":" 1310","line":"  end"},
{"lineNum":" 1311","line":""},
{"lineNum":" 1312","line":"  # Like `pop`, but returns `nil` if `self` is empty."},
{"lineNum":" 1313","line":"  def pop?"},
{"lineNum":" 1314","line":"    pop { nil }"},
{"lineNum":" 1315","line":"  end"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"  def product(ary : Array(U)) forall U"},
{"lineNum":" 1318","line":"    result = Array({T, U}).new(size * ary.size)"},
{"lineNum":" 1319","line":"    product(ary) do |x, y|"},
{"lineNum":" 1320","line":"      result << {x, y}"},
{"lineNum":" 1321","line":"    end"},
{"lineNum":" 1322","line":"    result"},
{"lineNum":" 1323","line":"  end"},
{"lineNum":" 1324","line":""},
{"lineNum":" 1325","line":"  def product(enumerable : Enumerable, &block)"},
{"lineNum":" 1326","line":"    self.each { |a| enumerable.each { |b| yield a, b } }"},
{"lineNum":" 1327","line":"  end"},
{"lineNum":" 1328","line":""},
{"lineNum":" 1329","line":"  # Append. Pushes one value to the end of `self`, given that the type of the value is *T*"},
{"lineNum":" 1330","line":"  # (which might be a single type or a union of types)."},
{"lineNum":" 1331","line":"  # This method returns `self`, so several calls can be chained."},
{"lineNum":" 1332","line":"  # See `pop` for the opposite effect."},
{"lineNum":" 1333","line":"  #"},
{"lineNum":" 1334","line":"  # ```"},
{"lineNum":" 1335","line":"  # a = [\"a\", \"b\"]"},
{"lineNum":" 1336","line":"  # a.push(\"c\") # => [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1337","line":"  # a.push(1)   # Errors, because the array only accepts String."},
{"lineNum":" 1338","line":"  #"},
{"lineNum":" 1339","line":"  # a = [\"a\", \"b\"] of (Int32 | String)"},
{"lineNum":" 1340","line":"  # a.push(\"c\") # => [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1341","line":"  # a.push(1)   # => [\"a\", \"b\", \"c\", 1]"},
{"lineNum":" 1342","line":"  # ```"},
{"lineNum":" 1343","line":"  def push(value : T)"},
{"lineNum":" 1344","line":"    check_needs_resize"},
{"lineNum":" 1345","line":"    @buffer[@size] = value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1346","line":"    @size += 1","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":" 1347","line":"    self"},
{"lineNum":" 1348","line":"  end"},
{"lineNum":" 1349","line":""},
{"lineNum":" 1350","line":"  # Append multiple values. The same as `push`, but takes an arbitrary number"},
{"lineNum":" 1351","line":"  # of values to push into `self`. Returns `self`."},
{"lineNum":" 1352","line":"  #"},
{"lineNum":" 1353","line":"  # ```"},
{"lineNum":" 1354","line":"  # a = [\"a\"]"},
{"lineNum":" 1355","line":"  # a.push(\"b\", \"c\") # => [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1356","line":"  # ```"},
{"lineNum":" 1357","line":"  def push(*values : T)"},
{"lineNum":" 1358","line":"    new_size = @size + values.size"},
{"lineNum":" 1359","line":"    resize_to_capacity(Math.pw2ceil(new_size)) if new_size > @capacity"},
{"lineNum":" 1360","line":"    values.each_with_index do |value, i|"},
{"lineNum":" 1361","line":"      @buffer[@size + i] = value"},
{"lineNum":" 1362","line":"    end"},
{"lineNum":" 1363","line":"    @size = new_size"},
{"lineNum":" 1364","line":"    self"},
{"lineNum":" 1365","line":"  end"},
{"lineNum":" 1366","line":""},
{"lineNum":" 1367","line":"  def replace(other : Array)"},
{"lineNum":" 1368","line":"    @size = other.size"},
{"lineNum":" 1369","line":"    resize_to_capacity(Math.pw2ceil(@size)) if @size > @capacity"},
{"lineNum":" 1370","line":"    @buffer.copy_from(other.to_unsafe, other.size)"},
{"lineNum":" 1371","line":"    self"},
{"lineNum":" 1372","line":"  end"},
{"lineNum":" 1373","line":""},
{"lineNum":" 1374","line":"  # Returns an array with all the elements in the collection reversed."},
{"lineNum":" 1375","line":"  #"},
{"lineNum":" 1376","line":"  # ```"},
{"lineNum":" 1377","line":"  # a = [1, 2, 3]"},
{"lineNum":" 1378","line":"  # a.reverse # => [3, 2, 1]"},
{"lineNum":" 1379","line":"  # ```"},
{"lineNum":" 1380","line":"  def reverse"},
{"lineNum":" 1381","line":"    Array(T).new(size) { |i| @buffer[size - i - 1] }"},
{"lineNum":" 1382","line":"  end"},
{"lineNum":" 1383","line":""},
{"lineNum":" 1384","line":"  # Reverses in-place all the elements of `self`."},
{"lineNum":" 1385","line":"  def reverse!"},
{"lineNum":" 1386","line":"    Slice.new(@buffer, size).reverse!"},
{"lineNum":" 1387","line":"    self"},
{"lineNum":" 1388","line":"  end"},
{"lineNum":" 1389","line":""},
{"lineNum":" 1390","line":"  def rotate!(n = 1)"},
{"lineNum":" 1391","line":"    return self if size == 0"},
{"lineNum":" 1392","line":"    n %= size"},
{"lineNum":" 1393","line":"    return self if n == 0"},
{"lineNum":" 1394","line":"    if n <= size / 2"},
{"lineNum":" 1395","line":"      tmp = self[0..n]"},
{"lineNum":" 1396","line":"      @buffer.move_from(@buffer + n, size - n)"},
{"lineNum":" 1397","line":"      (@buffer + size - n).copy_from(tmp.to_unsafe, n)"},
{"lineNum":" 1398","line":"    else"},
{"lineNum":" 1399","line":"      tmp = self[n..-1]"},
{"lineNum":" 1400","line":"      (@buffer + size - n).move_from(@buffer, n)"},
{"lineNum":" 1401","line":"      @buffer.copy_from(tmp.to_unsafe, size - n)"},
{"lineNum":" 1402","line":"    end"},
{"lineNum":" 1403","line":"    self"},
{"lineNum":" 1404","line":"  end"},
{"lineNum":" 1405","line":""},
{"lineNum":" 1406","line":"  def rotate(n = 1)"},
{"lineNum":" 1407","line":"    return self if size == 0"},
{"lineNum":" 1408","line":"    n %= size"},
{"lineNum":" 1409","line":"    return self if n == 0"},
{"lineNum":" 1410","line":"    res = Array(T).new(size)"},
{"lineNum":" 1411","line":"    res.to_unsafe.copy_from(@buffer + n, size - n)"},
{"lineNum":" 1412","line":"    (res.to_unsafe + size - n).copy_from(@buffer, n)"},
{"lineNum":" 1413","line":"    res.size = size"},
{"lineNum":" 1414","line":"    res"},
{"lineNum":" 1415","line":"  end"},
{"lineNum":" 1416","line":""},
{"lineNum":" 1417","line":"  # Returns *n* number of random elements from `self`, using the given *random* number generator."},
{"lineNum":" 1418","line":"  # Raises IndexError if `self` is empty."},
{"lineNum":" 1419","line":"  #"},
{"lineNum":" 1420","line":"  # ```"},
{"lineNum":" 1421","line":"  # a = [1, 2, 3]"},
{"lineNum":" 1422","line":"  # a.sample(2)                # => [2, 1]"},
{"lineNum":" 1423","line":"  # a.sample(2, Random.new(1)) # => [1, 3]"},
{"lineNum":" 1424","line":"  # ```"},
{"lineNum":" 1425","line":"  def sample(n : Int, random = Random::DEFAULT)"},
{"lineNum":" 1426","line":"    if n < 0"},
{"lineNum":" 1427","line":"      raise ArgumentError.new(\"Can\'t get negative count sample\")"},
{"lineNum":" 1428","line":"    end"},
{"lineNum":" 1429","line":""},
{"lineNum":" 1430","line":"    case n"},
{"lineNum":" 1431","line":"    when 0"},
{"lineNum":" 1432","line":"      return [] of T"},
{"lineNum":" 1433","line":"    when 1"},
{"lineNum":" 1434","line":"      return [sample] of T"},
{"lineNum":" 1435","line":"    else"},
{"lineNum":" 1436","line":"      if n >= size"},
{"lineNum":" 1437","line":"        return dup.shuffle!"},
{"lineNum":" 1438","line":"      end"},
{"lineNum":" 1439","line":""},
{"lineNum":" 1440","line":"      ary = Array(T).new(n) { |i| @buffer[i] }"},
{"lineNum":" 1441","line":"      buffer = ary.to_unsafe"},
{"lineNum":" 1442","line":""},
{"lineNum":" 1443","line":"      n.upto(size - 1) do |i|"},
{"lineNum":" 1444","line":"        j = random.rand(i + 1)"},
{"lineNum":" 1445","line":"        if j <= n"},
{"lineNum":" 1446","line":"          buffer[j] = @buffer[i]"},
{"lineNum":" 1447","line":"        end"},
{"lineNum":" 1448","line":"      end"},
{"lineNum":" 1449","line":"      ary.shuffle!(random)"},
{"lineNum":" 1450","line":""},
{"lineNum":" 1451","line":"      ary"},
{"lineNum":" 1452","line":"    end"},
{"lineNum":" 1453","line":"  end"},
{"lineNum":" 1454","line":""},
{"lineNum":" 1455","line":"  # Removes the first value of `self`, at index 0. This method returns the removed value."},
{"lineNum":" 1456","line":"  # If the array is empty, it raises `IndexError`."},
{"lineNum":" 1457","line":"  #"},
{"lineNum":" 1458","line":"  # ```"},
{"lineNum":" 1459","line":"  # a = [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1460","line":"  # a.shift # => \"a\""},
{"lineNum":" 1461","line":"  # a       # => [\"b\", \"c\"]"},
{"lineNum":" 1462","line":"  # ```"},
{"lineNum":" 1463","line":"  def shift"},
{"lineNum":" 1464","line":"    shift { raise IndexError.new }"},
{"lineNum":" 1465","line":"  end"},
{"lineNum":" 1466","line":""},
{"lineNum":" 1467","line":"  def shift"},
{"lineNum":" 1468","line":"    if @size == 0"},
{"lineNum":" 1469","line":"      yield"},
{"lineNum":" 1470","line":"    else"},
{"lineNum":" 1471","line":"      value = @buffer[0]"},
{"lineNum":" 1472","line":"      @size -= 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1473","line":"      @buffer.move_from(@buffer + 1, @size)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1474","line":"      (@buffer + @size).clear"},
{"lineNum":" 1475","line":"      value"},
{"lineNum":" 1476","line":"    end"},
{"lineNum":" 1477","line":"  end"},
{"lineNum":" 1478","line":""},
{"lineNum":" 1479","line":"  # Removes the first *n* values of `self`, starting at index 0."},
{"lineNum":" 1480","line":"  # This method returns an array of the removed values."},
{"lineNum":" 1481","line":"  #"},
{"lineNum":" 1482","line":"  # If *n* is greater than the size of `self`, all values will be removed from `self`"},
{"lineNum":" 1483","line":"  # without raising an error."},
{"lineNum":" 1484","line":"  #"},
{"lineNum":" 1485","line":"  # ```"},
{"lineNum":" 1486","line":"  # a = [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1487","line":"  # a.shift # => \"a\""},
{"lineNum":" 1488","line":"  # a       # => [\"b\", \"c\"]"},
{"lineNum":" 1489","line":"  #"},
{"lineNum":" 1490","line":"  # a = [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1491","line":"  # a.shift(4) # => [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1492","line":"  # a          # => []"},
{"lineNum":" 1493","line":"  # ```"},
{"lineNum":" 1494","line":"  def shift(n : Int)"},
{"lineNum":" 1495","line":"    if n < 0"},
{"lineNum":" 1496","line":"      raise ArgumentError.new(\"Can\'t shift negative count\")"},
{"lineNum":" 1497","line":"    end"},
{"lineNum":" 1498","line":""},
{"lineNum":" 1499","line":"    n = Math.min(n, @size)"},
{"lineNum":" 1500","line":"    ary = Array(T).new(n) { |i| @buffer[i] }"},
{"lineNum":" 1501","line":""},
{"lineNum":" 1502","line":"    @buffer.move_from(@buffer + n, @size - n)"},
{"lineNum":" 1503","line":"    @size -= n"},
{"lineNum":" 1504","line":"    (@buffer + @size).clear(n)"},
{"lineNum":" 1505","line":""},
{"lineNum":" 1506","line":"    ary"},
{"lineNum":" 1507","line":"  end"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"  # Removes the first value of `self`, at index 0. This method returns the removed value."},
{"lineNum":" 1510","line":"  # If the array is empty, it returns `nil` without raising any error."},
{"lineNum":" 1511","line":"  #"},
{"lineNum":" 1512","line":"  # ```"},
{"lineNum":" 1513","line":"  # a = [\"a\", \"b\"]"},
{"lineNum":" 1514","line":"  # a.shift? # => \"a\""},
{"lineNum":" 1515","line":"  # a        # => [\"b\"]"},
{"lineNum":" 1516","line":"  # a.shift? # => \"b\""},
{"lineNum":" 1517","line":"  # a        # => []"},
{"lineNum":" 1518","line":"  # a.shift? # => nil"},
{"lineNum":" 1519","line":"  # a        # => []"},
{"lineNum":" 1520","line":"  # ```"},
{"lineNum":" 1521","line":"  def shift?"},
{"lineNum":" 1522","line":"    shift { nil }"},
{"lineNum":" 1523","line":"  end"},
{"lineNum":" 1524","line":""},
{"lineNum":" 1525","line":"  # Returns an array with all the elements in the collection randomized"},
{"lineNum":" 1526","line":"  # using the given *random* number generator."},
{"lineNum":" 1527","line":"  def shuffle(random = Random::DEFAULT)"},
{"lineNum":" 1528","line":"    dup.shuffle!(random)"},
{"lineNum":" 1529","line":"  end"},
{"lineNum":" 1530","line":""},
{"lineNum":" 1531","line":"  # Modifies `self` by randomizing the order of elements in the collection"},
{"lineNum":" 1532","line":"  # using the given *random* number generator.  Returns `self`."},
{"lineNum":" 1533","line":"  def shuffle!(random = Random::DEFAULT)"},
{"lineNum":" 1534","line":"    @buffer.shuffle!(size, random)"},
{"lineNum":" 1535","line":"    self"},
{"lineNum":" 1536","line":"  end"},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"  # Returns an array with all elements in the collection sorted."},
{"lineNum":" 1539","line":"  #"},
{"lineNum":" 1540","line":"  # ```"},
{"lineNum":" 1541","line":"  # a = [3, 1, 2]"},
{"lineNum":" 1542","line":"  # a.sort # => [1, 2, 3]"},
{"lineNum":" 1543","line":"  # a      # => [3, 1, 2]"},
{"lineNum":" 1544","line":"  # ```"},
{"lineNum":" 1545","line":"  #"},
{"lineNum":" 1546","line":"  # Optionally, a block may be given that must implement a comparison, either with the comparison operator `<=>`"},
{"lineNum":" 1547","line":"  # or a comparison between *a* and *b*, where a < b yields -1, a == b yields 0, and a > b yields 1."},
{"lineNum":" 1548","line":"  def sort"},
{"lineNum":" 1549","line":"    dup.sort!"},
{"lineNum":" 1550","line":"  end"},
{"lineNum":" 1551","line":""},
{"lineNum":" 1552","line":"  def sort(&block : T, T -> Int32)"},
{"lineNum":" 1553","line":"    dup.sort! &block"},
{"lineNum":" 1554","line":"  end"},
{"lineNum":" 1555","line":""},
{"lineNum":" 1556","line":"  # Modifies `self` by sorting the elements in the collection."},
{"lineNum":" 1557","line":"  #"},
{"lineNum":" 1558","line":"  # ```"},
{"lineNum":" 1559","line":"  # a = [3, 1, 2]"},
{"lineNum":" 1560","line":"  # a.sort!"},
{"lineNum":" 1561","line":"  # a # => [1, 2, 3]"},
{"lineNum":" 1562","line":"  # ```"},
{"lineNum":" 1563","line":"  #"},
{"lineNum":" 1564","line":"  # Optionally, a block may be given that must implement a comparison, either with the comparison operator `<=>`"},
{"lineNum":" 1565","line":"  # or a comparison between *a* and *b*, where a < b yields -1, a == b yields 0, and a > b yields 1."},
{"lineNum":" 1566","line":"  def sort!"},
{"lineNum":" 1567","line":"    Array.intro_sort!(@buffer, @size)"},
{"lineNum":" 1568","line":"    self"},
{"lineNum":" 1569","line":"  end"},
{"lineNum":" 1570","line":""},
{"lineNum":" 1571","line":"  def sort!(&block : T, T -> Int32)"},
{"lineNum":" 1572","line":"    Array.intro_sort!(@buffer, @size, block)"},
{"lineNum":" 1573","line":"    self"},
{"lineNum":" 1574","line":"  end"},
{"lineNum":" 1575","line":""},
{"lineNum":" 1576","line":"  def sort_by(&block : T -> _)"},
{"lineNum":" 1577","line":"    dup.sort_by! { |e| yield(e) }"},
{"lineNum":" 1578","line":"  end"},
{"lineNum":" 1579","line":""},
{"lineNum":" 1580","line":"  def sort_by!(&block : T -> _)"},
{"lineNum":" 1581","line":"    sorted = map { |e| {e, yield(e)} }.sort! { |x, y| x[1] <=> y[1] }"},
{"lineNum":" 1582","line":"    @size.times do |i|"},
{"lineNum":" 1583","line":"      @buffer[i] = sorted.to_unsafe[i][0]"},
{"lineNum":" 1584","line":"    end"},
{"lineNum":" 1585","line":"    self"},
{"lineNum":" 1586","line":"  end"},
{"lineNum":" 1587","line":""},
{"lineNum":" 1588","line":"  def swap(index0, index1)"},
{"lineNum":" 1589","line":"    index0 += size if index0 < 0"},
{"lineNum":" 1590","line":"    index1 += size if index1 < 0"},
{"lineNum":" 1591","line":""},
{"lineNum":" 1592","line":"    unless (0 <= index0 < size) && (0 <= index1 < size)"},
{"lineNum":" 1593","line":"      raise IndexError.new"},
{"lineNum":" 1594","line":"    end"},
{"lineNum":" 1595","line":""},
{"lineNum":" 1596","line":"    @buffer[index0], @buffer[index1] = @buffer[index1], @buffer[index0]"},
{"lineNum":" 1597","line":""},
{"lineNum":" 1598","line":"    self"},
{"lineNum":" 1599","line":"  end"},
{"lineNum":" 1600","line":""},
{"lineNum":" 1601","line":"  def to_a"},
{"lineNum":" 1602","line":"    self"},
{"lineNum":" 1603","line":"  end"},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":"  def to_s(io : IO)"},
{"lineNum":" 1606","line":"    executed = exec_recursive(:to_s) do"},
{"lineNum":" 1607","line":"      io << \"[\""},
{"lineNum":" 1608","line":"      join \", \", io, &.inspect(io)"},
{"lineNum":" 1609","line":"      io << \"]\""},
{"lineNum":" 1610","line":"    end"},
{"lineNum":" 1611","line":"    io << \"[...]\" unless executed"},
{"lineNum":" 1612","line":"  end"},
{"lineNum":" 1613","line":""},
{"lineNum":" 1614","line":"  def pretty_print(pp) : Nil"},
{"lineNum":" 1615","line":"    executed = exec_recursive(:pretty_print) do"},
{"lineNum":" 1616","line":"      pp.list(\"[\", self, \"]\")"},
{"lineNum":" 1617","line":"    end"},
{"lineNum":" 1618","line":"    pp.text \"[...]\" unless executed"},
{"lineNum":" 1619","line":"  end"},
{"lineNum":" 1620","line":""},
{"lineNum":" 1621","line":"  # Returns a pointer to the internal buffer where `self`\'s elements are stored."},
{"lineNum":" 1622","line":"  #"},
{"lineNum":" 1623","line":"  # This method is **unsafe** because it returns a pointer, and the pointed might eventually"},
{"lineNum":" 1624","line":"  # not be that of `self` if the array grows and its internal buffer is reallocated."},
{"lineNum":" 1625","line":"  #"},
{"lineNum":" 1626","line":"  # ```"},
{"lineNum":" 1627","line":"  # ary = [1, 2, 3]"},
{"lineNum":" 1628","line":"  # ary.to_unsafe[0] # => 1"},
{"lineNum":" 1629","line":"  # ```"},
{"lineNum":" 1630","line":"  def to_unsafe : Pointer(T)"},
{"lineNum":" 1631","line":"    @buffer"},
{"lineNum":" 1632","line":"  end"},
{"lineNum":" 1633","line":""},
{"lineNum":" 1634","line":"  # Assumes that `self` is an array of arrays and transposes the rows and columns."},
{"lineNum":" 1635","line":"  #"},
{"lineNum":" 1636","line":"  # ```"},
{"lineNum":" 1637","line":"  # a = [[:a, :b], [:c, :d], [:e, :f]]"},
{"lineNum":" 1638","line":"  # a.transpose # => [[:a, :c, :e], [:b, :d, :f]]"},
{"lineNum":" 1639","line":"  # a           # => [[:a, :b], [:c, :d], [:e, :f]]"},
{"lineNum":" 1640","line":"  # ```"},
{"lineNum":" 1641","line":"  def transpose"},
{"lineNum":" 1642","line":"    return Array(Array(typeof(first.first))).new if empty?"},
{"lineNum":" 1643","line":""},
{"lineNum":" 1644","line":"    len = at(0).size"},
{"lineNum":" 1645","line":"    (1...@size).each do |i|"},
{"lineNum":" 1646","line":"      l = at(i).size"},
{"lineNum":" 1647","line":"      raise IndexError.new if len != l"},
{"lineNum":" 1648","line":"    end"},
{"lineNum":" 1649","line":""},
{"lineNum":" 1650","line":"    Array(Array(typeof(first.first))).new(len) do |i|"},
{"lineNum":" 1651","line":"      Array(typeof(first.first)).new(@size) do |j|"},
{"lineNum":" 1652","line":"        at(j).at(i)"},
{"lineNum":" 1653","line":"      end"},
{"lineNum":" 1654","line":"    end"},
{"lineNum":" 1655","line":"  end"},
{"lineNum":" 1656","line":""},
{"lineNum":" 1657","line":"  # Returns a new `Array` by removing duplicate values in `self`."},
{"lineNum":" 1658","line":"  #"},
{"lineNum":" 1659","line":"  # ```"},
{"lineNum":" 1660","line":"  # a = [\"a\", \"a\", \"b\", \"b\", \"c\"]"},
{"lineNum":" 1661","line":"  # a.uniq # => [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1662","line":"  # a      # => [ \"a\", \"a\", \"b\", \"b\", \"c\" ]"},
{"lineNum":" 1663","line":"  # ```"},
{"lineNum":" 1664","line":"  def uniq"},
{"lineNum":" 1665","line":"    uniq &.itself"},
{"lineNum":" 1666","line":"  end"},
{"lineNum":" 1667","line":""},
{"lineNum":" 1668","line":"  # Returns a new `Array` by removing duplicate values in `self`, using the block\'s"},
{"lineNum":" 1669","line":"  # value for comparison."},
{"lineNum":" 1670","line":"  #"},
{"lineNum":" 1671","line":"  # ```"},
{"lineNum":" 1672","line":"  # a = [{\"student\", \"sam\"}, {\"student\", \"george\"}, {\"teacher\", \"matz\"}]"},
{"lineNum":" 1673","line":"  # a.uniq { |s| s[0] } # => [{\"student\", \"sam\"}, {\"teacher\", \"matz\"}]"},
{"lineNum":" 1674","line":"  # a                   # => [{\"student\", \"sam\"}, {\"student\", \"george\"}, {\"teacher\", \"matz\"}]"},
{"lineNum":" 1675","line":"  # ```"},
{"lineNum":" 1676","line":"  def uniq(&block : T -> _)"},
{"lineNum":" 1677","line":"    if size <= 1"},
{"lineNum":" 1678","line":"      dup"},
{"lineNum":" 1679","line":"    else"},
{"lineNum":" 1680","line":"      hash = to_lookup_hash { |elem| yield elem }"},
{"lineNum":" 1681","line":"      hash.values"},
{"lineNum":" 1682","line":"    end"},
{"lineNum":" 1683","line":"  end"},
{"lineNum":" 1684","line":""},
{"lineNum":" 1685","line":"  # Removes duplicate elements from `self`. Returns `self`."},
{"lineNum":" 1686","line":"  #"},
{"lineNum":" 1687","line":"  # ```"},
{"lineNum":" 1688","line":"  # a = [\"a\", \"a\", \"b\", \"b\", \"c\"]"},
{"lineNum":" 1689","line":"  # a.uniq! # => [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1690","line":"  # a       # => [\"a\", \"b\", \"c\"]"},
{"lineNum":" 1691","line":"  # ```"},
{"lineNum":" 1692","line":"  def uniq!"},
{"lineNum":" 1693","line":"    uniq! &.itself"},
{"lineNum":" 1694","line":"  end"},
{"lineNum":" 1695","line":""},
{"lineNum":" 1696","line":"  # Removes duplicate elements from `self`, using the block\'s value for comparison. Returns `self`."},
{"lineNum":" 1697","line":"  #"},
{"lineNum":" 1698","line":"  # ```"},
{"lineNum":" 1699","line":"  # a = [{\"student\", \"sam\"}, {\"student\", \"george\"}, {\"teacher\", \"matz\"}]"},
{"lineNum":" 1700","line":"  # a.uniq! { |s| s[0] } # => [{\"student\", \"sam\"}, {\"teacher\", \"matz\"}]"},
{"lineNum":" 1701","line":"  # a                    # => [{\"student\", \"sam\"}, {\"teacher\", \"matz\"}]"},
{"lineNum":" 1702","line":"  # ```"},
{"lineNum":" 1703","line":"  def uniq!"},
{"lineNum":" 1704","line":"    if size <= 1"},
{"lineNum":" 1705","line":"      return self"},
{"lineNum":" 1706","line":"    end"},
{"lineNum":" 1707","line":""},
{"lineNum":" 1708","line":"    hash = to_lookup_hash { |elem| yield elem }"},
{"lineNum":" 1709","line":"    if size == hash.size"},
{"lineNum":" 1710","line":"      return self"},
{"lineNum":" 1711","line":"    end"},
{"lineNum":" 1712","line":""},
{"lineNum":" 1713","line":"    old_size = @size"},
{"lineNum":" 1714","line":"    @size = hash.size"},
{"lineNum":" 1715","line":"    removed = old_size - @size"},
{"lineNum":" 1716","line":"    return self if removed == 0"},
{"lineNum":" 1717","line":""},
{"lineNum":" 1718","line":"    ptr = @buffer"},
{"lineNum":" 1719","line":"    hash.each do |k, v|"},
{"lineNum":" 1720","line":"      ptr.value = v"},
{"lineNum":" 1721","line":"      ptr += 1"},
{"lineNum":" 1722","line":"    end"},
{"lineNum":" 1723","line":""},
{"lineNum":" 1724","line":"    (@buffer + @size).clear(removed)"},
{"lineNum":" 1725","line":""},
{"lineNum":" 1726","line":"    self"},
{"lineNum":" 1727","line":"  end"},
{"lineNum":" 1728","line":""},
{"lineNum":" 1729","line":"  # Prepend. Adds *obj* to the beginning of `self`, given that the type of the value is *T*"},
{"lineNum":" 1730","line":"  # (which might be a single type or a union of types)."},
{"lineNum":" 1731","line":"  # This method returns `self`, so several calls can be chained."},
{"lineNum":" 1732","line":"  # See `shift` for the opposite effect."},
{"lineNum":" 1733","line":"  #"},
{"lineNum":" 1734","line":"  # ```"},
{"lineNum":" 1735","line":"  # a = [\"a\", \"b\"]"},
{"lineNum":" 1736","line":"  # a.unshift(\"c\") # => [\"c\", \"a\", \"b\"]"},
{"lineNum":" 1737","line":"  # a.unshift(1)   # Errors, because the array only accepts String."},
{"lineNum":" 1738","line":"  #"},
{"lineNum":" 1739","line":"  # a = [\"a\", \"b\"] of (Int32 | String)"},
{"lineNum":" 1740","line":"  # a.unshift(\"c\") # => [\"c\", \"a\", \"b\"]"},
{"lineNum":" 1741","line":"  # a.unshift(1)   # => [1, \"c\", \"a\", \"b\"]"},
{"lineNum":" 1742","line":"  # ```"},
{"lineNum":" 1743","line":"  def unshift(obj : T)"},
{"lineNum":" 1744","line":"    insert 0, obj"},
{"lineNum":" 1745","line":"  end"},
{"lineNum":" 1746","line":""},
{"lineNum":" 1747","line":"  # Prepend multiple values. The same as `unshift`, but takes an arbitrary number"},
{"lineNum":" 1748","line":"  # of values to add to the array. Returns `self`."},
{"lineNum":" 1749","line":"  def unshift(*values : T)"},
{"lineNum":" 1750","line":"    new_size = @size + values.size"},
{"lineNum":" 1751","line":"    resize_to_capacity(Math.pw2ceil(new_size)) if new_size > @capacity"},
{"lineNum":" 1752","line":"    move_value = values.size"},
{"lineNum":" 1753","line":"    @buffer.move_to(@buffer + move_value, @size)"},
{"lineNum":" 1754","line":""},
{"lineNum":" 1755","line":"    values.each_with_index do |value, i|"},
{"lineNum":" 1756","line":"      @buffer[i] = value"},
{"lineNum":" 1757","line":"    end"},
{"lineNum":" 1758","line":"    @size = new_size"},
{"lineNum":" 1759","line":"    self"},
{"lineNum":" 1760","line":"  end"},
{"lineNum":" 1761","line":""},
{"lineNum":" 1762","line":"  def update(index : Int)"},
{"lineNum":" 1763","line":"    index = check_index_out_of_bounds index"},
{"lineNum":" 1764","line":"    @buffer[index] = yield @buffer[index]"},
{"lineNum":" 1765","line":"  end"},
{"lineNum":" 1766","line":""},
{"lineNum":" 1767","line":"  private def check_needs_resize"},
{"lineNum":" 1768","line":"    double_capacity if @size == @capacity","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":" 1769","line":"  end"},
{"lineNum":" 1770","line":""},
{"lineNum":" 1771","line":"  private def double_capacity"},
{"lineNum":" 1772","line":"    resize_to_capacity(@capacity == 0 ? 3 : (@capacity * 2))","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":" 1773","line":"  end"},
{"lineNum":" 1774","line":""},
{"lineNum":" 1775","line":"  private def resize_to_capacity(capacity)"},
{"lineNum":" 1776","line":"    @capacity = capacity","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":" 1777","line":"    if @buffer","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":" 1778","line":"      @buffer = @buffer.realloc(@capacity)"},
{"lineNum":" 1779","line":"    else"},
{"lineNum":" 1780","line":"      @buffer = Pointer(T).malloc(@capacity)"},
{"lineNum":" 1781","line":"    end"},
{"lineNum":" 1782","line":"  end"},
{"lineNum":" 1783","line":""},
{"lineNum":" 1784","line":"  protected def self.intro_sort!(a, n)"},
{"lineNum":" 1785","line":"    return if n < 2"},
{"lineNum":" 1786","line":"    quick_sort_for_intro_sort!(a, n, Math.log2(n).to_i * 2)"},
{"lineNum":" 1787","line":"    insertion_sort!(a, n)"},
{"lineNum":" 1788","line":"  end"},
{"lineNum":" 1789","line":""},
{"lineNum":" 1790","line":"  protected def self.quick_sort_for_intro_sort!(a, n, d)"},
{"lineNum":" 1791","line":"    while n > 16"},
{"lineNum":" 1792","line":"      if d == 0"},
{"lineNum":" 1793","line":"        heap_sort!(a, n)"},
{"lineNum":" 1794","line":"        return"},
{"lineNum":" 1795","line":"      end"},
{"lineNum":" 1796","line":"      d -= 1"},
{"lineNum":" 1797","line":"      center_median!(a, n)"},
{"lineNum":" 1798","line":"      c = partition_for_quick_sort!(a, n)"},
{"lineNum":" 1799","line":"      quick_sort_for_intro_sort!(c, n - (c - a), d)"},
{"lineNum":" 1800","line":"      n = c - a"},
{"lineNum":" 1801","line":"    end"},
{"lineNum":" 1802","line":"  end"},
{"lineNum":" 1803","line":""},
{"lineNum":" 1804","line":"  protected def self.heap_sort!(a, n)"},
{"lineNum":" 1805","line":"    (n / 2).downto 0 do |p|"},
{"lineNum":" 1806","line":"      heapify!(a, p, n)"},
{"lineNum":" 1807","line":"    end"},
{"lineNum":" 1808","line":"    while n > 1"},
{"lineNum":" 1809","line":"      n -= 1"},
{"lineNum":" 1810","line":"      a.value, a[n] = a[n], a.value"},
{"lineNum":" 1811","line":"      heapify!(a, 0, n)"},
{"lineNum":" 1812","line":"    end"},
{"lineNum":" 1813","line":"  end"},
{"lineNum":" 1814","line":""},
{"lineNum":" 1815","line":"  protected def self.heapify!(a, p, n)"},
{"lineNum":" 1816","line":"    v, c = a[p], p"},
{"lineNum":" 1817","line":"    while c < (n - 1) / 2"},
{"lineNum":" 1818","line":"      c = 2 * (c + 1)"},
{"lineNum":" 1819","line":"      c -= 1 if a[c] < a[c - 1]"},
{"lineNum":" 1820","line":"      break unless v <= a[c]"},
{"lineNum":" 1821","line":"      a[p] = a[c]"},
{"lineNum":" 1822","line":"      p = c"},
{"lineNum":" 1823","line":"    end"},
{"lineNum":" 1824","line":"    if n & 1 == 0 && c == n / 2 - 1"},
{"lineNum":" 1825","line":"      c = 2 * c + 1"},
{"lineNum":" 1826","line":"      if v < a[c]"},
{"lineNum":" 1827","line":"        a[p] = a[c]"},
{"lineNum":" 1828","line":"        p = c"},
{"lineNum":" 1829","line":"      end"},
{"lineNum":" 1830","line":"    end"},
{"lineNum":" 1831","line":"    a[p] = v"},
{"lineNum":" 1832","line":"  end"},
{"lineNum":" 1833","line":""},
{"lineNum":" 1834","line":"  protected def self.center_median!(a, n)"},
{"lineNum":" 1835","line":"    b, c = a + n / 2, a + n - 1"},
{"lineNum":" 1836","line":"    if a.value <= b.value"},
{"lineNum":" 1837","line":"      if b.value <= c.value"},
{"lineNum":" 1838","line":"        return"},
{"lineNum":" 1839","line":"      elsif a.value <= c.value"},
{"lineNum":" 1840","line":"        b.value, c.value = c.value, b.value"},
{"lineNum":" 1841","line":"      else"},
{"lineNum":" 1842","line":"        a.value, b.value, c.value = c.value, a.value, b.value"},
{"lineNum":" 1843","line":"      end"},
{"lineNum":" 1844","line":"    elsif a.value <= c.value"},
{"lineNum":" 1845","line":"      a.value, b.value = b.value, a.value"},
{"lineNum":" 1846","line":"    elsif b.value <= c.value"},
{"lineNum":" 1847","line":"      a.value, b.value, c.value = b.value, c.value, a.value"},
{"lineNum":" 1848","line":"    else"},
{"lineNum":" 1849","line":"      a.value, c.value = c.value, a.value"},
{"lineNum":" 1850","line":"    end"},
{"lineNum":" 1851","line":"  end"},
{"lineNum":" 1852","line":""},
{"lineNum":" 1853","line":"  protected def self.partition_for_quick_sort!(a, n)"},
{"lineNum":" 1854","line":"    v, l, r = a[n / 2], a + 1, a + n - 1"},
{"lineNum":" 1855","line":"    loop do"},
{"lineNum":" 1856","line":"      while l.value < v"},
{"lineNum":" 1857","line":"        l += 1"},
{"lineNum":" 1858","line":"      end"},
{"lineNum":" 1859","line":"      r -= 1"},
{"lineNum":" 1860","line":"      while v < r.value"},
{"lineNum":" 1861","line":"        r -= 1"},
{"lineNum":" 1862","line":"      end"},
{"lineNum":" 1863","line":"      return l unless l < r"},
{"lineNum":" 1864","line":"      l.value, r.value = r.value, l.value"},
{"lineNum":" 1865","line":"      l += 1"},
{"lineNum":" 1866","line":"    end"},
{"lineNum":" 1867","line":"  end"},
{"lineNum":" 1868","line":""},
{"lineNum":" 1869","line":"  protected def self.insertion_sort!(a, n)"},
{"lineNum":" 1870","line":"    (1...n).each do |i|"},
{"lineNum":" 1871","line":"      l = a + i"},
{"lineNum":" 1872","line":"      v = l.value"},
{"lineNum":" 1873","line":"      p = l - 1"},
{"lineNum":" 1874","line":"      while l > a && v < p.value"},
{"lineNum":" 1875","line":"        l.value = p.value"},
{"lineNum":" 1876","line":"        l, p = p, p - 1"},
{"lineNum":" 1877","line":"      end"},
{"lineNum":" 1878","line":"      l.value = v"},
{"lineNum":" 1879","line":"    end"},
{"lineNum":" 1880","line":"  end"},
{"lineNum":" 1881","line":""},
{"lineNum":" 1882","line":"  protected def self.intro_sort!(a, n, comp)"},
{"lineNum":" 1883","line":"    return if n < 2","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1884","line":"    quick_sort_for_intro_sort!(a, n, Math.log2(n).to_i * 2, comp)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1885","line":"    insertion_sort!(a, n, comp)"},
{"lineNum":" 1886","line":"  end"},
{"lineNum":" 1887","line":""},
{"lineNum":" 1888","line":"  protected def self.quick_sort_for_intro_sort!(a, n, d, comp)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1889","line":"    while n > 16","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1890","line":"      if d == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1891","line":"        heap_sort!(a, n, comp)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1892","line":"        return"},
{"lineNum":" 1893","line":"      end"},
{"lineNum":" 1894","line":"      d -= 1"},
{"lineNum":" 1895","line":"      center_median!(a, n, comp)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1896","line":"      c = partition_for_quick_sort!(a, n, comp)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1897","line":"      quick_sort_for_intro_sort!(c, n - (c - a), d, comp)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1898","line":"      n = c - a","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1899","line":"    end"},
{"lineNum":" 1900","line":"  end"},
{"lineNum":" 1901","line":""},
{"lineNum":" 1902","line":"  protected def self.heap_sort!(a, n, comp)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1903","line":"    (n / 2).downto 0 do |p|"},
{"lineNum":" 1904","line":"      heapify!(a, p, n, comp)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1905","line":"    end"},
{"lineNum":" 1906","line":"    while n > 1","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1907","line":"      n -= 1"},
{"lineNum":" 1908","line":"      a.value, a[n] = a[n], a.value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1909","line":"      heapify!(a, 0, n, comp)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1910","line":"    end"},
{"lineNum":" 1911","line":"  end"},
{"lineNum":" 1912","line":""},
{"lineNum":" 1913","line":"  protected def self.heapify!(a, p, n, comp)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1914","line":"    v, c = a[p], p"},
{"lineNum":" 1915","line":"    while c < (n - 1) / 2","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1916","line":"      c = 2 * (c + 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1917","line":"      c -= 1 if comp.call(a[c], a[c - 1]) < 0","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1918","line":"      break unless comp.call(v, a[c]) <= 0","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1919","line":"      a[p] = a[c]"},
{"lineNum":" 1920","line":"      p = c","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1921","line":"    end"},
{"lineNum":" 1922","line":"    if n & 1 == 0 && c == n / 2 - 1","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1923","line":"      c = 2 * c + 1"},
{"lineNum":" 1924","line":"      if comp.call(v, a[c]) < 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1925","line":"        a[p] = a[c]"},
{"lineNum":" 1926","line":"        p = c","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1927","line":"      end"},
{"lineNum":" 1928","line":"    end"},
{"lineNum":" 1929","line":"    a[p] = v"},
{"lineNum":" 1930","line":"  end"},
{"lineNum":" 1931","line":""},
{"lineNum":" 1932","line":"  protected def self.center_median!(a, n, comp)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1933","line":"    b, c = a + n / 2, a + n - 1","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1934","line":"    if comp.call(a.value, b.value) <= 0","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1935","line":"      if comp.call(b.value, c.value) <= 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1936","line":"        return"},
{"lineNum":" 1937","line":"      elsif comp.call(a.value, c.value) <= 0"},
{"lineNum":" 1938","line":"        b.value, c.value = c.value, b.value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1939","line":"      else"},
{"lineNum":" 1940","line":"        a.value, b.value, c.value = c.value, a.value, b.value","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1941","line":"      end"},
{"lineNum":" 1942","line":"    elsif comp.call(a.value, c.value) <= 0"},
{"lineNum":" 1943","line":"      a.value, b.value = b.value, a.value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1944","line":"    elsif comp.call(b.value, c.value) <= 0"},
{"lineNum":" 1945","line":"      a.value, b.value, c.value = b.value, c.value, a.value","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1946","line":"    else"},
{"lineNum":" 1947","line":"      a.value, c.value = c.value, a.value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1948","line":"    end"},
{"lineNum":" 1949","line":"  end"},
{"lineNum":" 1950","line":""},
{"lineNum":" 1951","line":"  protected def self.partition_for_quick_sort!(a, n, comp)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1952","line":"    v, l, r = a[n / 2], a + 1, a + n - 1","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1953","line":"    loop do"},
{"lineNum":" 1954","line":"      while l < a + n && comp.call(l.value, v) < 0"},
{"lineNum":" 1955","line":"        l += 1"},
{"lineNum":" 1956","line":"      end"},
{"lineNum":" 1957","line":"      r -= 1"},
{"lineNum":" 1958","line":"      while r >= a && comp.call(v, r.value) < 0"},
{"lineNum":" 1959","line":"        r -= 1"},
{"lineNum":" 1960","line":"      end"},
{"lineNum":" 1961","line":"      return l unless l < r","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1962","line":"      l.value, r.value = r.value, l.value","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1963","line":"      l += 1"},
{"lineNum":" 1964","line":"    end"},
{"lineNum":" 1965","line":"  end"},
{"lineNum":" 1966","line":""},
{"lineNum":" 1967","line":"  protected def self.insertion_sort!(a, n, comp)"},
{"lineNum":" 1968","line":"    (1...n).each do |i|"},
{"lineNum":" 1969","line":"      l = a + i"},
{"lineNum":" 1970","line":"      v = l.value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1971","line":"      p = l - 1"},
{"lineNum":" 1972","line":"      while l > a && comp.call(v, p.value) < 0"},
{"lineNum":" 1973","line":"        l.value = p.value"},
{"lineNum":" 1974","line":"        l, p = p, p - 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1975","line":"      end"},
{"lineNum":" 1976","line":"      l.value = v"},
{"lineNum":" 1977","line":"    end"},
{"lineNum":" 1978","line":"  end"},
{"lineNum":" 1979","line":""},
{"lineNum":" 1980","line":"  protected def to_lookup_hash"},
{"lineNum":" 1981","line":"    to_lookup_hash { |elem| elem }"},
{"lineNum":" 1982","line":"  end"},
{"lineNum":" 1983","line":""},
{"lineNum":" 1984","line":"  protected def to_lookup_hash(&block : T -> U) forall U"},
{"lineNum":" 1985","line":"    each_with_object(Hash(U, T).new) do |o, h|"},
{"lineNum":" 1986","line":"      key = yield o"},
{"lineNum":" 1987","line":"      unless h.has_key?(key)"},
{"lineNum":" 1988","line":"        h[key] = o"},
{"lineNum":" 1989","line":"      end"},
{"lineNum":" 1990","line":"    end"},
{"lineNum":" 1991","line":"  end"},
{"lineNum":" 1992","line":""},
{"lineNum":" 1993","line":"  # :nodoc:"},
{"lineNum":" 1994","line":"  def index(object, offset : Int = 0)"},
{"lineNum":" 1995","line":"    # Optimize for the case of looking for a byte in a byte slice"},
{"lineNum":" 1996","line":"    if T.is_a?(UInt8.class) &&"},
{"lineNum":" 1997","line":"       (object.is_a?(UInt8) || (object.is_a?(Int) && 0 <= object < 256))"},
{"lineNum":" 1998","line":"      return Slice.new(to_unsafe, size).fast_index(object, offset)"},
{"lineNum":" 1999","line":"    end"},
{"lineNum":" 2000","line":""},
{"lineNum":" 2001","line":"    super"},
{"lineNum":" 2002","line":"  end"},
{"lineNum":" 2003","line":""},
{"lineNum":" 2004","line":"  private class PermutationIterator(T)"},
{"lineNum":" 2005","line":"    include Iterator(Array(T))"},
{"lineNum":" 2006","line":""},
{"lineNum":" 2007","line":"    @array : Array(T)"},
{"lineNum":" 2008","line":"    @size : Int32"},
{"lineNum":" 2009","line":"    @n : Int32"},
{"lineNum":" 2010","line":"    @cycles : Array(Int32)"},
{"lineNum":" 2011","line":"    @pool : Array(T)"},
{"lineNum":" 2012","line":"    @stop : Bool"},
{"lineNum":" 2013","line":"    @i : Int32"},
{"lineNum":" 2014","line":"    @first : Bool"},
{"lineNum":" 2015","line":"    @reuse : Array(T)?"},
{"lineNum":" 2016","line":""},
{"lineNum":" 2017","line":"    def initialize(@array : Array(T), @size, reuse)"},
{"lineNum":" 2018","line":"      @n = @array.size"},
{"lineNum":" 2019","line":"      @cycles = (@n - @size + 1..@n).to_a.reverse!"},
{"lineNum":" 2020","line":"      @pool = @array.dup"},
{"lineNum":" 2021","line":"      @stop = @size > @n"},
{"lineNum":" 2022","line":"      @i = @size - 1"},
{"lineNum":" 2023","line":"      @first = true"},
{"lineNum":" 2024","line":""},
{"lineNum":" 2025","line":"      if reuse"},
{"lineNum":" 2026","line":"        if reuse.is_a?(Array)"},
{"lineNum":" 2027","line":"          @reuse = reuse"},
{"lineNum":" 2028","line":"        else"},
{"lineNum":" 2029","line":"          @reuse = Array(T).new(@size)"},
{"lineNum":" 2030","line":"        end"},
{"lineNum":" 2031","line":"      end"},
{"lineNum":" 2032","line":"    end"},
{"lineNum":" 2033","line":""},
{"lineNum":" 2034","line":"    def next"},
{"lineNum":" 2035","line":"      return stop if @stop"},
{"lineNum":" 2036","line":""},
{"lineNum":" 2037","line":"      if @first"},
{"lineNum":" 2038","line":"        @first = false"},
{"lineNum":" 2039","line":"        return pool_slice(@pool, @size, @reuse)"},
{"lineNum":" 2040","line":"      end"},
{"lineNum":" 2041","line":""},
{"lineNum":" 2042","line":"      while @i >= 0"},
{"lineNum":" 2043","line":"        ci = (@cycles[@i] -= 1)"},
{"lineNum":" 2044","line":"        if ci == 0"},
{"lineNum":" 2045","line":"          e = @pool[@i]"},
{"lineNum":" 2046","line":"          (@i + 1).upto(@n - 1) { |j| @pool[j - 1] = @pool[j] }"},
{"lineNum":" 2047","line":"          @pool[@n - 1] = e"},
{"lineNum":" 2048","line":"          @cycles[@i] = @n - @i"},
{"lineNum":" 2049","line":"        else"},
{"lineNum":" 2050","line":"          @pool.swap @i, -ci"},
{"lineNum":" 2051","line":"          value = pool_slice(@pool, @size, @reuse)"},
{"lineNum":" 2052","line":"          @i = @size - 1"},
{"lineNum":" 2053","line":"          return value"},
{"lineNum":" 2054","line":"        end"},
{"lineNum":" 2055","line":"        @i -= 1"},
{"lineNum":" 2056","line":"      end"},
{"lineNum":" 2057","line":""},
{"lineNum":" 2058","line":"      @stop = true"},
{"lineNum":" 2059","line":"      stop"},
{"lineNum":" 2060","line":"    end"},
{"lineNum":" 2061","line":""},
{"lineNum":" 2062","line":"    def rewind"},
{"lineNum":" 2063","line":"      @cycles = (@n - @size + 1..@n).to_a.reverse!"},
{"lineNum":" 2064","line":"      @pool.replace(@array)"},
{"lineNum":" 2065","line":"      @stop = @size > @n"},
{"lineNum":" 2066","line":"      @i = @size - 1"},
{"lineNum":" 2067","line":"      @first = true"},
{"lineNum":" 2068","line":"      self"},
{"lineNum":" 2069","line":"    end"},
{"lineNum":" 2070","line":"  end"},
{"lineNum":" 2071","line":""},
{"lineNum":" 2072","line":"  private class CombinationIterator(T)"},
{"lineNum":" 2073","line":"    include Iterator(Array(T))"},
{"lineNum":" 2074","line":""},
{"lineNum":" 2075","line":"    @size : Int32"},
{"lineNum":" 2076","line":"    @n : Int32"},
{"lineNum":" 2077","line":"    @copy : Array(T)"},
{"lineNum":" 2078","line":"    @pool : Array(T)"},
{"lineNum":" 2079","line":"    @indices : Array(Int32)"},
{"lineNum":" 2080","line":"    @stop : Bool"},
{"lineNum":" 2081","line":"    @i : Int32"},
{"lineNum":" 2082","line":"    @first : Bool"},
{"lineNum":" 2083","line":"    @reuse : Array(T)?"},
{"lineNum":" 2084","line":""},
{"lineNum":" 2085","line":"    def initialize(array : Array(T), @size, reuse)"},
{"lineNum":" 2086","line":"      @n = array.size"},
{"lineNum":" 2087","line":"      @copy = array.dup"},
{"lineNum":" 2088","line":"      @pool = array.dup"},
{"lineNum":" 2089","line":"      @indices = (0...@size).to_a"},
{"lineNum":" 2090","line":"      @stop = @size > @n"},
{"lineNum":" 2091","line":"      @i = @size - 1"},
{"lineNum":" 2092","line":"      @first = true"},
{"lineNum":" 2093","line":""},
{"lineNum":" 2094","line":"      if reuse"},
{"lineNum":" 2095","line":"        if reuse.is_a?(Array)"},
{"lineNum":" 2096","line":"          @reuse = reuse"},
{"lineNum":" 2097","line":"        else"},
{"lineNum":" 2098","line":"          @reuse = Array(T).new(@size)"},
{"lineNum":" 2099","line":"        end"},
{"lineNum":" 2100","line":"      end"},
{"lineNum":" 2101","line":"    end"},
{"lineNum":" 2102","line":""},
{"lineNum":" 2103","line":"    def next"},
{"lineNum":" 2104","line":"      return stop if @stop"},
{"lineNum":" 2105","line":""},
{"lineNum":" 2106","line":"      if @first"},
{"lineNum":" 2107","line":"        @first = false"},
{"lineNum":" 2108","line":"        return pool_slice(@pool, @size, @reuse)"},
{"lineNum":" 2109","line":"      end"},
{"lineNum":" 2110","line":""},
{"lineNum":" 2111","line":"      while @i >= 0"},
{"lineNum":" 2112","line":"        if @indices[@i] != @i + @n - @size"},
{"lineNum":" 2113","line":"          @indices[@i] += 1"},
{"lineNum":" 2114","line":"          @pool[@i] = @copy[@indices[@i]]"},
{"lineNum":" 2115","line":""},
{"lineNum":" 2116","line":"          (@i + 1).upto(@size - 1) do |j|"},
{"lineNum":" 2117","line":"            @indices[j] = @indices[j - 1] + 1"},
{"lineNum":" 2118","line":"            @pool[j] = @copy[@indices[j]]"},
{"lineNum":" 2119","line":"          end"},
{"lineNum":" 2120","line":""},
{"lineNum":" 2121","line":"          value = pool_slice(@pool, @size, @reuse)"},
{"lineNum":" 2122","line":"          @i = @size - 1"},
{"lineNum":" 2123","line":"          return value"},
{"lineNum":" 2124","line":"        end"},
{"lineNum":" 2125","line":"        @i -= 1"},
{"lineNum":" 2126","line":"      end"},
{"lineNum":" 2127","line":""},
{"lineNum":" 2128","line":"      @stop = true"},
{"lineNum":" 2129","line":"      stop"},
{"lineNum":" 2130","line":"    end"},
{"lineNum":" 2131","line":""},
{"lineNum":" 2132","line":"    def rewind"},
{"lineNum":" 2133","line":"      @pool.replace(@copy)"},
{"lineNum":" 2134","line":"      @indices = (0...@size).to_a"},
{"lineNum":" 2135","line":"      @stop = @size > @n"},
{"lineNum":" 2136","line":"      @i = @size - 1"},
{"lineNum":" 2137","line":"      @first = true"},
{"lineNum":" 2138","line":"      self"},
{"lineNum":" 2139","line":"    end"},
{"lineNum":" 2140","line":"  end"},
{"lineNum":" 2141","line":""},
{"lineNum":" 2142","line":"  private class RepeatedCombinationIterator(T)"},
{"lineNum":" 2143","line":"    include Iterator(Array(T))"},
{"lineNum":" 2144","line":""},
{"lineNum":" 2145","line":"    @size : Int32"},
{"lineNum":" 2146","line":"    @n : Int32"},
{"lineNum":" 2147","line":"    @copy : Array(T)"},
{"lineNum":" 2148","line":"    @indices : Array(Int32)"},
{"lineNum":" 2149","line":"    @pool : Array(T)"},
{"lineNum":" 2150","line":"    @stop : Bool"},
{"lineNum":" 2151","line":"    @i : Int32"},
{"lineNum":" 2152","line":"    @first : Bool"},
{"lineNum":" 2153","line":"    @reuse : Array(T)?"},
{"lineNum":" 2154","line":""},
{"lineNum":" 2155","line":"    def initialize(array : Array(T), @size, reuse)"},
{"lineNum":" 2156","line":"      @n = array.size"},
{"lineNum":" 2157","line":"      @copy = array.dup"},
{"lineNum":" 2158","line":"      @indices = Array.new(@size, 0)"},
{"lineNum":" 2159","line":"      @pool = @indices.map { |i| @copy[i] }"},
{"lineNum":" 2160","line":"      @stop = @size > @n"},
{"lineNum":" 2161","line":"      @i = @size - 1"},
{"lineNum":" 2162","line":"      @first = true"},
{"lineNum":" 2163","line":""},
{"lineNum":" 2164","line":"      if reuse"},
{"lineNum":" 2165","line":"        if reuse.is_a?(Array)"},
{"lineNum":" 2166","line":"          @reuse = reuse"},
{"lineNum":" 2167","line":"        else"},
{"lineNum":" 2168","line":"          @reuse = Array(T).new(@size)"},
{"lineNum":" 2169","line":"        end"},
{"lineNum":" 2170","line":"      end"},
{"lineNum":" 2171","line":"    end"},
{"lineNum":" 2172","line":""},
{"lineNum":" 2173","line":"    def next"},
{"lineNum":" 2174","line":"      return stop if @stop"},
{"lineNum":" 2175","line":""},
{"lineNum":" 2176","line":"      if @first"},
{"lineNum":" 2177","line":"        @first = false"},
{"lineNum":" 2178","line":"        return pool_slice(@pool, @size, @reuse)"},
{"lineNum":" 2179","line":"      end"},
{"lineNum":" 2180","line":""},
{"lineNum":" 2181","line":"      while @i >= 0"},
{"lineNum":" 2182","line":"        if @indices[@i] != @n - 1"},
{"lineNum":" 2183","line":"          ii = @indices[@i] + 1"},
{"lineNum":" 2184","line":"          tmp = @copy[ii]"},
{"lineNum":" 2185","line":"          @indices.fill(@i, @size - @i) { ii }"},
{"lineNum":" 2186","line":"          @pool.fill(@i, @size - @i) { tmp }"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"          value = pool_slice(@pool, @size, @reuse)"},
{"lineNum":" 2189","line":"          @i = @size - 1"},
{"lineNum":" 2190","line":"          return value"},
{"lineNum":" 2191","line":"        end"},
{"lineNum":" 2192","line":"        @i -= 1"},
{"lineNum":" 2193","line":"      end"},
{"lineNum":" 2194","line":""},
{"lineNum":" 2195","line":"      @stop = true"},
{"lineNum":" 2196","line":"      stop"},
{"lineNum":" 2197","line":"    end"},
{"lineNum":" 2198","line":""},
{"lineNum":" 2199","line":"    def rewind"},
{"lineNum":" 2200","line":"      if @n > 0"},
{"lineNum":" 2201","line":"        @indices.fill(0)"},
{"lineNum":" 2202","line":"        @pool.fill(@copy[0])"},
{"lineNum":" 2203","line":"      end"},
{"lineNum":" 2204","line":"      @stop = @size > @n"},
{"lineNum":" 2205","line":"      @i = @size - 1"},
{"lineNum":" 2206","line":"      @first = true"},
{"lineNum":" 2207","line":"      self"},
{"lineNum":" 2208","line":"    end"},
{"lineNum":" 2209","line":"  end"},
{"lineNum":" 2210","line":""},
{"lineNum":" 2211","line":"  private struct FlattenHelper(T)"},
{"lineNum":" 2212","line":"    def self.flatten(ary)"},
{"lineNum":" 2213","line":"      result = [] of T"},
{"lineNum":" 2214","line":"      flatten ary, result"},
{"lineNum":" 2215","line":"      result"},
{"lineNum":" 2216","line":"    end"},
{"lineNum":" 2217","line":""},
{"lineNum":" 2218","line":"    def self.flatten(ary : Array, result)"},
{"lineNum":" 2219","line":"      ary.each do |elem|"},
{"lineNum":" 2220","line":"        flatten elem, result"},
{"lineNum":" 2221","line":"      end"},
{"lineNum":" 2222","line":"    end"},
{"lineNum":" 2223","line":""},
{"lineNum":" 2224","line":"    def self.flatten(iter : Iterator, result)"},
{"lineNum":" 2225","line":"      iter.each do |elem|"},
{"lineNum":" 2226","line":"        flatten elem, result"},
{"lineNum":" 2227","line":"      end"},
{"lineNum":" 2228","line":"    end"},
{"lineNum":" 2229","line":""},
{"lineNum":" 2230","line":"    def self.flatten(other : T, result)"},
{"lineNum":" 2231","line":"      result << other"},
{"lineNum":" 2232","line":"    end"},
{"lineNum":" 2233","line":""},
{"lineNum":" 2234","line":"    def self.element_type(ary)"},
{"lineNum":" 2235","line":"      case ary"},
{"lineNum":" 2236","line":"      when Array"},
{"lineNum":" 2237","line":"        element_type(ary.first)"},
{"lineNum":" 2238","line":"      when Iterator"},
{"lineNum":" 2239","line":"        element_type(ary.next)"},
{"lineNum":" 2240","line":"      else"},
{"lineNum":" 2241","line":"        ary"},
{"lineNum":" 2242","line":"      end"},
{"lineNum":" 2243","line":"    end"},
{"lineNum":" 2244","line":"  end"},
{"lineNum":" 2245","line":"end"},
{"lineNum":" 2246","line":""},
{"lineNum":" 2247","line":"private def pool_slice(pool, size, reuse)"},
{"lineNum":" 2248","line":"  if reuse"},
{"lineNum":" 2249","line":"    reuse.clear"},
{"lineNum":" 2250","line":"    size.times { |i| reuse << pool[i] }"},
{"lineNum":" 2251","line":"    reuse"},
{"lineNum":" 2252","line":"  else"},
{"lineNum":" 2253","line":"    pool[0, size]"},
{"lineNum":" 2254","line":"  end"},
{"lineNum":" 2255","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 82, "covered" : 0,};
var merged_data = [];
