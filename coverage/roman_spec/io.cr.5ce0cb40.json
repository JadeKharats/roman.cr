var data = {lines:[
{"lineNum":"    1","line":"require \"c/fcntl\""},
{"lineNum":"    2","line":"require \"c/stdio\""},
{"lineNum":"    3","line":"require \"c/sys/select\""},
{"lineNum":"    4","line":"require \"c/sys/wait\""},
{"lineNum":"    5","line":"require \"c/errno\""},
{"lineNum":"    6","line":"require \"c/unistd\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"# The `IO` class is the basis for all input and output in Crystal."},
{"lineNum":"    9","line":"#"},
{"lineNum":"   10","line":"# This class is inherited by types like `File`, `Socket` and `IO::Memory` and"},
{"lineNum":"   11","line":"# provide many useful methods for reading to and writing from an IO, like `print`, `puts`,"},
{"lineNum":"   12","line":"# `gets` and `printf`."},
{"lineNum":"   13","line":"#"},
{"lineNum":"   14","line":"# The only requirement for a type including the `IO` module is to define"},
{"lineNum":"   15","line":"# these two methods:"},
{"lineNum":"   16","line":"#"},
{"lineNum":"   17","line":"# * `read(slice : Bytes)`: read at most *slice.size* bytes into *slice* and return the number of bytes read"},
{"lineNum":"   18","line":"# * `write(slice : Bytes)`: write the whole *slice* into the IO"},
{"lineNum":"   19","line":"#"},
{"lineNum":"   20","line":"# For example, this is a simple `IO` on top of a `Bytes`:"},
{"lineNum":"   21","line":"#"},
{"lineNum":"   22","line":"# ```"},
{"lineNum":"   23","line":"# class SimpleSliceIO < IO"},
{"lineNum":"   24","line":"#   def initialize(@slice : Bytes)"},
{"lineNum":"   25","line":"#   end"},
{"lineNum":"   26","line":"#"},
{"lineNum":"   27","line":"#   def read(slice : Bytes)"},
{"lineNum":"   28","line":"#     slice.size.times { |i| slice[i] = @slice[i] }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   29","line":"#     @slice += slice.size"},
{"lineNum":"   30","line":"#     slice.size"},
{"lineNum":"   31","line":"#   end"},
{"lineNum":"   32","line":"#"},
{"lineNum":"   33","line":"#   def write(slice : Bytes)"},
{"lineNum":"   34","line":"#     slice.size.times { |i| @slice[i] = slice[i] }"},
{"lineNum":"   35","line":"#     @slice += slice.size"},
{"lineNum":"   36","line":"#     nil"},
{"lineNum":"   37","line":"#   end"},
{"lineNum":"   38","line":"# end"},
{"lineNum":"   39","line":"#"},
{"lineNum":"   40","line":"# slice = Slice.new(9) { |i| (\'a\'.ord + i).to_u8 }"},
{"lineNum":"   41","line":"# String.new(slice) # => \"abcdefghi\""},
{"lineNum":"   42","line":"#"},
{"lineNum":"   43","line":"# io = SimpleSliceIO.new(slice)"},
{"lineNum":"   44","line":"# io.gets(3) # => \"abc\""},
{"lineNum":"   45","line":"# io.print \"xyz\""},
{"lineNum":"   46","line":"# String.new(slice) # => \"abcxyzghi\""},
{"lineNum":"   47","line":"# ```"},
{"lineNum":"   48","line":"#"},
{"lineNum":"   49","line":"# ### Encoding"},
{"lineNum":"   50","line":"#"},
{"lineNum":"   51","line":"# An `IO` can be set an encoding with the `#set_encoding` method. When this is"},
{"lineNum":"   52","line":"# set, all string operations (`gets`, `gets_to_end`, `read_char`, `<<`, `print`, `puts`"},
{"lineNum":"   53","line":"# `printf`) will write in the given encoding, and read from the given encoding."},
{"lineNum":"   54","line":"# Byte operations (`read`, `write`, `read_byte`, `write_byte`) never do"},
{"lineNum":"   55","line":"# encoding/decoding operations."},
{"lineNum":"   56","line":"#"},
{"lineNum":"   57","line":"# If an encoding is not set, the default one is UTF-8."},
{"lineNum":"   58","line":"#"},
{"lineNum":"   59","line":"# Mixing string and byte operations might not give correct results and should be"},
{"lineNum":"   60","line":"# avoided, as string operations might need to read extra bytes in order to get characters"},
{"lineNum":"   61","line":"# in the given encoding."},
{"lineNum":"   62","line":"abstract class IO"},
{"lineNum":"   63","line":"  # Argument to a `seek` operation."},
{"lineNum":"   64","line":"  enum Seek"},
{"lineNum":"   65","line":"    # Seeks to an absolute location"},
{"lineNum":"   66","line":"    Set = 0"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    # Seeks to a location relative to the current location"},
{"lineNum":"   69","line":"    # in the stream"},
{"lineNum":"   70","line":"    Current = 1"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    # Seeks to a location relative to the end of the stream"},
{"lineNum":"   73","line":"    # (you probably want a negative value for the amount)"},
{"lineNum":"   74","line":"    End = 2"},
{"lineNum":"   75","line":"  end"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  # Raised when an `IO` operation times out."},
{"lineNum":"   78","line":"  #"},
{"lineNum":"   79","line":"  # ```"},
{"lineNum":"   80","line":"  # STDIN.read_timeout = 1"},
{"lineNum":"   81","line":"  # STDIN.gets # raises IO::Timeout (after 1 second)"},
{"lineNum":"   82","line":"  # ```"},
{"lineNum":"   83","line":"  class Timeout < Exception"},
{"lineNum":"   84","line":"  end"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"  # Reads at most *slice.size* bytes from this `IO` into *slice*."},
{"lineNum":"   87","line":"  # Returns the number of bytes read, which is 0 if and only if there is no"},
{"lineNum":"   88","line":"  # more data to read (so checking for 0 is the way to detect end of file)."},
{"lineNum":"   89","line":"  #"},
{"lineNum":"   90","line":"  # ```"},
{"lineNum":"   91","line":"  # io = IO::Memory.new \"hello\""},
{"lineNum":"   92","line":"  # slice = Bytes.new(4)"},
{"lineNum":"   93","line":"  # io.read(slice) # => 4"},
{"lineNum":"   94","line":"  # slice          # => Bytes[104, 101, 108, 108]"},
{"lineNum":"   95","line":"  # io.read(slice) # => 1"},
{"lineNum":"   96","line":"  # slice          # => Bytes[111, 101, 108, 108]"},
{"lineNum":"   97","line":"  # io.read(slice) # => 0"},
{"lineNum":"   98","line":"  # ```"},
{"lineNum":"   99","line":"  abstract def read(slice : Bytes)"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"  # Writes the contents of *slice* into this `IO`."},
{"lineNum":"  102","line":"  #"},
{"lineNum":"  103","line":"  # ```"},
{"lineNum":"  104","line":"  # io = IO::Memory.new"},
{"lineNum":"  105","line":"  # slice = Bytes.new(4) { |i| (\'a\'.ord + i).to_u8 }"},
{"lineNum":"  106","line":"  # io.write(slice)"},
{"lineNum":"  107","line":"  # io.to_s # => \"abcd\""},
{"lineNum":"  108","line":"  # ```"},
{"lineNum":"  109","line":"  abstract def write(slice : Bytes) : Nil"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"  # Closes this `IO`."},
{"lineNum":"  112","line":"  #"},
{"lineNum":"  113","line":"  # `IO` defines this is a no-op method, but including types may override."},
{"lineNum":"  114","line":"  def close"},
{"lineNum":"  115","line":"  end"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"  # Returns `true` if this `IO` is closed."},
{"lineNum":"  118","line":"  #"},
{"lineNum":"  119","line":"  # `IO` defines returns `false`, but including types may override."},
{"lineNum":"  120","line":"  def closed?"},
{"lineNum":"  121","line":"    false"},
{"lineNum":"  122","line":"  end"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"  protected def check_open"},
{"lineNum":"  125","line":"    raise IO::Error.new \"Closed stream\" if closed?","class":"lineNoCov","hits":"0","possible_hits":"94",},
{"lineNum":"  126","line":"  end"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"  # Flushes buffered data, if any."},
{"lineNum":"  129","line":"  #"},
{"lineNum":"  130","line":"  # `IO` defines this is a no-op method, but including types may override."},
{"lineNum":"  131","line":"  def flush"},
{"lineNum":"  132","line":"  end"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"  # Creates a pair of pipe endpoints (connected to each other)"},
{"lineNum":"  135","line":"  # and returns them as a two-element `Tuple`."},
{"lineNum":"  136","line":"  #"},
{"lineNum":"  137","line":"  # ```"},
{"lineNum":"  138","line":"  # reader, writer = IO.pipe"},
{"lineNum":"  139","line":"  # writer.puts \"hello\""},
{"lineNum":"  140","line":"  # writer.puts \"world\""},
{"lineNum":"  141","line":"  # reader.gets # => \"hello\""},
{"lineNum":"  142","line":"  # reader.gets # => \"world\""},
{"lineNum":"  143","line":"  # ```"},
{"lineNum":"  144","line":"  def self.pipe(read_blocking = false, write_blocking = false)"},
{"lineNum":"  145","line":"    pipe_fds = uninitialized StaticArray(LibC::Int, 2)"},
{"lineNum":"  146","line":"    if LibC.pipe(pipe_fds) != 0","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"      raise Errno.new(\"Could not create pipe\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"    end"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    r = IO::FileDescriptor.new(pipe_fds[0], read_blocking)"},
{"lineNum":"  151","line":"    w = IO::FileDescriptor.new(pipe_fds[1], write_blocking)"},
{"lineNum":"  152","line":"    r.close_on_exec = true"},
{"lineNum":"  153","line":"    w.close_on_exec = true"},
{"lineNum":"  154","line":"    w.sync = true"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    {r, w}"},
{"lineNum":"  157","line":"  end"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"  # Creates a pair of pipe endpoints (connected to each other) and passes them"},
{"lineNum":"  160","line":"  # to the given block. Both endpoints are closed after the block."},
{"lineNum":"  161","line":"  #"},
{"lineNum":"  162","line":"  # ```"},
{"lineNum":"  163","line":"  # IO.pipe do |reader, writer|"},
{"lineNum":"  164","line":"  #   writer.puts \"hello\""},
{"lineNum":"  165","line":"  #   writer.puts \"world\""},
{"lineNum":"  166","line":"  #   reader.gets # => \"hello\""},
{"lineNum":"  167","line":"  #   reader.gets # => \"world\""},
{"lineNum":"  168","line":"  # end"},
{"lineNum":"  169","line":"  # ```"},
{"lineNum":"  170","line":"  def self.pipe(read_blocking = false, write_blocking = false)"},
{"lineNum":"  171","line":"    r, w = IO.pipe(read_blocking, write_blocking)"},
{"lineNum":"  172","line":"    begin"},
{"lineNum":"  173","line":"      yield r, w"},
{"lineNum":"  174","line":"    ensure"},
{"lineNum":"  175","line":"      w.flush"},
{"lineNum":"  176","line":"      r.close"},
{"lineNum":"  177","line":"      w.close"},
{"lineNum":"  178","line":"    end"},
{"lineNum":"  179","line":"  end"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"  # Writes the given object into this `IO`."},
{"lineNum":"  182","line":"  # This ends up calling `to_s(io)` on the object."},
{"lineNum":"  183","line":"  #"},
{"lineNum":"  184","line":"  # ```"},
{"lineNum":"  185","line":"  # io = IO::Memory.new"},
{"lineNum":"  186","line":"  # io << 1"},
{"lineNum":"  187","line":"  # io << \'-\'"},
{"lineNum":"  188","line":"  # io << \"Crystal\""},
{"lineNum":"  189","line":"  # io.to_s # => \"1-Crystal\""},
{"lineNum":"  190","line":"  # ```"},
{"lineNum":"  191","line":"  def <<(obj) : self","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  192","line":"    obj.to_s self","class":"lineNoCov","hits":"0","possible_hits":"102",},
{"lineNum":"  193","line":"    self"},
{"lineNum":"  194","line":"  end"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"  # Same as `<<`."},
{"lineNum":"  197","line":"  #"},
{"lineNum":"  198","line":"  # ```"},
{"lineNum":"  199","line":"  # io = IO::Memory.new"},
{"lineNum":"  200","line":"  # io.print 1"},
{"lineNum":"  201","line":"  # io.print \'-\'"},
{"lineNum":"  202","line":"  # io.print \"Crystal\""},
{"lineNum":"  203","line":"  # io.to_s # => \"1-Crystal\""},
{"lineNum":"  204","line":"  # ```"},
{"lineNum":"  205","line":"  def print(obj) : Nil"},
{"lineNum":"  206","line":"    self << obj","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"    nil"},
{"lineNum":"  208","line":"  end"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"  # Writes the given objects into this `IO` by invoking `to_s(io)`"},
{"lineNum":"  211","line":"  # on each of the objects."},
{"lineNum":"  212","line":"  #"},
{"lineNum":"  213","line":"  # ```"},
{"lineNum":"  214","line":"  # io = IO::Memory.new"},
{"lineNum":"  215","line":"  # io.print 1, \'-\', \"Crystal\""},
{"lineNum":"  216","line":"  # io.to_s # => \"1-Crystal\""},
{"lineNum":"  217","line":"  # ```"},
{"lineNum":"  218","line":"  def print(*objects : _) : Nil"},
{"lineNum":"  219","line":"    objects.each do |obj|"},
{"lineNum":"  220","line":"      print obj"},
{"lineNum":"  221","line":"    end"},
{"lineNum":"  222","line":"    nil"},
{"lineNum":"  223","line":"  end"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"  # Writes the given string to this `IO` followed by a newline character"},
{"lineNum":"  226","line":"  # unless the string already ends with one."},
{"lineNum":"  227","line":"  #"},
{"lineNum":"  228","line":"  # ```"},
{"lineNum":"  229","line":"  # io = IO::Memory.new"},
{"lineNum":"  230","line":"  # io.puts \"hello\\n\""},
{"lineNum":"  231","line":"  # io.puts \"world\""},
{"lineNum":"  232","line":"  # io.to_s # => \"hello\\nworld\\n\""},
{"lineNum":"  233","line":"  # ```"},
{"lineNum":"  234","line":"  def puts(string : String) : Nil","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"    self << string"},
{"lineNum":"  236","line":"    puts unless string.ends_with?(\'\\n\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":"    nil"},
{"lineNum":"  238","line":"  end"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"  # Writes the given object to this `IO` followed by a newline character."},
{"lineNum":"  241","line":"  #"},
{"lineNum":"  242","line":"  # ```"},
{"lineNum":"  243","line":"  # io = IO::Memory.new"},
{"lineNum":"  244","line":"  # io.puts 1"},
{"lineNum":"  245","line":"  # io.puts \"Crystal\""},
{"lineNum":"  246","line":"  # io.to_s # => \"1\\nCrystal\\n\""},
{"lineNum":"  247","line":"  # ```"},
{"lineNum":"  248","line":"  def puts(obj) : Nil"},
{"lineNum":"  249","line":"    self << obj","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  250","line":"    puts"},
{"lineNum":"  251","line":"  end"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"  # Writes a newline character."},
{"lineNum":"  254","line":"  #"},
{"lineNum":"  255","line":"  # ```"},
{"lineNum":"  256","line":"  # io = IO::Memory.new"},
{"lineNum":"  257","line":"  # io.puts"},
{"lineNum":"  258","line":"  # io.to_s # => \"\\n\""},
{"lineNum":"  259","line":"  # ```"},
{"lineNum":"  260","line":"  def puts : Nil"},
{"lineNum":"  261","line":"    print \'\\n\'"},
{"lineNum":"  262","line":"    nil"},
{"lineNum":"  263","line":"  end"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"  # Writes the given objects, each followed by a newline character."},
{"lineNum":"  266","line":"  #"},
{"lineNum":"  267","line":"  # ```"},
{"lineNum":"  268","line":"  # io = IO::Memory.new"},
{"lineNum":"  269","line":"  # io.puts 1, \'-\', \"Crystal\""},
{"lineNum":"  270","line":"  # io.to_s # => \"1\\n-\\nCrystal\\n\""},
{"lineNum":"  271","line":"  # ```"},
{"lineNum":"  272","line":"  def puts(*objects : _) : Nil"},
{"lineNum":"  273","line":"    objects.each do |obj|"},
{"lineNum":"  274","line":"      puts obj"},
{"lineNum":"  275","line":"    end"},
{"lineNum":"  276","line":"    nil"},
{"lineNum":"  277","line":"  end"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"  def printf(format_string, *args) : Nil"},
{"lineNum":"  280","line":"    printf format_string, args"},
{"lineNum":"  281","line":"  end"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"  # ditto"},
{"lineNum":"  284","line":"  def printf(format_string, args : Array | Tuple) : Nil"},
{"lineNum":"  285","line":"    String::Formatter(typeof(args)).new(format_string, args, self).format"},
{"lineNum":"  286","line":"    nil"},
{"lineNum":"  287","line":"  end"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"  # Reads a single byte from this `IO`. Returns `nil` if there is no more"},
{"lineNum":"  290","line":"  # data to read."},
{"lineNum":"  291","line":"  #"},
{"lineNum":"  292","line":"  # ```"},
{"lineNum":"  293","line":"  # io = IO::Memory.new \"a\""},
{"lineNum":"  294","line":"  # io.read_byte # => 97"},
{"lineNum":"  295","line":"  # io.read_byte # => nil"},
{"lineNum":"  296","line":"  # ```"},
{"lineNum":"  297","line":"  def read_byte : UInt8?"},
{"lineNum":"  298","line":"    byte = uninitialized UInt8"},
{"lineNum":"  299","line":"    if read(Slice.new(pointerof(byte), 1)) == 1"},
{"lineNum":"  300","line":"      byte"},
{"lineNum":"  301","line":"    else"},
{"lineNum":"  302","line":"      nil"},
{"lineNum":"  303","line":"    end"},
{"lineNum":"  304","line":"  end"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"  # Reads a single `Char` from this `IO`. Returns `nil` if there is no"},
{"lineNum":"  307","line":"  # more data to read."},
{"lineNum":"  308","line":"  #"},
{"lineNum":"  309","line":"  # ```"},
{"lineNum":"  310","line":"  # io = IO::Memory.new \"あ\""},
{"lineNum":"  311","line":"  # io.read_char # => \'あ\'"},
{"lineNum":"  312","line":"  # io.read_char # => nil"},
{"lineNum":"  313","line":"  # ```"},
{"lineNum":"  314","line":"  def read_char : Char?"},
{"lineNum":"  315","line":"    info = read_char_with_bytesize"},
{"lineNum":"  316","line":"    info ? info[0] : nil"},
{"lineNum":"  317","line":"  end"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"  private def read_char_with_bytesize"},
{"lineNum":"  320","line":"    # For UTF-8 encoding, try to see if we can peek 4 bytes."},
{"lineNum":"  321","line":"    # If so, this will be faster than reading byte per byte."},
{"lineNum":"  322","line":"    if !decoder && (peek = self.peek)"},
{"lineNum":"  323","line":"      if peek.empty?"},
{"lineNum":"  324","line":"        return nil"},
{"lineNum":"  325","line":"      else"},
{"lineNum":"  326","line":"        return read_char_with_bytesize_peek(peek)"},
{"lineNum":"  327","line":"      end"},
{"lineNum":"  328","line":"    else"},
{"lineNum":"  329","line":"      read_char_with_bytesize_slow"},
{"lineNum":"  330","line":"    end"},
{"lineNum":"  331","line":"  end"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"  private def read_char_with_bytesize_peek(peek)"},
{"lineNum":"  334","line":"    first = peek[0].to_u32"},
{"lineNum":"  335","line":"    skip(1)"},
{"lineNum":"  336","line":"    if first < 0x80"},
{"lineNum":"  337","line":"      return first.unsafe_chr, 1"},
{"lineNum":"  338","line":"    end"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"    second = peek_or_read_masked(peek, 1)"},
{"lineNum":"  341","line":"    if first < 0xe0"},
{"lineNum":"  342","line":"      return ((first & 0x1f) << 6 | second).unsafe_chr, 2"},
{"lineNum":"  343","line":"    end"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    third = peek_or_read_masked(peek, 2)"},
{"lineNum":"  346","line":"    if first < 0xf0"},
{"lineNum":"  347","line":"      return ((first & 0x0f) << 12 | (second << 6) | third).unsafe_chr, 3"},
{"lineNum":"  348","line":"    end"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"    fourth = peek_or_read_masked(peek, 3)"},
{"lineNum":"  351","line":"    if first < 0xf8"},
{"lineNum":"  352","line":"      return ((first & 0x07) << 18 | (second << 12) | (third << 6) | fourth).unsafe_chr, 4"},
{"lineNum":"  353","line":"    end"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    raise InvalidByteSequenceError.new(\"Unexpected byte 0x#{first.to_s(16)} in UTF-8 byte sequence\")"},
{"lineNum":"  356","line":"  end"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"  private def read_char_with_bytesize_slow"},
{"lineNum":"  359","line":"    first = read_utf8_byte"},
{"lineNum":"  360","line":"    return nil unless first"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"    first = first.to_u32"},
{"lineNum":"  363","line":"    return first.unsafe_chr, 1 if first < 0x80"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"    second = read_utf8_masked_byte"},
{"lineNum":"  366","line":"    return ((first & 0x1f) << 6 | second).unsafe_chr, 2 if first < 0xe0"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"    third = read_utf8_masked_byte"},
{"lineNum":"  369","line":"    return ((first & 0x0f) << 12 | (second << 6) | third).unsafe_chr, 3 if first < 0xf0"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"    fourth = read_utf8_masked_byte"},
{"lineNum":"  372","line":"    return ((first & 0x07) << 18 | (second << 12) | (third << 6) | fourth).unsafe_chr, 4 if first < 0xf8"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"    raise InvalidByteSequenceError.new(\"Unexpected byte 0x#{first.to_s(16)} in UTF-8 byte sequence\")"},
{"lineNum":"  375","line":"  end"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"  private def read_utf8_masked_byte"},
{"lineNum":"  378","line":"    byte = read_utf8_byte || raise InvalidByteSequenceError.new(\"Incomplete UTF-8 byte sequence\")"},
{"lineNum":"  379","line":"    (byte & 0x3f).to_u32"},
{"lineNum":"  380","line":"  end"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"  private def peek_or_read_masked(peek, index)"},
{"lineNum":"  383","line":"    if byte = peek[index]?"},
{"lineNum":"  384","line":"      skip(1)"},
{"lineNum":"  385","line":"      (byte & 0x3f).to_u32"},
{"lineNum":"  386","line":"    else"},
{"lineNum":"  387","line":"      read_utf8_masked_byte"},
{"lineNum":"  388","line":"    end"},
{"lineNum":"  389","line":"  end"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"  # Reads a single decoded UTF-8 byte from this `IO`."},
{"lineNum":"  392","line":"  # Returns `nil` if there is no more data to read."},
{"lineNum":"  393","line":"  #"},
{"lineNum":"  394","line":"  # If no encoding is set, this is the same as `#read_byte`."},
{"lineNum":"  395","line":"  #"},
{"lineNum":"  396","line":"  # ```"},
{"lineNum":"  397","line":"  # bytes = \"你\".encode(\"GB2312\") # => Bytes[196, 227]"},
{"lineNum":"  398","line":"  #"},
{"lineNum":"  399","line":"  # io = IO::Memory.new(bytes)"},
{"lineNum":"  400","line":"  # io.set_encoding(\"GB2312\")"},
{"lineNum":"  401","line":"  # io.read_utf8_byte # => 228"},
{"lineNum":"  402","line":"  # io.read_utf8_byte # => 189"},
{"lineNum":"  403","line":"  # io.read_utf8_byte # => 160"},
{"lineNum":"  404","line":"  # io.read_utf8_byte # => nil"},
{"lineNum":"  405","line":"  #"},
{"lineNum":"  406","line":"  # \"你\".bytes # => [228, 189, 160]"},
{"lineNum":"  407","line":"  # ```"},
{"lineNum":"  408","line":"  def read_utf8_byte"},
{"lineNum":"  409","line":"    if decoder = decoder()"},
{"lineNum":"  410","line":"      decoder.read_byte(self)"},
{"lineNum":"  411","line":"    else"},
{"lineNum":"  412","line":"      read_byte"},
{"lineNum":"  413","line":"    end"},
{"lineNum":"  414","line":"  end"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"  # Reads UTF-8 decoded bytes into the given *slice*."},
{"lineNum":"  417","line":"  # Returns the number of UTF-8 bytes read."},
{"lineNum":"  418","line":"  #"},
{"lineNum":"  419","line":"  # If no encoding is set, this is the same as `#read(slice)`."},
{"lineNum":"  420","line":"  #"},
{"lineNum":"  421","line":"  # ```"},
{"lineNum":"  422","line":"  # bytes = \"你\".encode(\"GB2312\") # => Bytes[196, 227]"},
{"lineNum":"  423","line":"  #"},
{"lineNum":"  424","line":"  # io = IO::Memory.new(bytes)"},
{"lineNum":"  425","line":"  # io.set_encoding(\"GB2312\")"},
{"lineNum":"  426","line":"  #"},
{"lineNum":"  427","line":"  # buffer = uninitialized UInt8[1024]"},
{"lineNum":"  428","line":"  # bytes_read = io.read_utf8(buffer.to_slice) # => 3"},
{"lineNum":"  429","line":"  # buffer.to_slice[0, bytes_read]             # => Bytes[228, 189, 160]"},
{"lineNum":"  430","line":"  #"},
{"lineNum":"  431","line":"  # \"你\".bytes # => [228, 189, 160]"},
{"lineNum":"  432","line":"  # ```"},
{"lineNum":"  433","line":"  def read_utf8(slice : Bytes)"},
{"lineNum":"  434","line":"    if decoder = decoder()"},
{"lineNum":"  435","line":"      decoder.read_utf8(self, slice)"},
{"lineNum":"  436","line":"    else"},
{"lineNum":"  437","line":"      read(slice)"},
{"lineNum":"  438","line":"    end"},
{"lineNum":"  439","line":"  end"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"  # Reads an UTF-8 encoded string of exactly *bytesize* bytes."},
{"lineNum":"  442","line":"  # Raises `EOFError` if there are not enough bytes to build"},
{"lineNum":"  443","line":"  # the string."},
{"lineNum":"  444","line":"  #"},
{"lineNum":"  445","line":"  # ```"},
{"lineNum":"  446","line":"  # io = IO::Memory.new(\"hello world\")"},
{"lineNum":"  447","line":"  # io.read_string(5) # => \"hello\""},
{"lineNum":"  448","line":"  # io.read_string(1) # => \" \""},
{"lineNum":"  449","line":"  # io.read_string(6) # raises IO::EOFError"},
{"lineNum":"  450","line":"  # ```"},
{"lineNum":"  451","line":"  def read_string(bytesize : Int) : String"},
{"lineNum":"  452","line":"    String.new(bytesize) do |ptr|"},
{"lineNum":"  453","line":"      if decoder = decoder()"},
{"lineNum":"  454","line":"        read = decoder.read_utf8(self, Slice.new(ptr, bytesize))"},
{"lineNum":"  455","line":"        if read != bytesize"},
{"lineNum":"  456","line":"          raise IO::EOFError.new"},
{"lineNum":"  457","line":"        end"},
{"lineNum":"  458","line":"      else"},
{"lineNum":"  459","line":"        read_fully(Slice.new(ptr, bytesize))"},
{"lineNum":"  460","line":"      end"},
{"lineNum":"  461","line":"      {bytesize, 0}"},
{"lineNum":"  462","line":"    end"},
{"lineNum":"  463","line":"  end"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"  # Peeks into this IO, if possible."},
{"lineNum":"  466","line":"  #"},
{"lineNum":"  467","line":"  # It returns:"},
{"lineNum":"  468","line":"  # - `nil` if this IO isn\'t peekable"},
{"lineNum":"  469","line":"  # - an empty slice if it is, but EOF was reached"},
{"lineNum":"  470","line":"  # - a non-empty slice if some data can be peeked"},
{"lineNum":"  471","line":"  #"},
{"lineNum":"  472","line":"  # The returned bytes are only valid data until a next call"},
{"lineNum":"  473","line":"  # to any method that reads from this IO is invoked."},
{"lineNum":"  474","line":"  #"},
{"lineNum":"  475","line":"  # By default this method returns `nil`, but IO implementations"},
{"lineNum":"  476","line":"  # that provide buffering or wrap other IOs should override"},
{"lineNum":"  477","line":"  # this method."},
{"lineNum":"  478","line":"  def peek : Bytes?"},
{"lineNum":"  479","line":"    nil"},
{"lineNum":"  480","line":"  end"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"  # Writes a slice of UTF-8 encoded bytes to this `IO`, using the current encoding."},
{"lineNum":"  483","line":"  def write_utf8(slice : Bytes)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  484","line":"    if encoder = encoder()","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  485","line":"      encoder.write(self, slice)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  486","line":"    else"},
{"lineNum":"  487","line":"      write(slice)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  488","line":"    end"},
{"lineNum":"  489","line":"    nil"},
{"lineNum":"  490","line":"  end"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"  private def encoder"},
{"lineNum":"  493","line":"    if encoding = @encoding","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  494","line":"      @encoder ||= Encoder.new(encoding)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  495","line":"    else"},
{"lineNum":"  496","line":"      nil"},
{"lineNum":"  497","line":"    end"},
{"lineNum":"  498","line":"  end"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"  private def decoder","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  501","line":"    if encoding = @encoding","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  502","line":"      @decoder ||= Decoder.new(encoding)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  503","line":"    else"},
{"lineNum":"  504","line":"      nil"},
{"lineNum":"  505","line":"    end"},
{"lineNum":"  506","line":"  end"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"  # Tries to read exactly `slice.size` bytes from this `IO` into *slice*."},
{"lineNum":"  509","line":"  # Raises `EOFError` if there aren\'t `slice.size` bytes of data."},
{"lineNum":"  510","line":"  #"},
{"lineNum":"  511","line":"  # ```"},
{"lineNum":"  512","line":"  # io = IO::Memory.new \"123451234\""},
{"lineNum":"  513","line":"  # slice = Bytes.new(5)"},
{"lineNum":"  514","line":"  # io.read_fully(slice) # => 5"},
{"lineNum":"  515","line":"  # slice                # => Bytes[49, 50, 51, 52, 53]"},
{"lineNum":"  516","line":"  # io.read_fully(slice) # raises IO::EOFError"},
{"lineNum":"  517","line":"  # ```"},
{"lineNum":"  518","line":"  def read_fully(slice : Bytes)"},
{"lineNum":"  519","line":"    read_fully?(slice) || raise(EOFError.new)","class":"lineNoCov","hits":"0","possible_hits":"28",},
{"lineNum":"  520","line":"  end"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"  # Tries to read exactly `slice.size` bytes from this `IO` into *slice*."},
{"lineNum":"  523","line":"  # Returns `nil` if there aren\'t `slice.size` bytes of data, otherwise"},
{"lineNum":"  524","line":"  # returns the number of bytes read."},
{"lineNum":"  525","line":"  #"},
{"lineNum":"  526","line":"  # ```"},
{"lineNum":"  527","line":"  # io = IO::Memory.new \"123451234\""},
{"lineNum":"  528","line":"  # slice = Bytes.new(5)"},
{"lineNum":"  529","line":"  # io.read_fully?(slice) # => 5"},
{"lineNum":"  530","line":"  # slice                 # => Bytes[49, 50, 51, 52, 53]"},
{"lineNum":"  531","line":"  # io.read_fully?(slice) # => nil"},
{"lineNum":"  532","line":"  # ```"},
{"lineNum":"  533","line":"  def read_fully?(slice : Bytes)"},
{"lineNum":"  534","line":"    count = slice.size"},
{"lineNum":"  535","line":"    while slice.size > 0","class":"lineNoCov","hits":"0","possible_hits":"47",},
{"lineNum":"  536","line":"      read_bytes = read slice","class":"lineNoCov","hits":"0","possible_hits":"43",},
{"lineNum":"  537","line":"      return nil if read_bytes == 0","class":"lineNoCov","hits":"0","possible_hits":"43",},
{"lineNum":"  538","line":"      slice += read_bytes"},
{"lineNum":"  539","line":"    end"},
{"lineNum":"  540","line":"    count"},
{"lineNum":"  541","line":"  end"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"  # Reads the rest of this `IO` data as a `String`."},
{"lineNum":"  544","line":"  #"},
{"lineNum":"  545","line":"  # ```"},
{"lineNum":"  546","line":"  # io = IO::Memory.new \"hello world\""},
{"lineNum":"  547","line":"  # io.gets_to_end # => \"hello world\""},
{"lineNum":"  548","line":"  # ```"},
{"lineNum":"  549","line":"  def gets_to_end : String"},
{"lineNum":"  550","line":"    String.build do |str|"},
{"lineNum":"  551","line":"      if decoder = decoder()"},
{"lineNum":"  552","line":"        while true"},
{"lineNum":"  553","line":"          decoder.read(self)"},
{"lineNum":"  554","line":"          break if decoder.out_slice.empty?"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"          decoder.write(str)"},
{"lineNum":"  557","line":"        end"},
{"lineNum":"  558","line":"      else"},
{"lineNum":"  559","line":"        buffer = uninitialized UInt8[4096]"},
{"lineNum":"  560","line":"        while (read_bytes = read(buffer.to_slice)) > 0"},
{"lineNum":"  561","line":"          str.write buffer.to_slice[0, read_bytes]"},
{"lineNum":"  562","line":"        end"},
{"lineNum":"  563","line":"      end"},
{"lineNum":"  564","line":"    end"},
{"lineNum":"  565","line":"  end"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"  # Reads a line from this `IO`. A line is terminated by the `\\n` character."},
{"lineNum":"  568","line":"  # Returns `nil` if called at the end of this `IO`."},
{"lineNum":"  569","line":"  #"},
{"lineNum":"  570","line":"  # By default the newline is removed from the returned string,"},
{"lineNum":"  571","line":"  # unless *chomp* is `false`."},
{"lineNum":"  572","line":"  #"},
{"lineNum":"  573","line":"  # ```"},
{"lineNum":"  574","line":"  # io = IO::Memory.new \"hello\\nworld\\nfoo\\n\""},
{"lineNum":"  575","line":"  # io.gets               # => \"hello\""},
{"lineNum":"  576","line":"  # io.gets(chomp: false) # => \"world\\n\""},
{"lineNum":"  577","line":"  # io.gets               # => \"foo\""},
{"lineNum":"  578","line":"  # io.gets               # => nil"},
{"lineNum":"  579","line":"  # ```"},
{"lineNum":"  580","line":"  def gets(chomp = true) : String?"},
{"lineNum":"  581","line":"    gets \'\\n\', chomp: chomp"},
{"lineNum":"  582","line":"  end"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"  # Reads a line of at most *limit* bytes from this `IO`."},
{"lineNum":"  585","line":"  # A line is terminated by the `\\n` character."},
{"lineNum":"  586","line":"  # Returns `nil` if called at the end of this `IO`."},
{"lineNum":"  587","line":"  #"},
{"lineNum":"  588","line":"  # ```"},
{"lineNum":"  589","line":"  # io = IO::Memory.new \"hello\\nworld\""},
{"lineNum":"  590","line":"  # io.gets(3) # => \"hel\""},
{"lineNum":"  591","line":"  # io.gets(3) # => \"lo\\n\""},
{"lineNum":"  592","line":"  # io.gets(3) # => \"wor\""},
{"lineNum":"  593","line":"  # io.gets(3) # => \"ld\""},
{"lineNum":"  594","line":"  # io.gets(3) # => nil"},
{"lineNum":"  595","line":"  # ```"},
{"lineNum":"  596","line":"  def gets(limit : Int, chomp = false) : String?"},
{"lineNum":"  597","line":"    gets \'\\n\', limit: limit, chomp: chomp"},
{"lineNum":"  598","line":"  end"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"  # Reads until *delimiter* is found, or the end of the `IO` is reached."},
{"lineNum":"  601","line":"  # Returns `nil` if called at the end of this `IO`."},
{"lineNum":"  602","line":"  #"},
{"lineNum":"  603","line":"  # ```"},
{"lineNum":"  604","line":"  # io = IO::Memory.new \"hello\\nworld\""},
{"lineNum":"  605","line":"  # io.gets(\'o\') # => \"hello\""},
{"lineNum":"  606","line":"  # io.gets(\'r\') # => \"\\nwor\""},
{"lineNum":"  607","line":"  # io.gets(\'z\') # => \"ld\""},
{"lineNum":"  608","line":"  # io.gets(\'w\') # => nil"},
{"lineNum":"  609","line":"  # ```"},
{"lineNum":"  610","line":"  def gets(delimiter : Char, chomp = false) : String?","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  611","line":"    gets delimiter, Int32::MAX, chomp: chomp"},
{"lineNum":"  612","line":"  end"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"  # Reads until *delimiter* is found, *limit* bytes are read, or the end of the `IO` is reached."},
{"lineNum":"  615","line":"  # Returns `nil` if called at the end of this `IO`."},
{"lineNum":"  616","line":"  #"},
{"lineNum":"  617","line":"  # ```"},
{"lineNum":"  618","line":"  # io = IO::Memory.new \"hello\\nworld\""},
{"lineNum":"  619","line":"  # io.gets(\'o\', 3)  # => \"hel\""},
{"lineNum":"  620","line":"  # io.gets(\'r\', 10) # => \"lo\\nwor\""},
{"lineNum":"  621","line":"  # io.gets(\'z\', 10) # => \"ld\""},
{"lineNum":"  622","line":"  # io.gets(\'w\', 10) # => nil"},
{"lineNum":"  623","line":"  # ```"},
{"lineNum":"  624","line":"  def gets(delimiter : Char, limit : Int, chomp = false) : String?"},
{"lineNum":"  625","line":"    raise ArgumentError.new \"Negative limit\" if limit < 0"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"    ascii = delimiter.ascii?"},
{"lineNum":"  628","line":"    decoder = decoder()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"    # # If the char\'s representation is a single byte and we have an encoding,"},
{"lineNum":"  631","line":"    # search the delimiter in the buffer"},
{"lineNum":"  632","line":"    if ascii && decoder","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  633","line":"      return decoder.gets(self, delimiter.ord.to_u8, limit: limit, chomp: chomp)"},
{"lineNum":"  634","line":"    end"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"    # If there\'s no encoding, the delimiter is ASCII and we can peek,"},
{"lineNum":"  637","line":"    # use a faster algorithm"},
{"lineNum":"  638","line":"    if ascii && !decoder && (peek = self.peek)"},
{"lineNum":"  639","line":"      if peek.empty?"},
{"lineNum":"  640","line":"        nil"},
{"lineNum":"  641","line":"      else"},
{"lineNum":"  642","line":"        gets_peek(delimiter, limit, chomp, peek)"},
{"lineNum":"  643","line":"      end"},
{"lineNum":"  644","line":"    else"},
{"lineNum":"  645","line":"      gets_slow(delimiter, limit, chomp)"},
{"lineNum":"  646","line":"    end"},
{"lineNum":"  647","line":"  end"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"  private def gets_peek(delimiter, limit, chomp, peek)"},
{"lineNum":"  650","line":"    limit = Int32::MAX if limit < 0"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"    delimiter_byte = delimiter.ord.to_u8"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"    # We first check, if the delimiter is already in the peek buffer."},
{"lineNum":"  655","line":"    # In that case it\'s much faster to create a String from a slice"},
{"lineNum":"  656","line":"    # of the buffer instead of appending to a IO::Memory,"},
{"lineNum":"  657","line":"    # which happens in the other case."},
{"lineNum":"  658","line":"    index = peek.index(delimiter_byte)"},
{"lineNum":"  659","line":"    if index","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  660","line":"      # If we find it past the limit, limit the result"},
{"lineNum":"  661","line":"      if index >= limit","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  662","line":"        index = limit","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  663","line":"      else"},
{"lineNum":"  664","line":"        index += 1"},
{"lineNum":"  665","line":"      end"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"      advance = index"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"      if chomp && index > 0 && peek[index - 1] === delimiter_byte","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  670","line":"        index -= 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"        if delimiter == \'\\n\' && index > 0 && peek[index - 1] === \'\\r\'","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  673","line":"          index -= 1","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  674","line":"        end"},
{"lineNum":"  675","line":"      end"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"      string = String.new(peek[0, index])"},
{"lineNum":"  678","line":"      skip(advance)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  679","line":"      return string"},
{"lineNum":"  680","line":"    end"},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"    # We didn\'t find the delimiter, so we append to a String::Builder"},
{"lineNum":"  683","line":"    # until we find it or we reach the limit, appending what we have"},
{"lineNum":"  684","line":"    # in the peek buffer and peeking again."},
{"lineNum":"  685","line":"    String.build do |buffer|"},
{"lineNum":"  686","line":"      while peek"},
{"lineNum":"  687","line":"        available = Math.min(peek.size, limit)"},
{"lineNum":"  688","line":"        buffer.write peek[0, available]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  689","line":"        skip(available)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  690","line":"        peek += available"},
{"lineNum":"  691","line":"        limit -= available"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"        if limit == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  694","line":"          break"},
{"lineNum":"  695","line":"        end"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"        if peek.size == 0"},
{"lineNum":"  698","line":"          peek = self.peek"},
{"lineNum":"  699","line":"        end"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"        if !peek || peek.empty?"},
{"lineNum":"  702","line":"          if buffer.bytesize == 0","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  703","line":"            return nil"},
{"lineNum":"  704","line":"          else"},
{"lineNum":"  705","line":"            break"},
{"lineNum":"  706","line":"          end"},
{"lineNum":"  707","line":"        end"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"        index = peek.index(delimiter_byte)"},
{"lineNum":"  710","line":"        if index","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  711","line":"          if index >= limit","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  712","line":"            index = limit","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  713","line":"          else"},
{"lineNum":"  714","line":"            index += 1"},
{"lineNum":"  715","line":"          end"},
{"lineNum":"  716","line":"          buffer.write peek[0, index]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  717","line":"          skip(index)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  718","line":"          break"},
{"lineNum":"  719","line":"        end"},
{"lineNum":"  720","line":"      end"},
{"lineNum":"  721","line":"      buffer.chomp!(delimiter_byte) if chomp"},
{"lineNum":"  722","line":"    end"},
{"lineNum":"  723","line":"  end"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"  private def gets_slow(delimiter : Char, limit, chomp)"},
{"lineNum":"  726","line":"    chomp_rn = delimiter == \'\\n\' && chomp"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"    buffer = String::Builder.new"},
{"lineNum":"  729","line":"    total = 0"},
{"lineNum":"  730","line":"    while true"},
{"lineNum":"  731","line":"      info = read_char_with_bytesize_slow"},
{"lineNum":"  732","line":"      unless info"},
{"lineNum":"  733","line":"        return buffer.empty? ? nil : buffer.to_s"},
{"lineNum":"  734","line":"      end"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"      char, char_bytesize = info"},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":"      # Consider the case of \\r\\n when the delimiter is \\n and chomp = true"},
{"lineNum":"  739","line":"      if chomp_rn && char == \'\\r\'"},
{"lineNum":"  740","line":"        info2 = read_char_with_bytesize_slow"},
{"lineNum":"  741","line":"        unless info2"},
{"lineNum":"  742","line":"          buffer << char"},
{"lineNum":"  743","line":"          break"},
{"lineNum":"  744","line":"        end"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"        char2, char_bytesize2 = info2"},
{"lineNum":"  747","line":"        if char2 == \'\\n\'"},
{"lineNum":"  748","line":"          break"},
{"lineNum":"  749","line":"        end"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"        buffer << \'\\r\'"},
{"lineNum":"  752","line":"        total += char_bytesize"},
{"lineNum":"  753","line":"        break if total >= limit"},
{"lineNum":"  754","line":""},
{"lineNum":"  755","line":"        buffer << char2"},
{"lineNum":"  756","line":"        total += char_bytesize2"},
{"lineNum":"  757","line":"      elsif char == delimiter"},
{"lineNum":"  758","line":"        buffer << char unless chomp"},
{"lineNum":"  759","line":"        break"},
{"lineNum":"  760","line":"      else"},
{"lineNum":"  761","line":"        buffer << char"},
{"lineNum":"  762","line":"      end"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"      total += char_bytesize"},
{"lineNum":"  765","line":"      break if total >= limit"},
{"lineNum":"  766","line":"    end"},
{"lineNum":"  767","line":"    buffer.to_s"},
{"lineNum":"  768","line":"  end"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"  # Reads until *delimiter* is found or the end of the `IO` is reached."},
{"lineNum":"  771","line":"  # Returns `nil` if called at the end of this `IO`."},
{"lineNum":"  772","line":"  #"},
{"lineNum":"  773","line":"  # ```"},
{"lineNum":"  774","line":"  # io = IO::Memory.new \"hello\\nworld\""},
{"lineNum":"  775","line":"  # io.gets(\"wo\") # => \"hello\\nwo\""},
{"lineNum":"  776","line":"  # io.gets(\"wo\") # => \"rld\""},
{"lineNum":"  777","line":"  # io.gets(\"wo\") # => nil"},
{"lineNum":"  778","line":"  # ```"},
{"lineNum":"  779","line":"  def gets(delimiter : String, chomp = false) : String?"},
{"lineNum":"  780","line":"    # Empty string: read all"},
{"lineNum":"  781","line":"    if delimiter.empty?"},
{"lineNum":"  782","line":"      return gets_to_end"},
{"lineNum":"  783","line":"    end"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"    # One byte: use gets(Char)"},
{"lineNum":"  786","line":"    if delimiter.bytesize == 1"},
{"lineNum":"  787","line":"      return gets(delimiter.unsafe_byte_at(0).unsafe_chr, chomp: chomp)"},
{"lineNum":"  788","line":"    end"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"    # One char: use gets(Char)"},
{"lineNum":"  791","line":"    if delimiter.size == 1"},
{"lineNum":"  792","line":"      return gets(delimiter[0], chomp: chomp)"},
{"lineNum":"  793","line":"    end"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"    # The \'hard\' case: we read until we match the last byte,"},
{"lineNum":"  796","line":"    # and then compare backwards"},
{"lineNum":"  797","line":"    last_byte = delimiter.byte_at(delimiter.bytesize - 1)"},
{"lineNum":"  798","line":"    total_bytes = 0"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"    buffer = String::Builder.new"},
{"lineNum":"  801","line":"    while true"},
{"lineNum":"  802","line":"      unless byte = read_utf8_byte"},
{"lineNum":"  803","line":"        return buffer.empty? ? nil : buffer.to_s"},
{"lineNum":"  804","line":"      end"},
{"lineNum":"  805","line":"      buffer.write_byte(byte)"},
{"lineNum":"  806","line":"      total_bytes += 1"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"      if (byte == last_byte) &&"},
{"lineNum":"  809","line":"         (buffer.bytesize >= delimiter.bytesize) &&"},
{"lineNum":"  810","line":"         (buffer.buffer + total_bytes - delimiter.bytesize).memcmp(delimiter.to_unsafe, delimiter.bytesize) == 0"},
{"lineNum":"  811","line":"        buffer.back(delimiter.bytesize) if chomp"},
{"lineNum":"  812","line":"        break"},
{"lineNum":"  813","line":"      end"},
{"lineNum":"  814","line":"    end"},
{"lineNum":"  815","line":"    buffer.to_s"},
{"lineNum":"  816","line":"  end"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"  # Same as `gets`, but raises `EOFError` if called at the end of this `IO`."},
{"lineNum":"  819","line":"  def read_line(*args, **options) : String"},
{"lineNum":"  820","line":"    gets(*args, **options) || raise EOFError.new"},
{"lineNum":"  821","line":"  end"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"  # Reads and discards exactly *bytes_count* bytes."},
{"lineNum":"  824","line":"  # Raises `IO::EOFError` if there aren\'t at least *bytes_count* bytes."},
{"lineNum":"  825","line":"  #"},
{"lineNum":"  826","line":"  # ```"},
{"lineNum":"  827","line":"  # io = IO::Memory.new \"hello world\""},
{"lineNum":"  828","line":"  # io.skip(6)"},
{"lineNum":"  829","line":"  # io.gets    # => \"world\""},
{"lineNum":"  830","line":"  # io.skip(1) # raises IO::EOFError"},
{"lineNum":"  831","line":"  # ```"},
{"lineNum":"  832","line":"  def skip(bytes_count : Int) : Nil"},
{"lineNum":"  833","line":"    buffer = uninitialized UInt8[4096]"},
{"lineNum":"  834","line":"    while bytes_count > 0","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  835","line":"      read_count = read(buffer.to_slice[0, Math.min(bytes_count, 4096)])","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  836","line":"      raise IO::EOFError.new if read_count == 0","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"      bytes_count -= read_count"},
{"lineNum":"  839","line":"    end"},
{"lineNum":"  840","line":"  end"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"  # Reads and discards bytes from `self` until there"},
{"lineNum":"  843","line":"  # are no more bytes."},
{"lineNum":"  844","line":"  def skip_to_end : Nil"},
{"lineNum":"  845","line":"    buffer = uninitialized UInt8[4096]"},
{"lineNum":"  846","line":"    while read(buffer.to_slice) > 0"},
{"lineNum":"  847","line":"    end"},
{"lineNum":"  848","line":"  end"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"  # Writes a single byte into this `IO`."},
{"lineNum":"  851","line":"  #"},
{"lineNum":"  852","line":"  # ```"},
{"lineNum":"  853","line":"  # io = IO::Memory.new"},
{"lineNum":"  854","line":"  # io.write_byte 97_u8"},
{"lineNum":"  855","line":"  # io.to_s # => \"a\""},
{"lineNum":"  856","line":"  # ```"},
{"lineNum":"  857","line":"  def write_byte(byte : UInt8)"},
{"lineNum":"  858","line":"    x = byte","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  859","line":"    write Slice.new(pointerof(x), 1)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  860","line":"  end"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"  # Writes the given object to this `IO` using the specified *format*."},
{"lineNum":"  863","line":"  #"},
{"lineNum":"  864","line":"  # This ends up invoking `object.to_io(self, format)`, so any object defining a"},
{"lineNum":"  865","line":"  # `to_io(io : IO, format : IO::ByteFormat = IO::ByteFormat::SystemEndian)`"},
{"lineNum":"  866","line":"  # method can be written in this way."},
{"lineNum":"  867","line":"  #"},
{"lineNum":"  868","line":"  # See `Int#to_io` and `Float#to_io`."},
{"lineNum":"  869","line":"  #"},
{"lineNum":"  870","line":"  # ```"},
{"lineNum":"  871","line":"  # io = IO::Memory.new"},
{"lineNum":"  872","line":"  # io.write_bytes(0x01020304, IO::ByteFormat::LittleEndian)"},
{"lineNum":"  873","line":"  # io.rewind"},
{"lineNum":"  874","line":"  # io.gets(4) # => \"\\u{4}\\u{3}\\u{2}\\u{1}\""},
{"lineNum":"  875","line":"  # ```"},
{"lineNum":"  876","line":"  def write_bytes(object, format : IO::ByteFormat = IO::ByteFormat::SystemEndian)"},
{"lineNum":"  877","line":"    object.to_io(self, format)"},
{"lineNum":"  878","line":"  end"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"  # Reads an instance of the given *type* from this `IO` using the specified *format*."},
{"lineNum":"  881","line":"  #"},
{"lineNum":"  882","line":"  # This ends up invoking `type.from_io(self, format)`, so any type defining a"},
{"lineNum":"  883","line":"  # `from_io(io : IO, format : IO::ByteFormat = IO::ByteFormat::SystemEndian)`"},
{"lineNum":"  884","line":"  # method can be read in this way."},
{"lineNum":"  885","line":"  #"},
{"lineNum":"  886","line":"  # See `Int.from_io` and `Float.from_io`."},
{"lineNum":"  887","line":"  #"},
{"lineNum":"  888","line":"  # ```"},
{"lineNum":"  889","line":"  # io = IO::Memory.new"},
{"lineNum":"  890","line":"  # io.puts \"\\u{4}\\u{3}\\u{2}\\u{1}\""},
{"lineNum":"  891","line":"  # io.rewind"},
{"lineNum":"  892","line":"  # io.read_bytes(Int32, IO::ByteFormat::LittleEndian) # => 0x01020304"},
{"lineNum":"  893","line":"  # ```"},
{"lineNum":"  894","line":"  def read_bytes(type, format : IO::ByteFormat = IO::ByteFormat::SystemEndian)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  895","line":"    type.from_io(self, format)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  896","line":"  end"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"  # Returns `true` if this `IO` is associated with a terminal device (tty), `false` otherwise."},
{"lineNum":"  899","line":"  #"},
{"lineNum":"  900","line":"  # IO returns `false`, but including types may override."},
{"lineNum":"  901","line":"  #"},
{"lineNum":"  902","line":"  # ```"},
{"lineNum":"  903","line":"  # STDIN.tty?          # => true"},
{"lineNum":"  904","line":"  # IO::Memory.new.tty? # => false"},
{"lineNum":"  905","line":"  # ```"},
{"lineNum":"  906","line":"  def tty? : Bool"},
{"lineNum":"  907","line":"    false"},
{"lineNum":"  908","line":"  end"},
{"lineNum":"  909","line":""},
{"lineNum":"  910","line":"  # Invokes the given block with each *line* in this `IO`, where a line"},
{"lineNum":"  911","line":"  # is defined by the arguments passed to this method, which can be the same"},
{"lineNum":"  912","line":"  # ones as in the `gets` methods."},
{"lineNum":"  913","line":"  #"},
{"lineNum":"  914","line":"  # ```"},
{"lineNum":"  915","line":"  # io = IO::Memory.new(\"hello\\nworld\")"},
{"lineNum":"  916","line":"  # io.each_line do |line|"},
{"lineNum":"  917","line":"  #   puts line.chomp.reverse"},
{"lineNum":"  918","line":"  # end"},
{"lineNum":"  919","line":"  # ```"},
{"lineNum":"  920","line":"  #"},
{"lineNum":"  921","line":"  # Output:"},
{"lineNum":"  922","line":"  #"},
{"lineNum":"  923","line":"  # ```text"},
{"lineNum":"  924","line":"  # olleh"},
{"lineNum":"  925","line":"  # dlrow"},
{"lineNum":"  926","line":"  # ```"},
{"lineNum":"  927","line":"  def each_line(*args, **options) : Nil"},
{"lineNum":"  928","line":"    while line = gets(*args, **options)"},
{"lineNum":"  929","line":"      yield line"},
{"lineNum":"  930","line":"    end"},
{"lineNum":"  931","line":"  end"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"  # Returns an `Iterator` for the *lines* in this `IO`, where a line"},
{"lineNum":"  934","line":"  # is defined by the arguments passed to this method, which can be the same"},
{"lineNum":"  935","line":"  # ones as in the `gets` methods."},
{"lineNum":"  936","line":"  #"},
{"lineNum":"  937","line":"  # ```"},
{"lineNum":"  938","line":"  # io = IO::Memory.new(\"hello\\nworld\")"},
{"lineNum":"  939","line":"  # iter = io.each_line"},
{"lineNum":"  940","line":"  # iter.next # => \"hello\""},
{"lineNum":"  941","line":"  # iter.next # => \"world\""},
{"lineNum":"  942","line":"  # ```"},
{"lineNum":"  943","line":"  def each_line(*args, **options)"},
{"lineNum":"  944","line":"    LineIterator.new(self, args, options)"},
{"lineNum":"  945","line":"  end"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"  # Invokes the given block with each `Char` in this `IO`."},
{"lineNum":"  948","line":"  #"},
{"lineNum":"  949","line":"  # ```"},
{"lineNum":"  950","line":"  # io = IO::Memory.new(\"あめ\")"},
{"lineNum":"  951","line":"  # io.each_char do |char|"},
{"lineNum":"  952","line":"  #   puts char"},
{"lineNum":"  953","line":"  # end"},
{"lineNum":"  954","line":"  # ```"},
{"lineNum":"  955","line":"  #"},
{"lineNum":"  956","line":"  # Output:"},
{"lineNum":"  957","line":"  #"},
{"lineNum":"  958","line":"  # ```text"},
{"lineNum":"  959","line":"  # あ"},
{"lineNum":"  960","line":"  # め"},
{"lineNum":"  961","line":"  # ```"},
{"lineNum":"  962","line":"  def each_char : Nil"},
{"lineNum":"  963","line":"    while char = read_char"},
{"lineNum":"  964","line":"      yield char"},
{"lineNum":"  965","line":"    end"},
{"lineNum":"  966","line":"  end"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"  # Returns an `Iterator` for the chars in this `IO`."},
{"lineNum":"  969","line":"  #"},
{"lineNum":"  970","line":"  # ```"},
{"lineNum":"  971","line":"  # io = IO::Memory.new(\"あめ\")"},
{"lineNum":"  972","line":"  # iter = io.each_char"},
{"lineNum":"  973","line":"  # iter.next # => \'あ\'"},
{"lineNum":"  974","line":"  # iter.next # => \'め\'"},
{"lineNum":"  975","line":"  # ```"},
{"lineNum":"  976","line":"  def each_char"},
{"lineNum":"  977","line":"    CharIterator.new(self)"},
{"lineNum":"  978","line":"  end"},
{"lineNum":"  979","line":""},
{"lineNum":"  980","line":"  # Invokes the given block with each byte (`UInt8`) in this `IO`."},
{"lineNum":"  981","line":"  #"},
{"lineNum":"  982","line":"  # ```"},
{"lineNum":"  983","line":"  # io = IO::Memory.new(\"aあ\")"},
{"lineNum":"  984","line":"  # io.each_byte do |byte|"},
{"lineNum":"  985","line":"  #   puts byte"},
{"lineNum":"  986","line":"  # end"},
{"lineNum":"  987","line":"  # ```"},
{"lineNum":"  988","line":"  #"},
{"lineNum":"  989","line":"  # Output:"},
{"lineNum":"  990","line":"  #"},
{"lineNum":"  991","line":"  # ```text"},
{"lineNum":"  992","line":"  # 97"},
{"lineNum":"  993","line":"  # 227"},
{"lineNum":"  994","line":"  # 129"},
{"lineNum":"  995","line":"  # 130"},
{"lineNum":"  996","line":"  # ```"},
{"lineNum":"  997","line":"  def each_byte : Nil"},
{"lineNum":"  998","line":"    while byte = read_byte"},
{"lineNum":"  999","line":"      yield byte"},
{"lineNum":" 1000","line":"    end"},
{"lineNum":" 1001","line":"  end"},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"  # Returns an `Iterator` for the bytes in this `IO`."},
{"lineNum":" 1004","line":"  #"},
{"lineNum":" 1005","line":"  # ```"},
{"lineNum":" 1006","line":"  # io = IO::Memory.new(\"aあ\")"},
{"lineNum":" 1007","line":"  # iter = io.each_byte"},
{"lineNum":" 1008","line":"  # iter.next # => 97"},
{"lineNum":" 1009","line":"  # iter.next # => 227"},
{"lineNum":" 1010","line":"  # iter.next # => 129"},
{"lineNum":" 1011","line":"  # iter.next # => 130"},
{"lineNum":" 1012","line":"  # ```"},
{"lineNum":" 1013","line":"  def each_byte"},
{"lineNum":" 1014","line":"    ByteIterator.new(self)"},
{"lineNum":" 1015","line":"  end"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"  # Rewinds this `IO`. By default this method raises, but including types"},
{"lineNum":" 1018","line":"  # may implement it."},
{"lineNum":" 1019","line":"  def rewind"},
{"lineNum":" 1020","line":"    raise IO::Error.new(\"Can\'t rewind\")"},
{"lineNum":" 1021","line":"  end"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"  # Sets the encoding of this `IO`."},
{"lineNum":" 1024","line":"  #"},
{"lineNum":" 1025","line":"  # The *invalid* argument can be:"},
{"lineNum":" 1026","line":"  # * `nil`: an exception is raised on invalid byte sequences"},
{"lineNum":" 1027","line":"  # * `:skip`: invalid byte sequences are ignored"},
{"lineNum":" 1028","line":"  #"},
{"lineNum":" 1029","line":"  # String operations (`gets`, `gets_to_end`, `read_char`, `<<`, `print`, `puts`"},
{"lineNum":" 1030","line":"  # `printf`) will use this encoding."},
{"lineNum":" 1031","line":"  def set_encoding(encoding : String, invalid : Symbol? = nil)"},
{"lineNum":" 1032","line":"    if (encoding == \"UTF-8\") && (invalid != :skip)"},
{"lineNum":" 1033","line":"      @encoding = nil"},
{"lineNum":" 1034","line":"    else"},
{"lineNum":" 1035","line":"      @encoding = EncodingOptions.new(encoding, invalid)"},
{"lineNum":" 1036","line":"    end"},
{"lineNum":" 1037","line":"    @encoder.try &.close"},
{"lineNum":" 1038","line":"    @decoder.try &.close"},
{"lineNum":" 1039","line":"    @encoder = nil"},
{"lineNum":" 1040","line":"    @decoder = nil"},
{"lineNum":" 1041","line":"    nil"},
{"lineNum":" 1042","line":"  end"},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"  # Returns this `IO`\'s encoding. The default is `UTF-8`."},
{"lineNum":" 1045","line":"  def encoding : String"},
{"lineNum":" 1046","line":"    @encoding.try(&.name) || \"UTF-8\""},
{"lineNum":" 1047","line":"  end"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"  # Seeks to a given *offset* (in bytes) according to the *whence* argument."},
{"lineNum":" 1050","line":"  #"},
{"lineNum":" 1051","line":"  # The `IO` class raises on this method, but some subclasses, notable"},
{"lineNum":" 1052","line":"  # `IO::FileDescriptor` and `IO::Memory` implement it."},
{"lineNum":" 1053","line":"  #"},
{"lineNum":" 1054","line":"  # Returns `self`."},
{"lineNum":" 1055","line":"  #"},
{"lineNum":" 1056","line":"  # ```"},
{"lineNum":" 1057","line":"  # File.write(\"testfile\", \"abc\")"},
{"lineNum":" 1058","line":"  #"},
{"lineNum":" 1059","line":"  # file = File.new(\"testfile\")"},
{"lineNum":" 1060","line":"  # file.gets(3) # => \"abc\""},
{"lineNum":" 1061","line":"  # file.seek(1, IO::Seek::Set)"},
{"lineNum":" 1062","line":"  # file.gets(2) # => \"bc\""},
{"lineNum":" 1063","line":"  # file.seek(-1, IO::Seek::Current)"},
{"lineNum":" 1064","line":"  # file.gets(1) # => \"c\""},
{"lineNum":" 1065","line":"  # ```"},
{"lineNum":" 1066","line":"  def seek(offset, whence : Seek = Seek::Set)"},
{"lineNum":" 1067","line":"    raise Error.new \"Unable to seek\""},
{"lineNum":" 1068","line":"  end"},
{"lineNum":" 1069","line":""},
{"lineNum":" 1070","line":"  # Returns the current position (in bytes) in this `IO`."},
{"lineNum":" 1071","line":"  #"},
{"lineNum":" 1072","line":"  # The `IO` class raises on this method, but some subclasses, notable"},
{"lineNum":" 1073","line":"  # `IO::FileDescriptor` and `IO::Memory` implement it."},
{"lineNum":" 1074","line":"  #"},
{"lineNum":" 1075","line":"  # ```"},
{"lineNum":" 1076","line":"  # File.write(\"testfile\", \"hello\")"},
{"lineNum":" 1077","line":"  #"},
{"lineNum":" 1078","line":"  # file = File.new(\"testfile\")"},
{"lineNum":" 1079","line":"  # file.pos     # => 0"},
{"lineNum":" 1080","line":"  # file.gets(2) # => \"he\""},
{"lineNum":" 1081","line":"  # file.pos     # => 2"},
{"lineNum":" 1082","line":"  # ```"},
{"lineNum":" 1083","line":"  def pos"},
{"lineNum":" 1084","line":"    raise Error.new \"Unable to pos\""},
{"lineNum":" 1085","line":"  end"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"  # Sets the current position (in bytes) in this `IO`."},
{"lineNum":" 1088","line":"  #"},
{"lineNum":" 1089","line":"  # The `IO` class raises on this method, but some subclasses, notable"},
{"lineNum":" 1090","line":"  # `IO::FileDescriptor` and `IO::Memory` implement it."},
{"lineNum":" 1091","line":"  #"},
{"lineNum":" 1092","line":"  # ```"},
{"lineNum":" 1093","line":"  # File.write(\"testfile\", \"hello\")"},
{"lineNum":" 1094","line":"  #"},
{"lineNum":" 1095","line":"  # file = File.new(\"testfile\")"},
{"lineNum":" 1096","line":"  # file.pos = 3"},
{"lineNum":" 1097","line":"  # file.gets_to_end # => \"lo\""},
{"lineNum":" 1098","line":"  # ```"},
{"lineNum":" 1099","line":"  def pos=(value)"},
{"lineNum":" 1100","line":"    raise Error.new \"Unable to pos=\""},
{"lineNum":" 1101","line":"  end"},
{"lineNum":" 1102","line":""},
{"lineNum":" 1103","line":"  # Same as `pos`."},
{"lineNum":" 1104","line":"  def tell"},
{"lineNum":" 1105","line":"    pos"},
{"lineNum":" 1106","line":"  end"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"  # Yields an `IO` to read a section inside this IO."},
{"lineNum":" 1109","line":"  #"},
{"lineNum":" 1110","line":"  # The `IO` class raises on this method, but some subclasses, notable"},
{"lineNum":" 1111","line":"  # `File` and `IO::Memory` implement it."},
{"lineNum":" 1112","line":"  #"},
{"lineNum":" 1113","line":"  # Mutliple sections can be read concurrently."},
{"lineNum":" 1114","line":"  def read_at(offset, bytesize, &block)"},
{"lineNum":" 1115","line":"    raise Error.new \"Unable to read_at\""},
{"lineNum":" 1116","line":"  end"},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"  # Copy all contents from *src* to *dst*."},
{"lineNum":" 1119","line":"  #"},
{"lineNum":" 1120","line":"  # ```"},
{"lineNum":" 1121","line":"  # io = IO::Memory.new \"hello\""},
{"lineNum":" 1122","line":"  # io2 = IO::Memory.new"},
{"lineNum":" 1123","line":"  #"},
{"lineNum":" 1124","line":"  # IO.copy io, io2"},
{"lineNum":" 1125","line":"  #"},
{"lineNum":" 1126","line":"  # io2.to_s # => \"hello\""},
{"lineNum":" 1127","line":"  # ```"},
{"lineNum":" 1128","line":"  def self.copy(src, dst)"},
{"lineNum":" 1129","line":"    buffer = uninitialized UInt8[4096]"},
{"lineNum":" 1130","line":"    count = 0"},
{"lineNum":" 1131","line":"    while (len = src.read(buffer.to_slice).to_i32) > 0"},
{"lineNum":" 1132","line":"      dst.write buffer.to_slice[0, len]"},
{"lineNum":" 1133","line":"      count += len"},
{"lineNum":" 1134","line":"    end"},
{"lineNum":" 1135","line":"    len < 0 ? len : count"},
{"lineNum":" 1136","line":"  end"},
{"lineNum":" 1137","line":""},
{"lineNum":" 1138","line":"  # Copy at most *limit* bytes from *src* to *dst*."},
{"lineNum":" 1139","line":"  #"},
{"lineNum":" 1140","line":"  # ```"},
{"lineNum":" 1141","line":"  # io = IO::Memory.new \"hello\""},
{"lineNum":" 1142","line":"  # io2 = IO::Memory.new"},
{"lineNum":" 1143","line":"  #"},
{"lineNum":" 1144","line":"  # IO.copy io, io2, 3"},
{"lineNum":" 1145","line":"  #"},
{"lineNum":" 1146","line":"  # io2.to_s # => \"hel\""},
{"lineNum":" 1147","line":"  # ```"},
{"lineNum":" 1148","line":"  def self.copy(src, dst, limit : Int)"},
{"lineNum":" 1149","line":"    raise ArgumentError.new(\"Negative limit\") if limit < 0"},
{"lineNum":" 1150","line":""},
{"lineNum":" 1151","line":"    buffer = uninitialized UInt8[4096]"},
{"lineNum":" 1152","line":"    remaining = limit"},
{"lineNum":" 1153","line":"    while (len = src.read(buffer.to_slice[0, Math.min(buffer.size, Math.max(remaining, 0))])) > 0"},
{"lineNum":" 1154","line":"      dst.write buffer.to_slice[0, len]"},
{"lineNum":" 1155","line":"      remaining -= len"},
{"lineNum":" 1156","line":"    end"},
{"lineNum":" 1157","line":"    limit - remaining"},
{"lineNum":" 1158","line":"  end"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"  private struct LineIterator(I, A, N)"},
{"lineNum":" 1161","line":"    include Iterator(String)"},
{"lineNum":" 1162","line":""},
{"lineNum":" 1163","line":"    def initialize(@io : I, @args : A, @nargs : N)"},
{"lineNum":" 1164","line":"    end"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"    def next"},
{"lineNum":" 1167","line":"      @io.gets(*@args, **@nargs) || stop"},
{"lineNum":" 1168","line":"    end"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"    def rewind"},
{"lineNum":" 1171","line":"      @io.rewind"},
{"lineNum":" 1172","line":"      self"},
{"lineNum":" 1173","line":"    end"},
{"lineNum":" 1174","line":"  end"},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"  private struct CharIterator(I)"},
{"lineNum":" 1177","line":"    include Iterator(Char)"},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"    def initialize(@io : I)"},
{"lineNum":" 1180","line":"    end"},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"    def next"},
{"lineNum":" 1183","line":"      @io.read_char || stop"},
{"lineNum":" 1184","line":"    end"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"    def rewind"},
{"lineNum":" 1187","line":"      @io.rewind"},
{"lineNum":" 1188","line":"      self"},
{"lineNum":" 1189","line":"    end"},
{"lineNum":" 1190","line":"  end"},
{"lineNum":" 1191","line":""},
{"lineNum":" 1192","line":"  private struct ByteIterator(I)"},
{"lineNum":" 1193","line":"    include Iterator(UInt8)"},
{"lineNum":" 1194","line":""},
{"lineNum":" 1195","line":"    def initialize(@io : I)"},
{"lineNum":" 1196","line":"    end"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"    def next"},
{"lineNum":" 1199","line":"      @io.read_byte || stop"},
{"lineNum":" 1200","line":"    end"},
{"lineNum":" 1201","line":""},
{"lineNum":" 1202","line":"    def rewind"},
{"lineNum":" 1203","line":"      @io.rewind"},
{"lineNum":" 1204","line":"      self"},
{"lineNum":" 1205","line":"    end"},
{"lineNum":" 1206","line":"  end"},
{"lineNum":" 1207","line":"end"},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"require \"./io/*\""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "roman_spec", "date" : "2018-03-12 14:24:04", "instrumented" : 50, "covered" : 0,};
var merged_data = [];
